
I2C-Accelerometer-Interrupts-UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008208  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080083a8  080083a8  000183a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008824  08008824  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800882c  0800882c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800882c  0800882c  0001882c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001dc  08008a10  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08008a10  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122e5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c6  00000000  00000000  000324f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000347b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00035780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ff  00000000  00000000  000366a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126e3  00000000  00000000  0004daa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915fa  00000000  00000000  0006018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005560  00000000  00000000  000f17d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008390 	.word	0x08008390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008390 	.word	0x08008390

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f54:	f000 fdf4 	bl	8001b40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f58:	f000 f85c 	bl	8001014 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_DMA_Init(); // in order to fix a bug in HAL library
 8000f5c:	f000 f942 	bl	80011e4 <MX_DMA_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f60:	f000 f960 	bl	8001224 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f64:	f000 f914 	bl	8001190 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000f68:	f000 f93c 	bl	80011e4 <MX_DMA_Init>
	MX_I2C1_Init();
 8000f6c:	f000 f8be 	bl	80010ec <MX_I2C1_Init>
	MX_TIM11_Init();
 8000f70:	f000 f8ea 	bl	8001148 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	// initializing the sensor and, if succeeded, initialize timer
	if (init() == HAL_OK) {
 8000f74:	f000 f9ea 	bl	800134c <init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d11c      	bne.n	8000fb8 <main+0x68>
		strcpy(str, "Accelerometer initialized!\r\n");
 8000f7e:	4a20      	ldr	r2, [pc, #128]	; (8001000 <main+0xb0>)
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <main+0xb4>)
 8000f82:	4615      	mov	r5, r2
 8000f84:	461c      	mov	r4, r3
 8000f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f88:	6028      	str	r0, [r5, #0]
 8000f8a:	6069      	str	r1, [r5, #4]
 8000f8c:	60aa      	str	r2, [r5, #8]
 8000f8e:	60eb      	str	r3, [r5, #12]
 8000f90:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000f92:	6128      	str	r0, [r5, #16]
 8000f94:	6169      	str	r1, [r5, #20]
 8000f96:	61aa      	str	r2, [r5, #24]
 8000f98:	7823      	ldrb	r3, [r4, #0]
 8000f9a:	772b      	strb	r3, [r5, #28]
		HAL_UART_Transmit_DMA(&huart2, str, strlen(str));
 8000f9c:	4818      	ldr	r0, [pc, #96]	; (8001000 <main+0xb0>)
 8000f9e:	f7ff f91f 	bl	80001e0 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4915      	ldr	r1, [pc, #84]	; (8001000 <main+0xb0>)
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <main+0xb8>)
 8000fac:	f003 fbba 	bl	8004724 <HAL_UART_Transmit_DMA>

		// initializing timer
		HAL_TIM_Base_Start_IT(&htim11);
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <main+0xbc>)
 8000fb2:	f003 f943 	bl	800423c <HAL_TIM_Base_Start_IT>
 8000fb6:	e021      	b.n	8000ffc <main+0xac>
	} else {
		strcpy(str, "Failed to initialize accelerometer!\r\n");
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <main+0xb0>)
 8000fba:	4a15      	ldr	r2, [pc, #84]	; (8001010 <main+0xc0>)
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	469c      	mov	ip, r3
 8000fc0:	f104 0e20 	add.w	lr, r4, #32
 8000fc4:	4665      	mov	r5, ip
 8000fc6:	4626      	mov	r6, r4
 8000fc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fca:	6028      	str	r0, [r5, #0]
 8000fcc:	6069      	str	r1, [r5, #4]
 8000fce:	60aa      	str	r2, [r5, #8]
 8000fd0:	60eb      	str	r3, [r5, #12]
 8000fd2:	3410      	adds	r4, #16
 8000fd4:	f10c 0c10 	add.w	ip, ip, #16
 8000fd8:	4574      	cmp	r4, lr
 8000fda:	d1f3      	bne.n	8000fc4 <main+0x74>
 8000fdc:	4663      	mov	r3, ip
 8000fde:	4622      	mov	r2, r4
 8000fe0:	6810      	ldr	r0, [r2, #0]
 8000fe2:	6018      	str	r0, [r3, #0]
 8000fe4:	8892      	ldrh	r2, [r2, #4]
 8000fe6:	809a      	strh	r2, [r3, #4]
		HAL_UART_Transmit_DMA(&huart2, str, strlen(str));
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <main+0xb0>)
 8000fea:	f7ff f8f9 	bl	80001e0 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4902      	ldr	r1, [pc, #8]	; (8001000 <main+0xb0>)
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <main+0xb8>)
 8000ff8:	f003 fb94 	bl	8004724 <HAL_UART_Transmit_DMA>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ffc:	e7fe      	b.n	8000ffc <main+0xac>
 8000ffe:	bf00      	nop
 8001000:	20000358 	.word	0x20000358
 8001004:	080083a8 	.word	0x080083a8
 8001008:	20000314 	.word	0x20000314
 800100c:	200002c8 	.word	0x200002c8
 8001010:	080083c8 	.word	0x080083c8

08001014 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	; 0x50
 8001018:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2230      	movs	r2, #48	; 0x30
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fb26 	bl	8005674 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <SystemClock_Config+0xd0>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <SystemClock_Config+0xd0>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <SystemClock_Config+0xd0>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <SystemClock_Config+0xd4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <SystemClock_Config+0xd4>)
 8001062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <SystemClock_Config+0xd4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107c:	2310      	movs	r3, #16
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001088:	2310      	movs	r3, #16
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800108c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001092:	2304      	movs	r3, #4
 8001094:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001096:	2307      	movs	r3, #7
 8001098:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 fc08 	bl	80038b4 <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x9a>
		Error_Handler();
 80010aa:	f000 fadf 	bl	800166c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2302      	movs	r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2102      	movs	r1, #2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fe6a 	bl	8003da4 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xc6>
		Error_Handler();
 80010d6:	f000 fac9 	bl	800166c <Error_Handler>
	}
}
 80010da:	bf00      	nop
 80010dc:	3750      	adds	r7, #80	; 0x50
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_I2C1_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_I2C1_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_I2C1_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <MX_I2C1_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_I2C1_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_I2C1_Init+0x50>)
 800112a:	f001 fc2d 	bl	8002988 <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001134:	f000 fa9a 	bl	800166c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000204 	.word	0x20000204
 8001140:	40005400 	.word	0x40005400
 8001144:	000186a0 	.word	0x000186a0

08001148 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_TIM11_Init+0x40>)
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_TIM11_Init+0x44>)
 8001150:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 2000;
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <MX_TIM11_Init+0x40>)
 8001154:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001158:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_TIM11_Init+0x40>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 42000;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_TIM11_Init+0x40>)
 8001162:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001166:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_TIM11_Init+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_TIM11_Init+0x40>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_TIM11_Init+0x40>)
 8001176:	f003 f811 	bl	800419c <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM11_Init+0x3c>
		Error_Handler();
 8001180:	f000 fa74 	bl	800166c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200002c8 	.word	0x200002c8
 800118c:	40014800 	.word	0x40014800

08001190 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_USART2_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c8:	f003 fa5e 	bl	8004688 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80011d2:	f000 fa4b 	bl	800166c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000314 	.word	0x20000314
 80011e0:	40004400 	.word	0x40004400

080011e4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_DMA_Init+0x3c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <MX_DMA_Init+0x3c>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_DMA_Init+0x3c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2011      	movs	r0, #17
 800120c:	f000 fde5 	bl	8001dda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001210:	2011      	movs	r0, #17
 8001212:	f000 fdfe 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_GPIO_Init+0xd0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a2c      	ldr	r2, [pc, #176]	; (80012f4 <MX_GPIO_Init+0xd0>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_GPIO_Init+0xd0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_GPIO_Init+0xd0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <MX_GPIO_Init+0xd0>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_GPIO_Init+0xd0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_GPIO_Init+0xd0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <MX_GPIO_Init+0xd0>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_GPIO_Init+0xd0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <MX_GPIO_Init+0xd0>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_GPIO_Init+0xd0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2120      	movs	r1, #32
 80012ae:	4812      	ldr	r0, [pc, #72]	; (80012f8 <MX_GPIO_Init+0xd4>)
 80012b0:	f001 fb50 	bl	8002954 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80012b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_GPIO_Init+0xd8>)
 80012cc:	f001 f9be 	bl	800264c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80012d0:	2320      	movs	r3, #32
 80012d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_GPIO_Init+0xd4>)
 80012e8:	f001 f9b0 	bl	800264c <HAL_GPIO_Init>

}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020800 	.word	0x40020800

08001300 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
/**
 * @brief overriding the function in order to sample and send data with DMA
 * every period elapsed
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d115      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x3c>
		sample(&accelData);
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001312:	f000 f8e9 	bl	80014e8 <sample>
		printSampleDMA(accelData);
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001318:	ed93 6a00 	vldr	s12, [r3]
 800131c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001320:	ed93 7a02 	vldr	s14, [r3, #8]
 8001324:	edd3 7a03 	vldr	s15, [r3, #12]
 8001328:	eeb0 0a46 	vmov.f32	s0, s12
 800132c:	eef0 0a66 	vmov.f32	s1, s13
 8001330:	eeb0 1a47 	vmov.f32	s2, s14
 8001334:	eef0 1a67 	vmov.f32	s3, s15
 8001338:	f000 f954 	bl	80015e4 <printSampleDMA>
	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200002c8 	.word	0x200002c8
 8001348:	20000258 	.word	0x20000258

0800134c <init>:

/**
 * @brief initializes the accelerometer
 * @return HAL_OK if the sensor has been configured, HAL_ERROR otherwise
 */
HAL_StatusTypeDef init() {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	// enabling normal mode (1Hz) and enabling X,Y,Z outputs
	if (writeReg(CTRL_REG1, 0b00010111) != HAL_OK) {
 8001350:	2117      	movs	r1, #23
 8001352:	2020      	movs	r0, #32
 8001354:	f000 f880 	bl	8001458 <writeReg>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <init+0x16>
		return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e021      	b.n	80013a6 <init+0x5a>
	}

	// setting the +/- 2g FSR, Self Test disabled
	if (writeReg(CTRL_REG4, 0b00000000) != HAL_OK) {
 8001362:	2100      	movs	r1, #0
 8001364:	2023      	movs	r0, #35	; 0x23
 8001366:	f000 f877 	bl	8001458 <writeReg>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <init+0x28>
		return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e018      	b.n	80013a6 <init+0x5a>
	}

	// enabling the temperature sensor
	if (writeReg(TEMP_CFG_REG, 0b11000000) != HAL_OK) {
 8001374:	f06f 013f 	mvn.w	r1, #63	; 0x3f
 8001378:	201f      	movs	r0, #31
 800137a:	f000 f86d 	bl	8001458 <writeReg>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <init+0x3c>
		return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e00e      	b.n	80013a6 <init+0x5a>
	}

	// reading the who_am_i register to check if it's the correct sensor
	if (readReg(WHO_AM_I, &data, 1) == HAL_OK && data == 0b00110011) {
 8001388:	2201      	movs	r2, #1
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <init+0x60>)
 800138c:	200f      	movs	r0, #15
 800138e:	f000 f881 	bl	8001494 <readReg>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <init+0x58>
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <init+0x60>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b33      	cmp	r3, #51	; 0x33
 800139e:	d101      	bne.n	80013a4 <init+0x58>
		return HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e000      	b.n	80013a6 <init+0x5a>
	} else {
		return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
	}
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000310 	.word	0x20000310

080013b0 <convertToAcc>:
/**
 * @brief converts a byte into the acceleration in g
 * @param data the byte read from the accelerometer
 * @return the float signed value of the acceleration in g
 */
float convertToAcc(int8_t data) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	// multiplying the read data by the FSR and dividing by 2^bytes=256
	return (float) data * 4 / 256.0;
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013e8 <convertToAcc+0x38>
 80013d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	43800000 	.word	0x43800000

080013ec <convertToFloat>:
 * @brief converts two bytes in a float value
 * @param msb the most significant byte of the temperature
 * @param lsb the least significant byte of the temperature
 * @return the float signed value of the acceleration in g
 */
float convertToFloat(int8_t msb, uint8_t lsb) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	// "concatenates" the two bytes and then divides them by 2^(decimal places), that is 256
	// incremented by 25 (doubt on incrementing it by 22.5) because seems the offset used
	return ((float) (((int16_t) (msb) << 8) | lsb)) / 256.0 + 22.5;
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	021a      	lsls	r2, r3, #8
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f8a1 	bl	8000558 <__aeabi_f2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <convertToFloat+0x64>)
 800141c:	f7ff fa1e 	bl	800085c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <convertToFloat+0x68>)
 800142e:	f7fe ff35 	bl	800029c <__adddf3>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fbbd 	bl	8000bb8 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	ee07 3a90 	vmov	s15, r3
}
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40700000 	.word	0x40700000
 8001454:	40368000 	.word	0x40368000

08001458 <writeReg>:
 * @brief writes in the register passed the data
 * @param regAddress the address on which we want to write
 * @param data the byte that will be written in the register
 * @return HAL_OK if sensor acknowledged, HAL_ERROR otherwise
 */
HAL_StatusTypeDef writeReg(Reg regAddress, int8_t data) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	460a      	mov	r2, r1
 8001462:	71fb      	strb	r3, [r7, #7]
 8001464:	4613      	mov	r3, r2
 8001466:	71bb      	strb	r3, [r7, #6]
	uint8_t datar[2] = { regAddress, data };
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	733b      	strb	r3, [r7, #12]
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&hi2c1, accel_addr, datar, 2, 1000);
 8001470:	f107 020c 	add.w	r2, r7, #12
 8001474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2302      	movs	r3, #2
 800147c:	2150      	movs	r1, #80	; 0x50
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <writeReg+0x38>)
 8001480:	f001 fbc6 	bl	8002c10 <HAL_I2C_Master_Transmit>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000204 	.word	0x20000204

08001494 <readReg>:
 * @brief writes in the register passed the data
 * @param regAddress the address on which we want to read
 * @param data the pointer to the array of bytes into we will store the read data
 * @return HAL_OK if sensor acknowledged, HAL_ERROR otherwise
 */
HAL_StatusTypeDef readReg(Reg regAddress, uint8_t *data, int nData) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af02      	add	r7, sp, #8
 800149a:	4603      	mov	r3, r0
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, accel_addr,
 80014a2:	f107 020f 	add.w	r2, r7, #15
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	2150      	movs	r1, #80	; 0x50
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <readReg+0x50>)
 80014b2:	f001 fbad 	bl	8002c10 <HAL_I2C_Master_Transmit>
 80014b6:	4603      	mov	r3, r0
 80014b8:	75fb      	strb	r3, [r7, #23]
			&regAddress, 1, 1000);
	if (ret == HAL_OK) {
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10b      	bne.n	80014d8 <readReg+0x44>
		return HAL_I2C_Master_Receive(&hi2c1, accel_addr | 0b1, data, nData,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	2151      	movs	r1, #81	; 0x51
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <readReg+0x50>)
 80014d0:	f001 fc9c 	bl	8002e0c <HAL_I2C_Master_Receive>
 80014d4:	4603      	mov	r3, r0
 80014d6:	e000      	b.n	80014da <readReg+0x46>
				1000);
	} else {
		return ret;
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000204 	.word	0x20000204

080014e8 <sample>:
/**
 * @brief samples the accelerometer
 * @param accelData the structure to update
 * @return HAL_OK if new data has been sampled, HAL_ERROR otherwise
 */
HAL_StatusTypeDef sample(AccelData *accelData) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	AccelData tempData;
	uint8_t data, data2;

	// sampling X value
	if (readReg(OUT_X, &data, 1) == HAL_OK) {
 80014f0:	f107 030f 	add.w	r3, r7, #15
 80014f4:	2201      	movs	r2, #1
 80014f6:	4619      	mov	r1, r3
 80014f8:	2029      	movs	r0, #41	; 0x29
 80014fa:	f7ff ffcb 	bl	8001494 <readReg>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d113      	bne.n	800152c <sample+0x44>
		tempData.acc_x = convertToAcc(data);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff51 	bl	80013b0 <convertToAcc>
 800150e:	eef0 7a40 	vmov.f32	s15, s0
 8001512:	edc7 7a04 	vstr	s15, [r7, #16]
	} else {
		return HAL_ERROR;
	}

	// sampling Y value
	if (readReg(OUT_Y, &data, 1) == HAL_OK) {
 8001516:	f107 030f 	add.w	r3, r7, #15
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	202b      	movs	r0, #43	; 0x2b
 8001520:	f7ff ffb8 	bl	8001494 <readReg>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d116      	bne.n	8001558 <sample+0x70>
 800152a:	e001      	b.n	8001530 <sample+0x48>
		return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e055      	b.n	80015dc <sample+0xf4>
		tempData.acc_y = convertToAcc(data);
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	b25b      	sxtb	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff3b 	bl	80013b0 <convertToAcc>
 800153a:	eef0 7a40 	vmov.f32	s15, s0
 800153e:	edc7 7a05 	vstr	s15, [r7, #20]
	} else {
		return HAL_ERROR;
	}

	// sampling Z value
	if (readReg(OUT_Z, &data, 1) == HAL_OK) {
 8001542:	f107 030f 	add.w	r3, r7, #15
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	202d      	movs	r0, #45	; 0x2d
 800154c:	f7ff ffa2 	bl	8001494 <readReg>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d11b      	bne.n	800158e <sample+0xa6>
 8001556:	e001      	b.n	800155c <sample+0x74>
		return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e03f      	b.n	80015dc <sample+0xf4>
		tempData.acc_z = convertToAcc(data);
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	b25b      	sxtb	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff25 	bl	80013b0 <convertToAcc>
 8001566:	eef0 7a40 	vmov.f32	s15, s0
 800156a:	edc7 7a06 	vstr	s15, [r7, #24]
	} else {
		return HAL_ERROR;
	}

	// sampling TEMP value
	writeReg(CTRL_REG4, 0b10000000); // enabling bit to retrieve temperature
 800156e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8001572:	2023      	movs	r0, #35	; 0x23
 8001574:	f7ff ff70 	bl	8001458 <writeReg>
	if (readReg(OUT_TEMP_H, &data, 1) == HAL_OK) {
 8001578:	f107 030f 	add.w	r3, r7, #15
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	200d      	movs	r0, #13
 8001582:	f7ff ff87 	bl	8001494 <readReg>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d126      	bne.n	80015da <sample+0xf2>
 800158c:	e001      	b.n	8001592 <sample+0xaa>
		return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e024      	b.n	80015dc <sample+0xf4>
		if (readReg(OUT_TEMP_L, &data2, 1) == HAL_OK) {
 8001592:	f107 030e 	add.w	r3, r7, #14
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	200c      	movs	r0, #12
 800159c:	f7ff ff7a 	bl	8001494 <readReg>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d117      	bne.n	80015d6 <sample+0xee>
			tempData.acc_t = convertToFloat(data, data2);
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	7bba      	ldrb	r2, [r7, #14]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff1c 	bl	80013ec <convertToFloat>
 80015b4:	eef0 7a40 	vmov.f32	s15, s0
 80015b8:	edc7 7a07 	vstr	s15, [r7, #28]
			return HAL_ERROR;
		}
	} else {
		return HAL_ERROR;
	}
	writeReg(CTRL_REG4, 0b00000000); // disabling bit to retrieve acceleration
 80015bc:	2100      	movs	r1, #0
 80015be:	2023      	movs	r0, #35	; 0x23
 80015c0:	f7ff ff4a 	bl	8001458 <writeReg>

	memcpy(accelData, &tempData, sizeof(AccelData));
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2210      	movs	r2, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f004 f843 	bl	8005658 <memcpy>
	return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e002      	b.n	80015dc <sample+0xf4>
			return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <sample+0xf4>
		return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <printSampleDMA>:

/**
 * @brief prints over the serial communication the sample passed
 * @param accelData the structure to print
 */
void printSampleDMA(AccelData accelData) {
 80015e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015e8:	b09a      	sub	sp, #104	; 0x68
 80015ea:	af04      	add	r7, sp, #16
 80015ec:	eeb0 6a40 	vmov.f32	s12, s0
 80015f0:	eef0 6a60 	vmov.f32	s13, s1
 80015f4:	eeb0 7a41 	vmov.f32	s14, s2
 80015f8:	eef0 7a61 	vmov.f32	s15, s3
 80015fc:	ed87 6a00 	vstr	s12, [r7]
 8001600:	edc7 6a01 	vstr	s13, [r7, #4]
 8001604:	ed87 7a02 	vstr	s14, [r7, #8]
 8001608:	edc7 7a03 	vstr	s15, [r7, #12]
	char str[64];
	int len = sprintf(str,
			"Non Blocking\r\nX: %+.3f\r\nY: %+.3f\r\nZ: %+.3f\r\n\n",
			accelData.acc_x, accelData.acc_y, accelData.acc_z);
 800160c:	683b      	ldr	r3, [r7, #0]
	int len = sprintf(str,
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	4680      	mov	r8, r0
 8001616:	4689      	mov	r9, r1
			accelData.acc_x, accelData.acc_y, accelData.acc_z);
 8001618:	687b      	ldr	r3, [r7, #4]
	int len = sprintf(str,
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	4604      	mov	r4, r0
 8001622:	460d      	mov	r5, r1
			accelData.acc_x, accelData.acc_y, accelData.acc_z);
 8001624:	68bb      	ldr	r3, [r7, #8]
	int len = sprintf(str,
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff96 	bl	8000558 <__aeabi_f2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	f107 0014 	add.w	r0, r7, #20
 8001634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001638:	e9cd 4500 	strd	r4, r5, [sp]
 800163c:	4642      	mov	r2, r8
 800163e:	464b      	mov	r3, r9
 8001640:	4908      	ldr	r1, [pc, #32]	; (8001664 <printSampleDMA+0x80>)
 8001642:	f004 fc89 	bl	8005f58 <siprintf>
 8001646:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit_DMA(&huart2, str, len);
 8001648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164a:	b29a      	uxth	r2, r3
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <printSampleDMA+0x84>)
 8001654:	f003 f866 	bl	8004724 <HAL_UART_Transmit_DMA>
}
 8001658:	bf00      	nop
 800165a:	3758      	adds	r7, #88	; 0x58
 800165c:	46bd      	mov	sp, r7
 800165e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001662:	bf00      	nop
 8001664:	080083f0 	.word	0x080083f0
 8001668:	20000314 	.word	0x20000314

0800166c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016b6:	2007      	movs	r0, #7
 80016b8:	f000 fb84 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_I2C_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12c      	bne.n	8001744 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001718:	2304      	movs	r3, #4
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <HAL_I2C_MspInit+0x8c>)
 8001724:	f000 ff92 	bl	800264c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_I2C_MspInit+0x88>)
 8001732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40005400 	.word	0x40005400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_TIM_Base_MspInit+0x48>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d115      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_TIM_Base_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	201a      	movs	r0, #26
 800178c:	f000 fb25 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001790:	201a      	movs	r0, #26
 8001792:	f000 fb3e 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40014800 	.word	0x40014800
 80017a4:	40023800 	.word	0x40023800

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a34      	ldr	r2, [pc, #208]	; (8001898 <HAL_UART_MspInit+0xf0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d162      	bne.n	8001890 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_UART_MspInit+0xf4>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a32      	ldr	r2, [pc, #200]	; (800189c <HAL_UART_MspInit+0xf4>)
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_UART_MspInit+0xf4>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_UART_MspInit+0xf4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_UART_MspInit+0xf4>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_UART_MspInit+0xf4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001802:	230c      	movs	r3, #12
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001812:	2307      	movs	r3, #7
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4820      	ldr	r0, [pc, #128]	; (80018a0 <HAL_UART_MspInit+0xf8>)
 800181e:	f000 ff15 	bl	800264c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001824:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_UART_MspInit+0x100>)
 8001826:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 800182a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 800183e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001842:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001858:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800185c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001864:	480f      	ldr	r0, [pc, #60]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001866:	f000 faef 	bl	8001e48 <HAL_DMA_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001870:	f7ff fefc 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_UART_MspInit+0xfc>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2026      	movs	r0, #38	; 0x26
 8001886:	f000 faa8 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800188a:	2026      	movs	r0, #38	; 0x26
 800188c:	f000 fac1 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40004400 	.word	0x40004400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	20000268 	.word	0x20000268
 80018a8:	400260a0 	.word	0x400260a0

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f8:	f000 f974 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <DMA1_Stream6_IRQHandler+0x10>)
 8001906:	f000 fc37 	bl	8002178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000268 	.word	0x20000268

08001914 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800191a:	f002 fcf1 	bl	8004300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200002c8 	.word	0x200002c8

08001928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <USART2_IRQHandler+0x10>)
 800192e:	f002 ff77 	bl	8004820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000314 	.word	0x20000314

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001956:	f003 fe55 	bl	8005604 <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
	return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:

void _exit (int status)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
	while (1) {}		/* Make sure we hang here */
 800197e:	e7fe      	b.n	800197e <_exit+0x12>

08001980 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e00a      	b.n	80019a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001992:	f3af 8000 	nop.w
 8001996:	4601      	mov	r1, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	b2ca      	uxtb	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbf0      	blt.n	8001992 <_read+0x12>
	}

return len;
 80019b0:	687b      	ldr	r3, [r7, #4]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e009      	b.n	80019e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbf1      	blt.n	80019cc <_write+0x12>
	}
	return len;
 80019e8:	687b      	ldr	r3, [r7, #4]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_close>:

int _close(int file)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	return -1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_isatty>:

int _isatty(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
	return 1;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f003 fdba 	bl	8005604 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20018000 	.word	0x20018000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	200001f8 	.word	0x200001f8
 8001ac4:	200003b0 	.word	0x200003b0

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b16:	f7ff ffd7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f003 fd79 	bl	8005610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff fa17 	bl	8000f50 <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b30:	08008834 	.word	0x08008834
  ldr r2, =_sbss
 8001b34:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b38:	200003ac 	.word	0x200003ac

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f92b 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fd80 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f943 	bl	8001e2e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f90b 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000398 	.word	0x20000398

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000398 	.word	0x20000398

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff29 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff3e 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff31 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff feda 	bl	8001c0c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e099      	b.n	8001f98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e84:	e00f      	b.n	8001ea6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e86:	f7ff fec1 	bl	8001c0c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d908      	bls.n	8001ea6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e078      	b.n	8001f98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e8      	bne.n	8001e86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_DMA_Init+0x158>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d107      	bne.n	8001f10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d117      	bne.n	8001f6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fb01 	bl	8002554 <DMA_CheckFifoParam>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f66:	2301      	movs	r3, #1
 8001f68:	e016      	b.n	8001f98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fab8 	bl	80024e8 <DMA_CalcBaseAndBitshift>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	223f      	movs	r2, #63	; 0x3f
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	f010803f 	.word	0xf010803f

08001fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_Start_IT+0x26>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e040      	b.n	800204c <HAL_DMA_Start_IT+0xa8>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d12f      	bne.n	800203e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fa4a 	bl	800248c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	223f      	movs	r2, #63	; 0x3f
 8001ffe:	409a      	lsls	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0216 	orr.w	r2, r2, #22
 8002012:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0208 	orr.w	r2, r2, #8
 800202a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e005      	b.n	800204a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002046:	2302      	movs	r3, #2
 8002048:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800204a:	7dfb      	ldrb	r3, [r7, #23]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002062:	f7ff fdd3 	bl	8001c0c <HAL_GetTick>
 8002066:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d008      	beq.n	8002086 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e052      	b.n	800212c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0216 	bic.w	r2, r2, #22
 8002094:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <HAL_DMA_Abort+0x62>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0208 	bic.w	r2, r2, #8
 80020c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d6:	e013      	b.n	8002100 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d8:	f7ff fd98 	bl	8001c0c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d90c      	bls.n	8002100 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2203      	movs	r2, #3
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e015      	b.n	800212c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e4      	bne.n	80020d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	223f      	movs	r2, #63	; 0x3f
 8002114:	409a      	lsls	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d004      	beq.n	8002152 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e00c      	b.n	800216c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2205      	movs	r2, #5
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002184:	4b92      	ldr	r3, [pc, #584]	; (80023d0 <HAL_DMA_IRQHandler+0x258>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a92      	ldr	r2, [pc, #584]	; (80023d4 <HAL_DMA_IRQHandler+0x25c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0a9b      	lsrs	r3, r3, #10
 8002190:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2208      	movs	r2, #8
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01a      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0204 	bic.w	r2, r2, #4
 80021ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	2208      	movs	r2, #8
 80021d2:	409a      	lsls	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2201      	movs	r2, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d012      	beq.n	800221a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	2201      	movs	r2, #1
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2204      	movs	r2, #4
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	2204      	movs	r2, #4
 800223e:	409a      	lsls	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	f043 0204 	orr.w	r2, r3, #4
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	2210      	movs	r2, #16
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d043      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03c      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2210      	movs	r2, #16
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d018      	beq.n	80022ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d024      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
 80022a6:	e01f      	b.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01b      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
 80022b8:	e016      	b.n	80022e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0208 	bic.w	r2, r2, #8
 80022d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	2220      	movs	r2, #32
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 808e 	beq.w	8002416 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8086 	beq.w	8002416 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	2220      	movs	r2, #32
 8002310:	409a      	lsls	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b05      	cmp	r3, #5
 8002320:	d136      	bne.n	8002390 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0216 	bic.w	r2, r2, #22
 8002330:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002340:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <HAL_DMA_IRQHandler+0x1da>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0208 	bic.w	r2, r2, #8
 8002360:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	223f      	movs	r2, #63	; 0x3f
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	d07d      	beq.n	8002482 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	4798      	blx	r3
        }
        return;
 800238e:	e078      	b.n	8002482 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01c      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d108      	bne.n	80023be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d030      	beq.n	8002416 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
 80023bc:	e02b      	b.n	8002416 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
 80023ce:	e022      	b.n	8002416 <HAL_DMA_IRQHandler+0x29e>
 80023d0:	20000000 	.word	0x20000000
 80023d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0210 	bic.w	r2, r2, #16
 80023f4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	2b00      	cmp	r3, #0
 800241c:	d032      	beq.n	8002484 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d022      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2205      	movs	r2, #5
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	429a      	cmp	r2, r3
 800244c:	d307      	bcc.n	800245e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f2      	bne.n	8002442 <HAL_DMA_IRQHandler+0x2ca>
 800245c:	e000      	b.n	8002460 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800245e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
 8002480:	e000      	b.n	8002484 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002482:	bf00      	nop
    }
  }
}
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop

0800248c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d108      	bne.n	80024cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ca:	e007      	b.n	80024dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3b10      	subs	r3, #16
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <DMA_CalcBaseAndBitshift+0x64>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <DMA_CalcBaseAndBitshift+0x68>)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d909      	bls.n	800252a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	1d1a      	adds	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	659a      	str	r2, [r3, #88]	; 0x58
 8002528:	e007      	b.n	800253a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	aaaaaaab 	.word	0xaaaaaaab
 8002550:	08008438 	.word	0x08008438

08002554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11f      	bne.n	80025ae <DMA_CheckFifoParam+0x5a>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d856      	bhi.n	8002622 <DMA_CheckFifoParam+0xce>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <DMA_CheckFifoParam+0x28>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	0800258d 	.word	0x0800258d
 8002580:	0800259f 	.word	0x0800259f
 8002584:	0800258d 	.word	0x0800258d
 8002588:	08002623 	.word	0x08002623
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d046      	beq.n	8002626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259c:	e043      	b.n	8002626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a6:	d140      	bne.n	800262a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e03d      	b.n	800262a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b6:	d121      	bne.n	80025fc <DMA_CheckFifoParam+0xa8>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d837      	bhi.n	800262e <DMA_CheckFifoParam+0xda>
 80025be:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <DMA_CheckFifoParam+0x70>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025db 	.word	0x080025db
 80025cc:	080025d5 	.word	0x080025d5
 80025d0:	080025ed 	.word	0x080025ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e030      	b.n	800263c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d025      	beq.n	8002632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e022      	b.n	8002632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025f4:	d11f      	bne.n	8002636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025fa:	e01c      	b.n	8002636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d903      	bls.n	800260a <DMA_CheckFifoParam+0xb6>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d003      	beq.n	8002610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002608:	e018      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      break;
 800260e:	e015      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e00b      	b.n	800263a <DMA_CheckFifoParam+0xe6>
      break;
 8002622:	bf00      	nop
 8002624:	e00a      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e008      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e006      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e004      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e002      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;   
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
    }
  } 
  
  return status; 
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e159      	b.n	800291c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8148 	bne.w	8002916 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d005      	beq.n	800269e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269a:	2b02      	cmp	r3, #2
 800269c:	d130      	bne.n	8002700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d4:	2201      	movs	r2, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 0201 	and.w	r2, r3, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d017      	beq.n	800273c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d123      	bne.n	8002790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a2 	beq.w	8002916 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b57      	ldr	r3, [pc, #348]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b54      	ldr	r3, [pc, #336]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ee:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_GPIO_Init+0x2ec>)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a49      	ldr	r2, [pc, #292]	; (800293c <HAL_GPIO_Init+0x2f0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d019      	beq.n	800284e <HAL_GPIO_Init+0x202>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a48      	ldr	r2, [pc, #288]	; (8002940 <HAL_GPIO_Init+0x2f4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0x1fe>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a47      	ldr	r2, [pc, #284]	; (8002944 <HAL_GPIO_Init+0x2f8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_Init+0x1fa>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a46      	ldr	r2, [pc, #280]	; (8002948 <HAL_GPIO_Init+0x2fc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x1f6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a45      	ldr	r2, [pc, #276]	; (800294c <HAL_GPIO_Init+0x300>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_Init+0x1f2>
 800283a:	2304      	movs	r3, #4
 800283c:	e008      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800283e:	2307      	movs	r3, #7
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x204>
 8002842:	2303      	movs	r3, #3
 8002844:	e004      	b.n	8002850 <HAL_GPIO_Init+0x204>
 8002846:	2302      	movs	r3, #2
 8002848:	e002      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800284e:	2300      	movs	r3, #0
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f002 0203 	and.w	r2, r2, #3
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	4093      	lsls	r3, r2
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002860:	4935      	ldr	r1, [pc, #212]	; (8002938 <HAL_GPIO_Init+0x2ec>)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002892:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_GPIO_Init+0x304>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028bc:	4a24      	ldr	r2, [pc, #144]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002910:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b0f      	cmp	r3, #15
 8002920:	f67f aea2 	bls.w	8002668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40013800 	.word	0x40013800
 800293c:	40020000 	.word	0x40020000
 8002940:	40020400 	.word	0x40020400
 8002944:	40020800 	.word	0x40020800
 8002948:	40020c00 	.word	0x40020c00
 800294c:	40021000 	.word	0x40021000
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e12b      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fe8a 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	; 0x24
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029ec:	f001 fbae 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 80029f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a81      	ldr	r2, [pc, #516]	; (8002bfc <HAL_I2C_Init+0x274>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d807      	bhi.n	8002a0c <HAL_I2C_Init+0x84>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a80      	ldr	r2, [pc, #512]	; (8002c00 <HAL_I2C_Init+0x278>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e006      	b.n	8002a1a <HAL_I2C_Init+0x92>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a7d      	ldr	r2, [pc, #500]	; (8002c04 <HAL_I2C_Init+0x27c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0e7      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a78      	ldr	r2, [pc, #480]	; (8002c08 <HAL_I2C_Init+0x280>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a6a      	ldr	r2, [pc, #424]	; (8002bfc <HAL_I2C_Init+0x274>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d802      	bhi.n	8002a5c <HAL_I2C_Init+0xd4>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	e009      	b.n	8002a70 <HAL_I2C_Init+0xe8>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a69      	ldr	r2, [pc, #420]	; (8002c0c <HAL_I2C_Init+0x284>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	3301      	adds	r3, #1
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	495c      	ldr	r1, [pc, #368]	; (8002bfc <HAL_I2C_Init+0x274>)
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	d819      	bhi.n	8002ac4 <HAL_I2C_Init+0x13c>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e59      	subs	r1, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9e:	1c59      	adds	r1, r3, #1
 8002aa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_I2C_Init+0x138>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e59      	subs	r1, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abe:	e051      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	e04f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d111      	bne.n	8002af0 <HAL_I2C_Init+0x168>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e012      	b.n	8002b16 <HAL_I2C_Init+0x18e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	0099      	lsls	r1, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Init+0x196>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <HAL_I2C_Init+0x1bc>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e58      	subs	r0, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	440b      	add	r3, r1
 8002b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b42:	e00f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e58      	subs	r0, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	0099      	lsls	r1, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6911      	ldr	r1, [r2, #16]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	000186a0 	.word	0x000186a0
 8002c00:	001e847f 	.word	0x001e847f
 8002c04:	003d08ff 	.word	0x003d08ff
 8002c08:	431bde83 	.word	0x431bde83
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
 8002c20:	4613      	mov	r3, r2
 8002c22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7fe fff2 	bl	8001c0c <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	f040 80e0 	bne.w	8002df8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2319      	movs	r3, #25
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4970      	ldr	r1, [pc, #448]	; (8002e04 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fc58 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0d3      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x50>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0cc      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d007      	beq.n	8002c86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2221      	movs	r2, #33	; 0x21
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	893a      	ldrh	r2, [r7, #8]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a50      	ldr	r2, [pc, #320]	; (8002e08 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cc8:	8979      	ldrh	r1, [r7, #10]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fac2 	bl	8003258 <I2C_MasterRequestWrite>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e08d      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cf4:	e066      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fcd2 	bl	80036a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d107      	bne.n	8002d1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e06b      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d11b      	bne.n	8002d98 <HAL_I2C_Master_Transmit+0x188>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6a39      	ldr	r1, [r7, #32]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fcc2 	bl	8003726 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e01a      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d194      	bne.n	8002cf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	00100002 	.word	0x00100002
 8002e08:	ffff0000 	.word	0xffff0000

08002e0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	461a      	mov	r2, r3
 8002e18:	460b      	mov	r3, r1
 8002e1a:	817b      	strh	r3, [r7, #10]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7fe fef4 	bl	8001c0c <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	f040 820b 	bne.w	800324a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2319      	movs	r3, #25
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	497c      	ldr	r1, [pc, #496]	; (8003030 <HAL_I2C_Master_Receive+0x224>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fb5a 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e1fe      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2C_Master_Receive+0x50>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e1f7      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d007      	beq.n	8002e82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2222      	movs	r2, #34	; 0x22
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	893a      	ldrh	r2, [r7, #8]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a5c      	ldr	r2, [pc, #368]	; (8003034 <HAL_I2C_Master_Receive+0x228>)
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec4:	8979      	ldrh	r1, [r7, #10]
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fa46 	bl	800335c <I2C_MasterRequestRead>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1b8      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d113      	bne.n	8002f0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e18c      	b.n	8003224 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d11b      	bne.n	8002f4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e16c      	b.n	8003224 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d11b      	bne.n	8002f8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	e14c      	b.n	8003224 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fb0:	e138      	b.n	8003224 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	f200 80f1 	bhi.w	800319e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d123      	bne.n	800300c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fbed 	bl	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e139      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
 800300a:	e10b      	b.n	8003224 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	2b02      	cmp	r3, #2
 8003012:	d14e      	bne.n	80030b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	2200      	movs	r2, #0
 800301c:	4906      	ldr	r1, [pc, #24]	; (8003038 <HAL_I2C_Master_Receive+0x22c>)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fa6a 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e10e      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
 800302e:	bf00      	nop
 8003030:	00100002 	.word	0x00100002
 8003034:	ffff0000 	.word	0xffff0000
 8003038:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b0:	e0b8      	b.n	8003224 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	2200      	movs	r2, #0
 80030ba:	4966      	ldr	r1, [pc, #408]	; (8003254 <HAL_I2C_Master_Receive+0x448>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fa1b 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0bf      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	2200      	movs	r2, #0
 8003116:	494f      	ldr	r1, [pc, #316]	; (8003254 <HAL_I2C_Master_Receive+0x448>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f9ed 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e091      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800319c:	e042      	b.n	8003224 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fb00 	bl	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e04c      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d118      	bne.n	8003224 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	2b00      	cmp	r3, #0
 800322a:	f47f aec2 	bne.w	8002fb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800324a:	2302      	movs	r3, #2
  }
}
 800324c:	4618      	mov	r0, r3
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	00010004 	.word	0x00010004

08003258 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	460b      	mov	r3, r1
 8003266:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d006      	beq.n	8003282 <I2C_MasterRequestWrite+0x2a>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d003      	beq.n	8003282 <I2C_MasterRequestWrite+0x2a>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003280:	d108      	bne.n	8003294 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e00b      	b.n	80032ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	2b12      	cmp	r3, #18
 800329a:	d107      	bne.n	80032ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f91d 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d2:	d103      	bne.n	80032dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e035      	b.n	800334c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e8:	d108      	bne.n	80032fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032f8:	611a      	str	r2, [r3, #16]
 80032fa:	e01b      	b.n	8003334 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032fc:	897b      	ldrh	r3, [r7, #10]
 80032fe:	11db      	asrs	r3, r3, #7
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f003 0306 	and.w	r3, r3, #6
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f063 030f 	orn	r3, r3, #15
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <I2C_MasterRequestWrite+0xfc>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f943 	bl	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e010      	b.n	800334c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800332a:	897b      	ldrh	r3, [r7, #10]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4907      	ldr	r1, [pc, #28]	; (8003358 <I2C_MasterRequestWrite+0x100>)
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f933 	bl	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	00010008 	.word	0x00010008
 8003358:	00010002 	.word	0x00010002

0800335c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003380:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d006      	beq.n	8003396 <I2C_MasterRequestRead+0x3a>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d003      	beq.n	8003396 <I2C_MasterRequestRead+0x3a>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003394:	d108      	bne.n	80033a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e00b      	b.n	80033c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	2b11      	cmp	r3, #17
 80033ae:	d107      	bne.n	80033c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f893 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e6:	d103      	bne.n	80033f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e079      	b.n	80034e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fc:	d108      	bne.n	8003410 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	e05f      	b.n	80034d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003410:	897b      	ldrh	r3, [r7, #10]
 8003412:	11db      	asrs	r3, r3, #7
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 0306 	and.w	r3, r3, #6
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f063 030f 	orn	r3, r3, #15
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4930      	ldr	r1, [pc, #192]	; (80034f0 <I2C_MasterRequestRead+0x194>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f8b9 	bl	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e054      	b.n	80034e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4929      	ldr	r1, [pc, #164]	; (80034f4 <I2C_MasterRequestRead+0x198>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f8a9 	bl	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e044      	b.n	80034e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003482:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f831 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00d      	beq.n	80034b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034aa:	d103      	bne.n	80034b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e017      	b.n	80034e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	11db      	asrs	r3, r3, #7
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 0306 	and.w	r3, r3, #6
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f063 030e 	orn	r3, r3, #14
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4907      	ldr	r1, [pc, #28]	; (80034f4 <I2C_MasterRequestRead+0x198>)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f865 	bl	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	00010008 	.word	0x00010008
 80034f4:	00010002 	.word	0x00010002

080034f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003508:	e025      	b.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d021      	beq.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7fe fb7b 	bl	8001c0c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d116      	bne.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e023      	b.n	800359e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10d      	bne.n	800357c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	e00c      	b.n	8003596 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	429a      	cmp	r2, r3
 800359a:	d0b6      	beq.n	800350a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b4:	e051      	b.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c4:	d123      	bne.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0204 	orr.w	r2, r3, #4
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e046      	b.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d021      	beq.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe faf9 	bl	8001c0c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e020      	b.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10c      	bne.n	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4013      	ands	r3, r2
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e00b      	b.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	43da      	mvns	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4013      	ands	r3, r2
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d18d      	bne.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b0:	e02d      	b.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f8ce 	bl	8003854 <I2C_IsAcknowledgeFailed>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e02d      	b.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d021      	beq.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fa9f 	bl	8001c0c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d116      	bne.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e007      	b.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b80      	cmp	r3, #128	; 0x80
 800371a:	d1ca      	bne.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003732:	e02d      	b.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f88d 	bl	8003854 <I2C_IsAcknowledgeFailed>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e02d      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d021      	beq.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374c:	f7fe fa5e 	bl	8001c0c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	d302      	bcc.n	8003762 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d116      	bne.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f043 0220 	orr.w	r2, r3, #32
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e007      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d1ca      	bne.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b4:	e042      	b.n	800383c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d119      	bne.n	80037f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0210 	mvn.w	r2, #16
 80037cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e029      	b.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f8:	f7fe fa08 	bl	8001c0c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e007      	b.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d1b5      	bne.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386a:	d11b      	bne.n	80038a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003874:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e264      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d075      	beq.n	80039be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d2:	4ba3      	ldr	r3, [pc, #652]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	4ba0      	ldr	r3, [pc, #640]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d112      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4b9d      	ldr	r3, [pc, #628]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f6:	d10b      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	4b99      	ldr	r3, [pc, #612]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05b      	beq.n	80039bc <HAL_RCC_OscConfig+0x108>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d157      	bne.n	80039bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e23f      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d106      	bne.n	8003928 <HAL_RCC_OscConfig+0x74>
 800391a:	4b91      	ldr	r3, [pc, #580]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a90      	ldr	r2, [pc, #576]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x98>
 8003932:	4b8b      	ldr	r3, [pc, #556]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a8a      	ldr	r2, [pc, #552]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a87      	ldr	r2, [pc, #540]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 800394c:	4b84      	ldr	r3, [pc, #528]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a83      	ldr	r2, [pc, #524]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b81      	ldr	r3, [pc, #516]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a80      	ldr	r2, [pc, #512]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fe f94e 	bl	8001c0c <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe f94a 	bl	8001c0c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e204      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xc0>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe f93a 	bl	8001c0c <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe f936 	bl	8001c0c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1f0      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0xe8>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d063      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b62      	ldr	r3, [pc, #392]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b5f      	ldr	r3, [pc, #380]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b5c      	ldr	r3, [pc, #368]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1c4      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b56      	ldr	r3, [pc, #344]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4952      	ldr	r1, [pc, #328]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b4f      	ldr	r3, [pc, #316]	; (8003b64 <HAL_RCC_OscConfig+0x2b0>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fe f8ef 	bl	8001c0c <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe f8eb 	bl	8001c0c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1a5      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b46      	ldr	r3, [pc, #280]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4940      	ldr	r1, [pc, #256]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <HAL_RCC_OscConfig+0x2b0>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe f8ce 	bl	8001c0c <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fe f8ca 	bl	8001c0c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e184      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d030      	beq.n	8003b00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <HAL_RCC_OscConfig+0x2b4>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fe f8ae 	bl	8001c0c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fe f8aa 	bl	8001c0c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e164      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x200>
 8003ad2:	e015      	b.n	8003b00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCC_OscConfig+0x2b4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7fe f897 	bl	8001c0c <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7fe f893 	bl	8001c0c <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e14d      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f0      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80a0 	beq.w	8003c4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a0e      	ldr	r2, [pc, #56]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_OscConfig+0x2b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d121      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_RCC_OscConfig+0x2b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <HAL_RCC_OscConfig+0x2b8>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b56:	f7fe f859 	bl	8001c0c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	e011      	b.n	8003b82 <HAL_RCC_OscConfig+0x2ce>
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	42470000 	.word	0x42470000
 8003b68:	42470e80 	.word	0x42470e80
 8003b6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b70:	f7fe f84c 	bl	8001c0c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e106      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b85      	ldr	r3, [pc, #532]	; (8003d98 <HAL_RCC_OscConfig+0x4e4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x2f0>
 8003b96:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a80      	ldr	r2, [pc, #512]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba2:	e01c      	b.n	8003bde <HAL_RCC_OscConfig+0x32a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x312>
 8003bac:	4b7b      	ldr	r3, [pc, #492]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a7a      	ldr	r2, [pc, #488]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb8:	4b78      	ldr	r3, [pc, #480]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a77      	ldr	r2, [pc, #476]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	e00b      	b.n	8003bde <HAL_RCC_OscConfig+0x32a>
 8003bc6:	4b75      	ldr	r3, [pc, #468]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a74      	ldr	r2, [pc, #464]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a71      	ldr	r2, [pc, #452]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d015      	beq.n	8003c12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be6:	f7fe f811 	bl	8001c0c <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fe f80d 	bl	8001c0c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e0c5      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	4b65      	ldr	r3, [pc, #404]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ee      	beq.n	8003bee <HAL_RCC_OscConfig+0x33a>
 8003c10:	e014      	b.n	8003c3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fd fffb 	bl	8001c0c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fff7 	bl	8001c0c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e0af      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c30:	4b5a      	ldr	r3, [pc, #360]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ee      	bne.n	8003c1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c42:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	4a55      	ldr	r2, [pc, #340]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 809b 	beq.w	8003d8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d05c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d141      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <HAL_RCC_OscConfig+0x4ec>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd ffcb 	bl	8001c0c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fd ffc7 	bl	8001c0c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e081      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8c:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	019b      	lsls	r3, r3, #6
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	4937      	ldr	r1, [pc, #220]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc2:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCC_OscConfig+0x4ec>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fd ffa0 	bl	8001c0c <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fd ff9c 	bl	8001c0c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e056      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x41c>
 8003cee:	e04e      	b.n	8003d8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf0:	4b2b      	ldr	r3, [pc, #172]	; (8003da0 <HAL_RCC_OscConfig+0x4ec>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf6:	f7fd ff89 	bl	8001c0c <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fd ff85 	bl	8001c0c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e03f      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d10:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f0      	bne.n	8003cfe <HAL_RCC_OscConfig+0x44a>
 8003d1c:	e037      	b.n	8003d8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e032      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <HAL_RCC_OscConfig+0x4e8>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d028      	beq.n	8003d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d121      	bne.n	8003d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d11a      	bne.n	8003d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d111      	bne.n	8003d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	3b01      	subs	r3, #1
 8003d74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	42470060 	.word	0x42470060

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0cc      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b68      	ldr	r3, [pc, #416]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d90c      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b65      	ldr	r3, [pc, #404]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b63      	ldr	r3, [pc, #396]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0b8      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df8:	4b59      	ldr	r3, [pc, #356]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a58      	ldr	r2, [pc, #352]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e10:	4b53      	ldr	r3, [pc, #332]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a52      	ldr	r2, [pc, #328]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1c:	4b50      	ldr	r3, [pc, #320]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	494d      	ldr	r1, [pc, #308]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d044      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d119      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b3f      	ldr	r3, [pc, #252]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e067      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4934      	ldr	r1, [pc, #208]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fd feba 	bl	8001c0c <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fd feb6 	bl	8001c0c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e04f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d20c      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e032      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4916      	ldr	r1, [pc, #88]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	490e      	ldr	r1, [pc, #56]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f2a:	f000 f821 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	490a      	ldr	r1, [pc, #40]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	5ccb      	ldrb	r3, [r1, r3]
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd fe1a 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00
 8003f60:	40023800 	.word	0x40023800
 8003f64:	08008420 	.word	0x08008420
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	20000004 	.word	0x20000004

08003f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	2300      	movs	r3, #0
 8003f82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f88:	4b67      	ldr	r3, [pc, #412]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d00d      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	f200 80bd 	bhi.w	8004114 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x3a>
 8003fa2:	e0b7      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fa6:	60bb      	str	r3, [r7, #8]
       break;
 8003fa8:	e0b7      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003faa:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fac:	60bb      	str	r3, [r7, #8]
      break;
 8003fae:	e0b4      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb0:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fba:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04d      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b58      	ldr	r3, [pc, #352]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	ea02 0800 	and.w	r8, r2, r0
 8003fde:	ea03 0901 	and.w	r9, r3, r1
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	014b      	lsls	r3, r1, #5
 8003ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ff4:	0142      	lsls	r2, r0, #5
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	ebb0 0008 	subs.w	r0, r0, r8
 8003ffe:	eb61 0109 	sbc.w	r1, r1, r9
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	018b      	lsls	r3, r1, #6
 800400c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004010:	0182      	lsls	r2, r0, #6
 8004012:	1a12      	subs	r2, r2, r0
 8004014:	eb63 0301 	sbc.w	r3, r3, r1
 8004018:	f04f 0000 	mov.w	r0, #0
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	00d9      	lsls	r1, r3, #3
 8004022:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004026:	00d0      	lsls	r0, r2, #3
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	eb12 0208 	adds.w	r2, r2, r8
 8004030:	eb43 0309 	adc.w	r3, r3, r9
 8004034:	f04f 0000 	mov.w	r0, #0
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	0259      	lsls	r1, r3, #9
 800403e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004042:	0250      	lsls	r0, r2, #9
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	461a      	mov	r2, r3
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	f7fc fe00 	bl	8000c58 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e04a      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004062:	4b31      	ldr	r3, [pc, #196]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	461a      	mov	r2, r3
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	ea02 0400 	and.w	r4, r2, r0
 800407a:	ea03 0501 	and.w	r5, r3, r1
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	014b      	lsls	r3, r1, #5
 800408c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004090:	0142      	lsls	r2, r0, #5
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	1b00      	subs	r0, r0, r4
 8004098:	eb61 0105 	sbc.w	r1, r1, r5
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	018b      	lsls	r3, r1, #6
 80040a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040aa:	0182      	lsls	r2, r0, #6
 80040ac:	1a12      	subs	r2, r2, r0
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	00d9      	lsls	r1, r3, #3
 80040bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040c0:	00d0      	lsls	r0, r2, #3
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	1912      	adds	r2, r2, r4
 80040c8:	eb45 0303 	adc.w	r3, r5, r3
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	0299      	lsls	r1, r3, #10
 80040d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040da:	0290      	lsls	r0, r2, #10
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	f7fc fdb4 	bl	8000c58 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	60bb      	str	r3, [r7, #8]
      break;
 8004112:	e002      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004116:	60bb      	str	r3, [r7, #8]
      break;
 8004118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411a:	68bb      	ldr	r3, [r7, #8]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	00f42400 	.word	0x00f42400
 8004130:	007a1200 	.word	0x007a1200

08004134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <HAL_RCC_GetHCLKFreq+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000000 	.word	0x20000000

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004150:	f7ff fff0 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0a9b      	lsrs	r3, r3, #10
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	08008430 	.word	0x08008430

08004174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004178:	f7ff ffdc 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0b5b      	lsrs	r3, r3, #13
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	08008430 	.word	0x08008430

0800419c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e041      	b.n	8004232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd fac8 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 f9c0 	bl	8004560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e044      	b.n	80042de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d018      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d013      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00e      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_TIM_Base_Start_IT+0xc0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d111      	bne.n	80042cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	d010      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ca:	e007      	b.n	80042dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40014000 	.word	0x40014000

08004300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b02      	cmp	r3, #2
 8004314:	d122      	bne.n	800435c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b02      	cmp	r3, #2
 8004322:	d11b      	bne.n	800435c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0202 	mvn.w	r2, #2
 800432c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8ee 	bl	8004524 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8e0 	bl	8004510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8f1 	bl	8004538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b04      	cmp	r3, #4
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0204 	mvn.w	r2, #4
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f8c4 	bl	8004524 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8b6 	bl	8004510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8c7 	bl	8004538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0208 	mvn.w	r2, #8
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2204      	movs	r2, #4
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f89a 	bl	8004524 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f88c 	bl	8004510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f89d 	bl	8004538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b10      	cmp	r3, #16
 8004410:	d122      	bne.n	8004458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b10      	cmp	r3, #16
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0210 	mvn.w	r2, #16
 8004428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2208      	movs	r2, #8
 800442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f870 	bl	8004524 <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f862 	bl	8004510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f873 	bl	8004538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b01      	cmp	r3, #1
 8004464:	d10e      	bne.n	8004484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d107      	bne.n	8004484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0201 	mvn.w	r2, #1
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc ff3e 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	d10e      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d107      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8e2 	bl	8004674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d10e      	bne.n	80044dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d107      	bne.n	80044dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f838 	bl	800454c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d10e      	bne.n	8004508 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d107      	bne.n	8004508 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0220 	mvn.w	r2, #32
 8004500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8ac 	bl	8004660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a34      	ldr	r2, [pc, #208]	; (8004644 <TIM_Base_SetConfig+0xe4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00f      	beq.n	8004598 <TIM_Base_SetConfig+0x38>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457e:	d00b      	beq.n	8004598 <TIM_Base_SetConfig+0x38>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a31      	ldr	r2, [pc, #196]	; (8004648 <TIM_Base_SetConfig+0xe8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d007      	beq.n	8004598 <TIM_Base_SetConfig+0x38>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a30      	ldr	r2, [pc, #192]	; (800464c <TIM_Base_SetConfig+0xec>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0x38>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <TIM_Base_SetConfig+0xf0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d108      	bne.n	80045aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a25      	ldr	r2, [pc, #148]	; (8004644 <TIM_Base_SetConfig+0xe4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01b      	beq.n	80045ea <TIM_Base_SetConfig+0x8a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b8:	d017      	beq.n	80045ea <TIM_Base_SetConfig+0x8a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a22      	ldr	r2, [pc, #136]	; (8004648 <TIM_Base_SetConfig+0xe8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <TIM_Base_SetConfig+0x8a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a21      	ldr	r2, [pc, #132]	; (800464c <TIM_Base_SetConfig+0xec>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00f      	beq.n	80045ea <TIM_Base_SetConfig+0x8a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a20      	ldr	r2, [pc, #128]	; (8004650 <TIM_Base_SetConfig+0xf0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <TIM_Base_SetConfig+0xf4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_Base_SetConfig+0x8a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <TIM_Base_SetConfig+0xf8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <TIM_Base_SetConfig+0xfc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a08      	ldr	r2, [pc, #32]	; (8004644 <TIM_Base_SetConfig+0xe4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	615a      	str	r2, [r3, #20]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800

08004660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e03f      	b.n	800471a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd f87a 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fdd1 	bl	8005274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	; 0x30
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b20      	cmp	r3, #32
 800473c:	d165      	bne.n	800480a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_UART_Transmit_DMA+0x26>
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e05e      	b.n	800480c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_UART_Transmit_DMA+0x38>
 8004758:	2302      	movs	r3, #2
 800475a:	e057      	b.n	800480c <HAL_UART_Transmit_DMA+0xe8>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2221      	movs	r2, #33	; 0x21
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_UART_Transmit_DMA+0xf0>)
 800478a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	4a21      	ldr	r2, [pc, #132]	; (8004818 <HAL_UART_Transmit_DMA+0xf4>)
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <HAL_UART_Transmit_DMA+0xf8>)
 800479a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	2200      	movs	r2, #0
 80047a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80047a4:	f107 0308 	add.w	r3, r7, #8
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3304      	adds	r3, #4
 80047b8:	461a      	mov	r2, r3
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	f7fd fbf2 	bl	8001fa4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047c8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3314      	adds	r3, #20
 80047d8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	617b      	str	r3, [r7, #20]
   return(result);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3314      	adds	r3, #20
 80047f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f2:	627a      	str	r2, [r7, #36]	; 0x24
 80047f4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6a39      	ldr	r1, [r7, #32]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e5      	bne.n	80047d2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e000      	b.n	800480c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800480a:	2302      	movs	r3, #2
  }
}
 800480c:	4618      	mov	r0, r3
 800480e:	3730      	adds	r7, #48	; 0x30
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	08004da5 	.word	0x08004da5
 8004818:	08004e3f 	.word	0x08004e3f
 800481c:	08004e5b 	.word	0x08004e5b

08004820 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b0ba      	sub	sp, #232	; 0xe8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800484c:	2300      	movs	r3, #0
 800484e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800485e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_UART_IRQHandler+0x66>
 8004872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fc3c 	bl	80050fc <UART_Receive_IT>
      return;
 8004884:	e256      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80de 	beq.w	8004a4c <HAL_UART_IRQHandler+0x22c>
 8004890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80d1 	beq.w	8004a4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_UART_IRQHandler+0xae>
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_UART_IRQHandler+0xd2>
 80048da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_UART_IRQHandler+0xf6>
 80048fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0204 	orr.w	r2, r3, #4
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d011      	beq.n	8004946 <HAL_UART_IRQHandler+0x126>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800492e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 81ed 	beq.w	8004d2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_UART_IRQHandler+0x14e>
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fbc7 	bl	80050fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <HAL_UART_IRQHandler+0x17a>
 8004992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04f      	beq.n	8004a3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 facf 	bl	8004f3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d141      	bne.n	8004a32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3314      	adds	r3, #20
 80049b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1d9      	bne.n	80049ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d013      	beq.n	8004a2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	4a7d      	ldr	r2, [pc, #500]	; (8004bfc <HAL_UART_IRQHandler+0x3dc>)
 8004a08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fd fb90 	bl	8002134 <HAL_DMA_Abort_IT>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a24:	4610      	mov	r0, r2
 8004a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	e00e      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9a4 	bl	8004d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	e00a      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f9a0 	bl	8004d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	e006      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f99c 	bl	8004d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a46:	e170      	b.n	8004d2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	bf00      	nop
    return;
 8004a4a:	e16e      	b.n	8004d2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f040 814a 	bne.w	8004cea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8143 	beq.w	8004cea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 813c 	beq.w	8004cea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	f040 80b4 	bne.w	8004c00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8140 	beq.w	8004d2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	f080 8139 	bcs.w	8004d2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ac2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ace:	f000 8088 	beq.w	8004be2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004afe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1d9      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e1      	bne.n	8004b1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3314      	adds	r3, #20
 8004b60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3314      	adds	r3, #20
 8004b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e3      	bne.n	8004b5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb2:	f023 0310 	bic.w	r3, r3, #16
 8004bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e3      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fd fa39 	bl	8002054 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8ca 	bl	8004d8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bf8:	e099      	b.n	8004d2e <HAL_UART_IRQHandler+0x50e>
 8004bfa:	bf00      	nop
 8004bfc:	08005005 	.word	0x08005005
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 808b 	beq.w	8004d32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8086 	beq.w	8004d32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c4a:	647a      	str	r2, [r7, #68]	; 0x44
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e3      	bne.n	8004c26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c82:	633a      	str	r2, [r7, #48]	; 0x30
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e3      	bne.n	8004c5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cc8:	61fa      	str	r2, [r7, #28]
 8004cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e3      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f852 	bl	8004d8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ce8:	e023      	b.n	8004d32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_UART_IRQHandler+0x4ea>
 8004cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f992 	bl	800502c <UART_Transmit_IT>
    return;
 8004d08:	e014      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00e      	beq.n	8004d34 <HAL_UART_IRQHandler+0x514>
 8004d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9d2 	bl	80050cc <UART_EndTransmit_IT>
    return;
 8004d28:	e004      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
    return;
 8004d2a:	bf00      	nop
 8004d2c:	e002      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
      return;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
      return;
 8004d32:	bf00      	nop
  }
}
 8004d34:	37e8      	adds	r7, #232	; 0xe8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b090      	sub	sp, #64	; 0x40
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d137      	bne.n	8004e30 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de6:	633a      	str	r2, [r7, #48]	; 0x30
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e5      	bne.n	8004dc6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e1a:	61fa      	str	r2, [r7, #28]
 8004e1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	69b9      	ldr	r1, [r7, #24]
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	617b      	str	r3, [r7, #20]
   return(result);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e2e:	e002      	b.n	8004e36 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004e30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e32:	f7ff ff83 	bl	8004d3c <HAL_UART_TxCpltCallback>
}
 8004e36:	bf00      	nop
 8004e38:	3740      	adds	r7, #64	; 0x40
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff ff7f 	bl	8004d50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b21      	cmp	r3, #33	; 0x21
 8004e8c:	d108      	bne.n	8004ea0 <UART_DMAError+0x46>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2200      	movs	r2, #0
 8004e98:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e9a:	68b8      	ldr	r0, [r7, #8]
 8004e9c:	f000 f827 	bl	8004eee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b22      	cmp	r3, #34	; 0x22
 8004ec0:	d108      	bne.n	8004ed4 <UART_DMAError+0x7a>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004ece:	68b8      	ldr	r0, [r7, #8]
 8004ed0:	f000 f835 	bl	8004f3e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f043 0210 	orr.w	r2, r3, #16
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee0:	68b8      	ldr	r0, [r7, #8]
 8004ee2:	f7ff ff49 	bl	8004d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b089      	sub	sp, #36	; 0x24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	61ba      	str	r2, [r7, #24]
 8004f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6979      	ldr	r1, [r7, #20]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	613b      	str	r3, [r7, #16]
   return(result);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004f32:	bf00      	nop
 8004f34:	3724      	adds	r7, #36	; 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b095      	sub	sp, #84	; 0x54
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f66:	643a      	str	r2, [r7, #64]	; 0x40
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e5      	bne.n	8004f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3314      	adds	r3, #20
 8004f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3314      	adds	r3, #20
 8004f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d119      	bne.n	8004fea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 0310 	bic.w	r3, r3, #16
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd6:	61ba      	str	r2, [r7, #24]
 8004fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6979      	ldr	r1, [r7, #20]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e5      	bne.n	8004fb6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ff8:	bf00      	nop
 8004ffa:	3754      	adds	r7, #84	; 0x54
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff feaa 	bl	8004d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b21      	cmp	r3, #33	; 0x21
 800503e:	d13e      	bne.n	80050be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005048:	d114      	bne.n	8005074 <UART_Transmit_IT+0x48>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d110      	bne.n	8005074 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005066:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	1c9a      	adds	r2, r3, #2
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]
 8005072:	e008      	b.n	8005086 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	1c59      	adds	r1, r3, #1
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6211      	str	r1, [r2, #32]
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29b      	uxth	r3, r3
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	4619      	mov	r1, r3
 8005094:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fe25 	bl	8004d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	; 0x30
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b22      	cmp	r3, #34	; 0x22
 800510e:	f040 80ab 	bne.w	8005268 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511a:	d117      	bne.n	800514c <UART_Receive_IT+0x50>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d113      	bne.n	800514c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	b29a      	uxth	r2, r3
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	629a      	str	r2, [r3, #40]	; 0x28
 800514a:	e026      	b.n	800519a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515e:	d007      	beq.n	8005170 <UART_Receive_IT+0x74>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <UART_Receive_IT+0x82>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e008      	b.n	8005190 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	4619      	mov	r1, r3
 80051a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d15a      	bne.n	8005264 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0220 	bic.w	r2, r2, #32
 80051bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d135      	bne.n	800525a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	613b      	str	r3, [r7, #16]
   return(result);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f023 0310 	bic.w	r3, r3, #16
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	623a      	str	r2, [r7, #32]
 8005216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	69f9      	ldr	r1, [r7, #28]
 800521a:	6a3a      	ldr	r2, [r7, #32]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	61bb      	str	r3, [r7, #24]
   return(result);
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e5      	bne.n	80051f4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b10      	cmp	r3, #16
 8005234:	d10a      	bne.n	800524c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fd9a 	bl	8004d8c <HAL_UARTEx_RxEventCallback>
 8005258:	e002      	b.n	8005260 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fd82 	bl	8004d64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e002      	b.n	800526a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e000      	b.n	800526a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3730      	adds	r7, #48	; 0x30
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	b09f      	sub	sp, #124	; 0x7c
 800527a:	af00      	add	r7, sp, #0
 800527c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	68d9      	ldr	r1, [r3, #12]
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	ea40 0301 	orr.w	r3, r0, r1
 8005294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	431a      	orrs	r2, r3
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052b8:	f021 010c 	bic.w	r1, r1, #12
 80052bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052c2:	430b      	orrs	r3, r1
 80052c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	6999      	ldr	r1, [r3, #24]
 80052d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	ea40 0301 	orr.w	r3, r0, r1
 80052dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4bc5      	ldr	r3, [pc, #788]	; (80055f8 <UART_SetConfig+0x384>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d004      	beq.n	80052f2 <UART_SetConfig+0x7e>
 80052e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4bc3      	ldr	r3, [pc, #780]	; (80055fc <UART_SetConfig+0x388>)
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d103      	bne.n	80052fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052f2:	f7fe ff3f 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 80052f6:	6778      	str	r0, [r7, #116]	; 0x74
 80052f8:	e002      	b.n	8005300 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052fa:	f7fe ff27 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 80052fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005308:	f040 80b6 	bne.w	8005478 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800530c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800530e:	461c      	mov	r4, r3
 8005310:	f04f 0500 	mov.w	r5, #0
 8005314:	4622      	mov	r2, r4
 8005316:	462b      	mov	r3, r5
 8005318:	1891      	adds	r1, r2, r2
 800531a:	6439      	str	r1, [r7, #64]	; 0x40
 800531c:	415b      	adcs	r3, r3
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005324:	1912      	adds	r2, r2, r4
 8005326:	eb45 0303 	adc.w	r3, r5, r3
 800532a:	f04f 0000 	mov.w	r0, #0
 800532e:	f04f 0100 	mov.w	r1, #0
 8005332:	00d9      	lsls	r1, r3, #3
 8005334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005338:	00d0      	lsls	r0, r2, #3
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	1911      	adds	r1, r2, r4
 8005340:	6639      	str	r1, [r7, #96]	; 0x60
 8005342:	416b      	adcs	r3, r5
 8005344:	667b      	str	r3, [r7, #100]	; 0x64
 8005346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	461a      	mov	r2, r3
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	1891      	adds	r1, r2, r2
 8005352:	63b9      	str	r1, [r7, #56]	; 0x38
 8005354:	415b      	adcs	r3, r3
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800535c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005360:	f7fb fc7a 	bl	8000c58 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4ba5      	ldr	r3, [pc, #660]	; (8005600 <UART_SetConfig+0x38c>)
 800536a:	fba3 2302 	umull	r2, r3, r3, r2
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	011e      	lsls	r6, r3, #4
 8005372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005374:	461c      	mov	r4, r3
 8005376:	f04f 0500 	mov.w	r5, #0
 800537a:	4622      	mov	r2, r4
 800537c:	462b      	mov	r3, r5
 800537e:	1891      	adds	r1, r2, r2
 8005380:	6339      	str	r1, [r7, #48]	; 0x30
 8005382:	415b      	adcs	r3, r3
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800538a:	1912      	adds	r2, r2, r4
 800538c:	eb45 0303 	adc.w	r3, r5, r3
 8005390:	f04f 0000 	mov.w	r0, #0
 8005394:	f04f 0100 	mov.w	r1, #0
 8005398:	00d9      	lsls	r1, r3, #3
 800539a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800539e:	00d0      	lsls	r0, r2, #3
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	1911      	adds	r1, r2, r4
 80053a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80053a8:	416b      	adcs	r3, r5
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	461a      	mov	r2, r3
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	1891      	adds	r1, r2, r2
 80053b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80053ba:	415b      	adcs	r3, r3
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053c6:	f7fb fc47 	bl	8000c58 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4b8c      	ldr	r3, [pc, #560]	; (8005600 <UART_SetConfig+0x38c>)
 80053d0:	fba3 1302 	umull	r1, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	2164      	movs	r1, #100	; 0x64
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3332      	adds	r3, #50	; 0x32
 80053e2:	4a87      	ldr	r2, [pc, #540]	; (8005600 <UART_SetConfig+0x38c>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053f0:	441e      	add	r6, r3
 80053f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f4:	4618      	mov	r0, r3
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	1894      	adds	r4, r2, r2
 8005400:	623c      	str	r4, [r7, #32]
 8005402:	415b      	adcs	r3, r3
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
 8005406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800540a:	1812      	adds	r2, r2, r0
 800540c:	eb41 0303 	adc.w	r3, r1, r3
 8005410:	f04f 0400 	mov.w	r4, #0
 8005414:	f04f 0500 	mov.w	r5, #0
 8005418:	00dd      	lsls	r5, r3, #3
 800541a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800541e:	00d4      	lsls	r4, r2, #3
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	1814      	adds	r4, r2, r0
 8005426:	653c      	str	r4, [r7, #80]	; 0x50
 8005428:	414b      	adcs	r3, r1
 800542a:	657b      	str	r3, [r7, #84]	; 0x54
 800542c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	461a      	mov	r2, r3
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	1891      	adds	r1, r2, r2
 8005438:	61b9      	str	r1, [r7, #24]
 800543a:	415b      	adcs	r3, r3
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005442:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005446:	f7fb fc07 	bl	8000c58 <__aeabi_uldivmod>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <UART_SetConfig+0x38c>)
 8005450:	fba3 1302 	umull	r1, r3, r3, r2
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	2164      	movs	r1, #100	; 0x64
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	3332      	adds	r3, #50	; 0x32
 8005462:	4a67      	ldr	r2, [pc, #412]	; (8005600 <UART_SetConfig+0x38c>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	f003 0207 	and.w	r2, r3, #7
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4432      	add	r2, r6
 8005474:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005476:	e0b9      	b.n	80055ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547a:	461c      	mov	r4, r3
 800547c:	f04f 0500 	mov.w	r5, #0
 8005480:	4622      	mov	r2, r4
 8005482:	462b      	mov	r3, r5
 8005484:	1891      	adds	r1, r2, r2
 8005486:	6139      	str	r1, [r7, #16]
 8005488:	415b      	adcs	r3, r3
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005490:	1912      	adds	r2, r2, r4
 8005492:	eb45 0303 	adc.w	r3, r5, r3
 8005496:	f04f 0000 	mov.w	r0, #0
 800549a:	f04f 0100 	mov.w	r1, #0
 800549e:	00d9      	lsls	r1, r3, #3
 80054a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054a4:	00d0      	lsls	r0, r2, #3
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	eb12 0804 	adds.w	r8, r2, r4
 80054ae:	eb43 0905 	adc.w	r9, r3, r5
 80054b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f04f 0100 	mov.w	r1, #0
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	008b      	lsls	r3, r1, #2
 80054c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054ca:	0082      	lsls	r2, r0, #2
 80054cc:	4640      	mov	r0, r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	f7fb fbc2 	bl	8000c58 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b49      	ldr	r3, [pc, #292]	; (8005600 <UART_SetConfig+0x38c>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011e      	lsls	r6, r3, #4
 80054e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e4:	4618      	mov	r0, r3
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	1894      	adds	r4, r2, r2
 80054f0:	60bc      	str	r4, [r7, #8]
 80054f2:	415b      	adcs	r3, r3
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054fa:	1812      	adds	r2, r2, r0
 80054fc:	eb41 0303 	adc.w	r3, r1, r3
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	f04f 0500 	mov.w	r5, #0
 8005508:	00dd      	lsls	r5, r3, #3
 800550a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800550e:	00d4      	lsls	r4, r2, #3
 8005510:	4622      	mov	r2, r4
 8005512:	462b      	mov	r3, r5
 8005514:	1814      	adds	r4, r2, r0
 8005516:	64bc      	str	r4, [r7, #72]	; 0x48
 8005518:	414b      	adcs	r3, r1
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4618      	mov	r0, r3
 8005522:	f04f 0100 	mov.w	r1, #0
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	008b      	lsls	r3, r1, #2
 8005530:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005534:	0082      	lsls	r2, r0, #2
 8005536:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800553a:	f7fb fb8d 	bl	8000c58 <__aeabi_uldivmod>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <UART_SetConfig+0x38c>)
 8005544:	fba3 1302 	umull	r1, r3, r3, r2
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	2164      	movs	r1, #100	; 0x64
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	3332      	adds	r3, #50	; 0x32
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <UART_SetConfig+0x38c>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005562:	441e      	add	r6, r3
 8005564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005566:	4618      	mov	r0, r3
 8005568:	f04f 0100 	mov.w	r1, #0
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	1894      	adds	r4, r2, r2
 8005572:	603c      	str	r4, [r7, #0]
 8005574:	415b      	adcs	r3, r3
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800557c:	1812      	adds	r2, r2, r0
 800557e:	eb41 0303 	adc.w	r3, r1, r3
 8005582:	f04f 0400 	mov.w	r4, #0
 8005586:	f04f 0500 	mov.w	r5, #0
 800558a:	00dd      	lsls	r5, r3, #3
 800558c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005590:	00d4      	lsls	r4, r2, #3
 8005592:	4622      	mov	r2, r4
 8005594:	462b      	mov	r3, r5
 8005596:	eb12 0a00 	adds.w	sl, r2, r0
 800559a:	eb43 0b01 	adc.w	fp, r3, r1
 800559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	008b      	lsls	r3, r1, #2
 80055b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055b6:	0082      	lsls	r2, r0, #2
 80055b8:	4650      	mov	r0, sl
 80055ba:	4659      	mov	r1, fp
 80055bc:	f7fb fb4c 	bl	8000c58 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <UART_SetConfig+0x38c>)
 80055c6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2164      	movs	r1, #100	; 0x64
 80055ce:	fb01 f303 	mul.w	r3, r1, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <UART_SetConfig+0x38c>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 020f 	and.w	r2, r3, #15
 80055e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4432      	add	r2, r6
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	377c      	adds	r7, #124	; 0x7c
 80055f0:	46bd      	mov	sp, r7
 80055f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f6:	bf00      	nop
 80055f8:	40011000 	.word	0x40011000
 80055fc:	40011400 	.word	0x40011400
 8005600:	51eb851f 	.word	0x51eb851f

08005604 <__errno>:
 8005604:	4b01      	ldr	r3, [pc, #4]	; (800560c <__errno+0x8>)
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	2000000c 	.word	0x2000000c

08005610 <__libc_init_array>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	4d0d      	ldr	r5, [pc, #52]	; (8005648 <__libc_init_array+0x38>)
 8005614:	4c0d      	ldr	r4, [pc, #52]	; (800564c <__libc_init_array+0x3c>)
 8005616:	1b64      	subs	r4, r4, r5
 8005618:	10a4      	asrs	r4, r4, #2
 800561a:	2600      	movs	r6, #0
 800561c:	42a6      	cmp	r6, r4
 800561e:	d109      	bne.n	8005634 <__libc_init_array+0x24>
 8005620:	4d0b      	ldr	r5, [pc, #44]	; (8005650 <__libc_init_array+0x40>)
 8005622:	4c0c      	ldr	r4, [pc, #48]	; (8005654 <__libc_init_array+0x44>)
 8005624:	f002 feb4 	bl	8008390 <_init>
 8005628:	1b64      	subs	r4, r4, r5
 800562a:	10a4      	asrs	r4, r4, #2
 800562c:	2600      	movs	r6, #0
 800562e:	42a6      	cmp	r6, r4
 8005630:	d105      	bne.n	800563e <__libc_init_array+0x2e>
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	f855 3b04 	ldr.w	r3, [r5], #4
 8005638:	4798      	blx	r3
 800563a:	3601      	adds	r6, #1
 800563c:	e7ee      	b.n	800561c <__libc_init_array+0xc>
 800563e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005642:	4798      	blx	r3
 8005644:	3601      	adds	r6, #1
 8005646:	e7f2      	b.n	800562e <__libc_init_array+0x1e>
 8005648:	0800882c 	.word	0x0800882c
 800564c:	0800882c 	.word	0x0800882c
 8005650:	0800882c 	.word	0x0800882c
 8005654:	08008830 	.word	0x08008830

08005658 <memcpy>:
 8005658:	440a      	add	r2, r1
 800565a:	4291      	cmp	r1, r2
 800565c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005660:	d100      	bne.n	8005664 <memcpy+0xc>
 8005662:	4770      	bx	lr
 8005664:	b510      	push	{r4, lr}
 8005666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800566a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800566e:	4291      	cmp	r1, r2
 8005670:	d1f9      	bne.n	8005666 <memcpy+0xe>
 8005672:	bd10      	pop	{r4, pc}

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <__cvt>:
 8005684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	ec55 4b10 	vmov	r4, r5, d0
 800568c:	2d00      	cmp	r5, #0
 800568e:	460e      	mov	r6, r1
 8005690:	4619      	mov	r1, r3
 8005692:	462b      	mov	r3, r5
 8005694:	bfbb      	ittet	lt
 8005696:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800569a:	461d      	movlt	r5, r3
 800569c:	2300      	movge	r3, #0
 800569e:	232d      	movlt	r3, #45	; 0x2d
 80056a0:	700b      	strb	r3, [r1, #0]
 80056a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056a8:	4691      	mov	r9, r2
 80056aa:	f023 0820 	bic.w	r8, r3, #32
 80056ae:	bfbc      	itt	lt
 80056b0:	4622      	movlt	r2, r4
 80056b2:	4614      	movlt	r4, r2
 80056b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056b8:	d005      	beq.n	80056c6 <__cvt+0x42>
 80056ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056be:	d100      	bne.n	80056c2 <__cvt+0x3e>
 80056c0:	3601      	adds	r6, #1
 80056c2:	2102      	movs	r1, #2
 80056c4:	e000      	b.n	80056c8 <__cvt+0x44>
 80056c6:	2103      	movs	r1, #3
 80056c8:	ab03      	add	r3, sp, #12
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	ab02      	add	r3, sp, #8
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	ec45 4b10 	vmov	d0, r4, r5
 80056d4:	4653      	mov	r3, sl
 80056d6:	4632      	mov	r2, r6
 80056d8:	f000 fcea 	bl	80060b0 <_dtoa_r>
 80056dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056e0:	4607      	mov	r7, r0
 80056e2:	d102      	bne.n	80056ea <__cvt+0x66>
 80056e4:	f019 0f01 	tst.w	r9, #1
 80056e8:	d022      	beq.n	8005730 <__cvt+0xac>
 80056ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056ee:	eb07 0906 	add.w	r9, r7, r6
 80056f2:	d110      	bne.n	8005716 <__cvt+0x92>
 80056f4:	783b      	ldrb	r3, [r7, #0]
 80056f6:	2b30      	cmp	r3, #48	; 0x30
 80056f8:	d10a      	bne.n	8005710 <__cvt+0x8c>
 80056fa:	2200      	movs	r2, #0
 80056fc:	2300      	movs	r3, #0
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	f7fb f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005706:	b918      	cbnz	r0, 8005710 <__cvt+0x8c>
 8005708:	f1c6 0601 	rsb	r6, r6, #1
 800570c:	f8ca 6000 	str.w	r6, [sl]
 8005710:	f8da 3000 	ldr.w	r3, [sl]
 8005714:	4499      	add	r9, r3
 8005716:	2200      	movs	r2, #0
 8005718:	2300      	movs	r3, #0
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fb f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 8005722:	b108      	cbz	r0, 8005728 <__cvt+0xa4>
 8005724:	f8cd 900c 	str.w	r9, [sp, #12]
 8005728:	2230      	movs	r2, #48	; 0x30
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	454b      	cmp	r3, r9
 800572e:	d307      	bcc.n	8005740 <__cvt+0xbc>
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005734:	1bdb      	subs	r3, r3, r7
 8005736:	4638      	mov	r0, r7
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	b004      	add	sp, #16
 800573c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005740:	1c59      	adds	r1, r3, #1
 8005742:	9103      	str	r1, [sp, #12]
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e7f0      	b.n	800572a <__cvt+0xa6>

08005748 <__exponent>:
 8005748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800574a:	4603      	mov	r3, r0
 800574c:	2900      	cmp	r1, #0
 800574e:	bfb8      	it	lt
 8005750:	4249      	neglt	r1, r1
 8005752:	f803 2b02 	strb.w	r2, [r3], #2
 8005756:	bfb4      	ite	lt
 8005758:	222d      	movlt	r2, #45	; 0x2d
 800575a:	222b      	movge	r2, #43	; 0x2b
 800575c:	2909      	cmp	r1, #9
 800575e:	7042      	strb	r2, [r0, #1]
 8005760:	dd2a      	ble.n	80057b8 <__exponent+0x70>
 8005762:	f10d 0407 	add.w	r4, sp, #7
 8005766:	46a4      	mov	ip, r4
 8005768:	270a      	movs	r7, #10
 800576a:	46a6      	mov	lr, r4
 800576c:	460a      	mov	r2, r1
 800576e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005772:	fb07 1516 	mls	r5, r7, r6, r1
 8005776:	3530      	adds	r5, #48	; 0x30
 8005778:	2a63      	cmp	r2, #99	; 0x63
 800577a:	f104 34ff 	add.w	r4, r4, #4294967295
 800577e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005782:	4631      	mov	r1, r6
 8005784:	dcf1      	bgt.n	800576a <__exponent+0x22>
 8005786:	3130      	adds	r1, #48	; 0x30
 8005788:	f1ae 0502 	sub.w	r5, lr, #2
 800578c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005790:	1c44      	adds	r4, r0, #1
 8005792:	4629      	mov	r1, r5
 8005794:	4561      	cmp	r1, ip
 8005796:	d30a      	bcc.n	80057ae <__exponent+0x66>
 8005798:	f10d 0209 	add.w	r2, sp, #9
 800579c:	eba2 020e 	sub.w	r2, r2, lr
 80057a0:	4565      	cmp	r5, ip
 80057a2:	bf88      	it	hi
 80057a4:	2200      	movhi	r2, #0
 80057a6:	4413      	add	r3, r2
 80057a8:	1a18      	subs	r0, r3, r0
 80057aa:	b003      	add	sp, #12
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057b6:	e7ed      	b.n	8005794 <__exponent+0x4c>
 80057b8:	2330      	movs	r3, #48	; 0x30
 80057ba:	3130      	adds	r1, #48	; 0x30
 80057bc:	7083      	strb	r3, [r0, #2]
 80057be:	70c1      	strb	r1, [r0, #3]
 80057c0:	1d03      	adds	r3, r0, #4
 80057c2:	e7f1      	b.n	80057a8 <__exponent+0x60>

080057c4 <_printf_float>:
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	ed2d 8b02 	vpush	{d8}
 80057cc:	b08d      	sub	sp, #52	; 0x34
 80057ce:	460c      	mov	r4, r1
 80057d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057d4:	4616      	mov	r6, r2
 80057d6:	461f      	mov	r7, r3
 80057d8:	4605      	mov	r5, r0
 80057da:	f001 fa55 	bl	8006c88 <_localeconv_r>
 80057de:	f8d0 a000 	ldr.w	sl, [r0]
 80057e2:	4650      	mov	r0, sl
 80057e4:	f7fa fcfc 	bl	80001e0 <strlen>
 80057e8:	2300      	movs	r3, #0
 80057ea:	930a      	str	r3, [sp, #40]	; 0x28
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	9305      	str	r3, [sp, #20]
 80057f0:	f8d8 3000 	ldr.w	r3, [r8]
 80057f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057f8:	3307      	adds	r3, #7
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	f103 0208 	add.w	r2, r3, #8
 8005802:	f8c8 2000 	str.w	r2, [r8]
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800580e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005812:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005816:	9307      	str	r3, [sp, #28]
 8005818:	f8cd 8018 	str.w	r8, [sp, #24]
 800581c:	ee08 0a10 	vmov	s16, r0
 8005820:	4b9f      	ldr	r3, [pc, #636]	; (8005aa0 <_printf_float+0x2dc>)
 8005822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005826:	f04f 32ff 	mov.w	r2, #4294967295
 800582a:	f7fb f987 	bl	8000b3c <__aeabi_dcmpun>
 800582e:	bb88      	cbnz	r0, 8005894 <_printf_float+0xd0>
 8005830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005834:	4b9a      	ldr	r3, [pc, #616]	; (8005aa0 <_printf_float+0x2dc>)
 8005836:	f04f 32ff 	mov.w	r2, #4294967295
 800583a:	f7fb f961 	bl	8000b00 <__aeabi_dcmple>
 800583e:	bb48      	cbnz	r0, 8005894 <_printf_float+0xd0>
 8005840:	2200      	movs	r2, #0
 8005842:	2300      	movs	r3, #0
 8005844:	4640      	mov	r0, r8
 8005846:	4649      	mov	r1, r9
 8005848:	f7fb f950 	bl	8000aec <__aeabi_dcmplt>
 800584c:	b110      	cbz	r0, 8005854 <_printf_float+0x90>
 800584e:	232d      	movs	r3, #45	; 0x2d
 8005850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005854:	4b93      	ldr	r3, [pc, #588]	; (8005aa4 <_printf_float+0x2e0>)
 8005856:	4894      	ldr	r0, [pc, #592]	; (8005aa8 <_printf_float+0x2e4>)
 8005858:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800585c:	bf94      	ite	ls
 800585e:	4698      	movls	r8, r3
 8005860:	4680      	movhi	r8, r0
 8005862:	2303      	movs	r3, #3
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	9b05      	ldr	r3, [sp, #20]
 8005868:	f023 0204 	bic.w	r2, r3, #4
 800586c:	6022      	str	r2, [r4, #0]
 800586e:	f04f 0900 	mov.w	r9, #0
 8005872:	9700      	str	r7, [sp, #0]
 8005874:	4633      	mov	r3, r6
 8005876:	aa0b      	add	r2, sp, #44	; 0x2c
 8005878:	4621      	mov	r1, r4
 800587a:	4628      	mov	r0, r5
 800587c:	f000 f9d8 	bl	8005c30 <_printf_common>
 8005880:	3001      	adds	r0, #1
 8005882:	f040 8090 	bne.w	80059a6 <_printf_float+0x1e2>
 8005886:	f04f 30ff 	mov.w	r0, #4294967295
 800588a:	b00d      	add	sp, #52	; 0x34
 800588c:	ecbd 8b02 	vpop	{d8}
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	4640      	mov	r0, r8
 800589a:	4649      	mov	r1, r9
 800589c:	f7fb f94e 	bl	8000b3c <__aeabi_dcmpun>
 80058a0:	b140      	cbz	r0, 80058b4 <_printf_float+0xf0>
 80058a2:	464b      	mov	r3, r9
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bfbc      	itt	lt
 80058a8:	232d      	movlt	r3, #45	; 0x2d
 80058aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058ae:	487f      	ldr	r0, [pc, #508]	; (8005aac <_printf_float+0x2e8>)
 80058b0:	4b7f      	ldr	r3, [pc, #508]	; (8005ab0 <_printf_float+0x2ec>)
 80058b2:	e7d1      	b.n	8005858 <_printf_float+0x94>
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058ba:	9206      	str	r2, [sp, #24]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	d13f      	bne.n	8005940 <_printf_float+0x17c>
 80058c0:	2306      	movs	r3, #6
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	9b05      	ldr	r3, [sp, #20]
 80058c6:	6861      	ldr	r1, [r4, #4]
 80058c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058cc:	2300      	movs	r3, #0
 80058ce:	9303      	str	r3, [sp, #12]
 80058d0:	ab0a      	add	r3, sp, #40	; 0x28
 80058d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058d6:	ab09      	add	r3, sp, #36	; 0x24
 80058d8:	ec49 8b10 	vmov	d0, r8, r9
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	6022      	str	r2, [r4, #0]
 80058e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058e4:	4628      	mov	r0, r5
 80058e6:	f7ff fecd 	bl	8005684 <__cvt>
 80058ea:	9b06      	ldr	r3, [sp, #24]
 80058ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ee:	2b47      	cmp	r3, #71	; 0x47
 80058f0:	4680      	mov	r8, r0
 80058f2:	d108      	bne.n	8005906 <_printf_float+0x142>
 80058f4:	1cc8      	adds	r0, r1, #3
 80058f6:	db02      	blt.n	80058fe <_printf_float+0x13a>
 80058f8:	6863      	ldr	r3, [r4, #4]
 80058fa:	4299      	cmp	r1, r3
 80058fc:	dd41      	ble.n	8005982 <_printf_float+0x1be>
 80058fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8005902:	fa5f fb8b 	uxtb.w	fp, fp
 8005906:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800590a:	d820      	bhi.n	800594e <_printf_float+0x18a>
 800590c:	3901      	subs	r1, #1
 800590e:	465a      	mov	r2, fp
 8005910:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005914:	9109      	str	r1, [sp, #36]	; 0x24
 8005916:	f7ff ff17 	bl	8005748 <__exponent>
 800591a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800591c:	1813      	adds	r3, r2, r0
 800591e:	2a01      	cmp	r2, #1
 8005920:	4681      	mov	r9, r0
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	dc02      	bgt.n	800592c <_printf_float+0x168>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	07d2      	lsls	r2, r2, #31
 800592a:	d501      	bpl.n	8005930 <_printf_float+0x16c>
 800592c:	3301      	adds	r3, #1
 800592e:	6123      	str	r3, [r4, #16]
 8005930:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005934:	2b00      	cmp	r3, #0
 8005936:	d09c      	beq.n	8005872 <_printf_float+0xae>
 8005938:	232d      	movs	r3, #45	; 0x2d
 800593a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800593e:	e798      	b.n	8005872 <_printf_float+0xae>
 8005940:	9a06      	ldr	r2, [sp, #24]
 8005942:	2a47      	cmp	r2, #71	; 0x47
 8005944:	d1be      	bne.n	80058c4 <_printf_float+0x100>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1bc      	bne.n	80058c4 <_printf_float+0x100>
 800594a:	2301      	movs	r3, #1
 800594c:	e7b9      	b.n	80058c2 <_printf_float+0xfe>
 800594e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005952:	d118      	bne.n	8005986 <_printf_float+0x1c2>
 8005954:	2900      	cmp	r1, #0
 8005956:	6863      	ldr	r3, [r4, #4]
 8005958:	dd0b      	ble.n	8005972 <_printf_float+0x1ae>
 800595a:	6121      	str	r1, [r4, #16]
 800595c:	b913      	cbnz	r3, 8005964 <_printf_float+0x1a0>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	07d0      	lsls	r0, r2, #31
 8005962:	d502      	bpl.n	800596a <_printf_float+0x1a6>
 8005964:	3301      	adds	r3, #1
 8005966:	440b      	add	r3, r1
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	65a1      	str	r1, [r4, #88]	; 0x58
 800596c:	f04f 0900 	mov.w	r9, #0
 8005970:	e7de      	b.n	8005930 <_printf_float+0x16c>
 8005972:	b913      	cbnz	r3, 800597a <_printf_float+0x1b6>
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	07d2      	lsls	r2, r2, #31
 8005978:	d501      	bpl.n	800597e <_printf_float+0x1ba>
 800597a:	3302      	adds	r3, #2
 800597c:	e7f4      	b.n	8005968 <_printf_float+0x1a4>
 800597e:	2301      	movs	r3, #1
 8005980:	e7f2      	b.n	8005968 <_printf_float+0x1a4>
 8005982:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005988:	4299      	cmp	r1, r3
 800598a:	db05      	blt.n	8005998 <_printf_float+0x1d4>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	6121      	str	r1, [r4, #16]
 8005990:	07d8      	lsls	r0, r3, #31
 8005992:	d5ea      	bpl.n	800596a <_printf_float+0x1a6>
 8005994:	1c4b      	adds	r3, r1, #1
 8005996:	e7e7      	b.n	8005968 <_printf_float+0x1a4>
 8005998:	2900      	cmp	r1, #0
 800599a:	bfd4      	ite	le
 800599c:	f1c1 0202 	rsble	r2, r1, #2
 80059a0:	2201      	movgt	r2, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	e7e0      	b.n	8005968 <_printf_float+0x1a4>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	055a      	lsls	r2, r3, #21
 80059aa:	d407      	bmi.n	80059bc <_printf_float+0x1f8>
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	4642      	mov	r2, r8
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b8      	blx	r7
 80059b6:	3001      	adds	r0, #1
 80059b8:	d12c      	bne.n	8005a14 <_printf_float+0x250>
 80059ba:	e764      	b.n	8005886 <_printf_float+0xc2>
 80059bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059c0:	f240 80e0 	bls.w	8005b84 <_printf_float+0x3c0>
 80059c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059c8:	2200      	movs	r2, #0
 80059ca:	2300      	movs	r3, #0
 80059cc:	f7fb f884 	bl	8000ad8 <__aeabi_dcmpeq>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d034      	beq.n	8005a3e <_printf_float+0x27a>
 80059d4:	4a37      	ldr	r2, [pc, #220]	; (8005ab4 <_printf_float+0x2f0>)
 80059d6:	2301      	movs	r3, #1
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f af51 	beq.w	8005886 <_printf_float+0xc2>
 80059e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059e8:	429a      	cmp	r2, r3
 80059ea:	db02      	blt.n	80059f2 <_printf_float+0x22e>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	07d8      	lsls	r0, r3, #31
 80059f0:	d510      	bpl.n	8005a14 <_printf_float+0x250>
 80059f2:	ee18 3a10 	vmov	r3, s16
 80059f6:	4652      	mov	r2, sl
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f43f af41 	beq.w	8005886 <_printf_float+0xc2>
 8005a04:	f04f 0800 	mov.w	r8, #0
 8005a08:	f104 091a 	add.w	r9, r4, #26
 8005a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	4543      	cmp	r3, r8
 8005a12:	dc09      	bgt.n	8005a28 <_printf_float+0x264>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	079b      	lsls	r3, r3, #30
 8005a18:	f100 8105 	bmi.w	8005c26 <_printf_float+0x462>
 8005a1c:	68e0      	ldr	r0, [r4, #12]
 8005a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a20:	4298      	cmp	r0, r3
 8005a22:	bfb8      	it	lt
 8005a24:	4618      	movlt	r0, r3
 8005a26:	e730      	b.n	800588a <_printf_float+0xc6>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	464a      	mov	r2, r9
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	f43f af27 	beq.w	8005886 <_printf_float+0xc2>
 8005a38:	f108 0801 	add.w	r8, r8, #1
 8005a3c:	e7e6      	b.n	8005a0c <_printf_float+0x248>
 8005a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	dc39      	bgt.n	8005ab8 <_printf_float+0x2f4>
 8005a44:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <_printf_float+0x2f0>)
 8005a46:	2301      	movs	r3, #1
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af19 	beq.w	8005886 <_printf_float+0xc2>
 8005a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	d102      	bne.n	8005a62 <_printf_float+0x29e>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	07d9      	lsls	r1, r3, #31
 8005a60:	d5d8      	bpl.n	8005a14 <_printf_float+0x250>
 8005a62:	ee18 3a10 	vmov	r3, s16
 8005a66:	4652      	mov	r2, sl
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f43f af09 	beq.w	8005886 <_printf_float+0xc2>
 8005a74:	f04f 0900 	mov.w	r9, #0
 8005a78:	f104 0a1a 	add.w	sl, r4, #26
 8005a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7e:	425b      	negs	r3, r3
 8005a80:	454b      	cmp	r3, r9
 8005a82:	dc01      	bgt.n	8005a88 <_printf_float+0x2c4>
 8005a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a86:	e792      	b.n	80059ae <_printf_float+0x1ea>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4652      	mov	r2, sl
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	f43f aef7 	beq.w	8005886 <_printf_float+0xc2>
 8005a98:	f109 0901 	add.w	r9, r9, #1
 8005a9c:	e7ee      	b.n	8005a7c <_printf_float+0x2b8>
 8005a9e:	bf00      	nop
 8005aa0:	7fefffff 	.word	0x7fefffff
 8005aa4:	08008444 	.word	0x08008444
 8005aa8:	08008448 	.word	0x08008448
 8005aac:	08008450 	.word	0x08008450
 8005ab0:	0800844c 	.word	0x0800844c
 8005ab4:	08008454 	.word	0x08008454
 8005ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005abc:	429a      	cmp	r2, r3
 8005abe:	bfa8      	it	ge
 8005ac0:	461a      	movge	r2, r3
 8005ac2:	2a00      	cmp	r2, #0
 8005ac4:	4691      	mov	r9, r2
 8005ac6:	dc37      	bgt.n	8005b38 <_printf_float+0x374>
 8005ac8:	f04f 0b00 	mov.w	fp, #0
 8005acc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ad0:	f104 021a 	add.w	r2, r4, #26
 8005ad4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ad6:	9305      	str	r3, [sp, #20]
 8005ad8:	eba3 0309 	sub.w	r3, r3, r9
 8005adc:	455b      	cmp	r3, fp
 8005ade:	dc33      	bgt.n	8005b48 <_printf_float+0x384>
 8005ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	db3b      	blt.n	8005b60 <_printf_float+0x39c>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	07da      	lsls	r2, r3, #31
 8005aec:	d438      	bmi.n	8005b60 <_printf_float+0x39c>
 8005aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005af0:	9b05      	ldr	r3, [sp, #20]
 8005af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	eba2 0901 	sub.w	r9, r2, r1
 8005afa:	4599      	cmp	r9, r3
 8005afc:	bfa8      	it	ge
 8005afe:	4699      	movge	r9, r3
 8005b00:	f1b9 0f00 	cmp.w	r9, #0
 8005b04:	dc35      	bgt.n	8005b72 <_printf_float+0x3ae>
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b0e:	f104 0a1a 	add.w	sl, r4, #26
 8005b12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	eba3 0309 	sub.w	r3, r3, r9
 8005b1c:	4543      	cmp	r3, r8
 8005b1e:	f77f af79 	ble.w	8005a14 <_printf_float+0x250>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4652      	mov	r2, sl
 8005b26:	4631      	mov	r1, r6
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b8      	blx	r7
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	f43f aeaa 	beq.w	8005886 <_printf_float+0xc2>
 8005b32:	f108 0801 	add.w	r8, r8, #1
 8005b36:	e7ec      	b.n	8005b12 <_printf_float+0x34e>
 8005b38:	4613      	mov	r3, r2
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	4628      	mov	r0, r5
 8005b40:	47b8      	blx	r7
 8005b42:	3001      	adds	r0, #1
 8005b44:	d1c0      	bne.n	8005ac8 <_printf_float+0x304>
 8005b46:	e69e      	b.n	8005886 <_printf_float+0xc2>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	9205      	str	r2, [sp, #20]
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f ae97 	beq.w	8005886 <_printf_float+0xc2>
 8005b58:	9a05      	ldr	r2, [sp, #20]
 8005b5a:	f10b 0b01 	add.w	fp, fp, #1
 8005b5e:	e7b9      	b.n	8005ad4 <_printf_float+0x310>
 8005b60:	ee18 3a10 	vmov	r3, s16
 8005b64:	4652      	mov	r2, sl
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d1be      	bne.n	8005aee <_printf_float+0x32a>
 8005b70:	e689      	b.n	8005886 <_printf_float+0xc2>
 8005b72:	9a05      	ldr	r2, [sp, #20]
 8005b74:	464b      	mov	r3, r9
 8005b76:	4442      	add	r2, r8
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	47b8      	blx	r7
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d1c1      	bne.n	8005b06 <_printf_float+0x342>
 8005b82:	e680      	b.n	8005886 <_printf_float+0xc2>
 8005b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b86:	2a01      	cmp	r2, #1
 8005b88:	dc01      	bgt.n	8005b8e <_printf_float+0x3ca>
 8005b8a:	07db      	lsls	r3, r3, #31
 8005b8c:	d538      	bpl.n	8005c00 <_printf_float+0x43c>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4642      	mov	r2, r8
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f ae74 	beq.w	8005886 <_printf_float+0xc2>
 8005b9e:	ee18 3a10 	vmov	r3, s16
 8005ba2:	4652      	mov	r2, sl
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f ae6b 	beq.w	8005886 <_printf_float+0xc2>
 8005bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f7fa ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bbc:	b9d8      	cbnz	r0, 8005bf6 <_printf_float+0x432>
 8005bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc0:	f108 0201 	add.w	r2, r8, #1
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d10e      	bne.n	8005bee <_printf_float+0x42a>
 8005bd0:	e659      	b.n	8005886 <_printf_float+0xc2>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	4652      	mov	r2, sl
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f43f ae52 	beq.w	8005886 <_printf_float+0xc2>
 8005be2:	f108 0801 	add.w	r8, r8, #1
 8005be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be8:	3b01      	subs	r3, #1
 8005bea:	4543      	cmp	r3, r8
 8005bec:	dcf1      	bgt.n	8005bd2 <_printf_float+0x40e>
 8005bee:	464b      	mov	r3, r9
 8005bf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bf4:	e6dc      	b.n	80059b0 <_printf_float+0x1ec>
 8005bf6:	f04f 0800 	mov.w	r8, #0
 8005bfa:	f104 0a1a 	add.w	sl, r4, #26
 8005bfe:	e7f2      	b.n	8005be6 <_printf_float+0x422>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4642      	mov	r2, r8
 8005c04:	e7df      	b.n	8005bc6 <_printf_float+0x402>
 8005c06:	2301      	movs	r3, #1
 8005c08:	464a      	mov	r2, r9
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f ae38 	beq.w	8005886 <_printf_float+0xc2>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	68e3      	ldr	r3, [r4, #12]
 8005c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c1e:	1a5b      	subs	r3, r3, r1
 8005c20:	4543      	cmp	r3, r8
 8005c22:	dcf0      	bgt.n	8005c06 <_printf_float+0x442>
 8005c24:	e6fa      	b.n	8005a1c <_printf_float+0x258>
 8005c26:	f04f 0800 	mov.w	r8, #0
 8005c2a:	f104 0919 	add.w	r9, r4, #25
 8005c2e:	e7f4      	b.n	8005c1a <_printf_float+0x456>

08005c30 <_printf_common>:
 8005c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	4616      	mov	r6, r2
 8005c36:	4699      	mov	r9, r3
 8005c38:	688a      	ldr	r2, [r1, #8]
 8005c3a:	690b      	ldr	r3, [r1, #16]
 8005c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c40:	4293      	cmp	r3, r2
 8005c42:	bfb8      	it	lt
 8005c44:	4613      	movlt	r3, r2
 8005c46:	6033      	str	r3, [r6, #0]
 8005c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	b10a      	cbz	r2, 8005c56 <_printf_common+0x26>
 8005c52:	3301      	adds	r3, #1
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	0699      	lsls	r1, r3, #26
 8005c5a:	bf42      	ittt	mi
 8005c5c:	6833      	ldrmi	r3, [r6, #0]
 8005c5e:	3302      	addmi	r3, #2
 8005c60:	6033      	strmi	r3, [r6, #0]
 8005c62:	6825      	ldr	r5, [r4, #0]
 8005c64:	f015 0506 	ands.w	r5, r5, #6
 8005c68:	d106      	bne.n	8005c78 <_printf_common+0x48>
 8005c6a:	f104 0a19 	add.w	sl, r4, #25
 8005c6e:	68e3      	ldr	r3, [r4, #12]
 8005c70:	6832      	ldr	r2, [r6, #0]
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	42ab      	cmp	r3, r5
 8005c76:	dc26      	bgt.n	8005cc6 <_printf_common+0x96>
 8005c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c7c:	1e13      	subs	r3, r2, #0
 8005c7e:	6822      	ldr	r2, [r4, #0]
 8005c80:	bf18      	it	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	0692      	lsls	r2, r2, #26
 8005c86:	d42b      	bmi.n	8005ce0 <_printf_common+0xb0>
 8005c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	4638      	mov	r0, r7
 8005c90:	47c0      	blx	r8
 8005c92:	3001      	adds	r0, #1
 8005c94:	d01e      	beq.n	8005cd4 <_printf_common+0xa4>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	68e5      	ldr	r5, [r4, #12]
 8005c9a:	6832      	ldr	r2, [r6, #0]
 8005c9c:	f003 0306 	and.w	r3, r3, #6
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	bf08      	it	eq
 8005ca4:	1aad      	subeq	r5, r5, r2
 8005ca6:	68a3      	ldr	r3, [r4, #8]
 8005ca8:	6922      	ldr	r2, [r4, #16]
 8005caa:	bf0c      	ite	eq
 8005cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb0:	2500      	movne	r5, #0
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	bfc4      	itt	gt
 8005cb6:	1a9b      	subgt	r3, r3, r2
 8005cb8:	18ed      	addgt	r5, r5, r3
 8005cba:	2600      	movs	r6, #0
 8005cbc:	341a      	adds	r4, #26
 8005cbe:	42b5      	cmp	r5, r6
 8005cc0:	d11a      	bne.n	8005cf8 <_printf_common+0xc8>
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e008      	b.n	8005cd8 <_printf_common+0xa8>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4652      	mov	r2, sl
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4638      	mov	r0, r7
 8005cce:	47c0      	blx	r8
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d103      	bne.n	8005cdc <_printf_common+0xac>
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cdc:	3501      	adds	r5, #1
 8005cde:	e7c6      	b.n	8005c6e <_printf_common+0x3e>
 8005ce0:	18e1      	adds	r1, r4, r3
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	2030      	movs	r0, #48	; 0x30
 8005ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cea:	4422      	add	r2, r4
 8005cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	e7c7      	b.n	8005c88 <_printf_common+0x58>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	4638      	mov	r0, r7
 8005d00:	47c0      	blx	r8
 8005d02:	3001      	adds	r0, #1
 8005d04:	d0e6      	beq.n	8005cd4 <_printf_common+0xa4>
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7d9      	b.n	8005cbe <_printf_common+0x8e>
	...

08005d0c <_printf_i>:
 8005d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	460c      	mov	r4, r1
 8005d12:	4691      	mov	r9, r2
 8005d14:	7e27      	ldrb	r7, [r4, #24]
 8005d16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d18:	2f78      	cmp	r7, #120	; 0x78
 8005d1a:	4680      	mov	r8, r0
 8005d1c:	469a      	mov	sl, r3
 8005d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d22:	d807      	bhi.n	8005d34 <_printf_i+0x28>
 8005d24:	2f62      	cmp	r7, #98	; 0x62
 8005d26:	d80a      	bhi.n	8005d3e <_printf_i+0x32>
 8005d28:	2f00      	cmp	r7, #0
 8005d2a:	f000 80d8 	beq.w	8005ede <_printf_i+0x1d2>
 8005d2e:	2f58      	cmp	r7, #88	; 0x58
 8005d30:	f000 80a3 	beq.w	8005e7a <_printf_i+0x16e>
 8005d34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d3c:	e03a      	b.n	8005db4 <_printf_i+0xa8>
 8005d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d42:	2b15      	cmp	r3, #21
 8005d44:	d8f6      	bhi.n	8005d34 <_printf_i+0x28>
 8005d46:	a001      	add	r0, pc, #4	; (adr r0, 8005d4c <_printf_i+0x40>)
 8005d48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d4c:	08005da5 	.word	0x08005da5
 8005d50:	08005db9 	.word	0x08005db9
 8005d54:	08005d35 	.word	0x08005d35
 8005d58:	08005d35 	.word	0x08005d35
 8005d5c:	08005d35 	.word	0x08005d35
 8005d60:	08005d35 	.word	0x08005d35
 8005d64:	08005db9 	.word	0x08005db9
 8005d68:	08005d35 	.word	0x08005d35
 8005d6c:	08005d35 	.word	0x08005d35
 8005d70:	08005d35 	.word	0x08005d35
 8005d74:	08005d35 	.word	0x08005d35
 8005d78:	08005ec5 	.word	0x08005ec5
 8005d7c:	08005de9 	.word	0x08005de9
 8005d80:	08005ea7 	.word	0x08005ea7
 8005d84:	08005d35 	.word	0x08005d35
 8005d88:	08005d35 	.word	0x08005d35
 8005d8c:	08005ee7 	.word	0x08005ee7
 8005d90:	08005d35 	.word	0x08005d35
 8005d94:	08005de9 	.word	0x08005de9
 8005d98:	08005d35 	.word	0x08005d35
 8005d9c:	08005d35 	.word	0x08005d35
 8005da0:	08005eaf 	.word	0x08005eaf
 8005da4:	680b      	ldr	r3, [r1, #0]
 8005da6:	1d1a      	adds	r2, r3, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	600a      	str	r2, [r1, #0]
 8005dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0a3      	b.n	8005f00 <_printf_i+0x1f4>
 8005db8:	6825      	ldr	r5, [r4, #0]
 8005dba:	6808      	ldr	r0, [r1, #0]
 8005dbc:	062e      	lsls	r6, r5, #24
 8005dbe:	f100 0304 	add.w	r3, r0, #4
 8005dc2:	d50a      	bpl.n	8005dda <_printf_i+0xce>
 8005dc4:	6805      	ldr	r5, [r0, #0]
 8005dc6:	600b      	str	r3, [r1, #0]
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	da03      	bge.n	8005dd4 <_printf_i+0xc8>
 8005dcc:	232d      	movs	r3, #45	; 0x2d
 8005dce:	426d      	negs	r5, r5
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd4:	485e      	ldr	r0, [pc, #376]	; (8005f50 <_printf_i+0x244>)
 8005dd6:	230a      	movs	r3, #10
 8005dd8:	e019      	b.n	8005e0e <_printf_i+0x102>
 8005dda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005dde:	6805      	ldr	r5, [r0, #0]
 8005de0:	600b      	str	r3, [r1, #0]
 8005de2:	bf18      	it	ne
 8005de4:	b22d      	sxthne	r5, r5
 8005de6:	e7ef      	b.n	8005dc8 <_printf_i+0xbc>
 8005de8:	680b      	ldr	r3, [r1, #0]
 8005dea:	6825      	ldr	r5, [r4, #0]
 8005dec:	1d18      	adds	r0, r3, #4
 8005dee:	6008      	str	r0, [r1, #0]
 8005df0:	0628      	lsls	r0, r5, #24
 8005df2:	d501      	bpl.n	8005df8 <_printf_i+0xec>
 8005df4:	681d      	ldr	r5, [r3, #0]
 8005df6:	e002      	b.n	8005dfe <_printf_i+0xf2>
 8005df8:	0669      	lsls	r1, r5, #25
 8005dfa:	d5fb      	bpl.n	8005df4 <_printf_i+0xe8>
 8005dfc:	881d      	ldrh	r5, [r3, #0]
 8005dfe:	4854      	ldr	r0, [pc, #336]	; (8005f50 <_printf_i+0x244>)
 8005e00:	2f6f      	cmp	r7, #111	; 0x6f
 8005e02:	bf0c      	ite	eq
 8005e04:	2308      	moveq	r3, #8
 8005e06:	230a      	movne	r3, #10
 8005e08:	2100      	movs	r1, #0
 8005e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e0e:	6866      	ldr	r6, [r4, #4]
 8005e10:	60a6      	str	r6, [r4, #8]
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	bfa2      	ittt	ge
 8005e16:	6821      	ldrge	r1, [r4, #0]
 8005e18:	f021 0104 	bicge.w	r1, r1, #4
 8005e1c:	6021      	strge	r1, [r4, #0]
 8005e1e:	b90d      	cbnz	r5, 8005e24 <_printf_i+0x118>
 8005e20:	2e00      	cmp	r6, #0
 8005e22:	d04d      	beq.n	8005ec0 <_printf_i+0x1b4>
 8005e24:	4616      	mov	r6, r2
 8005e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e2e:	5dc7      	ldrb	r7, [r0, r7]
 8005e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e34:	462f      	mov	r7, r5
 8005e36:	42bb      	cmp	r3, r7
 8005e38:	460d      	mov	r5, r1
 8005e3a:	d9f4      	bls.n	8005e26 <_printf_i+0x11a>
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d10b      	bne.n	8005e58 <_printf_i+0x14c>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	07df      	lsls	r7, r3, #31
 8005e44:	d508      	bpl.n	8005e58 <_printf_i+0x14c>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	6861      	ldr	r1, [r4, #4]
 8005e4a:	4299      	cmp	r1, r3
 8005e4c:	bfde      	ittt	le
 8005e4e:	2330      	movle	r3, #48	; 0x30
 8005e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e58:	1b92      	subs	r2, r2, r6
 8005e5a:	6122      	str	r2, [r4, #16]
 8005e5c:	f8cd a000 	str.w	sl, [sp]
 8005e60:	464b      	mov	r3, r9
 8005e62:	aa03      	add	r2, sp, #12
 8005e64:	4621      	mov	r1, r4
 8005e66:	4640      	mov	r0, r8
 8005e68:	f7ff fee2 	bl	8005c30 <_printf_common>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d14c      	bne.n	8005f0a <_printf_i+0x1fe>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	b004      	add	sp, #16
 8005e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7a:	4835      	ldr	r0, [pc, #212]	; (8005f50 <_printf_i+0x244>)
 8005e7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	680e      	ldr	r6, [r1, #0]
 8005e84:	061f      	lsls	r7, r3, #24
 8005e86:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e8a:	600e      	str	r6, [r1, #0]
 8005e8c:	d514      	bpl.n	8005eb8 <_printf_i+0x1ac>
 8005e8e:	07d9      	lsls	r1, r3, #31
 8005e90:	bf44      	itt	mi
 8005e92:	f043 0320 	orrmi.w	r3, r3, #32
 8005e96:	6023      	strmi	r3, [r4, #0]
 8005e98:	b91d      	cbnz	r5, 8005ea2 <_printf_i+0x196>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	f023 0320 	bic.w	r3, r3, #32
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	2310      	movs	r3, #16
 8005ea4:	e7b0      	b.n	8005e08 <_printf_i+0xfc>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	f043 0320 	orr.w	r3, r3, #32
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	2378      	movs	r3, #120	; 0x78
 8005eb0:	4828      	ldr	r0, [pc, #160]	; (8005f54 <_printf_i+0x248>)
 8005eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eb6:	e7e3      	b.n	8005e80 <_printf_i+0x174>
 8005eb8:	065e      	lsls	r6, r3, #25
 8005eba:	bf48      	it	mi
 8005ebc:	b2ad      	uxthmi	r5, r5
 8005ebe:	e7e6      	b.n	8005e8e <_printf_i+0x182>
 8005ec0:	4616      	mov	r6, r2
 8005ec2:	e7bb      	b.n	8005e3c <_printf_i+0x130>
 8005ec4:	680b      	ldr	r3, [r1, #0]
 8005ec6:	6826      	ldr	r6, [r4, #0]
 8005ec8:	6960      	ldr	r0, [r4, #20]
 8005eca:	1d1d      	adds	r5, r3, #4
 8005ecc:	600d      	str	r5, [r1, #0]
 8005ece:	0635      	lsls	r5, r6, #24
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	d501      	bpl.n	8005ed8 <_printf_i+0x1cc>
 8005ed4:	6018      	str	r0, [r3, #0]
 8005ed6:	e002      	b.n	8005ede <_printf_i+0x1d2>
 8005ed8:	0671      	lsls	r1, r6, #25
 8005eda:	d5fb      	bpl.n	8005ed4 <_printf_i+0x1c8>
 8005edc:	8018      	strh	r0, [r3, #0]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	4616      	mov	r6, r2
 8005ee4:	e7ba      	b.n	8005e5c <_printf_i+0x150>
 8005ee6:	680b      	ldr	r3, [r1, #0]
 8005ee8:	1d1a      	adds	r2, r3, #4
 8005eea:	600a      	str	r2, [r1, #0]
 8005eec:	681e      	ldr	r6, [r3, #0]
 8005eee:	6862      	ldr	r2, [r4, #4]
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7fa f97c 	bl	80001f0 <memchr>
 8005ef8:	b108      	cbz	r0, 8005efe <_printf_i+0x1f2>
 8005efa:	1b80      	subs	r0, r0, r6
 8005efc:	6060      	str	r0, [r4, #4]
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	2300      	movs	r3, #0
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f08:	e7a8      	b.n	8005e5c <_printf_i+0x150>
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	4649      	mov	r1, r9
 8005f10:	4640      	mov	r0, r8
 8005f12:	47d0      	blx	sl
 8005f14:	3001      	adds	r0, #1
 8005f16:	d0ab      	beq.n	8005e70 <_printf_i+0x164>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	079b      	lsls	r3, r3, #30
 8005f1c:	d413      	bmi.n	8005f46 <_printf_i+0x23a>
 8005f1e:	68e0      	ldr	r0, [r4, #12]
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	4298      	cmp	r0, r3
 8005f24:	bfb8      	it	lt
 8005f26:	4618      	movlt	r0, r3
 8005f28:	e7a4      	b.n	8005e74 <_printf_i+0x168>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d09b      	beq.n	8005e70 <_printf_i+0x164>
 8005f38:	3501      	adds	r5, #1
 8005f3a:	68e3      	ldr	r3, [r4, #12]
 8005f3c:	9903      	ldr	r1, [sp, #12]
 8005f3e:	1a5b      	subs	r3, r3, r1
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	dcf2      	bgt.n	8005f2a <_printf_i+0x21e>
 8005f44:	e7eb      	b.n	8005f1e <_printf_i+0x212>
 8005f46:	2500      	movs	r5, #0
 8005f48:	f104 0619 	add.w	r6, r4, #25
 8005f4c:	e7f5      	b.n	8005f3a <_printf_i+0x22e>
 8005f4e:	bf00      	nop
 8005f50:	08008456 	.word	0x08008456
 8005f54:	08008467 	.word	0x08008467

08005f58 <siprintf>:
 8005f58:	b40e      	push	{r1, r2, r3}
 8005f5a:	b500      	push	{lr}
 8005f5c:	b09c      	sub	sp, #112	; 0x70
 8005f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f60:	9002      	str	r0, [sp, #8]
 8005f62:	9006      	str	r0, [sp, #24]
 8005f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f68:	4809      	ldr	r0, [pc, #36]	; (8005f90 <siprintf+0x38>)
 8005f6a:	9107      	str	r1, [sp, #28]
 8005f6c:	9104      	str	r1, [sp, #16]
 8005f6e:	4909      	ldr	r1, [pc, #36]	; (8005f94 <siprintf+0x3c>)
 8005f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f74:	9105      	str	r1, [sp, #20]
 8005f76:	6800      	ldr	r0, [r0, #0]
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	a902      	add	r1, sp, #8
 8005f7c:	f001 fb24 	bl	80075c8 <_svfiprintf_r>
 8005f80:	9b02      	ldr	r3, [sp, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	b01c      	add	sp, #112	; 0x70
 8005f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f8c:	b003      	add	sp, #12
 8005f8e:	4770      	bx	lr
 8005f90:	2000000c 	.word	0x2000000c
 8005f94:	ffff0208 	.word	0xffff0208

08005f98 <quorem>:
 8005f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	6903      	ldr	r3, [r0, #16]
 8005f9e:	690c      	ldr	r4, [r1, #16]
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	f2c0 8081 	blt.w	80060aa <quorem+0x112>
 8005fa8:	3c01      	subs	r4, #1
 8005faa:	f101 0814 	add.w	r8, r1, #20
 8005fae:	f100 0514 	add.w	r5, r0, #20
 8005fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fd0:	d331      	bcc.n	8006036 <quorem+0x9e>
 8005fd2:	f04f 0e00 	mov.w	lr, #0
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	46ac      	mov	ip, r5
 8005fda:	46f2      	mov	sl, lr
 8005fdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fe0:	b293      	uxth	r3, r2
 8005fe2:	fb06 e303 	mla	r3, r6, r3, lr
 8005fe6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ebaa 0303 	sub.w	r3, sl, r3
 8005ff0:	0c12      	lsrs	r2, r2, #16
 8005ff2:	f8dc a000 	ldr.w	sl, [ip]
 8005ff6:	fb06 e202 	mla	r2, r6, r2, lr
 8005ffa:	fa13 f38a 	uxtah	r3, r3, sl
 8005ffe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006002:	fa1f fa82 	uxth.w	sl, r2
 8006006:	f8dc 2000 	ldr.w	r2, [ip]
 800600a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800600e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006012:	b29b      	uxth	r3, r3
 8006014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006018:	4581      	cmp	r9, r0
 800601a:	f84c 3b04 	str.w	r3, [ip], #4
 800601e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006022:	d2db      	bcs.n	8005fdc <quorem+0x44>
 8006024:	f855 300b 	ldr.w	r3, [r5, fp]
 8006028:	b92b      	cbnz	r3, 8006036 <quorem+0x9e>
 800602a:	9b01      	ldr	r3, [sp, #4]
 800602c:	3b04      	subs	r3, #4
 800602e:	429d      	cmp	r5, r3
 8006030:	461a      	mov	r2, r3
 8006032:	d32e      	bcc.n	8006092 <quorem+0xfa>
 8006034:	613c      	str	r4, [r7, #16]
 8006036:	4638      	mov	r0, r7
 8006038:	f001 f8b0 	bl	800719c <__mcmp>
 800603c:	2800      	cmp	r0, #0
 800603e:	db24      	blt.n	800608a <quorem+0xf2>
 8006040:	3601      	adds	r6, #1
 8006042:	4628      	mov	r0, r5
 8006044:	f04f 0c00 	mov.w	ip, #0
 8006048:	f858 2b04 	ldr.w	r2, [r8], #4
 800604c:	f8d0 e000 	ldr.w	lr, [r0]
 8006050:	b293      	uxth	r3, r2
 8006052:	ebac 0303 	sub.w	r3, ip, r3
 8006056:	0c12      	lsrs	r2, r2, #16
 8006058:	fa13 f38e 	uxtah	r3, r3, lr
 800605c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800606a:	45c1      	cmp	r9, r8
 800606c:	f840 3b04 	str.w	r3, [r0], #4
 8006070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006074:	d2e8      	bcs.n	8006048 <quorem+0xb0>
 8006076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800607a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800607e:	b922      	cbnz	r2, 800608a <quorem+0xf2>
 8006080:	3b04      	subs	r3, #4
 8006082:	429d      	cmp	r5, r3
 8006084:	461a      	mov	r2, r3
 8006086:	d30a      	bcc.n	800609e <quorem+0x106>
 8006088:	613c      	str	r4, [r7, #16]
 800608a:	4630      	mov	r0, r6
 800608c:	b003      	add	sp, #12
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	3b04      	subs	r3, #4
 8006096:	2a00      	cmp	r2, #0
 8006098:	d1cc      	bne.n	8006034 <quorem+0x9c>
 800609a:	3c01      	subs	r4, #1
 800609c:	e7c7      	b.n	800602e <quorem+0x96>
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	3b04      	subs	r3, #4
 80060a2:	2a00      	cmp	r2, #0
 80060a4:	d1f0      	bne.n	8006088 <quorem+0xf0>
 80060a6:	3c01      	subs	r4, #1
 80060a8:	e7eb      	b.n	8006082 <quorem+0xea>
 80060aa:	2000      	movs	r0, #0
 80060ac:	e7ee      	b.n	800608c <quorem+0xf4>
	...

080060b0 <_dtoa_r>:
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	ed2d 8b02 	vpush	{d8}
 80060b8:	ec57 6b10 	vmov	r6, r7, d0
 80060bc:	b095      	sub	sp, #84	; 0x54
 80060be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060c4:	9105      	str	r1, [sp, #20]
 80060c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80060ca:	4604      	mov	r4, r0
 80060cc:	9209      	str	r2, [sp, #36]	; 0x24
 80060ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80060d0:	b975      	cbnz	r5, 80060f0 <_dtoa_r+0x40>
 80060d2:	2010      	movs	r0, #16
 80060d4:	f000 fddc 	bl	8006c90 <malloc>
 80060d8:	4602      	mov	r2, r0
 80060da:	6260      	str	r0, [r4, #36]	; 0x24
 80060dc:	b920      	cbnz	r0, 80060e8 <_dtoa_r+0x38>
 80060de:	4bb2      	ldr	r3, [pc, #712]	; (80063a8 <_dtoa_r+0x2f8>)
 80060e0:	21ea      	movs	r1, #234	; 0xea
 80060e2:	48b2      	ldr	r0, [pc, #712]	; (80063ac <_dtoa_r+0x2fc>)
 80060e4:	f001 fb80 	bl	80077e8 <__assert_func>
 80060e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060ec:	6005      	str	r5, [r0, #0]
 80060ee:	60c5      	str	r5, [r0, #12]
 80060f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060f2:	6819      	ldr	r1, [r3, #0]
 80060f4:	b151      	cbz	r1, 800610c <_dtoa_r+0x5c>
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	604a      	str	r2, [r1, #4]
 80060fa:	2301      	movs	r3, #1
 80060fc:	4093      	lsls	r3, r2
 80060fe:	608b      	str	r3, [r1, #8]
 8006100:	4620      	mov	r0, r4
 8006102:	f000 fe0d 	bl	8006d20 <_Bfree>
 8006106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	1e3b      	subs	r3, r7, #0
 800610e:	bfb9      	ittee	lt
 8006110:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006114:	9303      	strlt	r3, [sp, #12]
 8006116:	2300      	movge	r3, #0
 8006118:	f8c8 3000 	strge.w	r3, [r8]
 800611c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006120:	4ba3      	ldr	r3, [pc, #652]	; (80063b0 <_dtoa_r+0x300>)
 8006122:	bfbc      	itt	lt
 8006124:	2201      	movlt	r2, #1
 8006126:	f8c8 2000 	strlt.w	r2, [r8]
 800612a:	ea33 0309 	bics.w	r3, r3, r9
 800612e:	d11b      	bne.n	8006168 <_dtoa_r+0xb8>
 8006130:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006132:	f242 730f 	movw	r3, #9999	; 0x270f
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800613c:	4333      	orrs	r3, r6
 800613e:	f000 857a 	beq.w	8006c36 <_dtoa_r+0xb86>
 8006142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006144:	b963      	cbnz	r3, 8006160 <_dtoa_r+0xb0>
 8006146:	4b9b      	ldr	r3, [pc, #620]	; (80063b4 <_dtoa_r+0x304>)
 8006148:	e024      	b.n	8006194 <_dtoa_r+0xe4>
 800614a:	4b9b      	ldr	r3, [pc, #620]	; (80063b8 <_dtoa_r+0x308>)
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	3308      	adds	r3, #8
 8006150:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	9800      	ldr	r0, [sp, #0]
 8006156:	b015      	add	sp, #84	; 0x54
 8006158:	ecbd 8b02 	vpop	{d8}
 800615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006160:	4b94      	ldr	r3, [pc, #592]	; (80063b4 <_dtoa_r+0x304>)
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	3303      	adds	r3, #3
 8006166:	e7f3      	b.n	8006150 <_dtoa_r+0xa0>
 8006168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	ec51 0b17 	vmov	r0, r1, d7
 8006172:	2300      	movs	r3, #0
 8006174:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006178:	f7fa fcae 	bl	8000ad8 <__aeabi_dcmpeq>
 800617c:	4680      	mov	r8, r0
 800617e:	b158      	cbz	r0, 8006198 <_dtoa_r+0xe8>
 8006180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006182:	2301      	movs	r3, #1
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8551 	beq.w	8006c30 <_dtoa_r+0xb80>
 800618e:	488b      	ldr	r0, [pc, #556]	; (80063bc <_dtoa_r+0x30c>)
 8006190:	6018      	str	r0, [r3, #0]
 8006192:	1e43      	subs	r3, r0, #1
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	e7dd      	b.n	8006154 <_dtoa_r+0xa4>
 8006198:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800619c:	aa12      	add	r2, sp, #72	; 0x48
 800619e:	a913      	add	r1, sp, #76	; 0x4c
 80061a0:	4620      	mov	r0, r4
 80061a2:	f001 f89f 	bl	80072e4 <__d2b>
 80061a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80061aa:	4683      	mov	fp, r0
 80061ac:	2d00      	cmp	r5, #0
 80061ae:	d07c      	beq.n	80062aa <_dtoa_r+0x1fa>
 80061b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80061b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80061be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061ca:	4b7d      	ldr	r3, [pc, #500]	; (80063c0 <_dtoa_r+0x310>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	4630      	mov	r0, r6
 80061d0:	4639      	mov	r1, r7
 80061d2:	f7fa f861 	bl	8000298 <__aeabi_dsub>
 80061d6:	a36e      	add	r3, pc, #440	; (adr r3, 8006390 <_dtoa_r+0x2e0>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f7fa fa14 	bl	8000608 <__aeabi_dmul>
 80061e0:	a36d      	add	r3, pc, #436	; (adr r3, 8006398 <_dtoa_r+0x2e8>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7fa f859 	bl	800029c <__adddf3>
 80061ea:	4606      	mov	r6, r0
 80061ec:	4628      	mov	r0, r5
 80061ee:	460f      	mov	r7, r1
 80061f0:	f7fa f9a0 	bl	8000534 <__aeabi_i2d>
 80061f4:	a36a      	add	r3, pc, #424	; (adr r3, 80063a0 <_dtoa_r+0x2f0>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa fa05 	bl	8000608 <__aeabi_dmul>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4630      	mov	r0, r6
 8006204:	4639      	mov	r1, r7
 8006206:	f7fa f849 	bl	800029c <__adddf3>
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	f7fa fcab 	bl	8000b68 <__aeabi_d2iz>
 8006212:	2200      	movs	r2, #0
 8006214:	4682      	mov	sl, r0
 8006216:	2300      	movs	r3, #0
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	f7fa fc66 	bl	8000aec <__aeabi_dcmplt>
 8006220:	b148      	cbz	r0, 8006236 <_dtoa_r+0x186>
 8006222:	4650      	mov	r0, sl
 8006224:	f7fa f986 	bl	8000534 <__aeabi_i2d>
 8006228:	4632      	mov	r2, r6
 800622a:	463b      	mov	r3, r7
 800622c:	f7fa fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 8006230:	b908      	cbnz	r0, 8006236 <_dtoa_r+0x186>
 8006232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006236:	f1ba 0f16 	cmp.w	sl, #22
 800623a:	d854      	bhi.n	80062e6 <_dtoa_r+0x236>
 800623c:	4b61      	ldr	r3, [pc, #388]	; (80063c4 <_dtoa_r+0x314>)
 800623e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800624a:	f7fa fc4f 	bl	8000aec <__aeabi_dcmplt>
 800624e:	2800      	cmp	r0, #0
 8006250:	d04b      	beq.n	80062ea <_dtoa_r+0x23a>
 8006252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006256:	2300      	movs	r3, #0
 8006258:	930e      	str	r3, [sp, #56]	; 0x38
 800625a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800625c:	1b5d      	subs	r5, r3, r5
 800625e:	1e6b      	subs	r3, r5, #1
 8006260:	9304      	str	r3, [sp, #16]
 8006262:	bf43      	ittte	mi
 8006264:	2300      	movmi	r3, #0
 8006266:	f1c5 0801 	rsbmi	r8, r5, #1
 800626a:	9304      	strmi	r3, [sp, #16]
 800626c:	f04f 0800 	movpl.w	r8, #0
 8006270:	f1ba 0f00 	cmp.w	sl, #0
 8006274:	db3b      	blt.n	80062ee <_dtoa_r+0x23e>
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800627c:	4453      	add	r3, sl
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	2300      	movs	r3, #0
 8006282:	9306      	str	r3, [sp, #24]
 8006284:	9b05      	ldr	r3, [sp, #20]
 8006286:	2b09      	cmp	r3, #9
 8006288:	d869      	bhi.n	800635e <_dtoa_r+0x2ae>
 800628a:	2b05      	cmp	r3, #5
 800628c:	bfc4      	itt	gt
 800628e:	3b04      	subgt	r3, #4
 8006290:	9305      	strgt	r3, [sp, #20]
 8006292:	9b05      	ldr	r3, [sp, #20]
 8006294:	f1a3 0302 	sub.w	r3, r3, #2
 8006298:	bfcc      	ite	gt
 800629a:	2500      	movgt	r5, #0
 800629c:	2501      	movle	r5, #1
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d869      	bhi.n	8006376 <_dtoa_r+0x2c6>
 80062a2:	e8df f003 	tbb	[pc, r3]
 80062a6:	4e2c      	.short	0x4e2c
 80062a8:	5a4c      	.short	0x5a4c
 80062aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80062ae:	441d      	add	r5, r3
 80062b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	bfc1      	itttt	gt
 80062b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80062c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062c8:	bfda      	itte	le
 80062ca:	f1c3 0320 	rsble	r3, r3, #32
 80062ce:	fa06 f003 	lslle.w	r0, r6, r3
 80062d2:	4318      	orrgt	r0, r3
 80062d4:	f7fa f91e 	bl	8000514 <__aeabi_ui2d>
 80062d8:	2301      	movs	r3, #1
 80062da:	4606      	mov	r6, r0
 80062dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80062e0:	3d01      	subs	r5, #1
 80062e2:	9310      	str	r3, [sp, #64]	; 0x40
 80062e4:	e771      	b.n	80061ca <_dtoa_r+0x11a>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e7b6      	b.n	8006258 <_dtoa_r+0x1a8>
 80062ea:	900e      	str	r0, [sp, #56]	; 0x38
 80062ec:	e7b5      	b.n	800625a <_dtoa_r+0x1aa>
 80062ee:	f1ca 0300 	rsb	r3, sl, #0
 80062f2:	9306      	str	r3, [sp, #24]
 80062f4:	2300      	movs	r3, #0
 80062f6:	eba8 080a 	sub.w	r8, r8, sl
 80062fa:	930d      	str	r3, [sp, #52]	; 0x34
 80062fc:	e7c2      	b.n	8006284 <_dtoa_r+0x1d4>
 80062fe:	2300      	movs	r3, #0
 8006300:	9308      	str	r3, [sp, #32]
 8006302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	dc39      	bgt.n	800637c <_dtoa_r+0x2cc>
 8006308:	f04f 0901 	mov.w	r9, #1
 800630c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006310:	464b      	mov	r3, r9
 8006312:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006316:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006318:	2200      	movs	r2, #0
 800631a:	6042      	str	r2, [r0, #4]
 800631c:	2204      	movs	r2, #4
 800631e:	f102 0614 	add.w	r6, r2, #20
 8006322:	429e      	cmp	r6, r3
 8006324:	6841      	ldr	r1, [r0, #4]
 8006326:	d92f      	bls.n	8006388 <_dtoa_r+0x2d8>
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fcb9 	bl	8006ca0 <_Balloc>
 800632e:	9000      	str	r0, [sp, #0]
 8006330:	2800      	cmp	r0, #0
 8006332:	d14b      	bne.n	80063cc <_dtoa_r+0x31c>
 8006334:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <_dtoa_r+0x318>)
 8006336:	4602      	mov	r2, r0
 8006338:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800633c:	e6d1      	b.n	80060e2 <_dtoa_r+0x32>
 800633e:	2301      	movs	r3, #1
 8006340:	e7de      	b.n	8006300 <_dtoa_r+0x250>
 8006342:	2300      	movs	r3, #0
 8006344:	9308      	str	r3, [sp, #32]
 8006346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006348:	eb0a 0903 	add.w	r9, sl, r3
 800634c:	f109 0301 	add.w	r3, r9, #1
 8006350:	2b01      	cmp	r3, #1
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	bfb8      	it	lt
 8006356:	2301      	movlt	r3, #1
 8006358:	e7dd      	b.n	8006316 <_dtoa_r+0x266>
 800635a:	2301      	movs	r3, #1
 800635c:	e7f2      	b.n	8006344 <_dtoa_r+0x294>
 800635e:	2501      	movs	r5, #1
 8006360:	2300      	movs	r3, #0
 8006362:	9305      	str	r3, [sp, #20]
 8006364:	9508      	str	r5, [sp, #32]
 8006366:	f04f 39ff 	mov.w	r9, #4294967295
 800636a:	2200      	movs	r2, #0
 800636c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006370:	2312      	movs	r3, #18
 8006372:	9209      	str	r2, [sp, #36]	; 0x24
 8006374:	e7cf      	b.n	8006316 <_dtoa_r+0x266>
 8006376:	2301      	movs	r3, #1
 8006378:	9308      	str	r3, [sp, #32]
 800637a:	e7f4      	b.n	8006366 <_dtoa_r+0x2b6>
 800637c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006380:	f8cd 9004 	str.w	r9, [sp, #4]
 8006384:	464b      	mov	r3, r9
 8006386:	e7c6      	b.n	8006316 <_dtoa_r+0x266>
 8006388:	3101      	adds	r1, #1
 800638a:	6041      	str	r1, [r0, #4]
 800638c:	0052      	lsls	r2, r2, #1
 800638e:	e7c6      	b.n	800631e <_dtoa_r+0x26e>
 8006390:	636f4361 	.word	0x636f4361
 8006394:	3fd287a7 	.word	0x3fd287a7
 8006398:	8b60c8b3 	.word	0x8b60c8b3
 800639c:	3fc68a28 	.word	0x3fc68a28
 80063a0:	509f79fb 	.word	0x509f79fb
 80063a4:	3fd34413 	.word	0x3fd34413
 80063a8:	08008485 	.word	0x08008485
 80063ac:	0800849c 	.word	0x0800849c
 80063b0:	7ff00000 	.word	0x7ff00000
 80063b4:	08008481 	.word	0x08008481
 80063b8:	08008478 	.word	0x08008478
 80063bc:	08008455 	.word	0x08008455
 80063c0:	3ff80000 	.word	0x3ff80000
 80063c4:	08008598 	.word	0x08008598
 80063c8:	080084fb 	.word	0x080084fb
 80063cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ce:	9a00      	ldr	r2, [sp, #0]
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	9b01      	ldr	r3, [sp, #4]
 80063d4:	2b0e      	cmp	r3, #14
 80063d6:	f200 80ad 	bhi.w	8006534 <_dtoa_r+0x484>
 80063da:	2d00      	cmp	r5, #0
 80063dc:	f000 80aa 	beq.w	8006534 <_dtoa_r+0x484>
 80063e0:	f1ba 0f00 	cmp.w	sl, #0
 80063e4:	dd36      	ble.n	8006454 <_dtoa_r+0x3a4>
 80063e6:	4ac3      	ldr	r2, [pc, #780]	; (80066f4 <_dtoa_r+0x644>)
 80063e8:	f00a 030f 	and.w	r3, sl, #15
 80063ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063f0:	ed93 7b00 	vldr	d7, [r3]
 80063f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80063f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80063fc:	eeb0 8a47 	vmov.f32	s16, s14
 8006400:	eef0 8a67 	vmov.f32	s17, s15
 8006404:	d016      	beq.n	8006434 <_dtoa_r+0x384>
 8006406:	4bbc      	ldr	r3, [pc, #752]	; (80066f8 <_dtoa_r+0x648>)
 8006408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800640c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006410:	f7fa fa24 	bl	800085c <__aeabi_ddiv>
 8006414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006418:	f007 070f 	and.w	r7, r7, #15
 800641c:	2503      	movs	r5, #3
 800641e:	4eb6      	ldr	r6, [pc, #728]	; (80066f8 <_dtoa_r+0x648>)
 8006420:	b957      	cbnz	r7, 8006438 <_dtoa_r+0x388>
 8006422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006426:	ec53 2b18 	vmov	r2, r3, d8
 800642a:	f7fa fa17 	bl	800085c <__aeabi_ddiv>
 800642e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006432:	e029      	b.n	8006488 <_dtoa_r+0x3d8>
 8006434:	2502      	movs	r5, #2
 8006436:	e7f2      	b.n	800641e <_dtoa_r+0x36e>
 8006438:	07f9      	lsls	r1, r7, #31
 800643a:	d508      	bpl.n	800644e <_dtoa_r+0x39e>
 800643c:	ec51 0b18 	vmov	r0, r1, d8
 8006440:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006444:	f7fa f8e0 	bl	8000608 <__aeabi_dmul>
 8006448:	ec41 0b18 	vmov	d8, r0, r1
 800644c:	3501      	adds	r5, #1
 800644e:	107f      	asrs	r7, r7, #1
 8006450:	3608      	adds	r6, #8
 8006452:	e7e5      	b.n	8006420 <_dtoa_r+0x370>
 8006454:	f000 80a6 	beq.w	80065a4 <_dtoa_r+0x4f4>
 8006458:	f1ca 0600 	rsb	r6, sl, #0
 800645c:	4ba5      	ldr	r3, [pc, #660]	; (80066f4 <_dtoa_r+0x644>)
 800645e:	4fa6      	ldr	r7, [pc, #664]	; (80066f8 <_dtoa_r+0x648>)
 8006460:	f006 020f 	and.w	r2, r6, #15
 8006464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006470:	f7fa f8ca 	bl	8000608 <__aeabi_dmul>
 8006474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006478:	1136      	asrs	r6, r6, #4
 800647a:	2300      	movs	r3, #0
 800647c:	2502      	movs	r5, #2
 800647e:	2e00      	cmp	r6, #0
 8006480:	f040 8085 	bne.w	800658e <_dtoa_r+0x4de>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1d2      	bne.n	800642e <_dtoa_r+0x37e>
 8006488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 808c 	beq.w	80065a8 <_dtoa_r+0x4f8>
 8006490:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006494:	4b99      	ldr	r3, [pc, #612]	; (80066fc <_dtoa_r+0x64c>)
 8006496:	2200      	movs	r2, #0
 8006498:	4630      	mov	r0, r6
 800649a:	4639      	mov	r1, r7
 800649c:	f7fa fb26 	bl	8000aec <__aeabi_dcmplt>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f000 8081 	beq.w	80065a8 <_dtoa_r+0x4f8>
 80064a6:	9b01      	ldr	r3, [sp, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d07d      	beq.n	80065a8 <_dtoa_r+0x4f8>
 80064ac:	f1b9 0f00 	cmp.w	r9, #0
 80064b0:	dd3c      	ble.n	800652c <_dtoa_r+0x47c>
 80064b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	2200      	movs	r2, #0
 80064ba:	4b91      	ldr	r3, [pc, #580]	; (8006700 <_dtoa_r+0x650>)
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f7fa f8a2 	bl	8000608 <__aeabi_dmul>
 80064c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c8:	3501      	adds	r5, #1
 80064ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80064ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7fa f82e 	bl	8000534 <__aeabi_i2d>
 80064d8:	4632      	mov	r2, r6
 80064da:	463b      	mov	r3, r7
 80064dc:	f7fa f894 	bl	8000608 <__aeabi_dmul>
 80064e0:	4b88      	ldr	r3, [pc, #544]	; (8006704 <_dtoa_r+0x654>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	f7f9 feda 	bl	800029c <__adddf3>
 80064e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80064ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f0:	9303      	str	r3, [sp, #12]
 80064f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d15c      	bne.n	80065b2 <_dtoa_r+0x502>
 80064f8:	4b83      	ldr	r3, [pc, #524]	; (8006708 <_dtoa_r+0x658>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7f9 feca 	bl	8000298 <__aeabi_dsub>
 8006504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006508:	4606      	mov	r6, r0
 800650a:	460f      	mov	r7, r1
 800650c:	f7fa fb0c 	bl	8000b28 <__aeabi_dcmpgt>
 8006510:	2800      	cmp	r0, #0
 8006512:	f040 8296 	bne.w	8006a42 <_dtoa_r+0x992>
 8006516:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800651a:	4630      	mov	r0, r6
 800651c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006520:	4639      	mov	r1, r7
 8006522:	f7fa fae3 	bl	8000aec <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	f040 8288 	bne.w	8006a3c <_dtoa_r+0x98c>
 800652c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006530:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006536:	2b00      	cmp	r3, #0
 8006538:	f2c0 8158 	blt.w	80067ec <_dtoa_r+0x73c>
 800653c:	f1ba 0f0e 	cmp.w	sl, #14
 8006540:	f300 8154 	bgt.w	80067ec <_dtoa_r+0x73c>
 8006544:	4b6b      	ldr	r3, [pc, #428]	; (80066f4 <_dtoa_r+0x644>)
 8006546:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800654a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800654e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	f280 80e3 	bge.w	800671c <_dtoa_r+0x66c>
 8006556:	9b01      	ldr	r3, [sp, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f300 80df 	bgt.w	800671c <_dtoa_r+0x66c>
 800655e:	f040 826d 	bne.w	8006a3c <_dtoa_r+0x98c>
 8006562:	4b69      	ldr	r3, [pc, #420]	; (8006708 <_dtoa_r+0x658>)
 8006564:	2200      	movs	r2, #0
 8006566:	4640      	mov	r0, r8
 8006568:	4649      	mov	r1, r9
 800656a:	f7fa f84d 	bl	8000608 <__aeabi_dmul>
 800656e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006572:	f7fa facf 	bl	8000b14 <__aeabi_dcmpge>
 8006576:	9e01      	ldr	r6, [sp, #4]
 8006578:	4637      	mov	r7, r6
 800657a:	2800      	cmp	r0, #0
 800657c:	f040 8243 	bne.w	8006a06 <_dtoa_r+0x956>
 8006580:	9d00      	ldr	r5, [sp, #0]
 8006582:	2331      	movs	r3, #49	; 0x31
 8006584:	f805 3b01 	strb.w	r3, [r5], #1
 8006588:	f10a 0a01 	add.w	sl, sl, #1
 800658c:	e23f      	b.n	8006a0e <_dtoa_r+0x95e>
 800658e:	07f2      	lsls	r2, r6, #31
 8006590:	d505      	bpl.n	800659e <_dtoa_r+0x4ee>
 8006592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006596:	f7fa f837 	bl	8000608 <__aeabi_dmul>
 800659a:	3501      	adds	r5, #1
 800659c:	2301      	movs	r3, #1
 800659e:	1076      	asrs	r6, r6, #1
 80065a0:	3708      	adds	r7, #8
 80065a2:	e76c      	b.n	800647e <_dtoa_r+0x3ce>
 80065a4:	2502      	movs	r5, #2
 80065a6:	e76f      	b.n	8006488 <_dtoa_r+0x3d8>
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80065ae:	930c      	str	r3, [sp, #48]	; 0x30
 80065b0:	e78d      	b.n	80064ce <_dtoa_r+0x41e>
 80065b2:	9900      	ldr	r1, [sp, #0]
 80065b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80065b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065b8:	4b4e      	ldr	r3, [pc, #312]	; (80066f4 <_dtoa_r+0x644>)
 80065ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065be:	4401      	add	r1, r0
 80065c0:	9102      	str	r1, [sp, #8]
 80065c2:	9908      	ldr	r1, [sp, #32]
 80065c4:	eeb0 8a47 	vmov.f32	s16, s14
 80065c8:	eef0 8a67 	vmov.f32	s17, s15
 80065cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065d4:	2900      	cmp	r1, #0
 80065d6:	d045      	beq.n	8006664 <_dtoa_r+0x5b4>
 80065d8:	494c      	ldr	r1, [pc, #304]	; (800670c <_dtoa_r+0x65c>)
 80065da:	2000      	movs	r0, #0
 80065dc:	f7fa f93e 	bl	800085c <__aeabi_ddiv>
 80065e0:	ec53 2b18 	vmov	r2, r3, d8
 80065e4:	f7f9 fe58 	bl	8000298 <__aeabi_dsub>
 80065e8:	9d00      	ldr	r5, [sp, #0]
 80065ea:	ec41 0b18 	vmov	d8, r0, r1
 80065ee:	4639      	mov	r1, r7
 80065f0:	4630      	mov	r0, r6
 80065f2:	f7fa fab9 	bl	8000b68 <__aeabi_d2iz>
 80065f6:	900c      	str	r0, [sp, #48]	; 0x30
 80065f8:	f7f9 ff9c 	bl	8000534 <__aeabi_i2d>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7f9 fe48 	bl	8000298 <__aeabi_dsub>
 8006608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800660a:	3330      	adds	r3, #48	; 0x30
 800660c:	f805 3b01 	strb.w	r3, [r5], #1
 8006610:	ec53 2b18 	vmov	r2, r3, d8
 8006614:	4606      	mov	r6, r0
 8006616:	460f      	mov	r7, r1
 8006618:	f7fa fa68 	bl	8000aec <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	d165      	bne.n	80066ec <_dtoa_r+0x63c>
 8006620:	4632      	mov	r2, r6
 8006622:	463b      	mov	r3, r7
 8006624:	4935      	ldr	r1, [pc, #212]	; (80066fc <_dtoa_r+0x64c>)
 8006626:	2000      	movs	r0, #0
 8006628:	f7f9 fe36 	bl	8000298 <__aeabi_dsub>
 800662c:	ec53 2b18 	vmov	r2, r3, d8
 8006630:	f7fa fa5c 	bl	8000aec <__aeabi_dcmplt>
 8006634:	2800      	cmp	r0, #0
 8006636:	f040 80b9 	bne.w	80067ac <_dtoa_r+0x6fc>
 800663a:	9b02      	ldr	r3, [sp, #8]
 800663c:	429d      	cmp	r5, r3
 800663e:	f43f af75 	beq.w	800652c <_dtoa_r+0x47c>
 8006642:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <_dtoa_r+0x650>)
 8006644:	ec51 0b18 	vmov	r0, r1, d8
 8006648:	2200      	movs	r2, #0
 800664a:	f7f9 ffdd 	bl	8000608 <__aeabi_dmul>
 800664e:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <_dtoa_r+0x650>)
 8006650:	ec41 0b18 	vmov	d8, r0, r1
 8006654:	2200      	movs	r2, #0
 8006656:	4630      	mov	r0, r6
 8006658:	4639      	mov	r1, r7
 800665a:	f7f9 ffd5 	bl	8000608 <__aeabi_dmul>
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	e7c4      	b.n	80065ee <_dtoa_r+0x53e>
 8006664:	ec51 0b17 	vmov	r0, r1, d7
 8006668:	f7f9 ffce 	bl	8000608 <__aeabi_dmul>
 800666c:	9b02      	ldr	r3, [sp, #8]
 800666e:	9d00      	ldr	r5, [sp, #0]
 8006670:	930c      	str	r3, [sp, #48]	; 0x30
 8006672:	ec41 0b18 	vmov	d8, r0, r1
 8006676:	4639      	mov	r1, r7
 8006678:	4630      	mov	r0, r6
 800667a:	f7fa fa75 	bl	8000b68 <__aeabi_d2iz>
 800667e:	9011      	str	r0, [sp, #68]	; 0x44
 8006680:	f7f9 ff58 	bl	8000534 <__aeabi_i2d>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4630      	mov	r0, r6
 800668a:	4639      	mov	r1, r7
 800668c:	f7f9 fe04 	bl	8000298 <__aeabi_dsub>
 8006690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006692:	3330      	adds	r3, #48	; 0x30
 8006694:	f805 3b01 	strb.w	r3, [r5], #1
 8006698:	9b02      	ldr	r3, [sp, #8]
 800669a:	429d      	cmp	r5, r3
 800669c:	4606      	mov	r6, r0
 800669e:	460f      	mov	r7, r1
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	d134      	bne.n	8006710 <_dtoa_r+0x660>
 80066a6:	4b19      	ldr	r3, [pc, #100]	; (800670c <_dtoa_r+0x65c>)
 80066a8:	ec51 0b18 	vmov	r0, r1, d8
 80066ac:	f7f9 fdf6 	bl	800029c <__adddf3>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7fa fa36 	bl	8000b28 <__aeabi_dcmpgt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d175      	bne.n	80067ac <_dtoa_r+0x6fc>
 80066c0:	ec53 2b18 	vmov	r2, r3, d8
 80066c4:	4911      	ldr	r1, [pc, #68]	; (800670c <_dtoa_r+0x65c>)
 80066c6:	2000      	movs	r0, #0
 80066c8:	f7f9 fde6 	bl	8000298 <__aeabi_dsub>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4630      	mov	r0, r6
 80066d2:	4639      	mov	r1, r7
 80066d4:	f7fa fa0a 	bl	8000aec <__aeabi_dcmplt>
 80066d8:	2800      	cmp	r0, #0
 80066da:	f43f af27 	beq.w	800652c <_dtoa_r+0x47c>
 80066de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066e0:	1e6b      	subs	r3, r5, #1
 80066e2:	930c      	str	r3, [sp, #48]	; 0x30
 80066e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066e8:	2b30      	cmp	r3, #48	; 0x30
 80066ea:	d0f8      	beq.n	80066de <_dtoa_r+0x62e>
 80066ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80066f0:	e04a      	b.n	8006788 <_dtoa_r+0x6d8>
 80066f2:	bf00      	nop
 80066f4:	08008598 	.word	0x08008598
 80066f8:	08008570 	.word	0x08008570
 80066fc:	3ff00000 	.word	0x3ff00000
 8006700:	40240000 	.word	0x40240000
 8006704:	401c0000 	.word	0x401c0000
 8006708:	40140000 	.word	0x40140000
 800670c:	3fe00000 	.word	0x3fe00000
 8006710:	4baf      	ldr	r3, [pc, #700]	; (80069d0 <_dtoa_r+0x920>)
 8006712:	f7f9 ff79 	bl	8000608 <__aeabi_dmul>
 8006716:	4606      	mov	r6, r0
 8006718:	460f      	mov	r7, r1
 800671a:	e7ac      	b.n	8006676 <_dtoa_r+0x5c6>
 800671c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006720:	9d00      	ldr	r5, [sp, #0]
 8006722:	4642      	mov	r2, r8
 8006724:	464b      	mov	r3, r9
 8006726:	4630      	mov	r0, r6
 8006728:	4639      	mov	r1, r7
 800672a:	f7fa f897 	bl	800085c <__aeabi_ddiv>
 800672e:	f7fa fa1b 	bl	8000b68 <__aeabi_d2iz>
 8006732:	9002      	str	r0, [sp, #8]
 8006734:	f7f9 fefe 	bl	8000534 <__aeabi_i2d>
 8006738:	4642      	mov	r2, r8
 800673a:	464b      	mov	r3, r9
 800673c:	f7f9 ff64 	bl	8000608 <__aeabi_dmul>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4630      	mov	r0, r6
 8006746:	4639      	mov	r1, r7
 8006748:	f7f9 fda6 	bl	8000298 <__aeabi_dsub>
 800674c:	9e02      	ldr	r6, [sp, #8]
 800674e:	9f01      	ldr	r7, [sp, #4]
 8006750:	3630      	adds	r6, #48	; 0x30
 8006752:	f805 6b01 	strb.w	r6, [r5], #1
 8006756:	9e00      	ldr	r6, [sp, #0]
 8006758:	1bae      	subs	r6, r5, r6
 800675a:	42b7      	cmp	r7, r6
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	d137      	bne.n	80067d2 <_dtoa_r+0x722>
 8006762:	f7f9 fd9b 	bl	800029c <__adddf3>
 8006766:	4642      	mov	r2, r8
 8006768:	464b      	mov	r3, r9
 800676a:	4606      	mov	r6, r0
 800676c:	460f      	mov	r7, r1
 800676e:	f7fa f9db 	bl	8000b28 <__aeabi_dcmpgt>
 8006772:	b9c8      	cbnz	r0, 80067a8 <_dtoa_r+0x6f8>
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	4630      	mov	r0, r6
 800677a:	4639      	mov	r1, r7
 800677c:	f7fa f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8006780:	b110      	cbz	r0, 8006788 <_dtoa_r+0x6d8>
 8006782:	9b02      	ldr	r3, [sp, #8]
 8006784:	07d9      	lsls	r1, r3, #31
 8006786:	d40f      	bmi.n	80067a8 <_dtoa_r+0x6f8>
 8006788:	4620      	mov	r0, r4
 800678a:	4659      	mov	r1, fp
 800678c:	f000 fac8 	bl	8006d20 <_Bfree>
 8006790:	2300      	movs	r3, #0
 8006792:	702b      	strb	r3, [r5, #0]
 8006794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006796:	f10a 0001 	add.w	r0, sl, #1
 800679a:	6018      	str	r0, [r3, #0]
 800679c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f43f acd8 	beq.w	8006154 <_dtoa_r+0xa4>
 80067a4:	601d      	str	r5, [r3, #0]
 80067a6:	e4d5      	b.n	8006154 <_dtoa_r+0xa4>
 80067a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80067ac:	462b      	mov	r3, r5
 80067ae:	461d      	mov	r5, r3
 80067b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067b4:	2a39      	cmp	r2, #57	; 0x39
 80067b6:	d108      	bne.n	80067ca <_dtoa_r+0x71a>
 80067b8:	9a00      	ldr	r2, [sp, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d1f7      	bne.n	80067ae <_dtoa_r+0x6fe>
 80067be:	9a07      	ldr	r2, [sp, #28]
 80067c0:	9900      	ldr	r1, [sp, #0]
 80067c2:	3201      	adds	r2, #1
 80067c4:	9207      	str	r2, [sp, #28]
 80067c6:	2230      	movs	r2, #48	; 0x30
 80067c8:	700a      	strb	r2, [r1, #0]
 80067ca:	781a      	ldrb	r2, [r3, #0]
 80067cc:	3201      	adds	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e78c      	b.n	80066ec <_dtoa_r+0x63c>
 80067d2:	4b7f      	ldr	r3, [pc, #508]	; (80069d0 <_dtoa_r+0x920>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	f7f9 ff17 	bl	8000608 <__aeabi_dmul>
 80067da:	2200      	movs	r2, #0
 80067dc:	2300      	movs	r3, #0
 80067de:	4606      	mov	r6, r0
 80067e0:	460f      	mov	r7, r1
 80067e2:	f7fa f979 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d09b      	beq.n	8006722 <_dtoa_r+0x672>
 80067ea:	e7cd      	b.n	8006788 <_dtoa_r+0x6d8>
 80067ec:	9a08      	ldr	r2, [sp, #32]
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	f000 80c4 	beq.w	800697c <_dtoa_r+0x8cc>
 80067f4:	9a05      	ldr	r2, [sp, #20]
 80067f6:	2a01      	cmp	r2, #1
 80067f8:	f300 80a8 	bgt.w	800694c <_dtoa_r+0x89c>
 80067fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067fe:	2a00      	cmp	r2, #0
 8006800:	f000 80a0 	beq.w	8006944 <_dtoa_r+0x894>
 8006804:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006808:	9e06      	ldr	r6, [sp, #24]
 800680a:	4645      	mov	r5, r8
 800680c:	9a04      	ldr	r2, [sp, #16]
 800680e:	2101      	movs	r1, #1
 8006810:	441a      	add	r2, r3
 8006812:	4620      	mov	r0, r4
 8006814:	4498      	add	r8, r3
 8006816:	9204      	str	r2, [sp, #16]
 8006818:	f000 fb3e 	bl	8006e98 <__i2b>
 800681c:	4607      	mov	r7, r0
 800681e:	2d00      	cmp	r5, #0
 8006820:	dd0b      	ble.n	800683a <_dtoa_r+0x78a>
 8006822:	9b04      	ldr	r3, [sp, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	dd08      	ble.n	800683a <_dtoa_r+0x78a>
 8006828:	42ab      	cmp	r3, r5
 800682a:	9a04      	ldr	r2, [sp, #16]
 800682c:	bfa8      	it	ge
 800682e:	462b      	movge	r3, r5
 8006830:	eba8 0803 	sub.w	r8, r8, r3
 8006834:	1aed      	subs	r5, r5, r3
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	9b06      	ldr	r3, [sp, #24]
 800683c:	b1fb      	cbz	r3, 800687e <_dtoa_r+0x7ce>
 800683e:	9b08      	ldr	r3, [sp, #32]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 809f 	beq.w	8006984 <_dtoa_r+0x8d4>
 8006846:	2e00      	cmp	r6, #0
 8006848:	dd11      	ble.n	800686e <_dtoa_r+0x7be>
 800684a:	4639      	mov	r1, r7
 800684c:	4632      	mov	r2, r6
 800684e:	4620      	mov	r0, r4
 8006850:	f000 fbde 	bl	8007010 <__pow5mult>
 8006854:	465a      	mov	r2, fp
 8006856:	4601      	mov	r1, r0
 8006858:	4607      	mov	r7, r0
 800685a:	4620      	mov	r0, r4
 800685c:	f000 fb32 	bl	8006ec4 <__multiply>
 8006860:	4659      	mov	r1, fp
 8006862:	9007      	str	r0, [sp, #28]
 8006864:	4620      	mov	r0, r4
 8006866:	f000 fa5b 	bl	8006d20 <_Bfree>
 800686a:	9b07      	ldr	r3, [sp, #28]
 800686c:	469b      	mov	fp, r3
 800686e:	9b06      	ldr	r3, [sp, #24]
 8006870:	1b9a      	subs	r2, r3, r6
 8006872:	d004      	beq.n	800687e <_dtoa_r+0x7ce>
 8006874:	4659      	mov	r1, fp
 8006876:	4620      	mov	r0, r4
 8006878:	f000 fbca 	bl	8007010 <__pow5mult>
 800687c:	4683      	mov	fp, r0
 800687e:	2101      	movs	r1, #1
 8006880:	4620      	mov	r0, r4
 8006882:	f000 fb09 	bl	8006e98 <__i2b>
 8006886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006888:	2b00      	cmp	r3, #0
 800688a:	4606      	mov	r6, r0
 800688c:	dd7c      	ble.n	8006988 <_dtoa_r+0x8d8>
 800688e:	461a      	mov	r2, r3
 8006890:	4601      	mov	r1, r0
 8006892:	4620      	mov	r0, r4
 8006894:	f000 fbbc 	bl	8007010 <__pow5mult>
 8006898:	9b05      	ldr	r3, [sp, #20]
 800689a:	2b01      	cmp	r3, #1
 800689c:	4606      	mov	r6, r0
 800689e:	dd76      	ble.n	800698e <_dtoa_r+0x8de>
 80068a0:	2300      	movs	r3, #0
 80068a2:	9306      	str	r3, [sp, #24]
 80068a4:	6933      	ldr	r3, [r6, #16]
 80068a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068aa:	6918      	ldr	r0, [r3, #16]
 80068ac:	f000 faa4 	bl	8006df8 <__hi0bits>
 80068b0:	f1c0 0020 	rsb	r0, r0, #32
 80068b4:	9b04      	ldr	r3, [sp, #16]
 80068b6:	4418      	add	r0, r3
 80068b8:	f010 001f 	ands.w	r0, r0, #31
 80068bc:	f000 8086 	beq.w	80069cc <_dtoa_r+0x91c>
 80068c0:	f1c0 0320 	rsb	r3, r0, #32
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	dd7f      	ble.n	80069c8 <_dtoa_r+0x918>
 80068c8:	f1c0 001c 	rsb	r0, r0, #28
 80068cc:	9b04      	ldr	r3, [sp, #16]
 80068ce:	4403      	add	r3, r0
 80068d0:	4480      	add	r8, r0
 80068d2:	4405      	add	r5, r0
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	f1b8 0f00 	cmp.w	r8, #0
 80068da:	dd05      	ble.n	80068e8 <_dtoa_r+0x838>
 80068dc:	4659      	mov	r1, fp
 80068de:	4642      	mov	r2, r8
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fbef 	bl	80070c4 <__lshift>
 80068e6:	4683      	mov	fp, r0
 80068e8:	9b04      	ldr	r3, [sp, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dd05      	ble.n	80068fa <_dtoa_r+0x84a>
 80068ee:	4631      	mov	r1, r6
 80068f0:	461a      	mov	r2, r3
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fbe6 	bl	80070c4 <__lshift>
 80068f8:	4606      	mov	r6, r0
 80068fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d069      	beq.n	80069d4 <_dtoa_r+0x924>
 8006900:	4631      	mov	r1, r6
 8006902:	4658      	mov	r0, fp
 8006904:	f000 fc4a 	bl	800719c <__mcmp>
 8006908:	2800      	cmp	r0, #0
 800690a:	da63      	bge.n	80069d4 <_dtoa_r+0x924>
 800690c:	2300      	movs	r3, #0
 800690e:	4659      	mov	r1, fp
 8006910:	220a      	movs	r2, #10
 8006912:	4620      	mov	r0, r4
 8006914:	f000 fa26 	bl	8006d64 <__multadd>
 8006918:	9b08      	ldr	r3, [sp, #32]
 800691a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800691e:	4683      	mov	fp, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 818f 	beq.w	8006c44 <_dtoa_r+0xb94>
 8006926:	4639      	mov	r1, r7
 8006928:	2300      	movs	r3, #0
 800692a:	220a      	movs	r2, #10
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fa19 	bl	8006d64 <__multadd>
 8006932:	f1b9 0f00 	cmp.w	r9, #0
 8006936:	4607      	mov	r7, r0
 8006938:	f300 808e 	bgt.w	8006a58 <_dtoa_r+0x9a8>
 800693c:	9b05      	ldr	r3, [sp, #20]
 800693e:	2b02      	cmp	r3, #2
 8006940:	dc50      	bgt.n	80069e4 <_dtoa_r+0x934>
 8006942:	e089      	b.n	8006a58 <_dtoa_r+0x9a8>
 8006944:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800694a:	e75d      	b.n	8006808 <_dtoa_r+0x758>
 800694c:	9b01      	ldr	r3, [sp, #4]
 800694e:	1e5e      	subs	r6, r3, #1
 8006950:	9b06      	ldr	r3, [sp, #24]
 8006952:	42b3      	cmp	r3, r6
 8006954:	bfbf      	itttt	lt
 8006956:	9b06      	ldrlt	r3, [sp, #24]
 8006958:	9606      	strlt	r6, [sp, #24]
 800695a:	1af2      	sublt	r2, r6, r3
 800695c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800695e:	bfb6      	itet	lt
 8006960:	189b      	addlt	r3, r3, r2
 8006962:	1b9e      	subge	r6, r3, r6
 8006964:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006966:	9b01      	ldr	r3, [sp, #4]
 8006968:	bfb8      	it	lt
 800696a:	2600      	movlt	r6, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	bfb5      	itete	lt
 8006970:	eba8 0503 	sublt.w	r5, r8, r3
 8006974:	9b01      	ldrge	r3, [sp, #4]
 8006976:	2300      	movlt	r3, #0
 8006978:	4645      	movge	r5, r8
 800697a:	e747      	b.n	800680c <_dtoa_r+0x75c>
 800697c:	9e06      	ldr	r6, [sp, #24]
 800697e:	9f08      	ldr	r7, [sp, #32]
 8006980:	4645      	mov	r5, r8
 8006982:	e74c      	b.n	800681e <_dtoa_r+0x76e>
 8006984:	9a06      	ldr	r2, [sp, #24]
 8006986:	e775      	b.n	8006874 <_dtoa_r+0x7c4>
 8006988:	9b05      	ldr	r3, [sp, #20]
 800698a:	2b01      	cmp	r3, #1
 800698c:	dc18      	bgt.n	80069c0 <_dtoa_r+0x910>
 800698e:	9b02      	ldr	r3, [sp, #8]
 8006990:	b9b3      	cbnz	r3, 80069c0 <_dtoa_r+0x910>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	b9a3      	cbnz	r3, 80069c4 <_dtoa_r+0x914>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a0:	0d1b      	lsrs	r3, r3, #20
 80069a2:	051b      	lsls	r3, r3, #20
 80069a4:	b12b      	cbz	r3, 80069b2 <_dtoa_r+0x902>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	f108 0801 	add.w	r8, r8, #1
 80069b0:	2301      	movs	r3, #1
 80069b2:	9306      	str	r3, [sp, #24]
 80069b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f47f af74 	bne.w	80068a4 <_dtoa_r+0x7f4>
 80069bc:	2001      	movs	r0, #1
 80069be:	e779      	b.n	80068b4 <_dtoa_r+0x804>
 80069c0:	2300      	movs	r3, #0
 80069c2:	e7f6      	b.n	80069b2 <_dtoa_r+0x902>
 80069c4:	9b02      	ldr	r3, [sp, #8]
 80069c6:	e7f4      	b.n	80069b2 <_dtoa_r+0x902>
 80069c8:	d085      	beq.n	80068d6 <_dtoa_r+0x826>
 80069ca:	4618      	mov	r0, r3
 80069cc:	301c      	adds	r0, #28
 80069ce:	e77d      	b.n	80068cc <_dtoa_r+0x81c>
 80069d0:	40240000 	.word	0x40240000
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dc38      	bgt.n	8006a4c <_dtoa_r+0x99c>
 80069da:	9b05      	ldr	r3, [sp, #20]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	dd35      	ble.n	8006a4c <_dtoa_r+0x99c>
 80069e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80069e4:	f1b9 0f00 	cmp.w	r9, #0
 80069e8:	d10d      	bne.n	8006a06 <_dtoa_r+0x956>
 80069ea:	4631      	mov	r1, r6
 80069ec:	464b      	mov	r3, r9
 80069ee:	2205      	movs	r2, #5
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 f9b7 	bl	8006d64 <__multadd>
 80069f6:	4601      	mov	r1, r0
 80069f8:	4606      	mov	r6, r0
 80069fa:	4658      	mov	r0, fp
 80069fc:	f000 fbce 	bl	800719c <__mcmp>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f73f adbd 	bgt.w	8006580 <_dtoa_r+0x4d0>
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	9d00      	ldr	r5, [sp, #0]
 8006a0a:	ea6f 0a03 	mvn.w	sl, r3
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	4631      	mov	r1, r6
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 f983 	bl	8006d20 <_Bfree>
 8006a1a:	2f00      	cmp	r7, #0
 8006a1c:	f43f aeb4 	beq.w	8006788 <_dtoa_r+0x6d8>
 8006a20:	f1b8 0f00 	cmp.w	r8, #0
 8006a24:	d005      	beq.n	8006a32 <_dtoa_r+0x982>
 8006a26:	45b8      	cmp	r8, r7
 8006a28:	d003      	beq.n	8006a32 <_dtoa_r+0x982>
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 f977 	bl	8006d20 <_Bfree>
 8006a32:	4639      	mov	r1, r7
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 f973 	bl	8006d20 <_Bfree>
 8006a3a:	e6a5      	b.n	8006788 <_dtoa_r+0x6d8>
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	4637      	mov	r7, r6
 8006a40:	e7e1      	b.n	8006a06 <_dtoa_r+0x956>
 8006a42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006a48:	4637      	mov	r7, r6
 8006a4a:	e599      	b.n	8006580 <_dtoa_r+0x4d0>
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80fd 	beq.w	8006c52 <_dtoa_r+0xba2>
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	dd05      	ble.n	8006a68 <_dtoa_r+0x9b8>
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	462a      	mov	r2, r5
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fb2f 	bl	80070c4 <__lshift>
 8006a66:	4607      	mov	r7, r0
 8006a68:	9b06      	ldr	r3, [sp, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d05c      	beq.n	8006b28 <_dtoa_r+0xa78>
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 f915 	bl	8006ca0 <_Balloc>
 8006a76:	4605      	mov	r5, r0
 8006a78:	b928      	cbnz	r0, 8006a86 <_dtoa_r+0x9d6>
 8006a7a:	4b80      	ldr	r3, [pc, #512]	; (8006c7c <_dtoa_r+0xbcc>)
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a82:	f7ff bb2e 	b.w	80060e2 <_dtoa_r+0x32>
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	3202      	adds	r2, #2
 8006a8a:	0092      	lsls	r2, r2, #2
 8006a8c:	f107 010c 	add.w	r1, r7, #12
 8006a90:	300c      	adds	r0, #12
 8006a92:	f7fe fde1 	bl	8005658 <memcpy>
 8006a96:	2201      	movs	r2, #1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 fb12 	bl	80070c4 <__lshift>
 8006aa0:	9b00      	ldr	r3, [sp, #0]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	9b00      	ldr	r3, [sp, #0]
 8006aa8:	444b      	add	r3, r9
 8006aaa:	9307      	str	r3, [sp, #28]
 8006aac:	9b02      	ldr	r3, [sp, #8]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	46b8      	mov	r8, r7
 8006ab4:	9306      	str	r3, [sp, #24]
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	9b01      	ldr	r3, [sp, #4]
 8006aba:	4631      	mov	r1, r6
 8006abc:	3b01      	subs	r3, #1
 8006abe:	4658      	mov	r0, fp
 8006ac0:	9302      	str	r3, [sp, #8]
 8006ac2:	f7ff fa69 	bl	8005f98 <quorem>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	3330      	adds	r3, #48	; 0x30
 8006aca:	9004      	str	r0, [sp, #16]
 8006acc:	4641      	mov	r1, r8
 8006ace:	4658      	mov	r0, fp
 8006ad0:	9308      	str	r3, [sp, #32]
 8006ad2:	f000 fb63 	bl	800719c <__mcmp>
 8006ad6:	463a      	mov	r2, r7
 8006ad8:	4681      	mov	r9, r0
 8006ada:	4631      	mov	r1, r6
 8006adc:	4620      	mov	r0, r4
 8006ade:	f000 fb79 	bl	80071d4 <__mdiff>
 8006ae2:	68c2      	ldr	r2, [r0, #12]
 8006ae4:	9b08      	ldr	r3, [sp, #32]
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	bb02      	cbnz	r2, 8006b2c <_dtoa_r+0xa7c>
 8006aea:	4601      	mov	r1, r0
 8006aec:	4658      	mov	r0, fp
 8006aee:	f000 fb55 	bl	800719c <__mcmp>
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	4602      	mov	r2, r0
 8006af6:	4629      	mov	r1, r5
 8006af8:	4620      	mov	r0, r4
 8006afa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006afe:	f000 f90f 	bl	8006d20 <_Bfree>
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b06:	9d01      	ldr	r5, [sp, #4]
 8006b08:	ea43 0102 	orr.w	r1, r3, r2
 8006b0c:	9b06      	ldr	r3, [sp, #24]
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	9b08      	ldr	r3, [sp, #32]
 8006b12:	d10d      	bne.n	8006b30 <_dtoa_r+0xa80>
 8006b14:	2b39      	cmp	r3, #57	; 0x39
 8006b16:	d029      	beq.n	8006b6c <_dtoa_r+0xabc>
 8006b18:	f1b9 0f00 	cmp.w	r9, #0
 8006b1c:	dd01      	ble.n	8006b22 <_dtoa_r+0xa72>
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	3331      	adds	r3, #49	; 0x31
 8006b22:	9a02      	ldr	r2, [sp, #8]
 8006b24:	7013      	strb	r3, [r2, #0]
 8006b26:	e774      	b.n	8006a12 <_dtoa_r+0x962>
 8006b28:	4638      	mov	r0, r7
 8006b2a:	e7b9      	b.n	8006aa0 <_dtoa_r+0x9f0>
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	e7e2      	b.n	8006af6 <_dtoa_r+0xa46>
 8006b30:	f1b9 0f00 	cmp.w	r9, #0
 8006b34:	db06      	blt.n	8006b44 <_dtoa_r+0xa94>
 8006b36:	9905      	ldr	r1, [sp, #20]
 8006b38:	ea41 0909 	orr.w	r9, r1, r9
 8006b3c:	9906      	ldr	r1, [sp, #24]
 8006b3e:	ea59 0101 	orrs.w	r1, r9, r1
 8006b42:	d120      	bne.n	8006b86 <_dtoa_r+0xad6>
 8006b44:	2a00      	cmp	r2, #0
 8006b46:	ddec      	ble.n	8006b22 <_dtoa_r+0xa72>
 8006b48:	4659      	mov	r1, fp
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	f000 fab8 	bl	80070c4 <__lshift>
 8006b54:	4631      	mov	r1, r6
 8006b56:	4683      	mov	fp, r0
 8006b58:	f000 fb20 	bl	800719c <__mcmp>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	dc02      	bgt.n	8006b68 <_dtoa_r+0xab8>
 8006b62:	d1de      	bne.n	8006b22 <_dtoa_r+0xa72>
 8006b64:	07da      	lsls	r2, r3, #31
 8006b66:	d5dc      	bpl.n	8006b22 <_dtoa_r+0xa72>
 8006b68:	2b39      	cmp	r3, #57	; 0x39
 8006b6a:	d1d8      	bne.n	8006b1e <_dtoa_r+0xa6e>
 8006b6c:	9a02      	ldr	r2, [sp, #8]
 8006b6e:	2339      	movs	r3, #57	; 0x39
 8006b70:	7013      	strb	r3, [r2, #0]
 8006b72:	462b      	mov	r3, r5
 8006b74:	461d      	mov	r5, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b7c:	2a39      	cmp	r2, #57	; 0x39
 8006b7e:	d050      	beq.n	8006c22 <_dtoa_r+0xb72>
 8006b80:	3201      	adds	r2, #1
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e745      	b.n	8006a12 <_dtoa_r+0x962>
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	dd03      	ble.n	8006b92 <_dtoa_r+0xae2>
 8006b8a:	2b39      	cmp	r3, #57	; 0x39
 8006b8c:	d0ee      	beq.n	8006b6c <_dtoa_r+0xabc>
 8006b8e:	3301      	adds	r3, #1
 8006b90:	e7c7      	b.n	8006b22 <_dtoa_r+0xa72>
 8006b92:	9a01      	ldr	r2, [sp, #4]
 8006b94:	9907      	ldr	r1, [sp, #28]
 8006b96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b9a:	428a      	cmp	r2, r1
 8006b9c:	d02a      	beq.n	8006bf4 <_dtoa_r+0xb44>
 8006b9e:	4659      	mov	r1, fp
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	220a      	movs	r2, #10
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f000 f8dd 	bl	8006d64 <__multadd>
 8006baa:	45b8      	cmp	r8, r7
 8006bac:	4683      	mov	fp, r0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	f04f 020a 	mov.w	r2, #10
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	4620      	mov	r0, r4
 8006bba:	d107      	bne.n	8006bcc <_dtoa_r+0xb1c>
 8006bbc:	f000 f8d2 	bl	8006d64 <__multadd>
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	e775      	b.n	8006ab8 <_dtoa_r+0xa08>
 8006bcc:	f000 f8ca 	bl	8006d64 <__multadd>
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	220a      	movs	r2, #10
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 f8c3 	bl	8006d64 <__multadd>
 8006bde:	4607      	mov	r7, r0
 8006be0:	e7f0      	b.n	8006bc4 <_dtoa_r+0xb14>
 8006be2:	f1b9 0f00 	cmp.w	r9, #0
 8006be6:	9a00      	ldr	r2, [sp, #0]
 8006be8:	bfcc      	ite	gt
 8006bea:	464d      	movgt	r5, r9
 8006bec:	2501      	movle	r5, #1
 8006bee:	4415      	add	r5, r2
 8006bf0:	f04f 0800 	mov.w	r8, #0
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	f000 fa62 	bl	80070c4 <__lshift>
 8006c00:	4631      	mov	r1, r6
 8006c02:	4683      	mov	fp, r0
 8006c04:	f000 faca 	bl	800719c <__mcmp>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	dcb2      	bgt.n	8006b72 <_dtoa_r+0xac2>
 8006c0c:	d102      	bne.n	8006c14 <_dtoa_r+0xb64>
 8006c0e:	9b01      	ldr	r3, [sp, #4]
 8006c10:	07db      	lsls	r3, r3, #31
 8006c12:	d4ae      	bmi.n	8006b72 <_dtoa_r+0xac2>
 8006c14:	462b      	mov	r3, r5
 8006c16:	461d      	mov	r5, r3
 8006c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c1c:	2a30      	cmp	r2, #48	; 0x30
 8006c1e:	d0fa      	beq.n	8006c16 <_dtoa_r+0xb66>
 8006c20:	e6f7      	b.n	8006a12 <_dtoa_r+0x962>
 8006c22:	9a00      	ldr	r2, [sp, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d1a5      	bne.n	8006b74 <_dtoa_r+0xac4>
 8006c28:	f10a 0a01 	add.w	sl, sl, #1
 8006c2c:	2331      	movs	r3, #49	; 0x31
 8006c2e:	e779      	b.n	8006b24 <_dtoa_r+0xa74>
 8006c30:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <_dtoa_r+0xbd0>)
 8006c32:	f7ff baaf 	b.w	8006194 <_dtoa_r+0xe4>
 8006c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f47f aa86 	bne.w	800614a <_dtoa_r+0x9a>
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <_dtoa_r+0xbd4>)
 8006c40:	f7ff baa8 	b.w	8006194 <_dtoa_r+0xe4>
 8006c44:	f1b9 0f00 	cmp.w	r9, #0
 8006c48:	dc03      	bgt.n	8006c52 <_dtoa_r+0xba2>
 8006c4a:	9b05      	ldr	r3, [sp, #20]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	f73f aec9 	bgt.w	80069e4 <_dtoa_r+0x934>
 8006c52:	9d00      	ldr	r5, [sp, #0]
 8006c54:	4631      	mov	r1, r6
 8006c56:	4658      	mov	r0, fp
 8006c58:	f7ff f99e 	bl	8005f98 <quorem>
 8006c5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c60:	f805 3b01 	strb.w	r3, [r5], #1
 8006c64:	9a00      	ldr	r2, [sp, #0]
 8006c66:	1aaa      	subs	r2, r5, r2
 8006c68:	4591      	cmp	r9, r2
 8006c6a:	ddba      	ble.n	8006be2 <_dtoa_r+0xb32>
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	2300      	movs	r3, #0
 8006c70:	220a      	movs	r2, #10
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 f876 	bl	8006d64 <__multadd>
 8006c78:	4683      	mov	fp, r0
 8006c7a:	e7eb      	b.n	8006c54 <_dtoa_r+0xba4>
 8006c7c:	080084fb 	.word	0x080084fb
 8006c80:	08008454 	.word	0x08008454
 8006c84:	08008478 	.word	0x08008478

08006c88 <_localeconv_r>:
 8006c88:	4800      	ldr	r0, [pc, #0]	; (8006c8c <_localeconv_r+0x4>)
 8006c8a:	4770      	bx	lr
 8006c8c:	20000160 	.word	0x20000160

08006c90 <malloc>:
 8006c90:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <malloc+0xc>)
 8006c92:	4601      	mov	r1, r0
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	f000 bbe1 	b.w	800745c <_malloc_r>
 8006c9a:	bf00      	nop
 8006c9c:	2000000c 	.word	0x2000000c

08006ca0 <_Balloc>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	460d      	mov	r5, r1
 8006ca8:	b976      	cbnz	r6, 8006cc8 <_Balloc+0x28>
 8006caa:	2010      	movs	r0, #16
 8006cac:	f7ff fff0 	bl	8006c90 <malloc>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6260      	str	r0, [r4, #36]	; 0x24
 8006cb4:	b920      	cbnz	r0, 8006cc0 <_Balloc+0x20>
 8006cb6:	4b18      	ldr	r3, [pc, #96]	; (8006d18 <_Balloc+0x78>)
 8006cb8:	4818      	ldr	r0, [pc, #96]	; (8006d1c <_Balloc+0x7c>)
 8006cba:	2166      	movs	r1, #102	; 0x66
 8006cbc:	f000 fd94 	bl	80077e8 <__assert_func>
 8006cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cc4:	6006      	str	r6, [r0, #0]
 8006cc6:	60c6      	str	r6, [r0, #12]
 8006cc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cca:	68f3      	ldr	r3, [r6, #12]
 8006ccc:	b183      	cbz	r3, 8006cf0 <_Balloc+0x50>
 8006cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cd6:	b9b8      	cbnz	r0, 8006d08 <_Balloc+0x68>
 8006cd8:	2101      	movs	r1, #1
 8006cda:	fa01 f605 	lsl.w	r6, r1, r5
 8006cde:	1d72      	adds	r2, r6, #5
 8006ce0:	0092      	lsls	r2, r2, #2
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 fb5a 	bl	800739c <_calloc_r>
 8006ce8:	b160      	cbz	r0, 8006d04 <_Balloc+0x64>
 8006cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cee:	e00e      	b.n	8006d0e <_Balloc+0x6e>
 8006cf0:	2221      	movs	r2, #33	; 0x21
 8006cf2:	2104      	movs	r1, #4
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fb51 	bl	800739c <_calloc_r>
 8006cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cfc:	60f0      	str	r0, [r6, #12]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e4      	bne.n	8006cce <_Balloc+0x2e>
 8006d04:	2000      	movs	r0, #0
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	6802      	ldr	r2, [r0, #0]
 8006d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d14:	e7f7      	b.n	8006d06 <_Balloc+0x66>
 8006d16:	bf00      	nop
 8006d18:	08008485 	.word	0x08008485
 8006d1c:	0800850c 	.word	0x0800850c

08006d20 <_Bfree>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d24:	4605      	mov	r5, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	b976      	cbnz	r6, 8006d48 <_Bfree+0x28>
 8006d2a:	2010      	movs	r0, #16
 8006d2c:	f7ff ffb0 	bl	8006c90 <malloc>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6268      	str	r0, [r5, #36]	; 0x24
 8006d34:	b920      	cbnz	r0, 8006d40 <_Bfree+0x20>
 8006d36:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <_Bfree+0x3c>)
 8006d38:	4809      	ldr	r0, [pc, #36]	; (8006d60 <_Bfree+0x40>)
 8006d3a:	218a      	movs	r1, #138	; 0x8a
 8006d3c:	f000 fd54 	bl	80077e8 <__assert_func>
 8006d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d44:	6006      	str	r6, [r0, #0]
 8006d46:	60c6      	str	r6, [r0, #12]
 8006d48:	b13c      	cbz	r4, 8006d5a <_Bfree+0x3a>
 8006d4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d4c:	6862      	ldr	r2, [r4, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d54:	6021      	str	r1, [r4, #0]
 8006d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	08008485 	.word	0x08008485
 8006d60:	0800850c 	.word	0x0800850c

08006d64 <__multadd>:
 8006d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d68:	690e      	ldr	r6, [r1, #16]
 8006d6a:	4607      	mov	r7, r0
 8006d6c:	4698      	mov	r8, r3
 8006d6e:	460c      	mov	r4, r1
 8006d70:	f101 0014 	add.w	r0, r1, #20
 8006d74:	2300      	movs	r3, #0
 8006d76:	6805      	ldr	r5, [r0, #0]
 8006d78:	b2a9      	uxth	r1, r5
 8006d7a:	fb02 8101 	mla	r1, r2, r1, r8
 8006d7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006d82:	0c2d      	lsrs	r5, r5, #16
 8006d84:	fb02 c505 	mla	r5, r2, r5, ip
 8006d88:	b289      	uxth	r1, r1
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006d90:	429e      	cmp	r6, r3
 8006d92:	f840 1b04 	str.w	r1, [r0], #4
 8006d96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006d9a:	dcec      	bgt.n	8006d76 <__multadd+0x12>
 8006d9c:	f1b8 0f00 	cmp.w	r8, #0
 8006da0:	d022      	beq.n	8006de8 <__multadd+0x84>
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	42b3      	cmp	r3, r6
 8006da6:	dc19      	bgt.n	8006ddc <__multadd+0x78>
 8006da8:	6861      	ldr	r1, [r4, #4]
 8006daa:	4638      	mov	r0, r7
 8006dac:	3101      	adds	r1, #1
 8006dae:	f7ff ff77 	bl	8006ca0 <_Balloc>
 8006db2:	4605      	mov	r5, r0
 8006db4:	b928      	cbnz	r0, 8006dc2 <__multadd+0x5e>
 8006db6:	4602      	mov	r2, r0
 8006db8:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <__multadd+0x8c>)
 8006dba:	480e      	ldr	r0, [pc, #56]	; (8006df4 <__multadd+0x90>)
 8006dbc:	21b5      	movs	r1, #181	; 0xb5
 8006dbe:	f000 fd13 	bl	80077e8 <__assert_func>
 8006dc2:	6922      	ldr	r2, [r4, #16]
 8006dc4:	3202      	adds	r2, #2
 8006dc6:	f104 010c 	add.w	r1, r4, #12
 8006dca:	0092      	lsls	r2, r2, #2
 8006dcc:	300c      	adds	r0, #12
 8006dce:	f7fe fc43 	bl	8005658 <memcpy>
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	f7ff ffa3 	bl	8006d20 <_Bfree>
 8006dda:	462c      	mov	r4, r5
 8006ddc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006de0:	3601      	adds	r6, #1
 8006de2:	f8c3 8014 	str.w	r8, [r3, #20]
 8006de6:	6126      	str	r6, [r4, #16]
 8006de8:	4620      	mov	r0, r4
 8006dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dee:	bf00      	nop
 8006df0:	080084fb 	.word	0x080084fb
 8006df4:	0800850c 	.word	0x0800850c

08006df8 <__hi0bits>:
 8006df8:	0c03      	lsrs	r3, r0, #16
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	b9d3      	cbnz	r3, 8006e34 <__hi0bits+0x3c>
 8006dfe:	0400      	lsls	r0, r0, #16
 8006e00:	2310      	movs	r3, #16
 8006e02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e06:	bf04      	itt	eq
 8006e08:	0200      	lsleq	r0, r0, #8
 8006e0a:	3308      	addeq	r3, #8
 8006e0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e10:	bf04      	itt	eq
 8006e12:	0100      	lsleq	r0, r0, #4
 8006e14:	3304      	addeq	r3, #4
 8006e16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e1a:	bf04      	itt	eq
 8006e1c:	0080      	lsleq	r0, r0, #2
 8006e1e:	3302      	addeq	r3, #2
 8006e20:	2800      	cmp	r0, #0
 8006e22:	db05      	blt.n	8006e30 <__hi0bits+0x38>
 8006e24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e28:	f103 0301 	add.w	r3, r3, #1
 8006e2c:	bf08      	it	eq
 8006e2e:	2320      	moveq	r3, #32
 8006e30:	4618      	mov	r0, r3
 8006e32:	4770      	bx	lr
 8006e34:	2300      	movs	r3, #0
 8006e36:	e7e4      	b.n	8006e02 <__hi0bits+0xa>

08006e38 <__lo0bits>:
 8006e38:	6803      	ldr	r3, [r0, #0]
 8006e3a:	f013 0207 	ands.w	r2, r3, #7
 8006e3e:	4601      	mov	r1, r0
 8006e40:	d00b      	beq.n	8006e5a <__lo0bits+0x22>
 8006e42:	07da      	lsls	r2, r3, #31
 8006e44:	d424      	bmi.n	8006e90 <__lo0bits+0x58>
 8006e46:	0798      	lsls	r0, r3, #30
 8006e48:	bf49      	itett	mi
 8006e4a:	085b      	lsrmi	r3, r3, #1
 8006e4c:	089b      	lsrpl	r3, r3, #2
 8006e4e:	2001      	movmi	r0, #1
 8006e50:	600b      	strmi	r3, [r1, #0]
 8006e52:	bf5c      	itt	pl
 8006e54:	600b      	strpl	r3, [r1, #0]
 8006e56:	2002      	movpl	r0, #2
 8006e58:	4770      	bx	lr
 8006e5a:	b298      	uxth	r0, r3
 8006e5c:	b9b0      	cbnz	r0, 8006e8c <__lo0bits+0x54>
 8006e5e:	0c1b      	lsrs	r3, r3, #16
 8006e60:	2010      	movs	r0, #16
 8006e62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e66:	bf04      	itt	eq
 8006e68:	0a1b      	lsreq	r3, r3, #8
 8006e6a:	3008      	addeq	r0, #8
 8006e6c:	071a      	lsls	r2, r3, #28
 8006e6e:	bf04      	itt	eq
 8006e70:	091b      	lsreq	r3, r3, #4
 8006e72:	3004      	addeq	r0, #4
 8006e74:	079a      	lsls	r2, r3, #30
 8006e76:	bf04      	itt	eq
 8006e78:	089b      	lsreq	r3, r3, #2
 8006e7a:	3002      	addeq	r0, #2
 8006e7c:	07da      	lsls	r2, r3, #31
 8006e7e:	d403      	bmi.n	8006e88 <__lo0bits+0x50>
 8006e80:	085b      	lsrs	r3, r3, #1
 8006e82:	f100 0001 	add.w	r0, r0, #1
 8006e86:	d005      	beq.n	8006e94 <__lo0bits+0x5c>
 8006e88:	600b      	str	r3, [r1, #0]
 8006e8a:	4770      	bx	lr
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	e7e8      	b.n	8006e62 <__lo0bits+0x2a>
 8006e90:	2000      	movs	r0, #0
 8006e92:	4770      	bx	lr
 8006e94:	2020      	movs	r0, #32
 8006e96:	4770      	bx	lr

08006e98 <__i2b>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	f7ff feff 	bl	8006ca0 <_Balloc>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	b928      	cbnz	r0, 8006eb2 <__i2b+0x1a>
 8006ea6:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <__i2b+0x24>)
 8006ea8:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <__i2b+0x28>)
 8006eaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006eae:	f000 fc9b 	bl	80077e8 <__assert_func>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	6144      	str	r4, [r0, #20]
 8006eb6:	6103      	str	r3, [r0, #16]
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	bf00      	nop
 8006ebc:	080084fb 	.word	0x080084fb
 8006ec0:	0800850c 	.word	0x0800850c

08006ec4 <__multiply>:
 8006ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	4614      	mov	r4, r2
 8006eca:	690a      	ldr	r2, [r1, #16]
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	bfb8      	it	lt
 8006ed2:	460b      	movlt	r3, r1
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	bfbc      	itt	lt
 8006ed8:	4625      	movlt	r5, r4
 8006eda:	461c      	movlt	r4, r3
 8006edc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ee0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ee4:	68ab      	ldr	r3, [r5, #8]
 8006ee6:	6869      	ldr	r1, [r5, #4]
 8006ee8:	eb0a 0709 	add.w	r7, sl, r9
 8006eec:	42bb      	cmp	r3, r7
 8006eee:	b085      	sub	sp, #20
 8006ef0:	bfb8      	it	lt
 8006ef2:	3101      	addlt	r1, #1
 8006ef4:	f7ff fed4 	bl	8006ca0 <_Balloc>
 8006ef8:	b930      	cbnz	r0, 8006f08 <__multiply+0x44>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b42      	ldr	r3, [pc, #264]	; (8007008 <__multiply+0x144>)
 8006efe:	4843      	ldr	r0, [pc, #268]	; (800700c <__multiply+0x148>)
 8006f00:	f240 115d 	movw	r1, #349	; 0x15d
 8006f04:	f000 fc70 	bl	80077e8 <__assert_func>
 8006f08:	f100 0614 	add.w	r6, r0, #20
 8006f0c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006f10:	4633      	mov	r3, r6
 8006f12:	2200      	movs	r2, #0
 8006f14:	4543      	cmp	r3, r8
 8006f16:	d31e      	bcc.n	8006f56 <__multiply+0x92>
 8006f18:	f105 0c14 	add.w	ip, r5, #20
 8006f1c:	f104 0314 	add.w	r3, r4, #20
 8006f20:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006f24:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006f28:	9202      	str	r2, [sp, #8]
 8006f2a:	ebac 0205 	sub.w	r2, ip, r5
 8006f2e:	3a15      	subs	r2, #21
 8006f30:	f022 0203 	bic.w	r2, r2, #3
 8006f34:	3204      	adds	r2, #4
 8006f36:	f105 0115 	add.w	r1, r5, #21
 8006f3a:	458c      	cmp	ip, r1
 8006f3c:	bf38      	it	cc
 8006f3e:	2204      	movcc	r2, #4
 8006f40:	9201      	str	r2, [sp, #4]
 8006f42:	9a02      	ldr	r2, [sp, #8]
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d808      	bhi.n	8006f5c <__multiply+0x98>
 8006f4a:	2f00      	cmp	r7, #0
 8006f4c:	dc55      	bgt.n	8006ffa <__multiply+0x136>
 8006f4e:	6107      	str	r7, [r0, #16]
 8006f50:	b005      	add	sp, #20
 8006f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f56:	f843 2b04 	str.w	r2, [r3], #4
 8006f5a:	e7db      	b.n	8006f14 <__multiply+0x50>
 8006f5c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f60:	f1ba 0f00 	cmp.w	sl, #0
 8006f64:	d020      	beq.n	8006fa8 <__multiply+0xe4>
 8006f66:	f105 0e14 	add.w	lr, r5, #20
 8006f6a:	46b1      	mov	r9, r6
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006f72:	f8d9 b000 	ldr.w	fp, [r9]
 8006f76:	b2a1      	uxth	r1, r4
 8006f78:	fa1f fb8b 	uxth.w	fp, fp
 8006f7c:	fb0a b101 	mla	r1, sl, r1, fp
 8006f80:	4411      	add	r1, r2
 8006f82:	f8d9 2000 	ldr.w	r2, [r9]
 8006f86:	0c24      	lsrs	r4, r4, #16
 8006f88:	0c12      	lsrs	r2, r2, #16
 8006f8a:	fb0a 2404 	mla	r4, sl, r4, r2
 8006f8e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006f92:	b289      	uxth	r1, r1
 8006f94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006f98:	45f4      	cmp	ip, lr
 8006f9a:	f849 1b04 	str.w	r1, [r9], #4
 8006f9e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006fa2:	d8e4      	bhi.n	8006f6e <__multiply+0xaa>
 8006fa4:	9901      	ldr	r1, [sp, #4]
 8006fa6:	5072      	str	r2, [r6, r1]
 8006fa8:	9a03      	ldr	r2, [sp, #12]
 8006faa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	f1b9 0f00 	cmp.w	r9, #0
 8006fb4:	d01f      	beq.n	8006ff6 <__multiply+0x132>
 8006fb6:	6834      	ldr	r4, [r6, #0]
 8006fb8:	f105 0114 	add.w	r1, r5, #20
 8006fbc:	46b6      	mov	lr, r6
 8006fbe:	f04f 0a00 	mov.w	sl, #0
 8006fc2:	880a      	ldrh	r2, [r1, #0]
 8006fc4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006fc8:	fb09 b202 	mla	r2, r9, r2, fp
 8006fcc:	4492      	add	sl, r2
 8006fce:	b2a4      	uxth	r4, r4
 8006fd0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006fd4:	f84e 4b04 	str.w	r4, [lr], #4
 8006fd8:	f851 4b04 	ldr.w	r4, [r1], #4
 8006fdc:	f8be 2000 	ldrh.w	r2, [lr]
 8006fe0:	0c24      	lsrs	r4, r4, #16
 8006fe2:	fb09 2404 	mla	r4, r9, r4, r2
 8006fe6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006fea:	458c      	cmp	ip, r1
 8006fec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ff0:	d8e7      	bhi.n	8006fc2 <__multiply+0xfe>
 8006ff2:	9a01      	ldr	r2, [sp, #4]
 8006ff4:	50b4      	str	r4, [r6, r2]
 8006ff6:	3604      	adds	r6, #4
 8006ff8:	e7a3      	b.n	8006f42 <__multiply+0x7e>
 8006ffa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1a5      	bne.n	8006f4e <__multiply+0x8a>
 8007002:	3f01      	subs	r7, #1
 8007004:	e7a1      	b.n	8006f4a <__multiply+0x86>
 8007006:	bf00      	nop
 8007008:	080084fb 	.word	0x080084fb
 800700c:	0800850c 	.word	0x0800850c

08007010 <__pow5mult>:
 8007010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007014:	4615      	mov	r5, r2
 8007016:	f012 0203 	ands.w	r2, r2, #3
 800701a:	4606      	mov	r6, r0
 800701c:	460f      	mov	r7, r1
 800701e:	d007      	beq.n	8007030 <__pow5mult+0x20>
 8007020:	4c25      	ldr	r4, [pc, #148]	; (80070b8 <__pow5mult+0xa8>)
 8007022:	3a01      	subs	r2, #1
 8007024:	2300      	movs	r3, #0
 8007026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800702a:	f7ff fe9b 	bl	8006d64 <__multadd>
 800702e:	4607      	mov	r7, r0
 8007030:	10ad      	asrs	r5, r5, #2
 8007032:	d03d      	beq.n	80070b0 <__pow5mult+0xa0>
 8007034:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007036:	b97c      	cbnz	r4, 8007058 <__pow5mult+0x48>
 8007038:	2010      	movs	r0, #16
 800703a:	f7ff fe29 	bl	8006c90 <malloc>
 800703e:	4602      	mov	r2, r0
 8007040:	6270      	str	r0, [r6, #36]	; 0x24
 8007042:	b928      	cbnz	r0, 8007050 <__pow5mult+0x40>
 8007044:	4b1d      	ldr	r3, [pc, #116]	; (80070bc <__pow5mult+0xac>)
 8007046:	481e      	ldr	r0, [pc, #120]	; (80070c0 <__pow5mult+0xb0>)
 8007048:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800704c:	f000 fbcc 	bl	80077e8 <__assert_func>
 8007050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007054:	6004      	str	r4, [r0, #0]
 8007056:	60c4      	str	r4, [r0, #12]
 8007058:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800705c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007060:	b94c      	cbnz	r4, 8007076 <__pow5mult+0x66>
 8007062:	f240 2171 	movw	r1, #625	; 0x271
 8007066:	4630      	mov	r0, r6
 8007068:	f7ff ff16 	bl	8006e98 <__i2b>
 800706c:	2300      	movs	r3, #0
 800706e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007072:	4604      	mov	r4, r0
 8007074:	6003      	str	r3, [r0, #0]
 8007076:	f04f 0900 	mov.w	r9, #0
 800707a:	07eb      	lsls	r3, r5, #31
 800707c:	d50a      	bpl.n	8007094 <__pow5mult+0x84>
 800707e:	4639      	mov	r1, r7
 8007080:	4622      	mov	r2, r4
 8007082:	4630      	mov	r0, r6
 8007084:	f7ff ff1e 	bl	8006ec4 <__multiply>
 8007088:	4639      	mov	r1, r7
 800708a:	4680      	mov	r8, r0
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff fe47 	bl	8006d20 <_Bfree>
 8007092:	4647      	mov	r7, r8
 8007094:	106d      	asrs	r5, r5, #1
 8007096:	d00b      	beq.n	80070b0 <__pow5mult+0xa0>
 8007098:	6820      	ldr	r0, [r4, #0]
 800709a:	b938      	cbnz	r0, 80070ac <__pow5mult+0x9c>
 800709c:	4622      	mov	r2, r4
 800709e:	4621      	mov	r1, r4
 80070a0:	4630      	mov	r0, r6
 80070a2:	f7ff ff0f 	bl	8006ec4 <__multiply>
 80070a6:	6020      	str	r0, [r4, #0]
 80070a8:	f8c0 9000 	str.w	r9, [r0]
 80070ac:	4604      	mov	r4, r0
 80070ae:	e7e4      	b.n	800707a <__pow5mult+0x6a>
 80070b0:	4638      	mov	r0, r7
 80070b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b6:	bf00      	nop
 80070b8:	08008660 	.word	0x08008660
 80070bc:	08008485 	.word	0x08008485
 80070c0:	0800850c 	.word	0x0800850c

080070c4 <__lshift>:
 80070c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c8:	460c      	mov	r4, r1
 80070ca:	6849      	ldr	r1, [r1, #4]
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	4607      	mov	r7, r0
 80070d6:	4691      	mov	r9, r2
 80070d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070dc:	f108 0601 	add.w	r6, r8, #1
 80070e0:	42b3      	cmp	r3, r6
 80070e2:	db0b      	blt.n	80070fc <__lshift+0x38>
 80070e4:	4638      	mov	r0, r7
 80070e6:	f7ff fddb 	bl	8006ca0 <_Balloc>
 80070ea:	4605      	mov	r5, r0
 80070ec:	b948      	cbnz	r0, 8007102 <__lshift+0x3e>
 80070ee:	4602      	mov	r2, r0
 80070f0:	4b28      	ldr	r3, [pc, #160]	; (8007194 <__lshift+0xd0>)
 80070f2:	4829      	ldr	r0, [pc, #164]	; (8007198 <__lshift+0xd4>)
 80070f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070f8:	f000 fb76 	bl	80077e8 <__assert_func>
 80070fc:	3101      	adds	r1, #1
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	e7ee      	b.n	80070e0 <__lshift+0x1c>
 8007102:	2300      	movs	r3, #0
 8007104:	f100 0114 	add.w	r1, r0, #20
 8007108:	f100 0210 	add.w	r2, r0, #16
 800710c:	4618      	mov	r0, r3
 800710e:	4553      	cmp	r3, sl
 8007110:	db33      	blt.n	800717a <__lshift+0xb6>
 8007112:	6920      	ldr	r0, [r4, #16]
 8007114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007118:	f104 0314 	add.w	r3, r4, #20
 800711c:	f019 091f 	ands.w	r9, r9, #31
 8007120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007128:	d02b      	beq.n	8007182 <__lshift+0xbe>
 800712a:	f1c9 0e20 	rsb	lr, r9, #32
 800712e:	468a      	mov	sl, r1
 8007130:	2200      	movs	r2, #0
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	fa00 f009 	lsl.w	r0, r0, r9
 8007138:	4302      	orrs	r2, r0
 800713a:	f84a 2b04 	str.w	r2, [sl], #4
 800713e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007142:	459c      	cmp	ip, r3
 8007144:	fa22 f20e 	lsr.w	r2, r2, lr
 8007148:	d8f3      	bhi.n	8007132 <__lshift+0x6e>
 800714a:	ebac 0304 	sub.w	r3, ip, r4
 800714e:	3b15      	subs	r3, #21
 8007150:	f023 0303 	bic.w	r3, r3, #3
 8007154:	3304      	adds	r3, #4
 8007156:	f104 0015 	add.w	r0, r4, #21
 800715a:	4584      	cmp	ip, r0
 800715c:	bf38      	it	cc
 800715e:	2304      	movcc	r3, #4
 8007160:	50ca      	str	r2, [r1, r3]
 8007162:	b10a      	cbz	r2, 8007168 <__lshift+0xa4>
 8007164:	f108 0602 	add.w	r6, r8, #2
 8007168:	3e01      	subs	r6, #1
 800716a:	4638      	mov	r0, r7
 800716c:	612e      	str	r6, [r5, #16]
 800716e:	4621      	mov	r1, r4
 8007170:	f7ff fdd6 	bl	8006d20 <_Bfree>
 8007174:	4628      	mov	r0, r5
 8007176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717a:	f842 0f04 	str.w	r0, [r2, #4]!
 800717e:	3301      	adds	r3, #1
 8007180:	e7c5      	b.n	800710e <__lshift+0x4a>
 8007182:	3904      	subs	r1, #4
 8007184:	f853 2b04 	ldr.w	r2, [r3], #4
 8007188:	f841 2f04 	str.w	r2, [r1, #4]!
 800718c:	459c      	cmp	ip, r3
 800718e:	d8f9      	bhi.n	8007184 <__lshift+0xc0>
 8007190:	e7ea      	b.n	8007168 <__lshift+0xa4>
 8007192:	bf00      	nop
 8007194:	080084fb 	.word	0x080084fb
 8007198:	0800850c 	.word	0x0800850c

0800719c <__mcmp>:
 800719c:	b530      	push	{r4, r5, lr}
 800719e:	6902      	ldr	r2, [r0, #16]
 80071a0:	690c      	ldr	r4, [r1, #16]
 80071a2:	1b12      	subs	r2, r2, r4
 80071a4:	d10e      	bne.n	80071c4 <__mcmp+0x28>
 80071a6:	f100 0314 	add.w	r3, r0, #20
 80071aa:	3114      	adds	r1, #20
 80071ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071bc:	42a5      	cmp	r5, r4
 80071be:	d003      	beq.n	80071c8 <__mcmp+0x2c>
 80071c0:	d305      	bcc.n	80071ce <__mcmp+0x32>
 80071c2:	2201      	movs	r2, #1
 80071c4:	4610      	mov	r0, r2
 80071c6:	bd30      	pop	{r4, r5, pc}
 80071c8:	4283      	cmp	r3, r0
 80071ca:	d3f3      	bcc.n	80071b4 <__mcmp+0x18>
 80071cc:	e7fa      	b.n	80071c4 <__mcmp+0x28>
 80071ce:	f04f 32ff 	mov.w	r2, #4294967295
 80071d2:	e7f7      	b.n	80071c4 <__mcmp+0x28>

080071d4 <__mdiff>:
 80071d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d8:	460c      	mov	r4, r1
 80071da:	4606      	mov	r6, r0
 80071dc:	4611      	mov	r1, r2
 80071de:	4620      	mov	r0, r4
 80071e0:	4617      	mov	r7, r2
 80071e2:	f7ff ffdb 	bl	800719c <__mcmp>
 80071e6:	1e05      	subs	r5, r0, #0
 80071e8:	d110      	bne.n	800720c <__mdiff+0x38>
 80071ea:	4629      	mov	r1, r5
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7ff fd57 	bl	8006ca0 <_Balloc>
 80071f2:	b930      	cbnz	r0, 8007202 <__mdiff+0x2e>
 80071f4:	4b39      	ldr	r3, [pc, #228]	; (80072dc <__mdiff+0x108>)
 80071f6:	4602      	mov	r2, r0
 80071f8:	f240 2132 	movw	r1, #562	; 0x232
 80071fc:	4838      	ldr	r0, [pc, #224]	; (80072e0 <__mdiff+0x10c>)
 80071fe:	f000 faf3 	bl	80077e8 <__assert_func>
 8007202:	2301      	movs	r3, #1
 8007204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	bfa4      	itt	ge
 800720e:	463b      	movge	r3, r7
 8007210:	4627      	movge	r7, r4
 8007212:	4630      	mov	r0, r6
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	bfa6      	itte	ge
 8007218:	461c      	movge	r4, r3
 800721a:	2500      	movge	r5, #0
 800721c:	2501      	movlt	r5, #1
 800721e:	f7ff fd3f 	bl	8006ca0 <_Balloc>
 8007222:	b920      	cbnz	r0, 800722e <__mdiff+0x5a>
 8007224:	4b2d      	ldr	r3, [pc, #180]	; (80072dc <__mdiff+0x108>)
 8007226:	4602      	mov	r2, r0
 8007228:	f44f 7110 	mov.w	r1, #576	; 0x240
 800722c:	e7e6      	b.n	80071fc <__mdiff+0x28>
 800722e:	693e      	ldr	r6, [r7, #16]
 8007230:	60c5      	str	r5, [r0, #12]
 8007232:	6925      	ldr	r5, [r4, #16]
 8007234:	f107 0114 	add.w	r1, r7, #20
 8007238:	f104 0914 	add.w	r9, r4, #20
 800723c:	f100 0e14 	add.w	lr, r0, #20
 8007240:	f107 0210 	add.w	r2, r7, #16
 8007244:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007248:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800724c:	46f2      	mov	sl, lr
 800724e:	2700      	movs	r7, #0
 8007250:	f859 3b04 	ldr.w	r3, [r9], #4
 8007254:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007258:	fa1f f883 	uxth.w	r8, r3
 800725c:	fa17 f78b 	uxtah	r7, r7, fp
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	eba7 0808 	sub.w	r8, r7, r8
 8007266:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800726a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800726e:	fa1f f888 	uxth.w	r8, r8
 8007272:	141f      	asrs	r7, r3, #16
 8007274:	454d      	cmp	r5, r9
 8007276:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800727a:	f84a 3b04 	str.w	r3, [sl], #4
 800727e:	d8e7      	bhi.n	8007250 <__mdiff+0x7c>
 8007280:	1b2b      	subs	r3, r5, r4
 8007282:	3b15      	subs	r3, #21
 8007284:	f023 0303 	bic.w	r3, r3, #3
 8007288:	3304      	adds	r3, #4
 800728a:	3415      	adds	r4, #21
 800728c:	42a5      	cmp	r5, r4
 800728e:	bf38      	it	cc
 8007290:	2304      	movcc	r3, #4
 8007292:	4419      	add	r1, r3
 8007294:	4473      	add	r3, lr
 8007296:	469e      	mov	lr, r3
 8007298:	460d      	mov	r5, r1
 800729a:	4565      	cmp	r5, ip
 800729c:	d30e      	bcc.n	80072bc <__mdiff+0xe8>
 800729e:	f10c 0203 	add.w	r2, ip, #3
 80072a2:	1a52      	subs	r2, r2, r1
 80072a4:	f022 0203 	bic.w	r2, r2, #3
 80072a8:	3903      	subs	r1, #3
 80072aa:	458c      	cmp	ip, r1
 80072ac:	bf38      	it	cc
 80072ae:	2200      	movcc	r2, #0
 80072b0:	441a      	add	r2, r3
 80072b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80072b6:	b17b      	cbz	r3, 80072d8 <__mdiff+0x104>
 80072b8:	6106      	str	r6, [r0, #16]
 80072ba:	e7a5      	b.n	8007208 <__mdiff+0x34>
 80072bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80072c0:	fa17 f488 	uxtah	r4, r7, r8
 80072c4:	1422      	asrs	r2, r4, #16
 80072c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80072ca:	b2a4      	uxth	r4, r4
 80072cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80072d0:	f84e 4b04 	str.w	r4, [lr], #4
 80072d4:	1417      	asrs	r7, r2, #16
 80072d6:	e7e0      	b.n	800729a <__mdiff+0xc6>
 80072d8:	3e01      	subs	r6, #1
 80072da:	e7ea      	b.n	80072b2 <__mdiff+0xde>
 80072dc:	080084fb 	.word	0x080084fb
 80072e0:	0800850c 	.word	0x0800850c

080072e4 <__d2b>:
 80072e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072e8:	4689      	mov	r9, r1
 80072ea:	2101      	movs	r1, #1
 80072ec:	ec57 6b10 	vmov	r6, r7, d0
 80072f0:	4690      	mov	r8, r2
 80072f2:	f7ff fcd5 	bl	8006ca0 <_Balloc>
 80072f6:	4604      	mov	r4, r0
 80072f8:	b930      	cbnz	r0, 8007308 <__d2b+0x24>
 80072fa:	4602      	mov	r2, r0
 80072fc:	4b25      	ldr	r3, [pc, #148]	; (8007394 <__d2b+0xb0>)
 80072fe:	4826      	ldr	r0, [pc, #152]	; (8007398 <__d2b+0xb4>)
 8007300:	f240 310a 	movw	r1, #778	; 0x30a
 8007304:	f000 fa70 	bl	80077e8 <__assert_func>
 8007308:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800730c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007310:	bb35      	cbnz	r5, 8007360 <__d2b+0x7c>
 8007312:	2e00      	cmp	r6, #0
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	d028      	beq.n	800736a <__d2b+0x86>
 8007318:	4668      	mov	r0, sp
 800731a:	9600      	str	r6, [sp, #0]
 800731c:	f7ff fd8c 	bl	8006e38 <__lo0bits>
 8007320:	9900      	ldr	r1, [sp, #0]
 8007322:	b300      	cbz	r0, 8007366 <__d2b+0x82>
 8007324:	9a01      	ldr	r2, [sp, #4]
 8007326:	f1c0 0320 	rsb	r3, r0, #32
 800732a:	fa02 f303 	lsl.w	r3, r2, r3
 800732e:	430b      	orrs	r3, r1
 8007330:	40c2      	lsrs	r2, r0
 8007332:	6163      	str	r3, [r4, #20]
 8007334:	9201      	str	r2, [sp, #4]
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	61a3      	str	r3, [r4, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	bf14      	ite	ne
 800733e:	2202      	movne	r2, #2
 8007340:	2201      	moveq	r2, #1
 8007342:	6122      	str	r2, [r4, #16]
 8007344:	b1d5      	cbz	r5, 800737c <__d2b+0x98>
 8007346:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800734a:	4405      	add	r5, r0
 800734c:	f8c9 5000 	str.w	r5, [r9]
 8007350:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007354:	f8c8 0000 	str.w	r0, [r8]
 8007358:	4620      	mov	r0, r4
 800735a:	b003      	add	sp, #12
 800735c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007364:	e7d5      	b.n	8007312 <__d2b+0x2e>
 8007366:	6161      	str	r1, [r4, #20]
 8007368:	e7e5      	b.n	8007336 <__d2b+0x52>
 800736a:	a801      	add	r0, sp, #4
 800736c:	f7ff fd64 	bl	8006e38 <__lo0bits>
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	6163      	str	r3, [r4, #20]
 8007374:	2201      	movs	r2, #1
 8007376:	6122      	str	r2, [r4, #16]
 8007378:	3020      	adds	r0, #32
 800737a:	e7e3      	b.n	8007344 <__d2b+0x60>
 800737c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007380:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007384:	f8c9 0000 	str.w	r0, [r9]
 8007388:	6918      	ldr	r0, [r3, #16]
 800738a:	f7ff fd35 	bl	8006df8 <__hi0bits>
 800738e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007392:	e7df      	b.n	8007354 <__d2b+0x70>
 8007394:	080084fb 	.word	0x080084fb
 8007398:	0800850c 	.word	0x0800850c

0800739c <_calloc_r>:
 800739c:	b513      	push	{r0, r1, r4, lr}
 800739e:	434a      	muls	r2, r1
 80073a0:	4611      	mov	r1, r2
 80073a2:	9201      	str	r2, [sp, #4]
 80073a4:	f000 f85a 	bl	800745c <_malloc_r>
 80073a8:	4604      	mov	r4, r0
 80073aa:	b118      	cbz	r0, 80073b4 <_calloc_r+0x18>
 80073ac:	9a01      	ldr	r2, [sp, #4]
 80073ae:	2100      	movs	r1, #0
 80073b0:	f7fe f960 	bl	8005674 <memset>
 80073b4:	4620      	mov	r0, r4
 80073b6:	b002      	add	sp, #8
 80073b8:	bd10      	pop	{r4, pc}
	...

080073bc <_free_r>:
 80073bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073be:	2900      	cmp	r1, #0
 80073c0:	d048      	beq.n	8007454 <_free_r+0x98>
 80073c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c6:	9001      	str	r0, [sp, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f1a1 0404 	sub.w	r4, r1, #4
 80073ce:	bfb8      	it	lt
 80073d0:	18e4      	addlt	r4, r4, r3
 80073d2:	f000 fa65 	bl	80078a0 <__malloc_lock>
 80073d6:	4a20      	ldr	r2, [pc, #128]	; (8007458 <_free_r+0x9c>)
 80073d8:	9801      	ldr	r0, [sp, #4]
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	4615      	mov	r5, r2
 80073de:	b933      	cbnz	r3, 80073ee <_free_r+0x32>
 80073e0:	6063      	str	r3, [r4, #4]
 80073e2:	6014      	str	r4, [r2, #0]
 80073e4:	b003      	add	sp, #12
 80073e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073ea:	f000 ba5f 	b.w	80078ac <__malloc_unlock>
 80073ee:	42a3      	cmp	r3, r4
 80073f0:	d90b      	bls.n	800740a <_free_r+0x4e>
 80073f2:	6821      	ldr	r1, [r4, #0]
 80073f4:	1862      	adds	r2, r4, r1
 80073f6:	4293      	cmp	r3, r2
 80073f8:	bf04      	itt	eq
 80073fa:	681a      	ldreq	r2, [r3, #0]
 80073fc:	685b      	ldreq	r3, [r3, #4]
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	bf04      	itt	eq
 8007402:	1852      	addeq	r2, r2, r1
 8007404:	6022      	streq	r2, [r4, #0]
 8007406:	602c      	str	r4, [r5, #0]
 8007408:	e7ec      	b.n	80073e4 <_free_r+0x28>
 800740a:	461a      	mov	r2, r3
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	b10b      	cbz	r3, 8007414 <_free_r+0x58>
 8007410:	42a3      	cmp	r3, r4
 8007412:	d9fa      	bls.n	800740a <_free_r+0x4e>
 8007414:	6811      	ldr	r1, [r2, #0]
 8007416:	1855      	adds	r5, r2, r1
 8007418:	42a5      	cmp	r5, r4
 800741a:	d10b      	bne.n	8007434 <_free_r+0x78>
 800741c:	6824      	ldr	r4, [r4, #0]
 800741e:	4421      	add	r1, r4
 8007420:	1854      	adds	r4, r2, r1
 8007422:	42a3      	cmp	r3, r4
 8007424:	6011      	str	r1, [r2, #0]
 8007426:	d1dd      	bne.n	80073e4 <_free_r+0x28>
 8007428:	681c      	ldr	r4, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	6053      	str	r3, [r2, #4]
 800742e:	4421      	add	r1, r4
 8007430:	6011      	str	r1, [r2, #0]
 8007432:	e7d7      	b.n	80073e4 <_free_r+0x28>
 8007434:	d902      	bls.n	800743c <_free_r+0x80>
 8007436:	230c      	movs	r3, #12
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	e7d3      	b.n	80073e4 <_free_r+0x28>
 800743c:	6825      	ldr	r5, [r4, #0]
 800743e:	1961      	adds	r1, r4, r5
 8007440:	428b      	cmp	r3, r1
 8007442:	bf04      	itt	eq
 8007444:	6819      	ldreq	r1, [r3, #0]
 8007446:	685b      	ldreq	r3, [r3, #4]
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	bf04      	itt	eq
 800744c:	1949      	addeq	r1, r1, r5
 800744e:	6021      	streq	r1, [r4, #0]
 8007450:	6054      	str	r4, [r2, #4]
 8007452:	e7c7      	b.n	80073e4 <_free_r+0x28>
 8007454:	b003      	add	sp, #12
 8007456:	bd30      	pop	{r4, r5, pc}
 8007458:	200001fc 	.word	0x200001fc

0800745c <_malloc_r>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	1ccd      	adds	r5, r1, #3
 8007460:	f025 0503 	bic.w	r5, r5, #3
 8007464:	3508      	adds	r5, #8
 8007466:	2d0c      	cmp	r5, #12
 8007468:	bf38      	it	cc
 800746a:	250c      	movcc	r5, #12
 800746c:	2d00      	cmp	r5, #0
 800746e:	4606      	mov	r6, r0
 8007470:	db01      	blt.n	8007476 <_malloc_r+0x1a>
 8007472:	42a9      	cmp	r1, r5
 8007474:	d903      	bls.n	800747e <_malloc_r+0x22>
 8007476:	230c      	movs	r3, #12
 8007478:	6033      	str	r3, [r6, #0]
 800747a:	2000      	movs	r0, #0
 800747c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800747e:	f000 fa0f 	bl	80078a0 <__malloc_lock>
 8007482:	4921      	ldr	r1, [pc, #132]	; (8007508 <_malloc_r+0xac>)
 8007484:	680a      	ldr	r2, [r1, #0]
 8007486:	4614      	mov	r4, r2
 8007488:	b99c      	cbnz	r4, 80074b2 <_malloc_r+0x56>
 800748a:	4f20      	ldr	r7, [pc, #128]	; (800750c <_malloc_r+0xb0>)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	b923      	cbnz	r3, 800749a <_malloc_r+0x3e>
 8007490:	4621      	mov	r1, r4
 8007492:	4630      	mov	r0, r6
 8007494:	f000 f998 	bl	80077c8 <_sbrk_r>
 8007498:	6038      	str	r0, [r7, #0]
 800749a:	4629      	mov	r1, r5
 800749c:	4630      	mov	r0, r6
 800749e:	f000 f993 	bl	80077c8 <_sbrk_r>
 80074a2:	1c43      	adds	r3, r0, #1
 80074a4:	d123      	bne.n	80074ee <_malloc_r+0x92>
 80074a6:	230c      	movs	r3, #12
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 f9fe 	bl	80078ac <__malloc_unlock>
 80074b0:	e7e3      	b.n	800747a <_malloc_r+0x1e>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	1b5b      	subs	r3, r3, r5
 80074b6:	d417      	bmi.n	80074e8 <_malloc_r+0x8c>
 80074b8:	2b0b      	cmp	r3, #11
 80074ba:	d903      	bls.n	80074c4 <_malloc_r+0x68>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	441c      	add	r4, r3
 80074c0:	6025      	str	r5, [r4, #0]
 80074c2:	e004      	b.n	80074ce <_malloc_r+0x72>
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	42a2      	cmp	r2, r4
 80074c8:	bf0c      	ite	eq
 80074ca:	600b      	streq	r3, [r1, #0]
 80074cc:	6053      	strne	r3, [r2, #4]
 80074ce:	4630      	mov	r0, r6
 80074d0:	f000 f9ec 	bl	80078ac <__malloc_unlock>
 80074d4:	f104 000b 	add.w	r0, r4, #11
 80074d8:	1d23      	adds	r3, r4, #4
 80074da:	f020 0007 	bic.w	r0, r0, #7
 80074de:	1ac2      	subs	r2, r0, r3
 80074e0:	d0cc      	beq.n	800747c <_malloc_r+0x20>
 80074e2:	1a1b      	subs	r3, r3, r0
 80074e4:	50a3      	str	r3, [r4, r2]
 80074e6:	e7c9      	b.n	800747c <_malloc_r+0x20>
 80074e8:	4622      	mov	r2, r4
 80074ea:	6864      	ldr	r4, [r4, #4]
 80074ec:	e7cc      	b.n	8007488 <_malloc_r+0x2c>
 80074ee:	1cc4      	adds	r4, r0, #3
 80074f0:	f024 0403 	bic.w	r4, r4, #3
 80074f4:	42a0      	cmp	r0, r4
 80074f6:	d0e3      	beq.n	80074c0 <_malloc_r+0x64>
 80074f8:	1a21      	subs	r1, r4, r0
 80074fa:	4630      	mov	r0, r6
 80074fc:	f000 f964 	bl	80077c8 <_sbrk_r>
 8007500:	3001      	adds	r0, #1
 8007502:	d1dd      	bne.n	80074c0 <_malloc_r+0x64>
 8007504:	e7cf      	b.n	80074a6 <_malloc_r+0x4a>
 8007506:	bf00      	nop
 8007508:	200001fc 	.word	0x200001fc
 800750c:	20000200 	.word	0x20000200

08007510 <__ssputs_r>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	688e      	ldr	r6, [r1, #8]
 8007516:	429e      	cmp	r6, r3
 8007518:	4682      	mov	sl, r0
 800751a:	460c      	mov	r4, r1
 800751c:	4690      	mov	r8, r2
 800751e:	461f      	mov	r7, r3
 8007520:	d838      	bhi.n	8007594 <__ssputs_r+0x84>
 8007522:	898a      	ldrh	r2, [r1, #12]
 8007524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007528:	d032      	beq.n	8007590 <__ssputs_r+0x80>
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	6909      	ldr	r1, [r1, #16]
 800752e:	eba5 0901 	sub.w	r9, r5, r1
 8007532:	6965      	ldr	r5, [r4, #20]
 8007534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800753c:	3301      	adds	r3, #1
 800753e:	444b      	add	r3, r9
 8007540:	106d      	asrs	r5, r5, #1
 8007542:	429d      	cmp	r5, r3
 8007544:	bf38      	it	cc
 8007546:	461d      	movcc	r5, r3
 8007548:	0553      	lsls	r3, r2, #21
 800754a:	d531      	bpl.n	80075b0 <__ssputs_r+0xa0>
 800754c:	4629      	mov	r1, r5
 800754e:	f7ff ff85 	bl	800745c <_malloc_r>
 8007552:	4606      	mov	r6, r0
 8007554:	b950      	cbnz	r0, 800756c <__ssputs_r+0x5c>
 8007556:	230c      	movs	r3, #12
 8007558:	f8ca 3000 	str.w	r3, [sl]
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	f04f 30ff 	mov.w	r0, #4294967295
 8007568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756c:	6921      	ldr	r1, [r4, #16]
 800756e:	464a      	mov	r2, r9
 8007570:	f7fe f872 	bl	8005658 <memcpy>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800757a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	6126      	str	r6, [r4, #16]
 8007582:	6165      	str	r5, [r4, #20]
 8007584:	444e      	add	r6, r9
 8007586:	eba5 0509 	sub.w	r5, r5, r9
 800758a:	6026      	str	r6, [r4, #0]
 800758c:	60a5      	str	r5, [r4, #8]
 800758e:	463e      	mov	r6, r7
 8007590:	42be      	cmp	r6, r7
 8007592:	d900      	bls.n	8007596 <__ssputs_r+0x86>
 8007594:	463e      	mov	r6, r7
 8007596:	4632      	mov	r2, r6
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	4641      	mov	r1, r8
 800759c:	f000 f966 	bl	800786c <memmove>
 80075a0:	68a3      	ldr	r3, [r4, #8]
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	1b9b      	subs	r3, r3, r6
 80075a6:	4432      	add	r2, r6
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	6022      	str	r2, [r4, #0]
 80075ac:	2000      	movs	r0, #0
 80075ae:	e7db      	b.n	8007568 <__ssputs_r+0x58>
 80075b0:	462a      	mov	r2, r5
 80075b2:	f000 f981 	bl	80078b8 <_realloc_r>
 80075b6:	4606      	mov	r6, r0
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d1e1      	bne.n	8007580 <__ssputs_r+0x70>
 80075bc:	6921      	ldr	r1, [r4, #16]
 80075be:	4650      	mov	r0, sl
 80075c0:	f7ff fefc 	bl	80073bc <_free_r>
 80075c4:	e7c7      	b.n	8007556 <__ssputs_r+0x46>
	...

080075c8 <_svfiprintf_r>:
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075cc:	4698      	mov	r8, r3
 80075ce:	898b      	ldrh	r3, [r1, #12]
 80075d0:	061b      	lsls	r3, r3, #24
 80075d2:	b09d      	sub	sp, #116	; 0x74
 80075d4:	4607      	mov	r7, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	4614      	mov	r4, r2
 80075da:	d50e      	bpl.n	80075fa <_svfiprintf_r+0x32>
 80075dc:	690b      	ldr	r3, [r1, #16]
 80075de:	b963      	cbnz	r3, 80075fa <_svfiprintf_r+0x32>
 80075e0:	2140      	movs	r1, #64	; 0x40
 80075e2:	f7ff ff3b 	bl	800745c <_malloc_r>
 80075e6:	6028      	str	r0, [r5, #0]
 80075e8:	6128      	str	r0, [r5, #16]
 80075ea:	b920      	cbnz	r0, 80075f6 <_svfiprintf_r+0x2e>
 80075ec:	230c      	movs	r3, #12
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	e0d1      	b.n	800779a <_svfiprintf_r+0x1d2>
 80075f6:	2340      	movs	r3, #64	; 0x40
 80075f8:	616b      	str	r3, [r5, #20]
 80075fa:	2300      	movs	r3, #0
 80075fc:	9309      	str	r3, [sp, #36]	; 0x24
 80075fe:	2320      	movs	r3, #32
 8007600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007604:	f8cd 800c 	str.w	r8, [sp, #12]
 8007608:	2330      	movs	r3, #48	; 0x30
 800760a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80077b4 <_svfiprintf_r+0x1ec>
 800760e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007612:	f04f 0901 	mov.w	r9, #1
 8007616:	4623      	mov	r3, r4
 8007618:	469a      	mov	sl, r3
 800761a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800761e:	b10a      	cbz	r2, 8007624 <_svfiprintf_r+0x5c>
 8007620:	2a25      	cmp	r2, #37	; 0x25
 8007622:	d1f9      	bne.n	8007618 <_svfiprintf_r+0x50>
 8007624:	ebba 0b04 	subs.w	fp, sl, r4
 8007628:	d00b      	beq.n	8007642 <_svfiprintf_r+0x7a>
 800762a:	465b      	mov	r3, fp
 800762c:	4622      	mov	r2, r4
 800762e:	4629      	mov	r1, r5
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff ff6d 	bl	8007510 <__ssputs_r>
 8007636:	3001      	adds	r0, #1
 8007638:	f000 80aa 	beq.w	8007790 <_svfiprintf_r+0x1c8>
 800763c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800763e:	445a      	add	r2, fp
 8007640:	9209      	str	r2, [sp, #36]	; 0x24
 8007642:	f89a 3000 	ldrb.w	r3, [sl]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80a2 	beq.w	8007790 <_svfiprintf_r+0x1c8>
 800764c:	2300      	movs	r3, #0
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007656:	f10a 0a01 	add.w	sl, sl, #1
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	9307      	str	r3, [sp, #28]
 800765e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007662:	931a      	str	r3, [sp, #104]	; 0x68
 8007664:	4654      	mov	r4, sl
 8007666:	2205      	movs	r2, #5
 8007668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800766c:	4851      	ldr	r0, [pc, #324]	; (80077b4 <_svfiprintf_r+0x1ec>)
 800766e:	f7f8 fdbf 	bl	80001f0 <memchr>
 8007672:	9a04      	ldr	r2, [sp, #16]
 8007674:	b9d8      	cbnz	r0, 80076ae <_svfiprintf_r+0xe6>
 8007676:	06d0      	lsls	r0, r2, #27
 8007678:	bf44      	itt	mi
 800767a:	2320      	movmi	r3, #32
 800767c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007680:	0711      	lsls	r1, r2, #28
 8007682:	bf44      	itt	mi
 8007684:	232b      	movmi	r3, #43	; 0x2b
 8007686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800768a:	f89a 3000 	ldrb.w	r3, [sl]
 800768e:	2b2a      	cmp	r3, #42	; 0x2a
 8007690:	d015      	beq.n	80076be <_svfiprintf_r+0xf6>
 8007692:	9a07      	ldr	r2, [sp, #28]
 8007694:	4654      	mov	r4, sl
 8007696:	2000      	movs	r0, #0
 8007698:	f04f 0c0a 	mov.w	ip, #10
 800769c:	4621      	mov	r1, r4
 800769e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a2:	3b30      	subs	r3, #48	; 0x30
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	d94e      	bls.n	8007746 <_svfiprintf_r+0x17e>
 80076a8:	b1b0      	cbz	r0, 80076d8 <_svfiprintf_r+0x110>
 80076aa:	9207      	str	r2, [sp, #28]
 80076ac:	e014      	b.n	80076d8 <_svfiprintf_r+0x110>
 80076ae:	eba0 0308 	sub.w	r3, r0, r8
 80076b2:	fa09 f303 	lsl.w	r3, r9, r3
 80076b6:	4313      	orrs	r3, r2
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	46a2      	mov	sl, r4
 80076bc:	e7d2      	b.n	8007664 <_svfiprintf_r+0x9c>
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	1d19      	adds	r1, r3, #4
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	9103      	str	r1, [sp, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bfbb      	ittet	lt
 80076ca:	425b      	neglt	r3, r3
 80076cc:	f042 0202 	orrlt.w	r2, r2, #2
 80076d0:	9307      	strge	r3, [sp, #28]
 80076d2:	9307      	strlt	r3, [sp, #28]
 80076d4:	bfb8      	it	lt
 80076d6:	9204      	strlt	r2, [sp, #16]
 80076d8:	7823      	ldrb	r3, [r4, #0]
 80076da:	2b2e      	cmp	r3, #46	; 0x2e
 80076dc:	d10c      	bne.n	80076f8 <_svfiprintf_r+0x130>
 80076de:	7863      	ldrb	r3, [r4, #1]
 80076e0:	2b2a      	cmp	r3, #42	; 0x2a
 80076e2:	d135      	bne.n	8007750 <_svfiprintf_r+0x188>
 80076e4:	9b03      	ldr	r3, [sp, #12]
 80076e6:	1d1a      	adds	r2, r3, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	9203      	str	r2, [sp, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bfb8      	it	lt
 80076f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80076f4:	3402      	adds	r4, #2
 80076f6:	9305      	str	r3, [sp, #20]
 80076f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077c4 <_svfiprintf_r+0x1fc>
 80076fc:	7821      	ldrb	r1, [r4, #0]
 80076fe:	2203      	movs	r2, #3
 8007700:	4650      	mov	r0, sl
 8007702:	f7f8 fd75 	bl	80001f0 <memchr>
 8007706:	b140      	cbz	r0, 800771a <_svfiprintf_r+0x152>
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	eba0 000a 	sub.w	r0, r0, sl
 800770e:	fa03 f000 	lsl.w	r0, r3, r0
 8007712:	9b04      	ldr	r3, [sp, #16]
 8007714:	4303      	orrs	r3, r0
 8007716:	3401      	adds	r4, #1
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771e:	4826      	ldr	r0, [pc, #152]	; (80077b8 <_svfiprintf_r+0x1f0>)
 8007720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007724:	2206      	movs	r2, #6
 8007726:	f7f8 fd63 	bl	80001f0 <memchr>
 800772a:	2800      	cmp	r0, #0
 800772c:	d038      	beq.n	80077a0 <_svfiprintf_r+0x1d8>
 800772e:	4b23      	ldr	r3, [pc, #140]	; (80077bc <_svfiprintf_r+0x1f4>)
 8007730:	bb1b      	cbnz	r3, 800777a <_svfiprintf_r+0x1b2>
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	3307      	adds	r3, #7
 8007736:	f023 0307 	bic.w	r3, r3, #7
 800773a:	3308      	adds	r3, #8
 800773c:	9303      	str	r3, [sp, #12]
 800773e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007740:	4433      	add	r3, r6
 8007742:	9309      	str	r3, [sp, #36]	; 0x24
 8007744:	e767      	b.n	8007616 <_svfiprintf_r+0x4e>
 8007746:	fb0c 3202 	mla	r2, ip, r2, r3
 800774a:	460c      	mov	r4, r1
 800774c:	2001      	movs	r0, #1
 800774e:	e7a5      	b.n	800769c <_svfiprintf_r+0xd4>
 8007750:	2300      	movs	r3, #0
 8007752:	3401      	adds	r4, #1
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	4619      	mov	r1, r3
 8007758:	f04f 0c0a 	mov.w	ip, #10
 800775c:	4620      	mov	r0, r4
 800775e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007762:	3a30      	subs	r2, #48	; 0x30
 8007764:	2a09      	cmp	r2, #9
 8007766:	d903      	bls.n	8007770 <_svfiprintf_r+0x1a8>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0c5      	beq.n	80076f8 <_svfiprintf_r+0x130>
 800776c:	9105      	str	r1, [sp, #20]
 800776e:	e7c3      	b.n	80076f8 <_svfiprintf_r+0x130>
 8007770:	fb0c 2101 	mla	r1, ip, r1, r2
 8007774:	4604      	mov	r4, r0
 8007776:	2301      	movs	r3, #1
 8007778:	e7f0      	b.n	800775c <_svfiprintf_r+0x194>
 800777a:	ab03      	add	r3, sp, #12
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	462a      	mov	r2, r5
 8007780:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <_svfiprintf_r+0x1f8>)
 8007782:	a904      	add	r1, sp, #16
 8007784:	4638      	mov	r0, r7
 8007786:	f7fe f81d 	bl	80057c4 <_printf_float>
 800778a:	1c42      	adds	r2, r0, #1
 800778c:	4606      	mov	r6, r0
 800778e:	d1d6      	bne.n	800773e <_svfiprintf_r+0x176>
 8007790:	89ab      	ldrh	r3, [r5, #12]
 8007792:	065b      	lsls	r3, r3, #25
 8007794:	f53f af2c 	bmi.w	80075f0 <_svfiprintf_r+0x28>
 8007798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800779a:	b01d      	add	sp, #116	; 0x74
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	ab03      	add	r3, sp, #12
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	462a      	mov	r2, r5
 80077a6:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <_svfiprintf_r+0x1f8>)
 80077a8:	a904      	add	r1, sp, #16
 80077aa:	4638      	mov	r0, r7
 80077ac:	f7fe faae 	bl	8005d0c <_printf_i>
 80077b0:	e7eb      	b.n	800778a <_svfiprintf_r+0x1c2>
 80077b2:	bf00      	nop
 80077b4:	0800866c 	.word	0x0800866c
 80077b8:	08008676 	.word	0x08008676
 80077bc:	080057c5 	.word	0x080057c5
 80077c0:	08007511 	.word	0x08007511
 80077c4:	08008672 	.word	0x08008672

080077c8 <_sbrk_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d06      	ldr	r5, [pc, #24]	; (80077e4 <_sbrk_r+0x1c>)
 80077cc:	2300      	movs	r3, #0
 80077ce:	4604      	mov	r4, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	602b      	str	r3, [r5, #0]
 80077d4:	f7fa f942 	bl	8001a5c <_sbrk>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_sbrk_r+0x1a>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_sbrk_r+0x1a>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	2000039c 	.word	0x2000039c

080077e8 <__assert_func>:
 80077e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ea:	4614      	mov	r4, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <__assert_func+0x2c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4605      	mov	r5, r0
 80077f4:	68d8      	ldr	r0, [r3, #12]
 80077f6:	b14c      	cbz	r4, 800780c <__assert_func+0x24>
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <__assert_func+0x30>)
 80077fa:	9100      	str	r1, [sp, #0]
 80077fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007800:	4906      	ldr	r1, [pc, #24]	; (800781c <__assert_func+0x34>)
 8007802:	462b      	mov	r3, r5
 8007804:	f000 f80e 	bl	8007824 <fiprintf>
 8007808:	f000 faa4 	bl	8007d54 <abort>
 800780c:	4b04      	ldr	r3, [pc, #16]	; (8007820 <__assert_func+0x38>)
 800780e:	461c      	mov	r4, r3
 8007810:	e7f3      	b.n	80077fa <__assert_func+0x12>
 8007812:	bf00      	nop
 8007814:	2000000c 	.word	0x2000000c
 8007818:	0800867d 	.word	0x0800867d
 800781c:	0800868a 	.word	0x0800868a
 8007820:	080086b8 	.word	0x080086b8

08007824 <fiprintf>:
 8007824:	b40e      	push	{r1, r2, r3}
 8007826:	b503      	push	{r0, r1, lr}
 8007828:	4601      	mov	r1, r0
 800782a:	ab03      	add	r3, sp, #12
 800782c:	4805      	ldr	r0, [pc, #20]	; (8007844 <fiprintf+0x20>)
 800782e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007832:	6800      	ldr	r0, [r0, #0]
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	f000 f88f 	bl	8007958 <_vfiprintf_r>
 800783a:	b002      	add	sp, #8
 800783c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007840:	b003      	add	sp, #12
 8007842:	4770      	bx	lr
 8007844:	2000000c 	.word	0x2000000c

08007848 <__ascii_mbtowc>:
 8007848:	b082      	sub	sp, #8
 800784a:	b901      	cbnz	r1, 800784e <__ascii_mbtowc+0x6>
 800784c:	a901      	add	r1, sp, #4
 800784e:	b142      	cbz	r2, 8007862 <__ascii_mbtowc+0x1a>
 8007850:	b14b      	cbz	r3, 8007866 <__ascii_mbtowc+0x1e>
 8007852:	7813      	ldrb	r3, [r2, #0]
 8007854:	600b      	str	r3, [r1, #0]
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	1e10      	subs	r0, r2, #0
 800785a:	bf18      	it	ne
 800785c:	2001      	movne	r0, #1
 800785e:	b002      	add	sp, #8
 8007860:	4770      	bx	lr
 8007862:	4610      	mov	r0, r2
 8007864:	e7fb      	b.n	800785e <__ascii_mbtowc+0x16>
 8007866:	f06f 0001 	mvn.w	r0, #1
 800786a:	e7f8      	b.n	800785e <__ascii_mbtowc+0x16>

0800786c <memmove>:
 800786c:	4288      	cmp	r0, r1
 800786e:	b510      	push	{r4, lr}
 8007870:	eb01 0402 	add.w	r4, r1, r2
 8007874:	d902      	bls.n	800787c <memmove+0x10>
 8007876:	4284      	cmp	r4, r0
 8007878:	4623      	mov	r3, r4
 800787a:	d807      	bhi.n	800788c <memmove+0x20>
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	42a1      	cmp	r1, r4
 8007880:	d008      	beq.n	8007894 <memmove+0x28>
 8007882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800788a:	e7f8      	b.n	800787e <memmove+0x12>
 800788c:	4402      	add	r2, r0
 800788e:	4601      	mov	r1, r0
 8007890:	428a      	cmp	r2, r1
 8007892:	d100      	bne.n	8007896 <memmove+0x2a>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800789a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789e:	e7f7      	b.n	8007890 <memmove+0x24>

080078a0 <__malloc_lock>:
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <__malloc_lock+0x8>)
 80078a2:	f000 bc17 	b.w	80080d4 <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	200003a4 	.word	0x200003a4

080078ac <__malloc_unlock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__malloc_unlock+0x8>)
 80078ae:	f000 bc12 	b.w	80080d6 <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	200003a4 	.word	0x200003a4

080078b8 <_realloc_r>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	4607      	mov	r7, r0
 80078bc:	4614      	mov	r4, r2
 80078be:	460e      	mov	r6, r1
 80078c0:	b921      	cbnz	r1, 80078cc <_realloc_r+0x14>
 80078c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078c6:	4611      	mov	r1, r2
 80078c8:	f7ff bdc8 	b.w	800745c <_malloc_r>
 80078cc:	b922      	cbnz	r2, 80078d8 <_realloc_r+0x20>
 80078ce:	f7ff fd75 	bl	80073bc <_free_r>
 80078d2:	4625      	mov	r5, r4
 80078d4:	4628      	mov	r0, r5
 80078d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d8:	f000 fc62 	bl	80081a0 <_malloc_usable_size_r>
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d20f      	bcs.n	8007900 <_realloc_r+0x48>
 80078e0:	4621      	mov	r1, r4
 80078e2:	4638      	mov	r0, r7
 80078e4:	f7ff fdba 	bl	800745c <_malloc_r>
 80078e8:	4605      	mov	r5, r0
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d0f2      	beq.n	80078d4 <_realloc_r+0x1c>
 80078ee:	4631      	mov	r1, r6
 80078f0:	4622      	mov	r2, r4
 80078f2:	f7fd feb1 	bl	8005658 <memcpy>
 80078f6:	4631      	mov	r1, r6
 80078f8:	4638      	mov	r0, r7
 80078fa:	f7ff fd5f 	bl	80073bc <_free_r>
 80078fe:	e7e9      	b.n	80078d4 <_realloc_r+0x1c>
 8007900:	4635      	mov	r5, r6
 8007902:	e7e7      	b.n	80078d4 <_realloc_r+0x1c>

08007904 <__sfputc_r>:
 8007904:	6893      	ldr	r3, [r2, #8]
 8007906:	3b01      	subs	r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	b410      	push	{r4}
 800790c:	6093      	str	r3, [r2, #8]
 800790e:	da08      	bge.n	8007922 <__sfputc_r+0x1e>
 8007910:	6994      	ldr	r4, [r2, #24]
 8007912:	42a3      	cmp	r3, r4
 8007914:	db01      	blt.n	800791a <__sfputc_r+0x16>
 8007916:	290a      	cmp	r1, #10
 8007918:	d103      	bne.n	8007922 <__sfputc_r+0x1e>
 800791a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800791e:	f000 b94b 	b.w	8007bb8 <__swbuf_r>
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	1c58      	adds	r0, r3, #1
 8007926:	6010      	str	r0, [r2, #0]
 8007928:	7019      	strb	r1, [r3, #0]
 800792a:	4608      	mov	r0, r1
 800792c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007930:	4770      	bx	lr

08007932 <__sfputs_r>:
 8007932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007934:	4606      	mov	r6, r0
 8007936:	460f      	mov	r7, r1
 8007938:	4614      	mov	r4, r2
 800793a:	18d5      	adds	r5, r2, r3
 800793c:	42ac      	cmp	r4, r5
 800793e:	d101      	bne.n	8007944 <__sfputs_r+0x12>
 8007940:	2000      	movs	r0, #0
 8007942:	e007      	b.n	8007954 <__sfputs_r+0x22>
 8007944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007948:	463a      	mov	r2, r7
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ffda 	bl	8007904 <__sfputc_r>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d1f3      	bne.n	800793c <__sfputs_r+0xa>
 8007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007958 <_vfiprintf_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	460d      	mov	r5, r1
 800795e:	b09d      	sub	sp, #116	; 0x74
 8007960:	4614      	mov	r4, r2
 8007962:	4698      	mov	r8, r3
 8007964:	4606      	mov	r6, r0
 8007966:	b118      	cbz	r0, 8007970 <_vfiprintf_r+0x18>
 8007968:	6983      	ldr	r3, [r0, #24]
 800796a:	b90b      	cbnz	r3, 8007970 <_vfiprintf_r+0x18>
 800796c:	f000 fb14 	bl	8007f98 <__sinit>
 8007970:	4b89      	ldr	r3, [pc, #548]	; (8007b98 <_vfiprintf_r+0x240>)
 8007972:	429d      	cmp	r5, r3
 8007974:	d11b      	bne.n	80079ae <_vfiprintf_r+0x56>
 8007976:	6875      	ldr	r5, [r6, #4]
 8007978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800797a:	07d9      	lsls	r1, r3, #31
 800797c:	d405      	bmi.n	800798a <_vfiprintf_r+0x32>
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	059a      	lsls	r2, r3, #22
 8007982:	d402      	bmi.n	800798a <_vfiprintf_r+0x32>
 8007984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007986:	f000 fba5 	bl	80080d4 <__retarget_lock_acquire_recursive>
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	071b      	lsls	r3, r3, #28
 800798e:	d501      	bpl.n	8007994 <_vfiprintf_r+0x3c>
 8007990:	692b      	ldr	r3, [r5, #16]
 8007992:	b9eb      	cbnz	r3, 80079d0 <_vfiprintf_r+0x78>
 8007994:	4629      	mov	r1, r5
 8007996:	4630      	mov	r0, r6
 8007998:	f000 f96e 	bl	8007c78 <__swsetup_r>
 800799c:	b1c0      	cbz	r0, 80079d0 <_vfiprintf_r+0x78>
 800799e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079a0:	07dc      	lsls	r4, r3, #31
 80079a2:	d50e      	bpl.n	80079c2 <_vfiprintf_r+0x6a>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	b01d      	add	sp, #116	; 0x74
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	4b7b      	ldr	r3, [pc, #492]	; (8007b9c <_vfiprintf_r+0x244>)
 80079b0:	429d      	cmp	r5, r3
 80079b2:	d101      	bne.n	80079b8 <_vfiprintf_r+0x60>
 80079b4:	68b5      	ldr	r5, [r6, #8]
 80079b6:	e7df      	b.n	8007978 <_vfiprintf_r+0x20>
 80079b8:	4b79      	ldr	r3, [pc, #484]	; (8007ba0 <_vfiprintf_r+0x248>)
 80079ba:	429d      	cmp	r5, r3
 80079bc:	bf08      	it	eq
 80079be:	68f5      	ldreq	r5, [r6, #12]
 80079c0:	e7da      	b.n	8007978 <_vfiprintf_r+0x20>
 80079c2:	89ab      	ldrh	r3, [r5, #12]
 80079c4:	0598      	lsls	r0, r3, #22
 80079c6:	d4ed      	bmi.n	80079a4 <_vfiprintf_r+0x4c>
 80079c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ca:	f000 fb84 	bl	80080d6 <__retarget_lock_release_recursive>
 80079ce:	e7e9      	b.n	80079a4 <_vfiprintf_r+0x4c>
 80079d0:	2300      	movs	r3, #0
 80079d2:	9309      	str	r3, [sp, #36]	; 0x24
 80079d4:	2320      	movs	r3, #32
 80079d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079da:	f8cd 800c 	str.w	r8, [sp, #12]
 80079de:	2330      	movs	r3, #48	; 0x30
 80079e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ba4 <_vfiprintf_r+0x24c>
 80079e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079e8:	f04f 0901 	mov.w	r9, #1
 80079ec:	4623      	mov	r3, r4
 80079ee:	469a      	mov	sl, r3
 80079f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079f4:	b10a      	cbz	r2, 80079fa <_vfiprintf_r+0xa2>
 80079f6:	2a25      	cmp	r2, #37	; 0x25
 80079f8:	d1f9      	bne.n	80079ee <_vfiprintf_r+0x96>
 80079fa:	ebba 0b04 	subs.w	fp, sl, r4
 80079fe:	d00b      	beq.n	8007a18 <_vfiprintf_r+0xc0>
 8007a00:	465b      	mov	r3, fp
 8007a02:	4622      	mov	r2, r4
 8007a04:	4629      	mov	r1, r5
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ff93 	bl	8007932 <__sfputs_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f000 80aa 	beq.w	8007b66 <_vfiprintf_r+0x20e>
 8007a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a14:	445a      	add	r2, fp
 8007a16:	9209      	str	r2, [sp, #36]	; 0x24
 8007a18:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80a2 	beq.w	8007b66 <_vfiprintf_r+0x20e>
 8007a22:	2300      	movs	r3, #0
 8007a24:	f04f 32ff 	mov.w	r2, #4294967295
 8007a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a2c:	f10a 0a01 	add.w	sl, sl, #1
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	9307      	str	r3, [sp, #28]
 8007a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a38:	931a      	str	r3, [sp, #104]	; 0x68
 8007a3a:	4654      	mov	r4, sl
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a42:	4858      	ldr	r0, [pc, #352]	; (8007ba4 <_vfiprintf_r+0x24c>)
 8007a44:	f7f8 fbd4 	bl	80001f0 <memchr>
 8007a48:	9a04      	ldr	r2, [sp, #16]
 8007a4a:	b9d8      	cbnz	r0, 8007a84 <_vfiprintf_r+0x12c>
 8007a4c:	06d1      	lsls	r1, r2, #27
 8007a4e:	bf44      	itt	mi
 8007a50:	2320      	movmi	r3, #32
 8007a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a56:	0713      	lsls	r3, r2, #28
 8007a58:	bf44      	itt	mi
 8007a5a:	232b      	movmi	r3, #43	; 0x2b
 8007a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a60:	f89a 3000 	ldrb.w	r3, [sl]
 8007a64:	2b2a      	cmp	r3, #42	; 0x2a
 8007a66:	d015      	beq.n	8007a94 <_vfiprintf_r+0x13c>
 8007a68:	9a07      	ldr	r2, [sp, #28]
 8007a6a:	4654      	mov	r4, sl
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f04f 0c0a 	mov.w	ip, #10
 8007a72:	4621      	mov	r1, r4
 8007a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a78:	3b30      	subs	r3, #48	; 0x30
 8007a7a:	2b09      	cmp	r3, #9
 8007a7c:	d94e      	bls.n	8007b1c <_vfiprintf_r+0x1c4>
 8007a7e:	b1b0      	cbz	r0, 8007aae <_vfiprintf_r+0x156>
 8007a80:	9207      	str	r2, [sp, #28]
 8007a82:	e014      	b.n	8007aae <_vfiprintf_r+0x156>
 8007a84:	eba0 0308 	sub.w	r3, r0, r8
 8007a88:	fa09 f303 	lsl.w	r3, r9, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	9304      	str	r3, [sp, #16]
 8007a90:	46a2      	mov	sl, r4
 8007a92:	e7d2      	b.n	8007a3a <_vfiprintf_r+0xe2>
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	1d19      	adds	r1, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	9103      	str	r1, [sp, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bfbb      	ittet	lt
 8007aa0:	425b      	neglt	r3, r3
 8007aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8007aa6:	9307      	strge	r3, [sp, #28]
 8007aa8:	9307      	strlt	r3, [sp, #28]
 8007aaa:	bfb8      	it	lt
 8007aac:	9204      	strlt	r2, [sp, #16]
 8007aae:	7823      	ldrb	r3, [r4, #0]
 8007ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ab2:	d10c      	bne.n	8007ace <_vfiprintf_r+0x176>
 8007ab4:	7863      	ldrb	r3, [r4, #1]
 8007ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab8:	d135      	bne.n	8007b26 <_vfiprintf_r+0x1ce>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	1d1a      	adds	r2, r3, #4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	9203      	str	r2, [sp, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bfb8      	it	lt
 8007ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aca:	3402      	adds	r4, #2
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bb4 <_vfiprintf_r+0x25c>
 8007ad2:	7821      	ldrb	r1, [r4, #0]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	f7f8 fb8a 	bl	80001f0 <memchr>
 8007adc:	b140      	cbz	r0, 8007af0 <_vfiprintf_r+0x198>
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	eba0 000a 	sub.w	r0, r0, sl
 8007ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ae8:	9b04      	ldr	r3, [sp, #16]
 8007aea:	4303      	orrs	r3, r0
 8007aec:	3401      	adds	r4, #1
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af4:	482c      	ldr	r0, [pc, #176]	; (8007ba8 <_vfiprintf_r+0x250>)
 8007af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007afa:	2206      	movs	r2, #6
 8007afc:	f7f8 fb78 	bl	80001f0 <memchr>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d03f      	beq.n	8007b84 <_vfiprintf_r+0x22c>
 8007b04:	4b29      	ldr	r3, [pc, #164]	; (8007bac <_vfiprintf_r+0x254>)
 8007b06:	bb1b      	cbnz	r3, 8007b50 <_vfiprintf_r+0x1f8>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	3307      	adds	r3, #7
 8007b0c:	f023 0307 	bic.w	r3, r3, #7
 8007b10:	3308      	adds	r3, #8
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	443b      	add	r3, r7
 8007b18:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1a:	e767      	b.n	80079ec <_vfiprintf_r+0x94>
 8007b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b20:	460c      	mov	r4, r1
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7a5      	b.n	8007a72 <_vfiprintf_r+0x11a>
 8007b26:	2300      	movs	r3, #0
 8007b28:	3401      	adds	r4, #1
 8007b2a:	9305      	str	r3, [sp, #20]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f04f 0c0a 	mov.w	ip, #10
 8007b32:	4620      	mov	r0, r4
 8007b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b38:	3a30      	subs	r2, #48	; 0x30
 8007b3a:	2a09      	cmp	r2, #9
 8007b3c:	d903      	bls.n	8007b46 <_vfiprintf_r+0x1ee>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0c5      	beq.n	8007ace <_vfiprintf_r+0x176>
 8007b42:	9105      	str	r1, [sp, #20]
 8007b44:	e7c3      	b.n	8007ace <_vfiprintf_r+0x176>
 8007b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e7f0      	b.n	8007b32 <_vfiprintf_r+0x1da>
 8007b50:	ab03      	add	r3, sp, #12
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	462a      	mov	r2, r5
 8007b56:	4b16      	ldr	r3, [pc, #88]	; (8007bb0 <_vfiprintf_r+0x258>)
 8007b58:	a904      	add	r1, sp, #16
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7fd fe32 	bl	80057c4 <_printf_float>
 8007b60:	4607      	mov	r7, r0
 8007b62:	1c78      	adds	r0, r7, #1
 8007b64:	d1d6      	bne.n	8007b14 <_vfiprintf_r+0x1bc>
 8007b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b68:	07d9      	lsls	r1, r3, #31
 8007b6a:	d405      	bmi.n	8007b78 <_vfiprintf_r+0x220>
 8007b6c:	89ab      	ldrh	r3, [r5, #12]
 8007b6e:	059a      	lsls	r2, r3, #22
 8007b70:	d402      	bmi.n	8007b78 <_vfiprintf_r+0x220>
 8007b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b74:	f000 faaf 	bl	80080d6 <__retarget_lock_release_recursive>
 8007b78:	89ab      	ldrh	r3, [r5, #12]
 8007b7a:	065b      	lsls	r3, r3, #25
 8007b7c:	f53f af12 	bmi.w	80079a4 <_vfiprintf_r+0x4c>
 8007b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b82:	e711      	b.n	80079a8 <_vfiprintf_r+0x50>
 8007b84:	ab03      	add	r3, sp, #12
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <_vfiprintf_r+0x258>)
 8007b8c:	a904      	add	r1, sp, #16
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7fe f8bc 	bl	8005d0c <_printf_i>
 8007b94:	e7e4      	b.n	8007b60 <_vfiprintf_r+0x208>
 8007b96:	bf00      	nop
 8007b98:	080087e4 	.word	0x080087e4
 8007b9c:	08008804 	.word	0x08008804
 8007ba0:	080087c4 	.word	0x080087c4
 8007ba4:	0800866c 	.word	0x0800866c
 8007ba8:	08008676 	.word	0x08008676
 8007bac:	080057c5 	.word	0x080057c5
 8007bb0:	08007933 	.word	0x08007933
 8007bb4:	08008672 	.word	0x08008672

08007bb8 <__swbuf_r>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	460e      	mov	r6, r1
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	b118      	cbz	r0, 8007bca <__swbuf_r+0x12>
 8007bc2:	6983      	ldr	r3, [r0, #24]
 8007bc4:	b90b      	cbnz	r3, 8007bca <__swbuf_r+0x12>
 8007bc6:	f000 f9e7 	bl	8007f98 <__sinit>
 8007bca:	4b21      	ldr	r3, [pc, #132]	; (8007c50 <__swbuf_r+0x98>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d12b      	bne.n	8007c28 <__swbuf_r+0x70>
 8007bd0:	686c      	ldr	r4, [r5, #4]
 8007bd2:	69a3      	ldr	r3, [r4, #24]
 8007bd4:	60a3      	str	r3, [r4, #8]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	071a      	lsls	r2, r3, #28
 8007bda:	d52f      	bpl.n	8007c3c <__swbuf_r+0x84>
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	b36b      	cbz	r3, 8007c3c <__swbuf_r+0x84>
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	6820      	ldr	r0, [r4, #0]
 8007be4:	1ac0      	subs	r0, r0, r3
 8007be6:	6963      	ldr	r3, [r4, #20]
 8007be8:	b2f6      	uxtb	r6, r6
 8007bea:	4283      	cmp	r3, r0
 8007bec:	4637      	mov	r7, r6
 8007bee:	dc04      	bgt.n	8007bfa <__swbuf_r+0x42>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 f93c 	bl	8007e70 <_fflush_r>
 8007bf8:	bb30      	cbnz	r0, 8007c48 <__swbuf_r+0x90>
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	60a3      	str	r3, [r4, #8]
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	6022      	str	r2, [r4, #0]
 8007c06:	701e      	strb	r6, [r3, #0]
 8007c08:	6963      	ldr	r3, [r4, #20]
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	4283      	cmp	r3, r0
 8007c0e:	d004      	beq.n	8007c1a <__swbuf_r+0x62>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	07db      	lsls	r3, r3, #31
 8007c14:	d506      	bpl.n	8007c24 <__swbuf_r+0x6c>
 8007c16:	2e0a      	cmp	r6, #10
 8007c18:	d104      	bne.n	8007c24 <__swbuf_r+0x6c>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 f927 	bl	8007e70 <_fflush_r>
 8007c22:	b988      	cbnz	r0, 8007c48 <__swbuf_r+0x90>
 8007c24:	4638      	mov	r0, r7
 8007c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <__swbuf_r+0x9c>)
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	d101      	bne.n	8007c32 <__swbuf_r+0x7a>
 8007c2e:	68ac      	ldr	r4, [r5, #8]
 8007c30:	e7cf      	b.n	8007bd2 <__swbuf_r+0x1a>
 8007c32:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <__swbuf_r+0xa0>)
 8007c34:	429c      	cmp	r4, r3
 8007c36:	bf08      	it	eq
 8007c38:	68ec      	ldreq	r4, [r5, #12]
 8007c3a:	e7ca      	b.n	8007bd2 <__swbuf_r+0x1a>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 f81a 	bl	8007c78 <__swsetup_r>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d0cb      	beq.n	8007be0 <__swbuf_r+0x28>
 8007c48:	f04f 37ff 	mov.w	r7, #4294967295
 8007c4c:	e7ea      	b.n	8007c24 <__swbuf_r+0x6c>
 8007c4e:	bf00      	nop
 8007c50:	080087e4 	.word	0x080087e4
 8007c54:	08008804 	.word	0x08008804
 8007c58:	080087c4 	.word	0x080087c4

08007c5c <__ascii_wctomb>:
 8007c5c:	b149      	cbz	r1, 8007c72 <__ascii_wctomb+0x16>
 8007c5e:	2aff      	cmp	r2, #255	; 0xff
 8007c60:	bf85      	ittet	hi
 8007c62:	238a      	movhi	r3, #138	; 0x8a
 8007c64:	6003      	strhi	r3, [r0, #0]
 8007c66:	700a      	strbls	r2, [r1, #0]
 8007c68:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c6c:	bf98      	it	ls
 8007c6e:	2001      	movls	r0, #1
 8007c70:	4770      	bx	lr
 8007c72:	4608      	mov	r0, r1
 8007c74:	4770      	bx	lr
	...

08007c78 <__swsetup_r>:
 8007c78:	4b32      	ldr	r3, [pc, #200]	; (8007d44 <__swsetup_r+0xcc>)
 8007c7a:	b570      	push	{r4, r5, r6, lr}
 8007c7c:	681d      	ldr	r5, [r3, #0]
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460c      	mov	r4, r1
 8007c82:	b125      	cbz	r5, 8007c8e <__swsetup_r+0x16>
 8007c84:	69ab      	ldr	r3, [r5, #24]
 8007c86:	b913      	cbnz	r3, 8007c8e <__swsetup_r+0x16>
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 f985 	bl	8007f98 <__sinit>
 8007c8e:	4b2e      	ldr	r3, [pc, #184]	; (8007d48 <__swsetup_r+0xd0>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	d10f      	bne.n	8007cb4 <__swsetup_r+0x3c>
 8007c94:	686c      	ldr	r4, [r5, #4]
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c9c:	0719      	lsls	r1, r3, #28
 8007c9e:	d42c      	bmi.n	8007cfa <__swsetup_r+0x82>
 8007ca0:	06dd      	lsls	r5, r3, #27
 8007ca2:	d411      	bmi.n	8007cc8 <__swsetup_r+0x50>
 8007ca4:	2309      	movs	r3, #9
 8007ca6:	6033      	str	r3, [r6, #0]
 8007ca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb2:	e03e      	b.n	8007d32 <__swsetup_r+0xba>
 8007cb4:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <__swsetup_r+0xd4>)
 8007cb6:	429c      	cmp	r4, r3
 8007cb8:	d101      	bne.n	8007cbe <__swsetup_r+0x46>
 8007cba:	68ac      	ldr	r4, [r5, #8]
 8007cbc:	e7eb      	b.n	8007c96 <__swsetup_r+0x1e>
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <__swsetup_r+0xd8>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	bf08      	it	eq
 8007cc4:	68ec      	ldreq	r4, [r5, #12]
 8007cc6:	e7e6      	b.n	8007c96 <__swsetup_r+0x1e>
 8007cc8:	0758      	lsls	r0, r3, #29
 8007cca:	d512      	bpl.n	8007cf2 <__swsetup_r+0x7a>
 8007ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cce:	b141      	cbz	r1, 8007ce2 <__swsetup_r+0x6a>
 8007cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd4:	4299      	cmp	r1, r3
 8007cd6:	d002      	beq.n	8007cde <__swsetup_r+0x66>
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7ff fb6f 	bl	80073bc <_free_r>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	2300      	movs	r3, #0
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f043 0308 	orr.w	r3, r3, #8
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	b94b      	cbnz	r3, 8007d12 <__swsetup_r+0x9a>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	d003      	beq.n	8007d12 <__swsetup_r+0x9a>
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f000 fa07 	bl	8008120 <__smakebuf_r>
 8007d12:	89a0      	ldrh	r0, [r4, #12]
 8007d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d18:	f010 0301 	ands.w	r3, r0, #1
 8007d1c:	d00a      	beq.n	8007d34 <__swsetup_r+0xbc>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60a3      	str	r3, [r4, #8]
 8007d22:	6963      	ldr	r3, [r4, #20]
 8007d24:	425b      	negs	r3, r3
 8007d26:	61a3      	str	r3, [r4, #24]
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	b943      	cbnz	r3, 8007d3e <__swsetup_r+0xc6>
 8007d2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d30:	d1ba      	bne.n	8007ca8 <__swsetup_r+0x30>
 8007d32:	bd70      	pop	{r4, r5, r6, pc}
 8007d34:	0781      	lsls	r1, r0, #30
 8007d36:	bf58      	it	pl
 8007d38:	6963      	ldrpl	r3, [r4, #20]
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	e7f4      	b.n	8007d28 <__swsetup_r+0xb0>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	e7f7      	b.n	8007d32 <__swsetup_r+0xba>
 8007d42:	bf00      	nop
 8007d44:	2000000c 	.word	0x2000000c
 8007d48:	080087e4 	.word	0x080087e4
 8007d4c:	08008804 	.word	0x08008804
 8007d50:	080087c4 	.word	0x080087c4

08007d54 <abort>:
 8007d54:	b508      	push	{r3, lr}
 8007d56:	2006      	movs	r0, #6
 8007d58:	f000 fa52 	bl	8008200 <raise>
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	f7f9 fe05 	bl	800196c <_exit>
	...

08007d64 <__sflush_r>:
 8007d64:	898a      	ldrh	r2, [r1, #12]
 8007d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	0710      	lsls	r0, r2, #28
 8007d6e:	460c      	mov	r4, r1
 8007d70:	d458      	bmi.n	8007e24 <__sflush_r+0xc0>
 8007d72:	684b      	ldr	r3, [r1, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dc05      	bgt.n	8007d84 <__sflush_r+0x20>
 8007d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	dc02      	bgt.n	8007d84 <__sflush_r+0x20>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	d0f9      	beq.n	8007d7e <__sflush_r+0x1a>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d90:	682f      	ldr	r7, [r5, #0]
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	d032      	beq.n	8007dfc <__sflush_r+0x98>
 8007d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	075a      	lsls	r2, r3, #29
 8007d9c:	d505      	bpl.n	8007daa <__sflush_r+0x46>
 8007d9e:	6863      	ldr	r3, [r4, #4]
 8007da0:	1ac0      	subs	r0, r0, r3
 8007da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007da4:	b10b      	cbz	r3, 8007daa <__sflush_r+0x46>
 8007da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007da8:	1ac0      	subs	r0, r0, r3
 8007daa:	2300      	movs	r3, #0
 8007dac:	4602      	mov	r2, r0
 8007dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db0:	6a21      	ldr	r1, [r4, #32]
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b0      	blx	r6
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	d106      	bne.n	8007dca <__sflush_r+0x66>
 8007dbc:	6829      	ldr	r1, [r5, #0]
 8007dbe:	291d      	cmp	r1, #29
 8007dc0:	d82c      	bhi.n	8007e1c <__sflush_r+0xb8>
 8007dc2:	4a2a      	ldr	r2, [pc, #168]	; (8007e6c <__sflush_r+0x108>)
 8007dc4:	40ca      	lsrs	r2, r1
 8007dc6:	07d6      	lsls	r6, r2, #31
 8007dc8:	d528      	bpl.n	8007e1c <__sflush_r+0xb8>
 8007dca:	2200      	movs	r2, #0
 8007dcc:	6062      	str	r2, [r4, #4]
 8007dce:	04d9      	lsls	r1, r3, #19
 8007dd0:	6922      	ldr	r2, [r4, #16]
 8007dd2:	6022      	str	r2, [r4, #0]
 8007dd4:	d504      	bpl.n	8007de0 <__sflush_r+0x7c>
 8007dd6:	1c42      	adds	r2, r0, #1
 8007dd8:	d101      	bne.n	8007dde <__sflush_r+0x7a>
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	b903      	cbnz	r3, 8007de0 <__sflush_r+0x7c>
 8007dde:	6560      	str	r0, [r4, #84]	; 0x54
 8007de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007de2:	602f      	str	r7, [r5, #0]
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d0ca      	beq.n	8007d7e <__sflush_r+0x1a>
 8007de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dec:	4299      	cmp	r1, r3
 8007dee:	d002      	beq.n	8007df6 <__sflush_r+0x92>
 8007df0:	4628      	mov	r0, r5
 8007df2:	f7ff fae3 	bl	80073bc <_free_r>
 8007df6:	2000      	movs	r0, #0
 8007df8:	6360      	str	r0, [r4, #52]	; 0x34
 8007dfa:	e7c1      	b.n	8007d80 <__sflush_r+0x1c>
 8007dfc:	6a21      	ldr	r1, [r4, #32]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b0      	blx	r6
 8007e04:	1c41      	adds	r1, r0, #1
 8007e06:	d1c7      	bne.n	8007d98 <__sflush_r+0x34>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0c4      	beq.n	8007d98 <__sflush_r+0x34>
 8007e0e:	2b1d      	cmp	r3, #29
 8007e10:	d001      	beq.n	8007e16 <__sflush_r+0xb2>
 8007e12:	2b16      	cmp	r3, #22
 8007e14:	d101      	bne.n	8007e1a <__sflush_r+0xb6>
 8007e16:	602f      	str	r7, [r5, #0]
 8007e18:	e7b1      	b.n	8007d7e <__sflush_r+0x1a>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	e7ad      	b.n	8007d80 <__sflush_r+0x1c>
 8007e24:	690f      	ldr	r7, [r1, #16]
 8007e26:	2f00      	cmp	r7, #0
 8007e28:	d0a9      	beq.n	8007d7e <__sflush_r+0x1a>
 8007e2a:	0793      	lsls	r3, r2, #30
 8007e2c:	680e      	ldr	r6, [r1, #0]
 8007e2e:	bf08      	it	eq
 8007e30:	694b      	ldreq	r3, [r1, #20]
 8007e32:	600f      	str	r7, [r1, #0]
 8007e34:	bf18      	it	ne
 8007e36:	2300      	movne	r3, #0
 8007e38:	eba6 0807 	sub.w	r8, r6, r7
 8007e3c:	608b      	str	r3, [r1, #8]
 8007e3e:	f1b8 0f00 	cmp.w	r8, #0
 8007e42:	dd9c      	ble.n	8007d7e <__sflush_r+0x1a>
 8007e44:	6a21      	ldr	r1, [r4, #32]
 8007e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e48:	4643      	mov	r3, r8
 8007e4a:	463a      	mov	r2, r7
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b0      	blx	r6
 8007e50:	2800      	cmp	r0, #0
 8007e52:	dc06      	bgt.n	8007e62 <__sflush_r+0xfe>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	e78e      	b.n	8007d80 <__sflush_r+0x1c>
 8007e62:	4407      	add	r7, r0
 8007e64:	eba8 0800 	sub.w	r8, r8, r0
 8007e68:	e7e9      	b.n	8007e3e <__sflush_r+0xda>
 8007e6a:	bf00      	nop
 8007e6c:	20400001 	.word	0x20400001

08007e70 <_fflush_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	690b      	ldr	r3, [r1, #16]
 8007e74:	4605      	mov	r5, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	b913      	cbnz	r3, 8007e80 <_fflush_r+0x10>
 8007e7a:	2500      	movs	r5, #0
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	b118      	cbz	r0, 8007e8a <_fflush_r+0x1a>
 8007e82:	6983      	ldr	r3, [r0, #24]
 8007e84:	b90b      	cbnz	r3, 8007e8a <_fflush_r+0x1a>
 8007e86:	f000 f887 	bl	8007f98 <__sinit>
 8007e8a:	4b14      	ldr	r3, [pc, #80]	; (8007edc <_fflush_r+0x6c>)
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	d11b      	bne.n	8007ec8 <_fflush_r+0x58>
 8007e90:	686c      	ldr	r4, [r5, #4]
 8007e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0ef      	beq.n	8007e7a <_fflush_r+0xa>
 8007e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e9c:	07d0      	lsls	r0, r2, #31
 8007e9e:	d404      	bmi.n	8007eaa <_fflush_r+0x3a>
 8007ea0:	0599      	lsls	r1, r3, #22
 8007ea2:	d402      	bmi.n	8007eaa <_fflush_r+0x3a>
 8007ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea6:	f000 f915 	bl	80080d4 <__retarget_lock_acquire_recursive>
 8007eaa:	4628      	mov	r0, r5
 8007eac:	4621      	mov	r1, r4
 8007eae:	f7ff ff59 	bl	8007d64 <__sflush_r>
 8007eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eb4:	07da      	lsls	r2, r3, #31
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	d4e0      	bmi.n	8007e7c <_fflush_r+0xc>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	059b      	lsls	r3, r3, #22
 8007ebe:	d4dd      	bmi.n	8007e7c <_fflush_r+0xc>
 8007ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ec2:	f000 f908 	bl	80080d6 <__retarget_lock_release_recursive>
 8007ec6:	e7d9      	b.n	8007e7c <_fflush_r+0xc>
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <_fflush_r+0x70>)
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d101      	bne.n	8007ed2 <_fflush_r+0x62>
 8007ece:	68ac      	ldr	r4, [r5, #8]
 8007ed0:	e7df      	b.n	8007e92 <_fflush_r+0x22>
 8007ed2:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <_fflush_r+0x74>)
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	bf08      	it	eq
 8007ed8:	68ec      	ldreq	r4, [r5, #12]
 8007eda:	e7da      	b.n	8007e92 <_fflush_r+0x22>
 8007edc:	080087e4 	.word	0x080087e4
 8007ee0:	08008804 	.word	0x08008804
 8007ee4:	080087c4 	.word	0x080087c4

08007ee8 <std>:
 8007ee8:	2300      	movs	r3, #0
 8007eea:	b510      	push	{r4, lr}
 8007eec:	4604      	mov	r4, r0
 8007eee:	e9c0 3300 	strd	r3, r3, [r0]
 8007ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ef6:	6083      	str	r3, [r0, #8]
 8007ef8:	8181      	strh	r1, [r0, #12]
 8007efa:	6643      	str	r3, [r0, #100]	; 0x64
 8007efc:	81c2      	strh	r2, [r0, #14]
 8007efe:	6183      	str	r3, [r0, #24]
 8007f00:	4619      	mov	r1, r3
 8007f02:	2208      	movs	r2, #8
 8007f04:	305c      	adds	r0, #92	; 0x5c
 8007f06:	f7fd fbb5 	bl	8005674 <memset>
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <std+0x38>)
 8007f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <std+0x3c>)
 8007f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f12:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <std+0x40>)
 8007f14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f16:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <std+0x44>)
 8007f18:	6224      	str	r4, [r4, #32]
 8007f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	08008239 	.word	0x08008239
 8007f24:	0800825b 	.word	0x0800825b
 8007f28:	08008293 	.word	0x08008293
 8007f2c:	080082b7 	.word	0x080082b7

08007f30 <_cleanup_r>:
 8007f30:	4901      	ldr	r1, [pc, #4]	; (8007f38 <_cleanup_r+0x8>)
 8007f32:	f000 b8af 	b.w	8008094 <_fwalk_reent>
 8007f36:	bf00      	nop
 8007f38:	08007e71 	.word	0x08007e71

08007f3c <__sfmoreglue>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	1e4a      	subs	r2, r1, #1
 8007f40:	2568      	movs	r5, #104	; 0x68
 8007f42:	4355      	muls	r5, r2
 8007f44:	460e      	mov	r6, r1
 8007f46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f4a:	f7ff fa87 	bl	800745c <_malloc_r>
 8007f4e:	4604      	mov	r4, r0
 8007f50:	b140      	cbz	r0, 8007f64 <__sfmoreglue+0x28>
 8007f52:	2100      	movs	r1, #0
 8007f54:	e9c0 1600 	strd	r1, r6, [r0]
 8007f58:	300c      	adds	r0, #12
 8007f5a:	60a0      	str	r0, [r4, #8]
 8007f5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f60:	f7fd fb88 	bl	8005674 <memset>
 8007f64:	4620      	mov	r0, r4
 8007f66:	bd70      	pop	{r4, r5, r6, pc}

08007f68 <__sfp_lock_acquire>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__sfp_lock_acquire+0x8>)
 8007f6a:	f000 b8b3 	b.w	80080d4 <__retarget_lock_acquire_recursive>
 8007f6e:	bf00      	nop
 8007f70:	200003a8 	.word	0x200003a8

08007f74 <__sfp_lock_release>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__sfp_lock_release+0x8>)
 8007f76:	f000 b8ae 	b.w	80080d6 <__retarget_lock_release_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	200003a8 	.word	0x200003a8

08007f80 <__sinit_lock_acquire>:
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <__sinit_lock_acquire+0x8>)
 8007f82:	f000 b8a7 	b.w	80080d4 <__retarget_lock_acquire_recursive>
 8007f86:	bf00      	nop
 8007f88:	200003a3 	.word	0x200003a3

08007f8c <__sinit_lock_release>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__sinit_lock_release+0x8>)
 8007f8e:	f000 b8a2 	b.w	80080d6 <__retarget_lock_release_recursive>
 8007f92:	bf00      	nop
 8007f94:	200003a3 	.word	0x200003a3

08007f98 <__sinit>:
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	f7ff fff0 	bl	8007f80 <__sinit_lock_acquire>
 8007fa0:	69a3      	ldr	r3, [r4, #24]
 8007fa2:	b11b      	cbz	r3, 8007fac <__sinit+0x14>
 8007fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa8:	f7ff bff0 	b.w	8007f8c <__sinit_lock_release>
 8007fac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fb0:	6523      	str	r3, [r4, #80]	; 0x50
 8007fb2:	4b13      	ldr	r3, [pc, #76]	; (8008000 <__sinit+0x68>)
 8007fb4:	4a13      	ldr	r2, [pc, #76]	; (8008004 <__sinit+0x6c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fba:	42a3      	cmp	r3, r4
 8007fbc:	bf04      	itt	eq
 8007fbe:	2301      	moveq	r3, #1
 8007fc0:	61a3      	streq	r3, [r4, #24]
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 f820 	bl	8008008 <__sfp>
 8007fc8:	6060      	str	r0, [r4, #4]
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 f81c 	bl	8008008 <__sfp>
 8007fd0:	60a0      	str	r0, [r4, #8]
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 f818 	bl	8008008 <__sfp>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	60e0      	str	r0, [r4, #12]
 8007fdc:	2104      	movs	r1, #4
 8007fde:	6860      	ldr	r0, [r4, #4]
 8007fe0:	f7ff ff82 	bl	8007ee8 <std>
 8007fe4:	68a0      	ldr	r0, [r4, #8]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	2109      	movs	r1, #9
 8007fea:	f7ff ff7d 	bl	8007ee8 <std>
 8007fee:	68e0      	ldr	r0, [r4, #12]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	2112      	movs	r1, #18
 8007ff4:	f7ff ff78 	bl	8007ee8 <std>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	61a3      	str	r3, [r4, #24]
 8007ffc:	e7d2      	b.n	8007fa4 <__sinit+0xc>
 8007ffe:	bf00      	nop
 8008000:	08008440 	.word	0x08008440
 8008004:	08007f31 	.word	0x08007f31

08008008 <__sfp>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	4607      	mov	r7, r0
 800800c:	f7ff ffac 	bl	8007f68 <__sfp_lock_acquire>
 8008010:	4b1e      	ldr	r3, [pc, #120]	; (800808c <__sfp+0x84>)
 8008012:	681e      	ldr	r6, [r3, #0]
 8008014:	69b3      	ldr	r3, [r6, #24]
 8008016:	b913      	cbnz	r3, 800801e <__sfp+0x16>
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff ffbd 	bl	8007f98 <__sinit>
 800801e:	3648      	adds	r6, #72	; 0x48
 8008020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008024:	3b01      	subs	r3, #1
 8008026:	d503      	bpl.n	8008030 <__sfp+0x28>
 8008028:	6833      	ldr	r3, [r6, #0]
 800802a:	b30b      	cbz	r3, 8008070 <__sfp+0x68>
 800802c:	6836      	ldr	r6, [r6, #0]
 800802e:	e7f7      	b.n	8008020 <__sfp+0x18>
 8008030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008034:	b9d5      	cbnz	r5, 800806c <__sfp+0x64>
 8008036:	4b16      	ldr	r3, [pc, #88]	; (8008090 <__sfp+0x88>)
 8008038:	60e3      	str	r3, [r4, #12]
 800803a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800803e:	6665      	str	r5, [r4, #100]	; 0x64
 8008040:	f000 f847 	bl	80080d2 <__retarget_lock_init_recursive>
 8008044:	f7ff ff96 	bl	8007f74 <__sfp_lock_release>
 8008048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800804c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008050:	6025      	str	r5, [r4, #0]
 8008052:	61a5      	str	r5, [r4, #24]
 8008054:	2208      	movs	r2, #8
 8008056:	4629      	mov	r1, r5
 8008058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800805c:	f7fd fb0a 	bl	8005674 <memset>
 8008060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008068:	4620      	mov	r0, r4
 800806a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800806c:	3468      	adds	r4, #104	; 0x68
 800806e:	e7d9      	b.n	8008024 <__sfp+0x1c>
 8008070:	2104      	movs	r1, #4
 8008072:	4638      	mov	r0, r7
 8008074:	f7ff ff62 	bl	8007f3c <__sfmoreglue>
 8008078:	4604      	mov	r4, r0
 800807a:	6030      	str	r0, [r6, #0]
 800807c:	2800      	cmp	r0, #0
 800807e:	d1d5      	bne.n	800802c <__sfp+0x24>
 8008080:	f7ff ff78 	bl	8007f74 <__sfp_lock_release>
 8008084:	230c      	movs	r3, #12
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	e7ee      	b.n	8008068 <__sfp+0x60>
 800808a:	bf00      	nop
 800808c:	08008440 	.word	0x08008440
 8008090:	ffff0001 	.word	0xffff0001

08008094 <_fwalk_reent>:
 8008094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008098:	4606      	mov	r6, r0
 800809a:	4688      	mov	r8, r1
 800809c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080a0:	2700      	movs	r7, #0
 80080a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080a6:	f1b9 0901 	subs.w	r9, r9, #1
 80080aa:	d505      	bpl.n	80080b8 <_fwalk_reent+0x24>
 80080ac:	6824      	ldr	r4, [r4, #0]
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	d1f7      	bne.n	80080a2 <_fwalk_reent+0xe>
 80080b2:	4638      	mov	r0, r7
 80080b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b8:	89ab      	ldrh	r3, [r5, #12]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d907      	bls.n	80080ce <_fwalk_reent+0x3a>
 80080be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080c2:	3301      	adds	r3, #1
 80080c4:	d003      	beq.n	80080ce <_fwalk_reent+0x3a>
 80080c6:	4629      	mov	r1, r5
 80080c8:	4630      	mov	r0, r6
 80080ca:	47c0      	blx	r8
 80080cc:	4307      	orrs	r7, r0
 80080ce:	3568      	adds	r5, #104	; 0x68
 80080d0:	e7e9      	b.n	80080a6 <_fwalk_reent+0x12>

080080d2 <__retarget_lock_init_recursive>:
 80080d2:	4770      	bx	lr

080080d4 <__retarget_lock_acquire_recursive>:
 80080d4:	4770      	bx	lr

080080d6 <__retarget_lock_release_recursive>:
 80080d6:	4770      	bx	lr

080080d8 <__swhatbuf_r>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	460e      	mov	r6, r1
 80080dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e0:	2900      	cmp	r1, #0
 80080e2:	b096      	sub	sp, #88	; 0x58
 80080e4:	4614      	mov	r4, r2
 80080e6:	461d      	mov	r5, r3
 80080e8:	da07      	bge.n	80080fa <__swhatbuf_r+0x22>
 80080ea:	2300      	movs	r3, #0
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	89b3      	ldrh	r3, [r6, #12]
 80080f0:	061a      	lsls	r2, r3, #24
 80080f2:	d410      	bmi.n	8008116 <__swhatbuf_r+0x3e>
 80080f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f8:	e00e      	b.n	8008118 <__swhatbuf_r+0x40>
 80080fa:	466a      	mov	r2, sp
 80080fc:	f000 f902 	bl	8008304 <_fstat_r>
 8008100:	2800      	cmp	r0, #0
 8008102:	dbf2      	blt.n	80080ea <__swhatbuf_r+0x12>
 8008104:	9a01      	ldr	r2, [sp, #4]
 8008106:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800810a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800810e:	425a      	negs	r2, r3
 8008110:	415a      	adcs	r2, r3
 8008112:	602a      	str	r2, [r5, #0]
 8008114:	e7ee      	b.n	80080f4 <__swhatbuf_r+0x1c>
 8008116:	2340      	movs	r3, #64	; 0x40
 8008118:	2000      	movs	r0, #0
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	b016      	add	sp, #88	; 0x58
 800811e:	bd70      	pop	{r4, r5, r6, pc}

08008120 <__smakebuf_r>:
 8008120:	898b      	ldrh	r3, [r1, #12]
 8008122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008124:	079d      	lsls	r5, r3, #30
 8008126:	4606      	mov	r6, r0
 8008128:	460c      	mov	r4, r1
 800812a:	d507      	bpl.n	800813c <__smakebuf_r+0x1c>
 800812c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	6123      	str	r3, [r4, #16]
 8008134:	2301      	movs	r3, #1
 8008136:	6163      	str	r3, [r4, #20]
 8008138:	b002      	add	sp, #8
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	ab01      	add	r3, sp, #4
 800813e:	466a      	mov	r2, sp
 8008140:	f7ff ffca 	bl	80080d8 <__swhatbuf_r>
 8008144:	9900      	ldr	r1, [sp, #0]
 8008146:	4605      	mov	r5, r0
 8008148:	4630      	mov	r0, r6
 800814a:	f7ff f987 	bl	800745c <_malloc_r>
 800814e:	b948      	cbnz	r0, 8008164 <__smakebuf_r+0x44>
 8008150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008154:	059a      	lsls	r2, r3, #22
 8008156:	d4ef      	bmi.n	8008138 <__smakebuf_r+0x18>
 8008158:	f023 0303 	bic.w	r3, r3, #3
 800815c:	f043 0302 	orr.w	r3, r3, #2
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	e7e3      	b.n	800812c <__smakebuf_r+0xc>
 8008164:	4b0d      	ldr	r3, [pc, #52]	; (800819c <__smakebuf_r+0x7c>)
 8008166:	62b3      	str	r3, [r6, #40]	; 0x28
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	6020      	str	r0, [r4, #0]
 800816c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	9b00      	ldr	r3, [sp, #0]
 8008174:	6163      	str	r3, [r4, #20]
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	6120      	str	r0, [r4, #16]
 800817a:	b15b      	cbz	r3, 8008194 <__smakebuf_r+0x74>
 800817c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008180:	4630      	mov	r0, r6
 8008182:	f000 f8d1 	bl	8008328 <_isatty_r>
 8008186:	b128      	cbz	r0, 8008194 <__smakebuf_r+0x74>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	f023 0303 	bic.w	r3, r3, #3
 800818e:	f043 0301 	orr.w	r3, r3, #1
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	89a0      	ldrh	r0, [r4, #12]
 8008196:	4305      	orrs	r5, r0
 8008198:	81a5      	strh	r5, [r4, #12]
 800819a:	e7cd      	b.n	8008138 <__smakebuf_r+0x18>
 800819c:	08007f31 	.word	0x08007f31

080081a0 <_malloc_usable_size_r>:
 80081a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a4:	1f18      	subs	r0, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bfbc      	itt	lt
 80081aa:	580b      	ldrlt	r3, [r1, r0]
 80081ac:	18c0      	addlt	r0, r0, r3
 80081ae:	4770      	bx	lr

080081b0 <_raise_r>:
 80081b0:	291f      	cmp	r1, #31
 80081b2:	b538      	push	{r3, r4, r5, lr}
 80081b4:	4604      	mov	r4, r0
 80081b6:	460d      	mov	r5, r1
 80081b8:	d904      	bls.n	80081c4 <_raise_r+0x14>
 80081ba:	2316      	movs	r3, #22
 80081bc:	6003      	str	r3, [r0, #0]
 80081be:	f04f 30ff 	mov.w	r0, #4294967295
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081c6:	b112      	cbz	r2, 80081ce <_raise_r+0x1e>
 80081c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081cc:	b94b      	cbnz	r3, 80081e2 <_raise_r+0x32>
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 f830 	bl	8008234 <_getpid_r>
 80081d4:	462a      	mov	r2, r5
 80081d6:	4601      	mov	r1, r0
 80081d8:	4620      	mov	r0, r4
 80081da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081de:	f000 b817 	b.w	8008210 <_kill_r>
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d00a      	beq.n	80081fc <_raise_r+0x4c>
 80081e6:	1c59      	adds	r1, r3, #1
 80081e8:	d103      	bne.n	80081f2 <_raise_r+0x42>
 80081ea:	2316      	movs	r3, #22
 80081ec:	6003      	str	r3, [r0, #0]
 80081ee:	2001      	movs	r0, #1
 80081f0:	e7e7      	b.n	80081c2 <_raise_r+0x12>
 80081f2:	2400      	movs	r4, #0
 80081f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081f8:	4628      	mov	r0, r5
 80081fa:	4798      	blx	r3
 80081fc:	2000      	movs	r0, #0
 80081fe:	e7e0      	b.n	80081c2 <_raise_r+0x12>

08008200 <raise>:
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <raise+0xc>)
 8008202:	4601      	mov	r1, r0
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	f7ff bfd3 	b.w	80081b0 <_raise_r>
 800820a:	bf00      	nop
 800820c:	2000000c 	.word	0x2000000c

08008210 <_kill_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4d07      	ldr	r5, [pc, #28]	; (8008230 <_kill_r+0x20>)
 8008214:	2300      	movs	r3, #0
 8008216:	4604      	mov	r4, r0
 8008218:	4608      	mov	r0, r1
 800821a:	4611      	mov	r1, r2
 800821c:	602b      	str	r3, [r5, #0]
 800821e:	f7f9 fb95 	bl	800194c <_kill>
 8008222:	1c43      	adds	r3, r0, #1
 8008224:	d102      	bne.n	800822c <_kill_r+0x1c>
 8008226:	682b      	ldr	r3, [r5, #0]
 8008228:	b103      	cbz	r3, 800822c <_kill_r+0x1c>
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	bd38      	pop	{r3, r4, r5, pc}
 800822e:	bf00      	nop
 8008230:	2000039c 	.word	0x2000039c

08008234 <_getpid_r>:
 8008234:	f7f9 bb82 	b.w	800193c <_getpid>

08008238 <__sread>:
 8008238:	b510      	push	{r4, lr}
 800823a:	460c      	mov	r4, r1
 800823c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008240:	f000 f894 	bl	800836c <_read_r>
 8008244:	2800      	cmp	r0, #0
 8008246:	bfab      	itete	ge
 8008248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800824a:	89a3      	ldrhlt	r3, [r4, #12]
 800824c:	181b      	addge	r3, r3, r0
 800824e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008252:	bfac      	ite	ge
 8008254:	6563      	strge	r3, [r4, #84]	; 0x54
 8008256:	81a3      	strhlt	r3, [r4, #12]
 8008258:	bd10      	pop	{r4, pc}

0800825a <__swrite>:
 800825a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825e:	461f      	mov	r7, r3
 8008260:	898b      	ldrh	r3, [r1, #12]
 8008262:	05db      	lsls	r3, r3, #23
 8008264:	4605      	mov	r5, r0
 8008266:	460c      	mov	r4, r1
 8008268:	4616      	mov	r6, r2
 800826a:	d505      	bpl.n	8008278 <__swrite+0x1e>
 800826c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008270:	2302      	movs	r3, #2
 8008272:	2200      	movs	r2, #0
 8008274:	f000 f868 	bl	8008348 <_lseek_r>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800827e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008282:	81a3      	strh	r3, [r4, #12]
 8008284:	4632      	mov	r2, r6
 8008286:	463b      	mov	r3, r7
 8008288:	4628      	mov	r0, r5
 800828a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800828e:	f000 b817 	b.w	80082c0 <_write_r>

08008292 <__sseek>:
 8008292:	b510      	push	{r4, lr}
 8008294:	460c      	mov	r4, r1
 8008296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829a:	f000 f855 	bl	8008348 <_lseek_r>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	bf15      	itete	ne
 80082a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80082a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082ae:	81a3      	strheq	r3, [r4, #12]
 80082b0:	bf18      	it	ne
 80082b2:	81a3      	strhne	r3, [r4, #12]
 80082b4:	bd10      	pop	{r4, pc}

080082b6 <__sclose>:
 80082b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ba:	f000 b813 	b.w	80082e4 <_close_r>
	...

080082c0 <_write_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d07      	ldr	r5, [pc, #28]	; (80082e0 <_write_r+0x20>)
 80082c4:	4604      	mov	r4, r0
 80082c6:	4608      	mov	r0, r1
 80082c8:	4611      	mov	r1, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	602a      	str	r2, [r5, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f7f9 fb73 	bl	80019ba <_write>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_write_r+0x1e>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_write_r+0x1e>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	2000039c 	.word	0x2000039c

080082e4 <_close_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d06      	ldr	r5, [pc, #24]	; (8008300 <_close_r+0x1c>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f7f9 fb7f 	bl	80019f2 <_close>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_close_r+0x1a>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_close_r+0x1a>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	2000039c 	.word	0x2000039c

08008304 <_fstat_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d07      	ldr	r5, [pc, #28]	; (8008324 <_fstat_r+0x20>)
 8008308:	2300      	movs	r3, #0
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	4611      	mov	r1, r2
 8008310:	602b      	str	r3, [r5, #0]
 8008312:	f7f9 fb7a 	bl	8001a0a <_fstat>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d102      	bne.n	8008320 <_fstat_r+0x1c>
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	b103      	cbz	r3, 8008320 <_fstat_r+0x1c>
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	bd38      	pop	{r3, r4, r5, pc}
 8008322:	bf00      	nop
 8008324:	2000039c 	.word	0x2000039c

08008328 <_isatty_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d06      	ldr	r5, [pc, #24]	; (8008344 <_isatty_r+0x1c>)
 800832c:	2300      	movs	r3, #0
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	602b      	str	r3, [r5, #0]
 8008334:	f7f9 fb79 	bl	8001a2a <_isatty>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_isatty_r+0x1a>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_isatty_r+0x1a>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	2000039c 	.word	0x2000039c

08008348 <_lseek_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d07      	ldr	r5, [pc, #28]	; (8008368 <_lseek_r+0x20>)
 800834c:	4604      	mov	r4, r0
 800834e:	4608      	mov	r0, r1
 8008350:	4611      	mov	r1, r2
 8008352:	2200      	movs	r2, #0
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f7f9 fb72 	bl	8001a40 <_lseek>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_lseek_r+0x1e>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_lseek_r+0x1e>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	2000039c 	.word	0x2000039c

0800836c <_read_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d07      	ldr	r5, [pc, #28]	; (800838c <_read_r+0x20>)
 8008370:	4604      	mov	r4, r0
 8008372:	4608      	mov	r0, r1
 8008374:	4611      	mov	r1, r2
 8008376:	2200      	movs	r2, #0
 8008378:	602a      	str	r2, [r5, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	f7f9 fb00 	bl	8001980 <_read>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_read_r+0x1e>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_read_r+0x1e>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	2000039c 	.word	0x2000039c

08008390 <_init>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	bf00      	nop
 8008394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008396:	bc08      	pop	{r3}
 8008398:	469e      	mov	lr, r3
 800839a:	4770      	bx	lr

0800839c <_fini>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	bf00      	nop
 80083a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a2:	bc08      	pop	{r3}
 80083a4:	469e      	mov	lr, r3
 80083a6:	4770      	bx	lr
