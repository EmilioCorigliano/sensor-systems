
proveEsame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800b288  0800b288  0001b288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6ec  0800b6ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6ec  0800b6ec  0001b6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6f4  0800b6f4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6f4  0800b6f4  0001b6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6f8  0800b6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b6fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001e4  0800b8e0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800b8e0  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e10  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026cf  00000000  00000000  00035024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  000376f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00038868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e60  00000000  00000000  00039918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015031  00000000  00000000  00052778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d45c  00000000  00000000  000677a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c8c  00000000  00000000  00104c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b26c 	.word	0x0800b26c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b26c 	.word	0x0800b26c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f000 ffdd 	bl	8001f14 <HAL_Init>

  /* USER CODE BEGIN Init */
	MX_DMA_Init();
 8000f5a:	f000 fa3b 	bl	80013d4 <MX_DMA_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f841 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f000 fa75 	bl	8001450 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f66:	f000 fa0b 	bl	8001380 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f6a:	f000 fa33 	bl	80013d4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f6e:	f000 f941 	bl	80011f4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000f72:	f000 f8a3 	bl	80010bc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f76:	f000 f9b5 	bl	80012e4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f7a:	f000 f90d 	bl	8001198 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <main+0x78>)
 8000f82:	f005 fc19 	bl	80067b8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8000f86:	4811      	ldr	r0, [pc, #68]	; (8000fcc <main+0x7c>)
 8000f88:	f005 fb62 	bl	8006650 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) &buf, 3);
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	4910      	ldr	r1, [pc, #64]	; (8000fd0 <main+0x80>)
 8000f90:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <main+0x84>)
 8000f92:	f001 f9d9 	bl	8002348 <HAL_ADC_Start_DMA>

	// init regs to be read
	accBuf[0] = 0b00000000;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <main+0x88>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, accAddress, accBuf, 1, 1000);
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <main+0x8c>)
 8000f9e:	8819      	ldrh	r1, [r3, #0]
 8000fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <main+0x88>)
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <main+0x90>)
 8000fac:	f002 fd92 	bl	8003ad4 <HAL_I2C_Master_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_I2C_Master_Receive_DMA(&hi2c1, accAddress, accBuf, 2);
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <main+0x8c>)
 8000fb2:	8819      	ldrh	r1, [r3, #0]
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <main+0x88>)
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <main+0x90>)
 8000fba:	f002 fe89 	bl	8003cd0 <HAL_I2C_Master_Receive_DMA>
		HAL_Delay(2000);
 8000fbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc2:	f001 f819 	bl	8001ff8 <HAL_Delay>
		HAL_I2C_Master_Receive_DMA(&hi2c1, accAddress, accBuf, 2);
 8000fc6:	e7f3      	b.n	8000fb0 <main+0x60>
 8000fc8:	2000045c 	.word	0x2000045c
 8000fcc:	200002a0 	.word	0x200002a0
 8000fd0:	20000450 	.word	0x20000450
 8000fd4:	200002e8 	.word	0x200002e8
 8000fd8:	20000458 	.word	0x20000458
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	2000020c 	.word	0x2000020c

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	; 0x50
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	2230      	movs	r2, #48	; 0x30
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f007 fa96 	bl	8008524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <SystemClock_Config+0xd0>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <SystemClock_Config+0xd0>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <SystemClock_Config+0xd0>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <SystemClock_Config+0xd4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <SystemClock_Config+0xd4>)
 8001032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <SystemClock_Config+0xd4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104c:	2310      	movs	r3, #16
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001050:	2302      	movs	r3, #2
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001054:	2300      	movs	r3, #0
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001058:	2310      	movs	r3, #16
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800105c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001060:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001062:	2304      	movs	r3, #4
 8001064:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001066:	2307      	movs	r3, #7
 8001068:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	4618      	mov	r0, r3
 8001070:	f004 fe2a 	bl	8005cc8 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800107a:	f000 fbb3 	bl	80017e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2302      	movs	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2102      	movs	r1, #2
 800109a:	4618      	mov	r0, r3
 800109c:	f005 f88c 	bl	80061b8 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010a6:	f000 fb9d 	bl	80017e4 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <MX_ADC1_Init+0xd4>)
 80010d0:	4a30      	ldr	r2, [pc, #192]	; (8001194 <MX_ADC1_Init+0xd8>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <MX_ADC1_Init+0xd4>)
 80010d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <MX_ADC1_Init+0xd4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <MX_ADC1_Init+0xd4>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <MX_ADC1_Init+0xd4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <MX_ADC1_Init+0xd4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <MX_ADC1_Init+0xd4>)
 80010f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_ADC1_Init+0xd4>)
 8001100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_ADC1_Init+0xd4>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_ADC1_Init+0xd4>)
 800110e:	2203      	movs	r2, #3
 8001110:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_ADC1_Init+0xd4>)
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_ADC1_Init+0xd4>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_ADC1_Init+0xd4>)
 8001122:	f000 ff8d 	bl	8002040 <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800112c:	f000 fb5a 	bl	80017e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001130:	2301      	movs	r3, #1
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001138:	2307      	movs	r3, #7
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_ADC1_Init+0xd4>)
 8001142:	f001 fa0f 	bl	8002564 <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800114c:	f000 fb4a 	bl	80017e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001150:	2310      	movs	r3, #16
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_ADC1_Init+0xd4>)
 800115e:	f001 fa01 	bl	8002564 <HAL_ADC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001168:	f000 fb3c 	bl	80017e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800116c:	2311      	movs	r3, #17
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001170:	2303      	movs	r3, #3
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_ADC1_Init+0xd4>)
 800117a:	f001 f9f3 	bl	8002564 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001184:	f000 fb2e 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200002e8 	.word	0x200002e8
 8001194:	40012000 	.word	0x40012000

08001198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x50>)
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_I2C1_Init+0x54>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x58>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d6:	f002 fb39 	bl	800384c <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f000 fb00 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000020c 	.word	0x2000020c
 80011ec:	40005400 	.word	0x40005400
 80011f0:	000186a0 	.word	0x000186a0

080011f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001224:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <MX_TIM2_Init+0xec>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <MX_TIM2_Init+0xec>)
 800122e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001232:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <MX_TIM2_Init+0xec>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_TIM2_Init+0xec>)
 800123c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001240:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_TIM2_Init+0xec>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_TIM2_Init+0xec>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124e:	4824      	ldr	r0, [pc, #144]	; (80012e0 <MX_TIM2_Init+0xec>)
 8001250:	f005 f9ae 	bl	80065b0 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800125a:	f000 fac3 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4619      	mov	r1, r3
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <MX_TIM2_Init+0xec>)
 800126c:	f005 fc7a 	bl	8006b64 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001276:	f000 fab5 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800127a:	4819      	ldr	r0, [pc, #100]	; (80012e0 <MX_TIM2_Init+0xec>)
 800127c:	f005 fa42 	bl	8006704 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001286:	f000 faad 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	4619      	mov	r1, r3
 8001298:	4811      	ldr	r0, [pc, #68]	; (80012e0 <MX_TIM2_Init+0xec>)
 800129a:	f005 fff7 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012a4:	f000 fa9e 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 80012ac:	f240 33e7 	movw	r3, #999	; 0x3e7
 80012b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <MX_TIM2_Init+0xec>)
 80012c2:	f005 fb8d 	bl	80069e0 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80012cc:	f000 fa8a 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <MX_TIM2_Init+0xec>)
 80012d2:	f000 fbed 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 80012d6:	bf00      	nop
 80012d8:	3738      	adds	r7, #56	; 0x38
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000045c 	.word	0x2000045c

080012e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_TIM3_Init+0x94>)
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <MX_TIM3_Init+0x98>)
 8001304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_TIM3_Init+0x94>)
 8001308:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800130c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_TIM3_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_TIM3_Init+0x94>)
 8001316:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800131a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_TIM3_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_TIM3_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM3_Init+0x94>)
 800132a:	f005 f941 	bl	80065b0 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001334:	f000 fa56 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_TIM3_Init+0x94>)
 8001346:	f005 fc0d 	bl	8006b64 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 fa48 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001354:	2320      	movs	r3, #32
 8001356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_TIM3_Init+0x94>)
 8001362:	f005 ff93 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800136c:	f000 fa3a 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200002a0 	.word	0x200002a0
 800137c:	40000400 	.word	0x40000400

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_USART2_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b8:	f005 ffd6 	bl	8007368 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c2:	f000 fa0f 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200004a4 	.word	0x200004a4
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_DMA_Init+0x78>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a1a      	ldr	r2, [pc, #104]	; (800144c <MX_DMA_Init+0x78>)
 80013e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_DMA_Init+0x78>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_DMA_Init+0x78>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_DMA_Init+0x78>)
 8001400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_DMA_Init+0x78>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	200b      	movs	r0, #11
 8001418:	f001 fc29 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800141c:	200b      	movs	r0, #11
 800141e:	f001 fc42 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2011      	movs	r0, #17
 8001428:	f001 fc21 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800142c:	2011      	movs	r0, #17
 800142e:	f001 fc3a 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2038      	movs	r0, #56	; 0x38
 8001438:	f001 fc19 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800143c:	2038      	movs	r0, #56	; 0x38
 800143e:	f001 fc32 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <MX_GPIO_Init+0xe8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a32      	ldr	r2, [pc, #200]	; (8001538 <MX_GPIO_Init+0xe8>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b30      	ldr	r3, [pc, #192]	; (8001538 <MX_GPIO_Init+0xe8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <MX_GPIO_Init+0xe8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <MX_GPIO_Init+0xe8>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <MX_GPIO_Init+0xe8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_GPIO_Init+0xe8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <MX_GPIO_Init+0xe8>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_GPIO_Init+0xe8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_GPIO_Init+0xe8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <MX_GPIO_Init+0xe8>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_GPIO_Init+0xe8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_GPIO_Init+0xec>)
 80014ee:	f002 f811 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_GPIO_Init+0xf0>)
 800150a:	f002 f803 	bl	8003514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2017      	movs	r0, #23
 8001514:	f001 fbab 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001518:	2017      	movs	r0, #23
 800151a:	f001 fbc4 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2028      	movs	r0, #40	; 0x28
 8001524:	f001 fba3 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001528:	2028      	movs	r0, #40	; 0x28
 800152a:	f001 fbbc 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40020800 	.word	0x40020800
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001554:	d002      	beq.n	800155c <HAL_GPIO_EXTI_Callback+0x18>
 8001556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800155a:	d11b      	bne.n	8001594 <HAL_GPIO_EXTI_Callback+0x50>
	case GPIO_PIN_13:
	case GPIO_PIN_8:
		flag ^= 1;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_GPIO_EXTI_Callback+0x58>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f083 0301 	eor.w	r3, r3, #1
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <HAL_GPIO_EXTI_Callback+0x58>)
 8001566:	6013      	str	r3, [r2, #0]
		strcpy(message, (flag ? "LED ON\r\n" : "LED OFF\r\n"));
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_GPIO_EXTI_Callback+0x58>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_GPIO_EXTI_Callback+0x30>
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001572:	e000      	b.n	8001576 <HAL_GPIO_EXTI_Callback+0x32>
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001576:	4619      	mov	r1, r3
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x64>)
 800157a:	f007 fc65 	bl	8008e48 <strcpy>
		HAL_UART_Transmit_DMA(&huart2, message, strlen(message));
 800157e:	480a      	ldr	r0, [pc, #40]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001580:	f7fe fe2e 	bl	80001e0 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4907      	ldr	r1, [pc, #28]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x64>)
 800158c:	4807      	ldr	r0, [pc, #28]	; (80015ac <HAL_GPIO_EXTI_Callback+0x68>)
 800158e:	f005 ffcb 	bl	8007528 <HAL_UART_Transmit_DMA>
		break;
 8001592:	bf00      	nop
	}
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000004 	.word	0x20000004
 80015a0:	0800b288 	.word	0x0800b288
 80015a4:	0800b294 	.word	0x0800b294
 80015a8:	20000260 	.word	0x20000260
 80015ac:	200004a4 	.word	0x200004a4

080015b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	(flag ? HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) : HAL_TIM_PWM_Stop(&htim2,
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_UART_TxCpltCallback+0x2c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <HAL_UART_TxCpltCallback+0x1a>
 80015c0:	2100      	movs	r1, #0
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <HAL_UART_TxCpltCallback+0x30>)
 80015c4:	f005 f8f8 	bl	80067b8 <HAL_TIM_PWM_Start>
	TIM_CHANNEL_1));

}
 80015c8:	e003      	b.n	80015d2 <HAL_UART_TxCpltCallback+0x22>
	(flag ? HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) : HAL_TIM_PWM_Stop(&htim2,
 80015ca:	2100      	movs	r1, #0
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <HAL_UART_TxCpltCallback+0x30>)
 80015ce:	f005 f9a3 	bl	8006918 <HAL_TIM_PWM_Stop>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000004 	.word	0x20000004
 80015e0:	2000045c 	.word	0x2000045c
 80015e4:	00000000 	.word	0x00000000

080015e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80015e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015ec:	b0aa      	sub	sp, #168	; 0xa8
 80015ee:	af04      	add	r7, sp, #16
 80015f0:	6078      	str	r0, [r7, #4]
	float vref = (float) buf.Vref / 4096.0 * 3.3; // Volts
 80015f2:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <HAL_ADC_ConvCpltCallback+0x178>)
 80015f4:	889b      	ldrh	r3, [r3, #4]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fe:	ee17 0a90 	vmov	r0, s15
 8001602:	f7fe ffa9 	bl	8000558 <__aeabi_f2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b56      	ldr	r3, [pc, #344]	; (8001764 <HAL_ADC_ConvCpltCallback+0x17c>)
 800160c:	f7ff f926 	bl	800085c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	a34d      	add	r3, pc, #308	; (adr r3, 8001750 <HAL_ADC_ConvCpltCallback+0x168>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe fff3 	bl	8000608 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fac5 	bl	8000bb8 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
 8001630:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float potentiometer = (float) buf.potentiometer / 4096.0 * 100; // percentage
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_ADC_ConvCpltCallback+0x178>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001640:	ee17 0a90 	vmov	r0, s15
 8001644:	f7fe ff88 	bl	8000558 <__aeabi_f2d>
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b45      	ldr	r3, [pc, #276]	; (8001764 <HAL_ADC_ConvCpltCallback+0x17c>)
 800164e:	f7ff f905 	bl	800085c <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b42      	ldr	r3, [pc, #264]	; (8001768 <HAL_ADC_ConvCpltCallback+0x180>)
 8001660:	f7fe ffd2 	bl	8000608 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff faa4 	bl	8000bb8 <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float temperature = ((float) buf.temperature / 4096.0 * 3.3 - 0.76) / 2.5
 8001676:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <HAL_ADC_ConvCpltCallback+0x178>)
 8001678:	885b      	ldrh	r3, [r3, #2]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001682:	ee17 0a90 	vmov	r0, s15
 8001686:	f7fe ff67 	bl	8000558 <__aeabi_f2d>
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001690:	f7ff f8e4 	bl	800085c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	a32c      	add	r3, pc, #176	; (adr r3, 8001750 <HAL_ADC_ConvCpltCallback+0x168>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ffb1 	bl	8000608 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	a32a      	add	r3, pc, #168	; (adr r3, 8001758 <HAL_ADC_ConvCpltCallback+0x170>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe fdf0 	bl	8000298 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_ADC_ConvCpltCallback+0x184>)
 80016c6:	f7ff f8c9 	bl	800085c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
			+ 25; // °C
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_ADC_ConvCpltCallback+0x188>)
 80016d8:	f7fe fde0 	bl	800029c <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
	float temperature = ((float) buf.temperature / 4096.0 * 3.3 - 0.76) / 2.5
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa68 	bl	8000bb8 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	char msg[128];
	int len = sprintf(msg,
 80016ee:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80016f2:	f7fe ff31 	bl	8000558 <__aeabi_f2d>
 80016f6:	4680      	mov	r8, r0
 80016f8:	4689      	mov	r9, r1
 80016fa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80016fe:	f7fe ff2b 	bl	8000558 <__aeabi_f2d>
 8001702:	4604      	mov	r4, r0
 8001704:	460d      	mov	r5, r1
 8001706:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800170a:	f7fe ff25 	bl	8000558 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	f107 0008 	add.w	r0, r7, #8
 8001716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800171a:	e9cd 4500 	strd	r4, r5, [sp]
 800171e:	4642      	mov	r2, r8
 8001720:	464b      	mov	r3, r9
 8001722:	4914      	ldr	r1, [pc, #80]	; (8001774 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001724:	f007 fb70 	bl	8008e08 <siprintf>
 8001728:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			"Vref: %+.3f potentiometer: %.1f temperature: %.2f\r\n", vref,
			potentiometer, temperature);
	HAL_UART_Transmit(&huart2, msg, len, 1000);
 800172c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001730:	b29a      	uxth	r2, r3
 8001732:	f107 0108 	add.w	r1, r7, #8
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	480f      	ldr	r0, [pc, #60]	; (8001778 <HAL_ADC_ConvCpltCallback+0x190>)
 800173c:	f005 fe61 	bl	8007402 <HAL_UART_Transmit>
}
 8001740:	bf00      	nop
 8001742:	3798      	adds	r7, #152	; 0x98
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	66666666 	.word	0x66666666
 8001754:	400a6666 	.word	0x400a6666
 8001758:	851eb852 	.word	0x851eb852
 800175c:	3fe851eb 	.word	0x3fe851eb
 8001760:	20000450 	.word	0x20000450
 8001764:	40b00000 	.word	0x40b00000
 8001768:	40590000 	.word	0x40590000
 800176c:	40040000 	.word	0x40040000
 8001770:	40390000 	.word	0x40390000
 8001774:	0800b2a0 	.word	0x0800b2a0
 8001778:	200004a4 	.word	0x200004a4

0800177c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	; 0x50
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	float temp = (float) (((int16_t) accBuf[0]) << 8 | accBuf[1]) / 256.0;
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_I2C_MasterRxCpltCallback+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_I2C_MasterRxCpltCallback+0x58>)
 800178c:	7852      	ldrb	r2, [r2, #1]
 800178e:	4313      	orrs	r3, r2
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001798:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80017d8 <HAL_I2C_MasterRxCpltCallback+0x5c>
 800179c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	char tempStr[64];
	int lenTempStr = sprintf(tempStr, "tempMeasured: %.3f\r\n", temp);
 80017a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017a6:	f7fe fed7 	bl	8000558 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	f107 0008 	add.w	r0, r7, #8
 80017b2:	490a      	ldr	r1, [pc, #40]	; (80017dc <HAL_I2C_MasterRxCpltCallback+0x60>)
 80017b4:	f007 fb28 	bl	8008e08 <siprintf>
 80017b8:	64b8      	str	r0, [r7, #72]	; 0x48
	HAL_UART_Transmit(&huart2, tempStr, lenTempStr, 1000);
 80017ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017bc:	b29a      	uxth	r2, r3
 80017be:	f107 0108 	add.w	r1, r7, #8
 80017c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <HAL_I2C_MasterRxCpltCallback+0x64>)
 80017c8:	f005 fe1b 	bl	8007402 <HAL_UART_Transmit>
}
 80017cc:	bf00      	nop
 80017ce:	3750      	adds	r7, #80	; 0x50
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000458 	.word	0x20000458
 80017d8:	43800000 	.word	0x43800000
 80017dc:	0800b2d4 	.word	0x0800b2d4
 80017e0:	200004a4 	.word	0x200004a4

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_MspInit+0x4c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x4c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182e:	2007      	movs	r0, #7
 8001830:	f001 fa12 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a33      	ldr	r2, [pc, #204]	; (800192c <HAL_ADC_MspInit+0xec>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d15f      	bne.n	8001922 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_ADC_MspInit+0xf0>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a31      	ldr	r2, [pc, #196]	; (8001930 <HAL_ADC_MspInit+0xf0>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_ADC_MspInit+0xf0>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_ADC_MspInit+0xf0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <HAL_ADC_MspInit+0xf0>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_ADC_MspInit+0xf0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800189a:	2302      	movs	r3, #2
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <HAL_ADC_MspInit+0xf4>)
 80018ae:	f001 fe31 	bl	8003514 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <HAL_ADC_MspInit+0xfc>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 80018f8:	f001 f9f0 	bl	8002cdc <HAL_DMA_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001902:	f7ff ff6f 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_ADC_MspInit+0xf8>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2012      	movs	r0, #18
 8001918:	f001 f9a9 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800191c:	2012      	movs	r0, #18
 800191e:	f001 f9c2 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40012000 	.word	0x40012000
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	20000390 	.word	0x20000390
 800193c:	40026410 	.word	0x40026410

08001940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a34      	ldr	r2, [pc, #208]	; (8001a30 <HAL_I2C_MspInit+0xf0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d162      	bne.n	8001a28 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_I2C_MspInit+0xf4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <HAL_I2C_MspInit+0xf4>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_I2C_MspInit+0xf4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800197e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001984:	2312      	movs	r3, #18
 8001986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001990:	2304      	movs	r3, #4
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4827      	ldr	r0, [pc, #156]	; (8001a38 <HAL_I2C_MspInit+0xf8>)
 800199c:	f001 fdba 	bl	8003514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_I2C_MspInit+0xf4>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_I2C_MspInit+0xf4>)
 80019aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_I2C_MspInit+0xf4>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019be:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <HAL_I2C_MspInit+0x100>)
 80019c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019fc:	480f      	ldr	r0, [pc, #60]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 80019fe:	f001 f96d 	bl	8002cdc <HAL_DMA_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001a08:	f7ff feec 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 8001a10:	639a      	str	r2, [r3, #56]	; 0x38
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_I2C_MspInit+0xfc>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	201f      	movs	r0, #31
 8001a1e:	f001 f926 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a22:	201f      	movs	r0, #31
 8001a24:	f001 f93f 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	200003f0 	.word	0x200003f0
 8001a40:	40026010 	.word	0x40026010

08001a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a54:	d10e      	bne.n	8001a74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_TIM_Base_MspInit+0x64>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_TIM_Base_MspInit+0x64>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_TIM_Base_MspInit+0x64>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a72:	e012      	b.n	8001a9a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_TIM_Base_MspInit+0x68>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10d      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_TIM_Base_MspInit+0x64>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_TIM_Base_MspInit+0x64>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_TIM_Base_MspInit+0x64>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40000400 	.word	0x40000400

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad0:	d11d      	bne.n	8001b0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_TIM_MspPostInit+0x68>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_TIM_MspPostInit+0x68>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_TIM_MspPostInit+0x68>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aee:	2320      	movs	r3, #32
 8001af0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001b0a:	f001 fd03 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <HAL_UART_MspInit+0xf0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d162      	bne.n	8001c08 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <HAL_UART_MspInit+0xf4>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a32      	ldr	r2, [pc, #200]	; (8001c14 <HAL_UART_MspInit+0xf4>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_UART_MspInit+0xf4>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_UART_MspInit+0xf4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <HAL_UART_MspInit+0xf4>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_UART_MspInit+0xf4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4820      	ldr	r0, [pc, #128]	; (8001c18 <HAL_UART_MspInit+0xf8>)
 8001b96:	f001 fcbd 	bl	8003514 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_UART_MspInit+0x100>)
 8001b9e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ba6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bba:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bdc:	480f      	ldr	r0, [pc, #60]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bde:	f001 f87d 	bl	8002cdc <HAL_DMA_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001be8:	f7ff fdfc 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_UART_MspInit+0xfc>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2026      	movs	r0, #38	; 0x26
 8001bfe:	f001 f836 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c02:	2026      	movs	r0, #38	; 0x26
 8001c04:	f001 f84f 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40004400 	.word	0x40004400
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	20000330 	.word	0x20000330
 8001c20:	400260a0 	.word	0x400260a0

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c70:	f000 f9a2 	bl	8001fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <DMA1_Stream0_IRQHandler+0x10>)
 8001c7e:	f001 f9c5 	bl	800300c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003f0 	.word	0x200003f0

08001c8c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <DMA1_Stream6_IRQHandler+0x10>)
 8001c92:	f001 f9bb 	bl	800300c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000330 	.word	0x20000330

08001ca0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <ADC_IRQHandler+0x10>)
 8001ca6:	f000 fa0e 	bl	80020c6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200002e8 	.word	0x200002e8

08001cb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001cb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cbc:	f001 fdae 	bl	800381c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <I2C1_EV_IRQHandler+0x10>)
 8001cca:	f002 f931 	bl	8003f30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000020c 	.word	0x2000020c

08001cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <USART2_IRQHandler+0x10>)
 8001cde:	f005 fca1 	bl	8007624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200004a4 	.word	0x200004a4

08001cec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001cf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cf4:	f001 fd92 	bl	800381c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <DMA2_Stream0_IRQHandler+0x10>)
 8001d02:	f001 f983 	bl	800300c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000390 	.word	0x20000390

08001d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_kill>:

int _kill(int pid, int sig)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d2a:	f006 fbd1 	bl	80084d0 <__errno>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2216      	movs	r2, #22
 8001d32:	601a      	str	r2, [r3, #0]
	return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_exit>:

void _exit (int status)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffe7 	bl	8001d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d52:	e7fe      	b.n	8001d52 <_exit+0x12>

08001d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e00a      	b.n	8001d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d66:	f3af 8000 	nop.w
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbf0      	blt.n	8001d66 <_read+0x12>
	}

return len;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e009      	b.n	8001db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf1      	blt.n	8001da0 <_write+0x12>
	}
	return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_close>:

int _close(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dee:	605a      	str	r2, [r3, #4]
	return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_isatty>:

int _isatty(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	return 1;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f006 fb36 	bl	80084d0 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20018000 	.word	0x20018000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	20000200 	.word	0x20000200
 8001e98:	20000500 	.word	0x20000500

08001e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec6:	490e      	ldr	r1, [pc, #56]	; (8001f00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001edc:	4c0b      	ldr	r4, [pc, #44]	; (8001f0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eea:	f7ff ffd7 	bl	8001e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f006 faf5 	bl	80084dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff f82d 	bl	8000f50 <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ef8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f04:	0800b6fc 	.word	0x0800b6fc
  ldr r2, =_sbss
 8001f08:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f0c:	200004fc 	.word	0x200004fc

08001f10 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <DMA1_Stream1_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_Init+0x40>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_Init+0x40>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_Init+0x40>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 fe8b 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f808 	bl	8001f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f48:	f7ff fc52 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x54>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x58>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fea3 	bl	8002cc2 <HAL_SYSTICK_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00e      	b.n	8001fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d80a      	bhi.n	8001fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f000 fe6b 	bl	8002c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <HAL_InitTick+0x5c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	20000010 	.word	0x20000010
 8001fb4:	2000000c 	.word	0x2000000c

08001fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000010 	.word	0x20000010
 8001fdc:	200004e8 	.word	0x200004e8

08001fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200004e8 	.word	0x200004e8

08001ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff ffee 	bl	8001fe0 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d005      	beq.n	800201e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_Delay+0x44>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201e:	bf00      	nop
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d8f7      	bhi.n	8002020 <HAL_Delay+0x28>
  {
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000010 	.word	0x20000010

08002040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e033      	b.n	80020be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fbee 	bl	8001840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d118      	bne.n	80020b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002086:	f023 0302 	bic.w	r3, r3, #2
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fb88 	bl	80027a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
 80020ae:	e001      	b.n	80020b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d049      	beq.n	800219c <HAL_ADC_IRQHandler+0xd6>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d046      	beq.n	800219c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d12b      	bne.n	800218c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002138:	2b00      	cmp	r3, #0
 800213a:	d127      	bne.n	800218c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002154:	2b00      	cmp	r3, #0
 8002156:	d119      	bne.n	800218c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0220 	bic.w	r2, r2, #32
 8002166:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fa2b 	bl	80015e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f06f 0212 	mvn.w	r2, #18
 800219a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	2b80      	cmp	r3, #128	; 0x80
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d057      	beq.n	800227e <HAL_ADC_IRQHandler+0x1b8>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d054      	beq.n	800227e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d139      	bne.n	800226e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002212:	2b00      	cmp	r3, #0
 8002214:	d12b      	bne.n	800226e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d124      	bne.n	800226e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d11d      	bne.n	800226e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002236:	2b00      	cmp	r3, #0
 8002238:	d119      	bne.n	800226e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002248:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d105      	bne.n	800226e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fc18 	bl	8002aa4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 020c 	mvn.w	r2, #12
 800227c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d017      	beq.n	80022e0 <HAL_ADC_IRQHandler+0x21a>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d014      	beq.n	80022e0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10d      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f933 	bl	800253c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f06f 0201 	mvn.w	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002300:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <HAL_ADC_IRQHandler+0x27a>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f06f 0220 	mvn.w	r2, #32
 800232e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f90d 	bl	8002550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f06f 0220 	mvn.w	r2, #32
 800233e:	601a      	str	r2, [r3, #0]
  }
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Start_DMA+0x1e>
 8002362:	2302      	movs	r3, #2
 8002364:	e0ce      	b.n	8002504 <HAL_ADC_Start_DMA+0x1bc>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d018      	beq.n	80023ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800238c:	4b5f      	ldr	r3, [pc, #380]	; (800250c <HAL_ADC_Start_DMA+0x1c4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a5f      	ldr	r2, [pc, #380]	; (8002510 <HAL_ADC_Start_DMA+0x1c8>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9a      	lsrs	r2, r3, #18
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f9      	bne.n	80023a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023bc:	d107      	bne.n	80023ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	f040 8086 	bne.w	80024ea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002408:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241c:	d106      	bne.n	800242c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f023 0206 	bic.w	r2, r3, #6
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
 800242a:	e002      	b.n	8002432 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_ADC_Start_DMA+0x1cc>)
 800243c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	4a35      	ldr	r2, [pc, #212]	; (8002518 <HAL_ADC_Start_DMA+0x1d0>)
 8002444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_ADC_Start_DMA+0x1d4>)
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_ADC_Start_DMA+0x1d8>)
 8002454:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800245e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800246e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	334c      	adds	r3, #76	; 0x4c
 800248a:	4619      	mov	r1, r3
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f000 fcd2 	bl	8002e38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10f      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d129      	bne.n	8002502 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	e020      	b.n	8002502 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_ADC_Start_DMA+0x1dc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d11b      	bne.n	8002502 <HAL_ADC_Start_DMA+0x1ba>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d114      	bne.n	8002502 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e00b      	b.n	8002502 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0210 	orr.w	r2, r3, #16
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000008 	.word	0x20000008
 8002510:	431bde83 	.word	0x431bde83
 8002514:	40012300 	.word	0x40012300
 8002518:	080029a1 	.word	0x080029a1
 800251c:	08002a5b 	.word	0x08002a5b
 8002520:	08002a77 	.word	0x08002a77
 8002524:	40012000 	.word	0x40012000

08002528 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1c>
 800257c:	2302      	movs	r3, #2
 800257e:	e105      	b.n	800278c <HAL_ADC_ConfigChannel+0x228>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d925      	bls.n	80025dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68d9      	ldr	r1, [r3, #12]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	3b1e      	subs	r3, #30
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43da      	mvns	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	400a      	ands	r2, r1
 80025b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68d9      	ldr	r1, [r3, #12]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	4603      	mov	r3, r0
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4403      	add	r3, r0
 80025ce:	3b1e      	subs	r3, #30
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	e022      	b.n	8002622 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6919      	ldr	r1, [r3, #16]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	2207      	movs	r2, #7
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	400a      	ands	r2, r1
 80025fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6919      	ldr	r1, [r3, #16]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	4603      	mov	r3, r0
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4403      	add	r3, r0
 8002618:	409a      	lsls	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b06      	cmp	r3, #6
 8002628:	d824      	bhi.n	8002674 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	3b05      	subs	r3, #5
 800263c:	221f      	movs	r2, #31
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	400a      	ands	r2, r1
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	3b05      	subs	r3, #5
 8002666:	fa00 f203 	lsl.w	r2, r0, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	635a      	str	r2, [r3, #52]	; 0x34
 8002672:	e04c      	b.n	800270e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d824      	bhi.n	80026c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b23      	subs	r3, #35	; 0x23
 800268e:	221f      	movs	r2, #31
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43da      	mvns	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	400a      	ands	r2, r1
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	3b23      	subs	r3, #35	; 0x23
 80026b8:	fa00 f203 	lsl.w	r2, r0, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
 80026c4:	e023      	b.n	800270e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	3b41      	subs	r3, #65	; 0x41
 80026d8:	221f      	movs	r2, #31
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	400a      	ands	r2, r1
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3b41      	subs	r3, #65	; 0x41
 8002702:	fa00 f203 	lsl.w	r2, r0, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_ADC_ConfigChannel+0x234>)
 8002710:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_ADC_ConfigChannel+0x238>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d109      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1cc>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b12      	cmp	r3, #18
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a19      	ldr	r2, [pc, #100]	; (800279c <HAL_ADC_ConfigChannel+0x238>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d123      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d003      	beq.n	800274a <HAL_ADC_ConfigChannel+0x1e6>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b11      	cmp	r3, #17
 8002748:	d11b      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b10      	cmp	r3, #16
 800275c:	d111      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_ADC_ConfigChannel+0x240>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	0c9a      	lsrs	r2, r3, #18
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002774:	e002      	b.n	800277c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f9      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40012300 	.word	0x40012300
 800279c:	40012000 	.word	0x40012000
 80027a0:	20000008 	.word	0x20000008
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b0:	4b79      	ldr	r3, [pc, #484]	; (8002998 <ADC_Init+0x1f0>)
 80027b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	021a      	lsls	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	4a58      	ldr	r2, [pc, #352]	; (800299c <ADC_Init+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800284e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e00f      	b.n	80028a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0202 	bic.w	r2, r2, #2
 80028b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7e1b      	ldrb	r3, [r3, #24]
 80028c0:	005a      	lsls	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	3b01      	subs	r3, #1
 8002900:	035a      	lsls	r2, r3, #13
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	e007      	b.n	800291c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	3b01      	subs	r3, #1
 8002938:	051a      	lsls	r2, r3, #20
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800295e:	025a      	lsls	r2, r3, #9
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	029a      	lsls	r2, r3, #10
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40012300 	.word	0x40012300
 800299c:	0f000001 	.word	0x0f000001

080029a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13c      	bne.n	8002a34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d12b      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d127      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d119      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0220 	bic.w	r2, r2, #32
 8002a06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7fe fddb 	bl	80015e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a32:	e00e      	b.n	8002a52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff fd85 	bl	8002550 <HAL_ADC_ErrorCallback>
}
 8002a46:	e004      	b.n	8002a52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff fd5d 	bl	8002528 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fd5a 	bl	8002550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f7ff ff8e 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff29 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff3e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff8e 	bl	8002bac <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5d 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff31 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa2 	bl	8002c14 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff f97a 	bl	8001fe0 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e099      	b.n	8002e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d18:	e00f      	b.n	8002d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1a:	f7ff f961 	bl	8001fe0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d908      	bls.n	8002d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2203      	movs	r2, #3
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e078      	b.n	8002e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e8      	bne.n	8002d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_DMA_Init+0x158>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d107      	bne.n	8002da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0307 	bic.w	r3, r3, #7
 8002dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d117      	bne.n	8002dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fb1b 	bl	800341c <DMA_CheckFifoParam>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e016      	b.n	8002e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fad2 	bl	80033b0 <DMA_CalcBaseAndBitshift>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	223f      	movs	r2, #63	; 0x3f
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	f010803f 	.word	0xf010803f

08002e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Start_IT+0x26>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e040      	b.n	8002ee0 <HAL_DMA_Start_IT+0xa8>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d12f      	bne.n	8002ed2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fa64 	bl	8003354 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	223f      	movs	r2, #63	; 0x3f
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0216 	orr.w	r2, r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e005      	b.n	8002ede <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ef6:	f7ff f873 	bl	8001fe0 <HAL_GetTick>
 8002efa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d008      	beq.n	8002f1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e052      	b.n	8002fc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0216 	bic.w	r2, r2, #22
 8002f28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <HAL_DMA_Abort+0x62>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0208 	bic.w	r2, r2, #8
 8002f58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6a:	e013      	b.n	8002f94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f6c:	f7ff f838 	bl	8001fe0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d90c      	bls.n	8002f94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2203      	movs	r2, #3
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e015      	b.n	8002fc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e4      	bne.n	8002f6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	223f      	movs	r2, #63	; 0x3f
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d004      	beq.n	8002fe6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00c      	b.n	8003000 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2205      	movs	r2, #5
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003018:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_DMA_IRQHandler+0x258>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a92      	ldr	r2, [pc, #584]	; (8003268 <HAL_DMA_IRQHandler+0x25c>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0a9b      	lsrs	r3, r3, #10
 8003024:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	2208      	movs	r2, #8
 8003038:	409a      	lsls	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01a      	beq.n	8003078 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2208      	movs	r2, #8
 8003066:	409a      	lsls	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	2201      	movs	r2, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	2201      	movs	r2, #1
 800309c:	409a      	lsls	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f043 0202 	orr.w	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	2204      	movs	r2, #4
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d012      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2204      	movs	r2, #4
 80030d2:	409a      	lsls	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	2210      	movs	r2, #16
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d043      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03c      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	2210      	movs	r2, #16
 8003108:	409a      	lsls	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d018      	beq.n	800314e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d108      	bne.n	800313c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d024      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e01f      	b.n	800317c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e016      	b.n	800317c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d107      	bne.n	800316c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0208 	bic.w	r2, r2, #8
 800316a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	2220      	movs	r2, #32
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 808e 	beq.w	80032aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8086 	beq.w	80032aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	2220      	movs	r2, #32
 80031a4:	409a      	lsls	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d136      	bne.n	8003224 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0216 	bic.w	r2, r2, #22
 80031c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x1da>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0208 	bic.w	r2, r2, #8
 80031f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	223f      	movs	r2, #63	; 0x3f
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003216:	2b00      	cmp	r3, #0
 8003218:	d07d      	beq.n	8003316 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
        }
        return;
 8003222:	e078      	b.n	8003316 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01c      	beq.n	800326c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	2b00      	cmp	r3, #0
 8003246:	d030      	beq.n	80032aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e02b      	b.n	80032aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d027      	beq.n	80032aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e022      	b.n	80032aa <HAL_DMA_IRQHandler+0x29e>
 8003264:	20000008 	.word	0x20000008
 8003268:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0210 	bic.w	r2, r2, #16
 8003288:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d032      	beq.n	8003318 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d022      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2205      	movs	r2, #5
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3301      	adds	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d307      	bcc.n	80032f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f2      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x2ca>
 80032f0:	e000      	b.n	80032f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
 8003314:	e000      	b.n	8003318 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003316:	bf00      	nop
    }
  }
}
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop

08003320 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332e:	b2db      	uxtb	r3, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003370:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b40      	cmp	r3, #64	; 0x40
 8003380:	d108      	bne.n	8003394 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003392:	e007      	b.n	80033a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	60da      	str	r2, [r3, #12]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3b10      	subs	r3, #16
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <DMA_CalcBaseAndBitshift+0x64>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ca:	4a13      	ldr	r2, [pc, #76]	; (8003418 <DMA_CalcBaseAndBitshift+0x68>)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d909      	bls.n	80033f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	1d1a      	adds	r2, r3, #4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	659a      	str	r2, [r3, #88]	; 0x58
 80033f0:	e007      	b.n	8003402 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	aaaaaaab 	.word	0xaaaaaaab
 8003418:	0800b304 	.word	0x0800b304

0800341c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d11f      	bne.n	8003476 <DMA_CheckFifoParam+0x5a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d856      	bhi.n	80034ea <DMA_CheckFifoParam+0xce>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <DMA_CheckFifoParam+0x28>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003455 	.word	0x08003455
 8003448:	08003467 	.word	0x08003467
 800344c:	08003455 	.word	0x08003455
 8003450:	080034eb 	.word	0x080034eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d046      	beq.n	80034ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003464:	e043      	b.n	80034ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800346e:	d140      	bne.n	80034f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003474:	e03d      	b.n	80034f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347e:	d121      	bne.n	80034c4 <DMA_CheckFifoParam+0xa8>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b03      	cmp	r3, #3
 8003484:	d837      	bhi.n	80034f6 <DMA_CheckFifoParam+0xda>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <DMA_CheckFifoParam+0x70>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	0800349d 	.word	0x0800349d
 8003490:	080034a3 	.word	0x080034a3
 8003494:	0800349d 	.word	0x0800349d
 8003498:	080034b5 	.word	0x080034b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      break;
 80034a0:	e030      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d025      	beq.n	80034fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b2:	e022      	b.n	80034fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034bc:	d11f      	bne.n	80034fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034c2:	e01c      	b.n	80034fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d903      	bls.n	80034d2 <DMA_CheckFifoParam+0xb6>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d003      	beq.n	80034d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034d0:	e018      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      break;
 80034d6:	e015      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
      break;
 80034e8:	e00b      	b.n	8003502 <DMA_CheckFifoParam+0xe6>
      break;
 80034ea:	bf00      	nop
 80034ec:	e00a      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
      break;
 80034ee:	bf00      	nop
 80034f0:	e008      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e006      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e004      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
      break;
 80034fa:	bf00      	nop
 80034fc:	e002      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
      break;   
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <DMA_CheckFifoParam+0xe8>
      break;
 8003502:	bf00      	nop
    }
  } 
  
  return status; 
 8003504:	7bfb      	ldrb	r3, [r7, #15]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e159      	b.n	80037e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003530:	2201      	movs	r2, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	f040 8148 	bne.w	80037de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d005      	beq.n	8003566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003562:	2b02      	cmp	r3, #2
 8003564:	d130      	bne.n	80035c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800359c:	2201      	movs	r2, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 0201 	and.w	r2, r3, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d017      	beq.n	8003604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d123      	bne.n	8003658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a2 	beq.w	80037de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b57      	ldr	r3, [pc, #348]	; (80037fc <HAL_GPIO_Init+0x2e8>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	4a56      	ldr	r2, [pc, #344]	; (80037fc <HAL_GPIO_Init+0x2e8>)
 80036a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a8:	6453      	str	r3, [r2, #68]	; 0x44
 80036aa:	4b54      	ldr	r3, [pc, #336]	; (80037fc <HAL_GPIO_Init+0x2e8>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b6:	4a52      	ldr	r2, [pc, #328]	; (8003800 <HAL_GPIO_Init+0x2ec>)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	3302      	adds	r3, #2
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	220f      	movs	r2, #15
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a49      	ldr	r2, [pc, #292]	; (8003804 <HAL_GPIO_Init+0x2f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d019      	beq.n	8003716 <HAL_GPIO_Init+0x202>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a48      	ldr	r2, [pc, #288]	; (8003808 <HAL_GPIO_Init+0x2f4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_GPIO_Init+0x1fe>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a47      	ldr	r2, [pc, #284]	; (800380c <HAL_GPIO_Init+0x2f8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00d      	beq.n	800370e <HAL_GPIO_Init+0x1fa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a46      	ldr	r2, [pc, #280]	; (8003810 <HAL_GPIO_Init+0x2fc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <HAL_GPIO_Init+0x1f6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a45      	ldr	r2, [pc, #276]	; (8003814 <HAL_GPIO_Init+0x300>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_GPIO_Init+0x1f2>
 8003702:	2304      	movs	r3, #4
 8003704:	e008      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003706:	2307      	movs	r3, #7
 8003708:	e006      	b.n	8003718 <HAL_GPIO_Init+0x204>
 800370a:	2303      	movs	r3, #3
 800370c:	e004      	b.n	8003718 <HAL_GPIO_Init+0x204>
 800370e:	2302      	movs	r3, #2
 8003710:	e002      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003716:	2300      	movs	r3, #0
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	f002 0203 	and.w	r2, r2, #3
 800371e:	0092      	lsls	r2, r2, #2
 8003720:	4093      	lsls	r3, r2
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003728:	4935      	ldr	r1, [pc, #212]	; (8003800 <HAL_GPIO_Init+0x2ec>)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003736:	4b38      	ldr	r3, [pc, #224]	; (8003818 <HAL_GPIO_Init+0x304>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <HAL_GPIO_Init+0x304>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_GPIO_Init+0x304>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <HAL_GPIO_Init+0x304>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_GPIO_Init+0x304>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ae:	4a1a      	ldr	r2, [pc, #104]	; (8003818 <HAL_GPIO_Init+0x304>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b4:	4b18      	ldr	r3, [pc, #96]	; (8003818 <HAL_GPIO_Init+0x304>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037d8:	4a0f      	ldr	r2, [pc, #60]	; (8003818 <HAL_GPIO_Init+0x304>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	f67f aea2 	bls.w	8003530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	3724      	adds	r7, #36	; 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	40013800 	.word	0x40013800
 8003804:	40020000 	.word	0x40020000
 8003808:	40020400 	.word	0x40020400
 800380c:	40020800 	.word	0x40020800
 8003810:	40020c00 	.word	0x40020c00
 8003814:	40021000 	.word	0x40021000
 8003818:	40013c00 	.word	0x40013c00

0800381c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d006      	beq.n	8003840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003832:	4a05      	ldr	r2, [pc, #20]	; (8003848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fe82 	bl	8001544 <HAL_GPIO_EXTI_Callback>
  }
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40013c00 	.word	0x40013c00

0800384c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e12b      	b.n	8003ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fe f864 	bl	8001940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	; 0x24
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800389e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b0:	f002 fe56 	bl	8006560 <HAL_RCC_GetPCLK1Freq>
 80038b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a81      	ldr	r2, [pc, #516]	; (8003ac0 <HAL_I2C_Init+0x274>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d807      	bhi.n	80038d0 <HAL_I2C_Init+0x84>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a80      	ldr	r2, [pc, #512]	; (8003ac4 <HAL_I2C_Init+0x278>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	bf94      	ite	ls
 80038c8:	2301      	movls	r3, #1
 80038ca:	2300      	movhi	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e006      	b.n	80038de <HAL_I2C_Init+0x92>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a7d      	ldr	r2, [pc, #500]	; (8003ac8 <HAL_I2C_Init+0x27c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0e7      	b.n	8003ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a78      	ldr	r2, [pc, #480]	; (8003acc <HAL_I2C_Init+0x280>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0c9b      	lsrs	r3, r3, #18
 80038f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a6a      	ldr	r2, [pc, #424]	; (8003ac0 <HAL_I2C_Init+0x274>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d802      	bhi.n	8003920 <HAL_I2C_Init+0xd4>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3301      	adds	r3, #1
 800391e:	e009      	b.n	8003934 <HAL_I2C_Init+0xe8>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4a69      	ldr	r2, [pc, #420]	; (8003ad0 <HAL_I2C_Init+0x284>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	3301      	adds	r3, #1
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	495c      	ldr	r1, [pc, #368]	; (8003ac0 <HAL_I2C_Init+0x274>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d819      	bhi.n	8003988 <HAL_I2C_Init+0x13c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e59      	subs	r1, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003962:	1c59      	adds	r1, r3, #1
 8003964:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003968:	400b      	ands	r3, r1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_I2C_Init+0x138>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e59      	subs	r1, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fbb1 f3f3 	udiv	r3, r1, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003982:	e051      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003984:	2304      	movs	r3, #4
 8003986:	e04f      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d111      	bne.n	80039b4 <HAL_I2C_Init+0x168>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e58      	subs	r0, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e012      	b.n	80039da <HAL_I2C_Init+0x18e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Init+0x196>
 80039de:	2301      	movs	r3, #1
 80039e0:	e022      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10e      	bne.n	8003a08 <HAL_I2C_Init+0x1bc>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e58      	subs	r0, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	440b      	add	r3, r1
 80039f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a06:	e00f      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	0099      	lsls	r1, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6809      	ldr	r1, [r1, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6911      	ldr	r1, [r2, #16]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	000186a0 	.word	0x000186a0
 8003ac4:	001e847f 	.word	0x001e847f
 8003ac8:	003d08ff 	.word	0x003d08ff
 8003acc:	431bde83 	.word	0x431bde83
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	817b      	strh	r3, [r7, #10]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7fe fa7a 	bl	8001fe0 <HAL_GetTick>
 8003aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	f040 80e0 	bne.w	8003cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2319      	movs	r3, #25
 8003b02:	2201      	movs	r2, #1
 8003b04:	4970      	ldr	r1, [pc, #448]	; (8003cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f001 ff0a 	bl	8005920 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0d3      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2C_Master_Transmit+0x50>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0cc      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d007      	beq.n	8003b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2221      	movs	r2, #33	; 0x21
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2210      	movs	r2, #16
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	893a      	ldrh	r2, [r7, #8]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a50      	ldr	r2, [pc, #320]	; (8003ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b8c:	8979      	ldrh	r1, [r7, #10]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f001 fc88 	bl	80054a8 <I2C_MasterRequestWrite>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e08d      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bb8:	e066      	b.n	8003c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6a39      	ldr	r1, [r7, #32]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f001 ff84 	bl	8005acc <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06b      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d11b      	bne.n	8003c5c <HAL_I2C_Master_Transmit+0x188>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	6a39      	ldr	r1, [r7, #32]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f001 ff74 	bl	8005b4e <I2C_WaitOnBTFFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d107      	bne.n	8003c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01a      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d194      	bne.n	8003bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	00100002 	.word	0x00100002
 8003ccc:	ffff0000 	.word	0xffff0000

08003cd0 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	460b      	mov	r3, r1
 8003cde:	817b      	strh	r3, [r7, #10]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	f040 810d 	bne.w	8003f10 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cf6:	4b89      	ldr	r3, [pc, #548]	; (8003f1c <HAL_I2C_Master_Receive_DMA+0x24c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	08db      	lsrs	r3, r3, #3
 8003cfc:	4a88      	ldr	r2, [pc, #544]	; (8003f20 <HAL_I2C_Master_Receive_DMA+0x250>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0a1a      	lsrs	r2, r3, #8
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d116      	bne.n	8003d4a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0e3      	b.n	8003f12 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d0db      	beq.n	8003d10 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Master_Receive_DMA+0x96>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0d5      	b.n	8003f12 <HAL_I2C_Master_Receive_DMA+0x242>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d007      	beq.n	8003d8c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2222      	movs	r2, #34	; 0x22
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2210      	movs	r2, #16
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	893a      	ldrh	r2, [r7, #8]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a56      	ldr	r2, [pc, #344]	; (8003f24 <HAL_I2C_Master_Receive_DMA+0x254>)
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003dce:	897a      	ldrh	r2, [r7, #10]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d07b      	beq.n	8003ed4 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d02a      	beq.n	8003e3a <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	4a4f      	ldr	r2, [pc, #316]	; (8003f28 <HAL_I2C_Master_Receive_DMA+0x258>)
 8003dea:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	4a4e      	ldr	r2, [pc, #312]	; (8003f2c <HAL_I2C_Master_Receive_DMA+0x25c>)
 8003df2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	2200      	movs	r2, #0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	2200      	movs	r2, #0
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	2200      	movs	r2, #0
 8003e0a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	2200      	movs	r2, #0
 8003e12:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	4619      	mov	r1, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	461a      	mov	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	f7ff f805 	bl	8002e38 <HAL_DMA_Start_IT>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d139      	bne.n	8003eac <HAL_I2C_Master_Receive_DMA+0x1dc>
 8003e38:	e013      	b.n	8003e62 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e057      	b.n	8003f12 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e70:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e80:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e98:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	e02f      	b.n	8003f0c <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0210 	orr.w	r2, r3, #16
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e01e      	b.n	8003f12 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003eea:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003efa:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f0a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000008 	.word	0x20000008
 8003f20:	14f8b589 	.word	0x14f8b589
 8003f24:	ffff0000 	.word	0xffff0000
 8003f28:	080055ad 	.word	0x080055ad
 8003f2c:	08005757 	.word	0x08005757

08003f30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d003      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x38>
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	f040 80c1 	bne.w	80040ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <HAL_I2C_EV_IRQHandler+0x6e>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f88:	d003      	beq.n	8003f92 <HAL_I2C_EV_IRQHandler+0x62>
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f90:	d101      	bne.n	8003f96 <HAL_I2C_EV_IRQHandler+0x66>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x68>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f000 8132 	beq.w	8004202 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x92>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	0a5b      	lsrs	r3, r3, #9
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f001 fe6c 	bl	8005c92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fcc8 	bl	8004950 <I2C_Master_SB>
 8003fc0:	e092      	b.n	80040e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0xb2>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fd3e 	bl	8004a5c <I2C_Master_ADD10>
 8003fe0:	e082      	b.n	80040e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_I2C_EV_IRQHandler+0xd2>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	0a5b      	lsrs	r3, r3, #9
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fd58 	bl	8004ab0 <I2C_Master_ADDR>
 8004000:	e072      	b.n	80040e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03b      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800401c:	f000 80f3 	beq.w	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	09db      	lsrs	r3, r3, #7
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00f      	beq.n	800404c <HAL_I2C_EV_IRQHandler+0x11c>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	0a9b      	lsrs	r3, r3, #10
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_I2C_EV_IRQHandler+0x11c>
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d103      	bne.n	800404c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f942 	bl	80042ce <I2C_MasterTransmit_TXE>
 800404a:	e04d      	b.n	80040e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80d6 	beq.w	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	0a5b      	lsrs	r3, r3, #9
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80cf 	beq.w	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004068:	7bbb      	ldrb	r3, [r7, #14]
 800406a:	2b21      	cmp	r3, #33	; 0x21
 800406c:	d103      	bne.n	8004076 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9c9 	bl	8004406 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004074:	e0c7      	b.n	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	f040 80c4 	bne.w	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa37 	bl	80044f2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004084:	e0bf      	b.n	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004094:	f000 80b7 	beq.w	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00f      	beq.n	80040c4 <HAL_I2C_EV_IRQHandler+0x194>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	0a9b      	lsrs	r3, r3, #10
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <HAL_I2C_EV_IRQHandler+0x194>
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	089b      	lsrs	r3, r3, #2
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 faac 	bl	800461a <I2C_MasterReceive_RXNE>
 80040c2:	e011      	b.n	80040e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 809a 	beq.w	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	0a5b      	lsrs	r3, r3, #9
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8093 	beq.w	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fb4b 	bl	800477c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040e6:	e08e      	b.n	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
 80040e8:	e08d      	b.n	8004206 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d004      	beq.n	80040fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	e007      	b.n	800410c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d012      	beq.n	800413e <HAL_I2C_EV_IRQHandler+0x20e>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	0a5b      	lsrs	r3, r3, #9
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004134:	69b9      	ldr	r1, [r7, #24]
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 ff09 	bl	8004f4e <I2C_Slave_ADDR>
 800413c:	e066      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_I2C_EV_IRQHandler+0x22e>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	0a5b      	lsrs	r3, r3, #9
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 ff44 	bl	8004fe4 <I2C_Slave_STOPF>
 800415c:	e056      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800415e:	7bbb      	ldrb	r3, [r7, #14]
 8004160:	2b21      	cmp	r3, #33	; 0x21
 8004162:	d002      	beq.n	800416a <HAL_I2C_EV_IRQHandler+0x23a>
 8004164:	7bbb      	ldrb	r3, [r7, #14]
 8004166:	2b29      	cmp	r3, #41	; 0x29
 8004168:	d125      	bne.n	80041b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	09db      	lsrs	r3, r3, #7
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00f      	beq.n	8004196 <HAL_I2C_EV_IRQHandler+0x266>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	0a9b      	lsrs	r3, r3, #10
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_I2C_EV_IRQHandler+0x266>
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fe1f 	bl	8004dd2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004194:	e039      	b.n	800420a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d033      	beq.n	800420a <HAL_I2C_EV_IRQHandler+0x2da>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	0a5b      	lsrs	r3, r3, #9
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d02d      	beq.n	800420a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fe4c 	bl	8004e4c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041b4:	e029      	b.n	800420a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00f      	beq.n	80041e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	0a9b      	lsrs	r3, r3, #10
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fe57 	bl	8004e8e <I2C_SlaveReceive_RXNE>
 80041e0:	e014      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x2dc>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	0a5b      	lsrs	r3, r3, #9
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fe85 	bl	8004f0a <I2C_SlaveReceive_BTF>
 8004200:	e004      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800420a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	70fb      	strb	r3, [r7, #3]
 800425a:	4613      	mov	r3, r2
 800425c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d150      	bne.n	8004396 <I2C_MasterTransmit_TXE+0xc8>
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b21      	cmp	r3, #33	; 0x21
 80042f8:	d14d      	bne.n	8004396 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d01d      	beq.n	800433c <I2C_MasterTransmit_TXE+0x6e>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b20      	cmp	r3, #32
 8004304:	d01a      	beq.n	800433c <I2C_MasterTransmit_TXE+0x6e>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800430c:	d016      	beq.n	800433c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800431c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2211      	movs	r2, #17
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff6c 	bl	8004212 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800433a:	e060      	b.n	80043fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800434a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d107      	bne.n	8004386 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ff7d 	bl	800427e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004384:	e03b      	b.n	80043fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff3f 	bl	8004212 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004394:	e033      	b.n	80043fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b21      	cmp	r3, #33	; 0x21
 800439a:	d005      	beq.n	80043a8 <I2C_MasterTransmit_TXE+0xda>
 800439c:	7bbb      	ldrb	r3, [r7, #14]
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d12d      	bne.n	80043fe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b22      	cmp	r3, #34	; 0x22
 80043a6:	d12a      	bne.n	80043fe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d108      	bne.n	80043c4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80043c2:	e01c      	b.n	80043fe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d103      	bne.n	80043d8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f88e 	bl	80044f2 <I2C_MemoryTransmit_TXE_BTF>
}
 80043d6:	e012      	b.n	80043fe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043fc:	e7ff      	b.n	80043fe <I2C_MasterTransmit_TXE+0x130>
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b21      	cmp	r3, #33	; 0x21
 800441e:	d164      	bne.n	80044ea <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d012      	beq.n	8004450 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800444e:	e04c      	b.n	80044ea <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b08      	cmp	r3, #8
 8004454:	d01d      	beq.n	8004492 <I2C_MasterTransmit_BTF+0x8c>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b20      	cmp	r3, #32
 800445a:	d01a      	beq.n	8004492 <I2C_MasterTransmit_BTF+0x8c>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004462:	d016      	beq.n	8004492 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004472:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2211      	movs	r2, #17
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fec1 	bl	8004212 <HAL_I2C_MasterTxCpltCallback>
}
 8004490:	e02b      	b.n	80044ea <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044a0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d107      	bne.n	80044dc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fed2 	bl	800427e <HAL_I2C_MemTxCpltCallback>
}
 80044da:	e006      	b.n	80044ea <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fe94 	bl	8004212 <HAL_I2C_MasterTxCpltCallback>
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d11d      	bne.n	8004546 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10b      	bne.n	800452a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	b2da      	uxtb	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004522:	1c9a      	adds	r2, r3, #2
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004528:	e073      	b.n	8004612 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452e:	b29b      	uxth	r3, r3
 8004530:	121b      	asrs	r3, r3, #8
 8004532:	b2da      	uxtb	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004544:	e065      	b.n	8004612 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10b      	bne.n	8004566 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004552:	b2da      	uxtb	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004564:	e055      	b.n	8004612 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	2b02      	cmp	r3, #2
 800456c:	d151      	bne.n	8004612 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b22      	cmp	r3, #34	; 0x22
 8004572:	d10d      	bne.n	8004590 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004582:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800458e:	e040      	b.n	8004612 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d015      	beq.n	80045c6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b21      	cmp	r3, #33	; 0x21
 800459e:	d112      	bne.n	80045c6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045c4:	e025      	b.n	8004612 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d120      	bne.n	8004612 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b21      	cmp	r3, #33	; 0x21
 80045d4:	d11d      	bne.n	8004612 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045e4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fe36 	bl	800427e <HAL_I2C_MemTxCpltCallback>
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b22      	cmp	r3, #34	; 0x22
 800462c:	f040 80a2 	bne.w	8004774 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d921      	bls.n	8004682 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b03      	cmp	r3, #3
 800466c:	f040 8082 	bne.w	8004774 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004680:	e078      	b.n	8004774 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	2b02      	cmp	r3, #2
 8004688:	d074      	beq.n	8004774 <I2C_MasterReceive_RXNE+0x15a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d002      	beq.n	8004696 <I2C_MasterReceive_RXNE+0x7c>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d16e      	bne.n	8004774 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f001 fa9a 	bl	8005bd0 <I2C_WaitOnSTOPRequestThroughIT>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d142      	bne.n	8004728 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d10a      	bne.n	8004712 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff fdc1 	bl	8004292 <HAL_I2C_MemRxCpltCallback>
}
 8004710:	e030      	b.n	8004774 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2212      	movs	r2, #18
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fd f82b 	bl	800177c <HAL_I2C_MasterRxCpltCallback>
}
 8004726:	e025      	b.n	8004774 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004736:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff fd99 	bl	80042a6 <HAL_I2C_ErrorCallback>
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b04      	cmp	r3, #4
 8004792:	d11b      	bne.n	80047cc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80047ca:	e0bd      	b.n	8004948 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d129      	bne.n	800482a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d00a      	beq.n	8004802 <I2C_MasterReceive_BTF+0x86>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d007      	beq.n	8004802 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004800:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004828:	e08e      	b.n	8004948 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d176      	bne.n	8004922 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d002      	beq.n	8004840 <I2C_MasterReceive_BTF+0xc4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d108      	bne.n	8004852 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e019      	b.n	8004886 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d002      	beq.n	800485e <I2C_MasterReceive_BTF+0xe2>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d108      	bne.n	8004870 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e00a      	b.n	8004886 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b10      	cmp	r3, #16
 8004874:	d007      	beq.n	8004886 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004884:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048e0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d10a      	bne.n	800490c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff fcc4 	bl	8004292 <HAL_I2C_MemRxCpltCallback>
}
 800490a:	e01d      	b.n	8004948 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2212      	movs	r2, #18
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc ff2e 	bl	800177c <HAL_I2C_MasterRxCpltCallback>
}
 8004920:	e012      	b.n	8004948 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d117      	bne.n	8004994 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800497c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800497e:	e067      	b.n	8004a50 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	611a      	str	r2, [r3, #16]
}
 8004992:	e05d      	b.n	8004a50 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499c:	d133      	bne.n	8004a06 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b21      	cmp	r3, #33	; 0x21
 80049a8:	d109      	bne.n	80049be <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ba:	611a      	str	r2, [r3, #16]
 80049bc:	e008      	b.n	80049d0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <I2C_Master_SB+0x92>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d032      	beq.n	8004a50 <I2C_Master_SB+0x100>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02d      	beq.n	8004a50 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a02:	605a      	str	r2, [r3, #4]
}
 8004a04:	e024      	b.n	8004a50 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	11db      	asrs	r3, r3, #7
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 0306 	and.w	r3, r3, #6
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f063 030f 	orn	r3, r3, #15
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]
}
 8004a2a:	e011      	b.n	8004a50 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10d      	bne.n	8004a50 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	11db      	asrs	r3, r3, #7
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0306 	and.w	r3, r3, #6
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f063 030e 	orn	r3, r3, #14
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <I2C_Master_ADD10+0x26>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d108      	bne.n	8004a94 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <I2C_Master_ADD10+0x48>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa2:	605a      	str	r2, [r3, #4]
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b091      	sub	sp, #68	; 0x44
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004abe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b22      	cmp	r3, #34	; 0x22
 8004ad8:	f040 8169 	bne.w	8004dae <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <I2C_Master_ADDR+0x54>
 8004ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d10b      	bne.n	8004b04 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aec:	2300      	movs	r3, #0
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	e160      	b.n	8004dc6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d11d      	bne.n	8004b48 <I2C_Master_ADDR+0x98>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b14:	d118      	bne.n	8004b48 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b16:	2300      	movs	r3, #0
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
 8004b46:	e13e      	b.n	8004dc6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d113      	bne.n	8004b7a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b52:	2300      	movs	r3, #0
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e115      	b.n	8004da6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	f040 808a 	bne.w	8004c9a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b8c:	d137      	bne.n	8004bfe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bac:	d113      	bne.n	8004bd6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	e0e7      	b.n	8004da6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e0d3      	b.n	8004da6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d02e      	beq.n	8004c62 <I2C_Master_ADDR+0x1b2>
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d02b      	beq.n	8004c62 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0c:	2b12      	cmp	r3, #18
 8004c0e:	d102      	bne.n	8004c16 <I2C_Master_ADDR+0x166>
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d125      	bne.n	8004c62 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d00e      	beq.n	8004c3a <I2C_Master_ADDR+0x18a>
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d00b      	beq.n	8004c3a <I2C_Master_ADDR+0x18a>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d008      	beq.n	8004c3a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e007      	b.n	8004c4a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c48:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	e0a1      	b.n	8004da6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c70:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e085      	b.n	8004da6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d14d      	bne.n	8004d40 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d016      	beq.n	8004cd8 <I2C_Master_ADDR+0x228>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d013      	beq.n	8004cd8 <I2C_Master_ADDR+0x228>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d010      	beq.n	8004cd8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e007      	b.n	8004ce8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf6:	d117      	bne.n	8004d28 <I2C_Master_ADDR+0x278>
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cfe:	d00b      	beq.n	8004d18 <I2C_Master_ADDR+0x268>
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d008      	beq.n	8004d18 <I2C_Master_ADDR+0x268>
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d005      	beq.n	8004d18 <I2C_Master_ADDR+0x268>
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d002      	beq.n	8004d18 <I2C_Master_ADDR+0x268>
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d107      	bne.n	8004d28 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d26:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	e032      	b.n	8004da6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d4e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5e:	d117      	bne.n	8004d90 <I2C_Master_ADDR+0x2e0>
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d66:	d00b      	beq.n	8004d80 <I2C_Master_ADDR+0x2d0>
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d008      	beq.n	8004d80 <I2C_Master_ADDR+0x2d0>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d005      	beq.n	8004d80 <I2C_Master_ADDR+0x2d0>
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d002      	beq.n	8004d80 <I2C_Master_ADDR+0x2d0>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d107      	bne.n	8004d90 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004dac:	e00b      	b.n	8004dc6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
}
 8004dc4:	e7ff      	b.n	8004dc6 <I2C_Master_ADDR+0x316>
 8004dc6:	bf00      	nop
 8004dc8:	3744      	adds	r7, #68	; 0x44
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02b      	beq.n	8004e44 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d114      	bne.n	8004e44 <I2C_SlaveTransmit_TXE+0x72>
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	2b29      	cmp	r3, #41	; 0x29
 8004e1e:	d111      	bne.n	8004e44 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2221      	movs	r2, #33	; 0x21
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2228      	movs	r2, #40	; 0x28
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff f9f1 	bl	8004226 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d011      	beq.n	8004e82 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	781a      	ldrb	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02c      	beq.n	8004f02 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d114      	bne.n	8004f02 <I2C_SlaveReceive_RXNE+0x74>
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b2a      	cmp	r3, #42	; 0x2a
 8004edc:	d111      	bne.n	8004f02 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2222      	movs	r2, #34	; 0x22
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2228      	movs	r2, #40	; 0x28
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff f99c 	bl	800423a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d012      	beq.n	8004f42 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f68:	2b28      	cmp	r3, #40	; 0x28
 8004f6a:	d127      	bne.n	8004fbc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	09db      	lsrs	r3, r3, #7
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d103      	bne.n	8004fa0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	81bb      	strh	r3, [r7, #12]
 8004f9e:	e002      	b.n	8004fa6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004fae:	89ba      	ldrh	r2, [r7, #12]
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff f94a 	bl	800424e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004fba:	e00e      	b.n	8004fda <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005002:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005004:	2300      	movs	r3, #0
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005040:	d172      	bne.n	8005128 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b22      	cmp	r3, #34	; 0x22
 8005046:	d002      	beq.n	800504e <I2C_Slave_STOPF+0x6a>
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b2a      	cmp	r3, #42	; 0x2a
 800504c:	d135      	bne.n	80050ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f043 0204 	orr.w	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005080:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe f94a 	bl	8003320 <HAL_DMA_GetState>
 800508c:	4603      	mov	r3, r0
 800508e:	2b01      	cmp	r3, #1
 8005090:	d049      	beq.n	8005126 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	4a69      	ldr	r2, [pc, #420]	; (800523c <I2C_Slave_STOPF+0x258>)
 8005098:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd ff92 	bl	8002fc8 <HAL_DMA_Abort_IT>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d03d      	beq.n	8005126 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050b4:	4610      	mov	r0, r2
 80050b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050b8:	e035      	b.n	8005126 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f043 0204 	orr.w	r2, r3, #4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe f914 	bl	8003320 <HAL_DMA_GetState>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d014      	beq.n	8005128 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005102:	4a4e      	ldr	r2, [pc, #312]	; (800523c <I2C_Slave_STOPF+0x258>)
 8005104:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd ff5c 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005120:	4610      	mov	r0, r2
 8005122:	4798      	blx	r3
 8005124:	e000      	b.n	8005128 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005126:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d03e      	beq.n	80051b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b04      	cmp	r3, #4
 800513e:	d112      	bne.n	8005166 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d112      	bne.n	800519a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	f043 0204 	orr.w	r2, r3, #4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f843 	bl	8005244 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80051be:	e039      	b.n	8005234 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b2a      	cmp	r3, #42	; 0x2a
 80051c4:	d109      	bne.n	80051da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2228      	movs	r2, #40	; 0x28
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff f830 	bl	800423a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b28      	cmp	r3, #40	; 0x28
 80051e4:	d111      	bne.n	800520a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <I2C_Slave_STOPF+0x25c>)
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff f831 	bl	800426a <HAL_I2C_ListenCpltCallback>
}
 8005208:	e014      	b.n	8005234 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	2b22      	cmp	r3, #34	; 0x22
 8005210:	d002      	beq.n	8005218 <I2C_Slave_STOPF+0x234>
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	2b22      	cmp	r3, #34	; 0x22
 8005216:	d10d      	bne.n	8005234 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff f803 	bl	800423a <HAL_I2C_SlaveRxCpltCallback>
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	080057d1 	.word	0x080057d1
 8005240:	ffff0000 	.word	0xffff0000

08005244 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800525a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	2b10      	cmp	r3, #16
 8005260:	d002      	beq.n	8005268 <I2C_ITError+0x24>
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d10a      	bne.n	800527e <I2C_ITError+0x3a>
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b22      	cmp	r3, #34	; 0x22
 800526c:	d107      	bne.n	800527e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800527c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005284:	2b28      	cmp	r3, #40	; 0x28
 8005286:	d107      	bne.n	8005298 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2228      	movs	r2, #40	; 0x28
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005296:	e015      	b.n	80052c4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a6:	d00a      	beq.n	80052be <I2C_ITError+0x7a>
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b60      	cmp	r3, #96	; 0x60
 80052ac:	d007      	beq.n	80052be <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d2:	d162      	bne.n	800539a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d020      	beq.n	8005334 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	4a6a      	ldr	r2, [pc, #424]	; (80054a0 <I2C_ITError+0x25c>)
 80052f8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fd fe62 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8089 	beq.w	800541e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800532e:	4610      	mov	r0, r2
 8005330:	4798      	blx	r3
 8005332:	e074      	b.n	800541e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	4a59      	ldr	r2, [pc, #356]	; (80054a0 <I2C_ITError+0x25c>)
 800533a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	4618      	mov	r0, r3
 8005342:	f7fd fe41 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d068      	beq.n	800541e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d10b      	bne.n	8005372 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
 8005398:	e041      	b.n	800541e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b60      	cmp	r3, #96	; 0x60
 80053a4:	d125      	bne.n	80053f2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d10b      	bne.n	80053da <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0201 	bic.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fe ff65 	bl	80042ba <HAL_I2C_AbortCpltCallback>
 80053f0:	e015      	b.n	800541e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d10b      	bne.n	8005418 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fe ff44 	bl	80042a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10e      	bne.n	800544c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005434:	2b00      	cmp	r3, #0
 8005436:	d109      	bne.n	800544c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800543e:	2b00      	cmp	r3, #0
 8005440:	d104      	bne.n	800544c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800545a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005462:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b04      	cmp	r3, #4
 800546e:	d113      	bne.n	8005498 <I2C_ITError+0x254>
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	2b28      	cmp	r3, #40	; 0x28
 8005474:	d110      	bne.n	8005498 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a0a      	ldr	r2, [pc, #40]	; (80054a4 <I2C_ITError+0x260>)
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe fee9 	bl	800426a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	080057d1 	.word	0x080057d1
 80054a4:	ffff0000 	.word	0xffff0000

080054a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	460b      	mov	r3, r1
 80054b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d006      	beq.n	80054d2 <I2C_MasterRequestWrite+0x2a>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d003      	beq.n	80054d2 <I2C_MasterRequestWrite+0x2a>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054d0:	d108      	bne.n	80054e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e00b      	b.n	80054fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	2b12      	cmp	r3, #18
 80054ea:	d107      	bne.n	80054fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fa09 	bl	8005920 <I2C_WaitOnFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	d103      	bne.n	800552c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e035      	b.n	800559c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005538:	d108      	bne.n	800554c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005548:	611a      	str	r2, [r3, #16]
 800554a:	e01b      	b.n	8005584 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800554c:	897b      	ldrh	r3, [r7, #10]
 800554e:	11db      	asrs	r3, r3, #7
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f003 0306 	and.w	r3, r3, #6
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f063 030f 	orn	r3, r3, #15
 800555c:	b2da      	uxtb	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	490e      	ldr	r1, [pc, #56]	; (80055a4 <I2C_MasterRequestWrite+0xfc>)
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fa2f 	bl	80059ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e010      	b.n	800559c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800557a:	897b      	ldrh	r3, [r7, #10]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4907      	ldr	r1, [pc, #28]	; (80055a8 <I2C_MasterRequestWrite+0x100>)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fa1f 	bl	80059ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	00010008 	.word	0x00010008
 80055a8:	00010002 	.word	0x00010002

080055ac <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055de:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	2200      	movs	r2, #0
 80055ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	2200      	movs	r2, #0
 80055fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005606:	2b21      	cmp	r3, #33	; 0x21
 8005608:	d007      	beq.n	800561a <I2C_DMAXferCplt+0x6e>
 800560a:	7cfb      	ldrb	r3, [r7, #19]
 800560c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005610:	2b22      	cmp	r3, #34	; 0x22
 8005612:	d131      	bne.n	8005678 <I2C_DMAXferCplt+0xcc>
 8005614:	7cbb      	ldrb	r3, [r7, #18]
 8005616:	2b20      	cmp	r3, #32
 8005618:	d12e      	bne.n	8005678 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005628:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005630:	7cfb      	ldrb	r3, [r7, #19]
 8005632:	2b29      	cmp	r3, #41	; 0x29
 8005634:	d10a      	bne.n	800564c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2221      	movs	r2, #33	; 0x21
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2228      	movs	r2, #40	; 0x28
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005644:	6978      	ldr	r0, [r7, #20]
 8005646:	f7fe fdee 	bl	8004226 <HAL_I2C_SlaveTxCpltCallback>
 800564a:	e00c      	b.n	8005666 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	2b2a      	cmp	r3, #42	; 0x2a
 8005650:	d109      	bne.n	8005666 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2222      	movs	r2, #34	; 0x22
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2228      	movs	r2, #40	; 0x28
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005660:	6978      	ldr	r0, [r7, #20]
 8005662:	f7fe fdea 	bl	800423a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005674:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005676:	e06a      	b.n	800574e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d064      	beq.n	800574e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d107      	bne.n	800569e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b4:	d009      	beq.n	80056ca <I2C_DMAXferCplt+0x11e>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d006      	beq.n	80056ca <I2C_DMAXferCplt+0x11e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80056c2:	d002      	beq.n	80056ca <I2C_DMAXferCplt+0x11e>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d107      	bne.n	80056da <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056e8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005708:	6978      	ldr	r0, [r7, #20]
 800570a:	f7fe fdcc 	bl	80042a6 <HAL_I2C_ErrorCallback>
}
 800570e:	e01e      	b.n	800574e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d10a      	bne.n	800573a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005732:	6978      	ldr	r0, [r7, #20]
 8005734:	f7fe fdad 	bl	8004292 <HAL_I2C_MemRxCpltCallback>
}
 8005738:	e009      	b.n	800574e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2212      	movs	r2, #18
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005748:	6978      	ldr	r0, [r7, #20]
 800574a:	f7fc f817 	bl	800177c <HAL_I2C_MasterRxCpltCallback>
}
 800574e:	bf00      	nop
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	2200      	movs	r2, #0
 8005772:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	2200      	movs	r2, #0
 8005782:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fd fdd9 	bl	800333c <HAL_DMA_GetError>
 800578a:	4603      	mov	r3, r0
 800578c:	2b02      	cmp	r3, #2
 800578e:	d01b      	beq.n	80057c8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0210 	orr.w	r2, r3, #16
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7fe fd6f 	bl	80042a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057ea:	4b4b      	ldr	r3, [pc, #300]	; (8005918 <I2C_DMAAbort+0x148>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	08db      	lsrs	r3, r3, #3
 80057f0:	4a4a      	ldr	r2, [pc, #296]	; (800591c <I2C_DMAAbort+0x14c>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	0a1a      	lsrs	r2, r3, #8
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	00da      	lsls	r2, r3, #3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005816:	e00a      	b.n	800582e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800582c:	d0ea      	beq.n	8005804 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	2200      	movs	r2, #0
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	2200      	movs	r2, #0
 800584c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2200      	movs	r2, #0
 8005862:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	2200      	movs	r2, #0
 8005872:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	2200      	movs	r2, #0
 8005882:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b60      	cmp	r3, #96	; 0x60
 800589e:	d10e      	bne.n	80058be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2200      	movs	r2, #0
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058b6:	6978      	ldr	r0, [r7, #20]
 80058b8:	f7fe fcff 	bl	80042ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058bc:	e027      	b.n	800590e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058be:	7cfb      	ldrb	r3, [r7, #19]
 80058c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058c4:	2b28      	cmp	r3, #40	; 0x28
 80058c6:	d117      	bne.n	80058f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2228      	movs	r2, #40	; 0x28
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058f6:	e007      	b.n	8005908 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005908:	6978      	ldr	r0, [r7, #20]
 800590a:	f7fe fccc 	bl	80042a6 <HAL_I2C_ErrorCallback>
}
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000008 	.word	0x20000008
 800591c:	14f8b589 	.word	0x14f8b589

08005920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005930:	e025      	b.n	800597e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d021      	beq.n	800597e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593a:	f7fc fb51 	bl	8001fe0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d302      	bcc.n	8005950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d116      	bne.n	800597e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f043 0220 	orr.w	r2, r3, #32
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e023      	b.n	80059c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	0c1b      	lsrs	r3, r3, #16
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d10d      	bne.n	80059a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	43da      	mvns	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	e00c      	b.n	80059be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	43da      	mvns	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4013      	ands	r3, r2
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d0b6      	beq.n	8005932 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059dc:	e051      	b.n	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ec:	d123      	bne.n	8005a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f043 0204 	orr.w	r2, r3, #4
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e046      	b.n	8005ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d021      	beq.n	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3e:	f7fc facf 	bl	8001fe0 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d116      	bne.n	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f043 0220 	orr.w	r2, r3, #32
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e020      	b.n	8005ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	0c1b      	lsrs	r3, r3, #16
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d10c      	bne.n	8005aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	43da      	mvns	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4013      	ands	r3, r2
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bf14      	ite	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	2300      	moveq	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	e00b      	b.n	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	43da      	mvns	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d18d      	bne.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ad8:	e02d      	b.n	8005b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f8aa 	bl	8005c34 <I2C_IsAcknowledgeFailed>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e02d      	b.n	8005b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af0:	d021      	beq.n	8005b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af2:	f7fc fa75 	bl	8001fe0 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d302      	bcc.n	8005b08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d116      	bne.n	8005b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e007      	b.n	8005b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b40:	2b80      	cmp	r3, #128	; 0x80
 8005b42:	d1ca      	bne.n	8005ada <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b5a:	e02d      	b.n	8005bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f869 	bl	8005c34 <I2C_IsAcknowledgeFailed>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e02d      	b.n	8005bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d021      	beq.n	8005bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fc fa34 	bl	8001fe0 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d116      	bne.n	8005bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e007      	b.n	8005bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d1ca      	bne.n	8005b5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	08db      	lsrs	r3, r3, #3
 8005be2:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	0a1a      	lsrs	r2, r3, #8
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d107      	bne.n	8005c0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0220 	orr.w	r2, r3, #32
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e008      	b.n	8005c20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c1c:	d0e9      	beq.n	8005bf2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	20000008 	.word	0x20000008
 8005c30:	14f8b589 	.word	0x14f8b589

08005c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4a:	d11b      	bne.n	8005c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f043 0204 	orr.w	r2, r3, #4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ca2:	d103      	bne.n	8005cac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005caa:	e007      	b.n	8005cbc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cb4:	d102      	bne.n	8005cbc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e264      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d075      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ce6:	4ba3      	ldr	r3, [pc, #652]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d00c      	beq.n	8005d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf2:	4ba0      	ldr	r3, [pc, #640]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d112      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cfe:	4b9d      	ldr	r3, [pc, #628]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0a:	d10b      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0c:	4b99      	ldr	r3, [pc, #612]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05b      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x108>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d157      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e23f      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCC_OscConfig+0x74>
 8005d2e:	4b91      	ldr	r3, [pc, #580]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a90      	ldr	r2, [pc, #576]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e01d      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x98>
 8005d46:	4b8b      	ldr	r3, [pc, #556]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a8a      	ldr	r2, [pc, #552]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a87      	ldr	r2, [pc, #540]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d60:	4b84      	ldr	r3, [pc, #528]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a83      	ldr	r2, [pc, #524]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a80      	ldr	r2, [pc, #512]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d013      	beq.n	8005da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fc f92e 	bl	8001fe0 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d88:	f7fc f92a 	bl	8001fe0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e204      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9a:	4b76      	ldr	r3, [pc, #472]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0xc0>
 8005da6:	e014      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fc f91a 	bl	8001fe0 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fc f916 	bl	8001fe0 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e1f0      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc2:	4b6c      	ldr	r3, [pc, #432]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0xe8>
 8005dce:	e000      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d063      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dde:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dea:	4b62      	ldr	r3, [pc, #392]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d11c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005df6:	4b5f      	ldr	r3, [pc, #380]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d116      	bne.n	8005e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e02:	4b5c      	ldr	r3, [pc, #368]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_RCC_OscConfig+0x152>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d001      	beq.n	8005e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e1c4      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1a:	4b56      	ldr	r3, [pc, #344]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4952      	ldr	r1, [pc, #328]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2e:	e03a      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d020      	beq.n	8005e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e38:	4b4f      	ldr	r3, [pc, #316]	; (8005f78 <HAL_RCC_OscConfig+0x2b0>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3e:	f7fc f8cf 	bl	8001fe0 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e46:	f7fc f8cb 	bl	8001fe0 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e1a5      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e58:	4b46      	ldr	r3, [pc, #280]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0f0      	beq.n	8005e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e64:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4940      	ldr	r1, [pc, #256]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	600b      	str	r3, [r1, #0]
 8005e78:	e015      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7a:	4b3f      	ldr	r3, [pc, #252]	; (8005f78 <HAL_RCC_OscConfig+0x2b0>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fc f8ae 	bl	8001fe0 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e88:	f7fc f8aa 	bl	8001fe0 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e184      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9a:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d030      	beq.n	8005f14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eba:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <HAL_RCC_OscConfig+0x2b4>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec0:	f7fc f88e 	bl	8001fe0 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec8:	f7fc f88a 	bl	8001fe0 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e164      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eda:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x200>
 8005ee6:	e015      	b.n	8005f14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee8:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <HAL_RCC_OscConfig+0x2b4>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eee:	f7fc f877 	bl	8001fe0 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef6:	f7fc f873 	bl	8001fe0 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e14d      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80a0 	beq.w	8006062 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f26:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d121      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a07      	ldr	r2, [pc, #28]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6a:	f7fc f839 	bl	8001fe0 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	e011      	b.n	8005f96 <HAL_RCC_OscConfig+0x2ce>
 8005f72:	bf00      	nop
 8005f74:	40023800 	.word	0x40023800
 8005f78:	42470000 	.word	0x42470000
 8005f7c:	42470e80 	.word	0x42470e80
 8005f80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f84:	f7fc f82c 	bl	8001fe0 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e106      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f96:	4b85      	ldr	r3, [pc, #532]	; (80061ac <HAL_RCC_OscConfig+0x4e4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x2f0>
 8005faa:	4b81      	ldr	r3, [pc, #516]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a80      	ldr	r2, [pc, #512]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb6:	e01c      	b.n	8005ff2 <HAL_RCC_OscConfig+0x32a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b05      	cmp	r3, #5
 8005fbe:	d10c      	bne.n	8005fda <HAL_RCC_OscConfig+0x312>
 8005fc0:	4b7b      	ldr	r3, [pc, #492]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4a7a      	ldr	r2, [pc, #488]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fc6:	f043 0304 	orr.w	r3, r3, #4
 8005fca:	6713      	str	r3, [r2, #112]	; 0x70
 8005fcc:	4b78      	ldr	r3, [pc, #480]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	4a77      	ldr	r2, [pc, #476]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd8:	e00b      	b.n	8005ff2 <HAL_RCC_OscConfig+0x32a>
 8005fda:	4b75      	ldr	r3, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	4a74      	ldr	r2, [pc, #464]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe6:	4b72      	ldr	r3, [pc, #456]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	4a71      	ldr	r2, [pc, #452]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fec:	f023 0304 	bic.w	r3, r3, #4
 8005ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d015      	beq.n	8006026 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffa:	f7fb fff1 	bl	8001fe0 <HAL_GetTick>
 8005ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006000:	e00a      	b.n	8006018 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006002:	f7fb ffed 	bl	8001fe0 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006010:	4293      	cmp	r3, r2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e0c5      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006018:	4b65      	ldr	r3, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0ee      	beq.n	8006002 <HAL_RCC_OscConfig+0x33a>
 8006024:	e014      	b.n	8006050 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006026:	f7fb ffdb 	bl	8001fe0 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602c:	e00a      	b.n	8006044 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fb ffd7 	bl	8001fe0 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0af      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006044:	4b5a      	ldr	r3, [pc, #360]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ee      	bne.n	800602e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d105      	bne.n	8006062 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006056:	4b56      	ldr	r3, [pc, #344]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	4a55      	ldr	r2, [pc, #340]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 800605c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 809b 	beq.w	80061a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800606c:	4b50      	ldr	r3, [pc, #320]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b08      	cmp	r3, #8
 8006076:	d05c      	beq.n	8006132 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d141      	bne.n	8006104 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006080:	4b4c      	ldr	r3, [pc, #304]	; (80061b4 <HAL_RCC_OscConfig+0x4ec>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fb ffab 	bl	8001fe0 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800608e:	f7fb ffa7 	bl	8001fe0 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e081      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a0:	4b43      	ldr	r3, [pc, #268]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f0      	bne.n	800608e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	019b      	lsls	r3, r3, #6
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	3b01      	subs	r3, #1
 80060c6:	041b      	lsls	r3, r3, #16
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	061b      	lsls	r3, r3, #24
 80060d0:	4937      	ldr	r1, [pc, #220]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060d6:	4b37      	ldr	r3, [pc, #220]	; (80061b4 <HAL_RCC_OscConfig+0x4ec>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060dc:	f7fb ff80 	bl	8001fe0 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fb ff7c 	bl	8001fe0 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e056      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f6:	4b2e      	ldr	r3, [pc, #184]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x41c>
 8006102:	e04e      	b.n	80061a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006104:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <HAL_RCC_OscConfig+0x4ec>)
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610a:	f7fb ff69 	bl	8001fe0 <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006110:	e008      	b.n	8006124 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006112:	f7fb ff65 	bl	8001fe0 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e03f      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006124:	4b22      	ldr	r3, [pc, #136]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1f0      	bne.n	8006112 <HAL_RCC_OscConfig+0x44a>
 8006130:	e037      	b.n	80061a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e032      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800613e:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <HAL_RCC_OscConfig+0x4e8>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d028      	beq.n	800619e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006156:	429a      	cmp	r2, r3
 8006158:	d121      	bne.n	800619e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006164:	429a      	cmp	r2, r3
 8006166:	d11a      	bne.n	800619e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800616e:	4013      	ands	r3, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006174:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006176:	4293      	cmp	r3, r2
 8006178:	d111      	bne.n	800619e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	3b01      	subs	r3, #1
 8006188:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800618a:	429a      	cmp	r2, r3
 800618c:	d107      	bne.n	800619e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800619a:	429a      	cmp	r2, r3
 800619c:	d001      	beq.n	80061a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40007000 	.word	0x40007000
 80061b0:	40023800 	.word	0x40023800
 80061b4:	42470060 	.word	0x42470060

080061b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0cc      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061cc:	4b68      	ldr	r3, [pc, #416]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d90c      	bls.n	80061f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061da:	4b65      	ldr	r3, [pc, #404]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e2:	4b63      	ldr	r3, [pc, #396]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0b8      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800620c:	4b59      	ldr	r3, [pc, #356]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a58      	ldr	r2, [pc, #352]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	4a52      	ldr	r2, [pc, #328]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800622e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006230:	4b50      	ldr	r3, [pc, #320]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	494d      	ldr	r1, [pc, #308]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d044      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d107      	bne.n	8006266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006256:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d119      	bne.n	8006296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e07f      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d003      	beq.n	8006276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006272:	2b03      	cmp	r3, #3
 8006274:	d107      	bne.n	8006286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006276:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e06f      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006286:	4b3b      	ldr	r3, [pc, #236]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e067      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006296:	4b37      	ldr	r3, [pc, #220]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f023 0203 	bic.w	r2, r3, #3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4934      	ldr	r1, [pc, #208]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062a8:	f7fb fe9a 	bl	8001fe0 <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ae:	e00a      	b.n	80062c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062b0:	f7fb fe96 	bl	8001fe0 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e04f      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c6:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 020c 	and.w	r2, r3, #12
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d1eb      	bne.n	80062b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062d8:	4b25      	ldr	r3, [pc, #148]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d20c      	bcs.n	8006300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e6:	4b22      	ldr	r3, [pc, #136]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ee:	4b20      	ldr	r3, [pc, #128]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e032      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800630c:	4b19      	ldr	r3, [pc, #100]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4916      	ldr	r1, [pc, #88]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	4313      	orrs	r3, r2
 800631c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	490e      	ldr	r1, [pc, #56]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	4313      	orrs	r3, r2
 800633c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800633e:	f000 f821 	bl	8006384 <HAL_RCC_GetSysClockFreq>
 8006342:	4602      	mov	r2, r0
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	490a      	ldr	r1, [pc, #40]	; (8006378 <HAL_RCC_ClockConfig+0x1c0>)
 8006350:	5ccb      	ldrb	r3, [r1, r3]
 8006352:	fa22 f303 	lsr.w	r3, r2, r3
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <HAL_RCC_ClockConfig+0x1c4>)
 8006358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <HAL_RCC_ClockConfig+0x1c8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fb fdfa 	bl	8001f58 <HAL_InitTick>

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40023c00 	.word	0x40023c00
 8006374:	40023800 	.word	0x40023800
 8006378:	0800b2ec 	.word	0x0800b2ec
 800637c:	20000008 	.word	0x20000008
 8006380:	2000000c 	.word	0x2000000c

08006384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	2300      	movs	r3, #0
 8006396:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800639c:	4b67      	ldr	r3, [pc, #412]	; (800653c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d00d      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0x40>
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	f200 80bd 	bhi.w	8006528 <HAL_RCC_GetSysClockFreq+0x1a4>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_RCC_GetSysClockFreq+0x34>
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d003      	beq.n	80063be <HAL_RCC_GetSysClockFreq+0x3a>
 80063b6:	e0b7      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063b8:	4b61      	ldr	r3, [pc, #388]	; (8006540 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063ba:	60bb      	str	r3, [r7, #8]
       break;
 80063bc:	e0b7      	b.n	800652e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063be:	4b61      	ldr	r3, [pc, #388]	; (8006544 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80063c0:	60bb      	str	r3, [r7, #8]
      break;
 80063c2:	e0b4      	b.n	800652e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063c4:	4b5d      	ldr	r3, [pc, #372]	; (800653c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063ce:	4b5b      	ldr	r3, [pc, #364]	; (800653c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d04d      	beq.n	8006476 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063da:	4b58      	ldr	r3, [pc, #352]	; (800653c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	099b      	lsrs	r3, r3, #6
 80063e0:	461a      	mov	r2, r3
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063ea:	f04f 0100 	mov.w	r1, #0
 80063ee:	ea02 0800 	and.w	r8, r2, r0
 80063f2:	ea03 0901 	and.w	r9, r3, r1
 80063f6:	4640      	mov	r0, r8
 80063f8:	4649      	mov	r1, r9
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	014b      	lsls	r3, r1, #5
 8006404:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006408:	0142      	lsls	r2, r0, #5
 800640a:	4610      	mov	r0, r2
 800640c:	4619      	mov	r1, r3
 800640e:	ebb0 0008 	subs.w	r0, r0, r8
 8006412:	eb61 0109 	sbc.w	r1, r1, r9
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	018b      	lsls	r3, r1, #6
 8006420:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006424:	0182      	lsls	r2, r0, #6
 8006426:	1a12      	subs	r2, r2, r0
 8006428:	eb63 0301 	sbc.w	r3, r3, r1
 800642c:	f04f 0000 	mov.w	r0, #0
 8006430:	f04f 0100 	mov.w	r1, #0
 8006434:	00d9      	lsls	r1, r3, #3
 8006436:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800643a:	00d0      	lsls	r0, r2, #3
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	eb12 0208 	adds.w	r2, r2, r8
 8006444:	eb43 0309 	adc.w	r3, r3, r9
 8006448:	f04f 0000 	mov.w	r0, #0
 800644c:	f04f 0100 	mov.w	r1, #0
 8006450:	0259      	lsls	r1, r3, #9
 8006452:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006456:	0250      	lsls	r0, r2, #9
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4610      	mov	r0, r2
 800645e:	4619      	mov	r1, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	461a      	mov	r2, r3
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	f7fa fbf6 	bl	8000c58 <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4613      	mov	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e04a      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006476:	4b31      	ldr	r3, [pc, #196]	; (800653c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	099b      	lsrs	r3, r3, #6
 800647c:	461a      	mov	r2, r3
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006486:	f04f 0100 	mov.w	r1, #0
 800648a:	ea02 0400 	and.w	r4, r2, r0
 800648e:	ea03 0501 	and.w	r5, r3, r1
 8006492:	4620      	mov	r0, r4
 8006494:	4629      	mov	r1, r5
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	014b      	lsls	r3, r1, #5
 80064a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064a4:	0142      	lsls	r2, r0, #5
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	1b00      	subs	r0, r0, r4
 80064ac:	eb61 0105 	sbc.w	r1, r1, r5
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	018b      	lsls	r3, r1, #6
 80064ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064be:	0182      	lsls	r2, r0, #6
 80064c0:	1a12      	subs	r2, r2, r0
 80064c2:	eb63 0301 	sbc.w	r3, r3, r1
 80064c6:	f04f 0000 	mov.w	r0, #0
 80064ca:	f04f 0100 	mov.w	r1, #0
 80064ce:	00d9      	lsls	r1, r3, #3
 80064d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064d4:	00d0      	lsls	r0, r2, #3
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	1912      	adds	r2, r2, r4
 80064dc:	eb45 0303 	adc.w	r3, r5, r3
 80064e0:	f04f 0000 	mov.w	r0, #0
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	0299      	lsls	r1, r3, #10
 80064ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80064ee:	0290      	lsls	r0, r2, #10
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4610      	mov	r0, r2
 80064f6:	4619      	mov	r1, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	f7fa fbaa 	bl	8000c58 <__aeabi_uldivmod>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4613      	mov	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	3301      	adds	r3, #1
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	60bb      	str	r3, [r7, #8]
      break;
 8006526:	e002      	b.n	800652e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006528:	4b05      	ldr	r3, [pc, #20]	; (8006540 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800652a:	60bb      	str	r3, [r7, #8]
      break;
 800652c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800652e:	68bb      	ldr	r3, [r7, #8]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800653a:	bf00      	nop
 800653c:	40023800 	.word	0x40023800
 8006540:	00f42400 	.word	0x00f42400
 8006544:	007a1200 	.word	0x007a1200

08006548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800654c:	4b03      	ldr	r3, [pc, #12]	; (800655c <HAL_RCC_GetHCLKFreq+0x14>)
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000008 	.word	0x20000008

08006560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006564:	f7ff fff0 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 8006568:	4602      	mov	r2, r0
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	0a9b      	lsrs	r3, r3, #10
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	4903      	ldr	r1, [pc, #12]	; (8006584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006576:	5ccb      	ldrb	r3, [r1, r3]
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40023800 	.word	0x40023800
 8006584:	0800b2fc 	.word	0x0800b2fc

08006588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800658c:	f7ff ffdc 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 8006590:	4602      	mov	r2, r0
 8006592:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	0b5b      	lsrs	r3, r3, #13
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	4903      	ldr	r1, [pc, #12]	; (80065ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800659e:	5ccb      	ldrb	r3, [r1, r3]
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40023800 	.word	0x40023800
 80065ac:	0800b2fc 	.word	0x0800b2fc

080065b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e041      	b.n	8006646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fb fa34 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4619      	mov	r1, r3
 80065ee:	4610      	mov	r0, r2
 80065f0:	f000 fb80 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	d001      	beq.n	8006668 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e03c      	b.n	80066e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1e      	ldr	r2, [pc, #120]	; (80066f0 <HAL_TIM_Base_Start+0xa0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d018      	beq.n	80066ac <HAL_TIM_Base_Start+0x5c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d013      	beq.n	80066ac <HAL_TIM_Base_Start+0x5c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <HAL_TIM_Base_Start+0xa4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00e      	beq.n	80066ac <HAL_TIM_Base_Start+0x5c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <HAL_TIM_Base_Start+0xa8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d009      	beq.n	80066ac <HAL_TIM_Base_Start+0x5c>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a17      	ldr	r2, [pc, #92]	; (80066fc <HAL_TIM_Base_Start+0xac>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d004      	beq.n	80066ac <HAL_TIM_Base_Start+0x5c>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a16      	ldr	r2, [pc, #88]	; (8006700 <HAL_TIM_Base_Start+0xb0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d111      	bne.n	80066d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b06      	cmp	r3, #6
 80066bc:	d010      	beq.n	80066e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0201 	orr.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ce:	e007      	b.n	80066e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40014000 	.word	0x40014000

08006704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e041      	b.n	800679a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f839 	bl	80067a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f000 fad6 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <HAL_TIM_PWM_Start+0x24>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	e022      	b.n	8006822 <HAL_TIM_PWM_Start+0x6a>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d109      	bne.n	80067f6 <HAL_TIM_PWM_Start+0x3e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	e015      	b.n	8006822 <HAL_TIM_PWM_Start+0x6a>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d109      	bne.n	8006810 <HAL_TIM_PWM_Start+0x58>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e008      	b.n	8006822 <HAL_TIM_PWM_Start+0x6a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	bf14      	ite	ne
 800681c:	2301      	movne	r3, #1
 800681e:	2300      	moveq	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e068      	b.n	80068fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_TIM_PWM_Start+0x82>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006838:	e013      	b.n	8006862 <HAL_TIM_PWM_Start+0xaa>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d104      	bne.n	800684a <HAL_TIM_PWM_Start+0x92>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006848:	e00b      	b.n	8006862 <HAL_TIM_PWM_Start+0xaa>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d104      	bne.n	800685a <HAL_TIM_PWM_Start+0xa2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006858:	e003      	b.n	8006862 <HAL_TIM_PWM_Start+0xaa>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2201      	movs	r2, #1
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fce8 	bl	8007240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a23      	ldr	r2, [pc, #140]	; (8006904 <HAL_TIM_PWM_Start+0x14c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d107      	bne.n	800688a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1d      	ldr	r2, [pc, #116]	; (8006904 <HAL_TIM_PWM_Start+0x14c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d018      	beq.n	80068c6 <HAL_TIM_PWM_Start+0x10e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689c:	d013      	beq.n	80068c6 <HAL_TIM_PWM_Start+0x10e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a19      	ldr	r2, [pc, #100]	; (8006908 <HAL_TIM_PWM_Start+0x150>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00e      	beq.n	80068c6 <HAL_TIM_PWM_Start+0x10e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a17      	ldr	r2, [pc, #92]	; (800690c <HAL_TIM_PWM_Start+0x154>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d009      	beq.n	80068c6 <HAL_TIM_PWM_Start+0x10e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a16      	ldr	r2, [pc, #88]	; (8006910 <HAL_TIM_PWM_Start+0x158>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_TIM_PWM_Start+0x10e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a14      	ldr	r2, [pc, #80]	; (8006914 <HAL_TIM_PWM_Start+0x15c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d111      	bne.n	80068ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b06      	cmp	r3, #6
 80068d6:	d010      	beq.n	80068fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e8:	e007      	b.n	80068fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0201 	orr.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40014000 	.word	0x40014000

08006918 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fc88 	bl	8007240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a29      	ldr	r2, [pc, #164]	; (80069dc <HAL_TIM_PWM_Stop+0xc4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d117      	bne.n	800696a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6a1a      	ldr	r2, [r3, #32]
 8006940:	f241 1311 	movw	r3, #4369	; 0x1111
 8006944:	4013      	ands	r3, r2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10f      	bne.n	800696a <HAL_TIM_PWM_Stop+0x52>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a1a      	ldr	r2, [r3, #32]
 8006950:	f240 4344 	movw	r3, #1092	; 0x444
 8006954:	4013      	ands	r3, r2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <HAL_TIM_PWM_Stop+0x52>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a1a      	ldr	r2, [r3, #32]
 8006970:	f241 1311 	movw	r3, #4369	; 0x1111
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10f      	bne.n	800699a <HAL_TIM_PWM_Stop+0x82>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	f240 4344 	movw	r3, #1092	; 0x444
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d107      	bne.n	800699a <HAL_TIM_PWM_Stop+0x82>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <HAL_TIM_PWM_Stop+0x92>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a8:	e013      	b.n	80069d2 <HAL_TIM_PWM_Stop+0xba>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d104      	bne.n	80069ba <HAL_TIM_PWM_Stop+0xa2>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b8:	e00b      	b.n	80069d2 <HAL_TIM_PWM_Stop+0xba>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Stop+0xb2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069c8:	e003      	b.n	80069d2 <HAL_TIM_PWM_Stop+0xba>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40010000 	.word	0x40010000

080069e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e0ae      	b.n	8006b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b0c      	cmp	r3, #12
 8006a0a:	f200 809f 	bhi.w	8006b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a49 	.word	0x08006a49
 8006a18:	08006b4d 	.word	0x08006b4d
 8006a1c:	08006b4d 	.word	0x08006b4d
 8006a20:	08006b4d 	.word	0x08006b4d
 8006a24:	08006a89 	.word	0x08006a89
 8006a28:	08006b4d 	.word	0x08006b4d
 8006a2c:	08006b4d 	.word	0x08006b4d
 8006a30:	08006b4d 	.word	0x08006b4d
 8006a34:	08006acb 	.word	0x08006acb
 8006a38:	08006b4d 	.word	0x08006b4d
 8006a3c:	08006b4d 	.word	0x08006b4d
 8006a40:	08006b4d 	.word	0x08006b4d
 8006a44:	08006b0b 	.word	0x08006b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f9d0 	bl	8006df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0208 	orr.w	r2, r2, #8
 8006a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0204 	bic.w	r2, r2, #4
 8006a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6999      	ldr	r1, [r3, #24]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	619a      	str	r2, [r3, #24]
      break;
 8006a86:	e064      	b.n	8006b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fa16 	bl	8006ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6999      	ldr	r1, [r3, #24]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	021a      	lsls	r2, r3, #8
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	619a      	str	r2, [r3, #24]
      break;
 8006ac8:	e043      	b.n	8006b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fa61 	bl	8006f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0208 	orr.w	r2, r2, #8
 8006ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0204 	bic.w	r2, r2, #4
 8006af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69d9      	ldr	r1, [r3, #28]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	691a      	ldr	r2, [r3, #16]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	61da      	str	r2, [r3, #28]
      break;
 8006b08:	e023      	b.n	8006b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 faab 	bl	800706c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69d9      	ldr	r1, [r3, #28]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	021a      	lsls	r2, r3, #8
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	61da      	str	r2, [r3, #28]
      break;
 8006b4a:	e002      	b.n	8006b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIM_ConfigClockSource+0x1c>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e0b4      	b.n	8006cea <HAL_TIM_ConfigClockSource+0x186>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb8:	d03e      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0xd4>
 8006bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bbe:	f200 8087 	bhi.w	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc6:	f000 8086 	beq.w	8006cd6 <HAL_TIM_ConfigClockSource+0x172>
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bce:	d87f      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	2b70      	cmp	r3, #112	; 0x70
 8006bd2:	d01a      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0xa6>
 8006bd4:	2b70      	cmp	r3, #112	; 0x70
 8006bd6:	d87b      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b60      	cmp	r3, #96	; 0x60
 8006bda:	d050      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x11a>
 8006bdc:	2b60      	cmp	r3, #96	; 0x60
 8006bde:	d877      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b50      	cmp	r3, #80	; 0x50
 8006be2:	d03c      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0xfa>
 8006be4:	2b50      	cmp	r3, #80	; 0x50
 8006be6:	d873      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d058      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x13a>
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	d86f      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	d064      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15a>
 8006bf4:	2b30      	cmp	r3, #48	; 0x30
 8006bf6:	d86b      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d060      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15a>
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d867      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d05c      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d05a      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15a>
 8006c08:	e062      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f000 faf1 	bl	8007200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	609a      	str	r2, [r3, #8]
      break;
 8006c36:	e04f      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	6899      	ldr	r1, [r3, #8]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f000 fada 	bl	8007200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c5a:	609a      	str	r2, [r3, #8]
      break;
 8006c5c:	e03c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 fa4e 	bl	800710c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2150      	movs	r1, #80	; 0x50
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 faa7 	bl	80071ca <TIM_ITRx_SetConfig>
      break;
 8006c7c:	e02c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f000 fa6d 	bl	800716a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2160      	movs	r1, #96	; 0x60
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fa97 	bl	80071ca <TIM_ITRx_SetConfig>
      break;
 8006c9c:	e01c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6859      	ldr	r1, [r3, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f000 fa2e 	bl	800710c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fa87 	bl	80071ca <TIM_ITRx_SetConfig>
      break;
 8006cbc:	e00c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f000 fa7e 	bl	80071ca <TIM_ITRx_SetConfig>
      break;
 8006cce:	e003      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	e000      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a34      	ldr	r2, [pc, #208]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00f      	beq.n	8006d2c <TIM_Base_SetConfig+0x38>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d00b      	beq.n	8006d2c <TIM_Base_SetConfig+0x38>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a31      	ldr	r2, [pc, #196]	; (8006ddc <TIM_Base_SetConfig+0xe8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d007      	beq.n	8006d2c <TIM_Base_SetConfig+0x38>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a30      	ldr	r2, [pc, #192]	; (8006de0 <TIM_Base_SetConfig+0xec>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_Base_SetConfig+0x38>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2f      	ldr	r2, [pc, #188]	; (8006de4 <TIM_Base_SetConfig+0xf0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d108      	bne.n	8006d3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01b      	beq.n	8006d7e <TIM_Base_SetConfig+0x8a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4c:	d017      	beq.n	8006d7e <TIM_Base_SetConfig+0x8a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a22      	ldr	r2, [pc, #136]	; (8006ddc <TIM_Base_SetConfig+0xe8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <TIM_Base_SetConfig+0x8a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a21      	ldr	r2, [pc, #132]	; (8006de0 <TIM_Base_SetConfig+0xec>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00f      	beq.n	8006d7e <TIM_Base_SetConfig+0x8a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a20      	ldr	r2, [pc, #128]	; (8006de4 <TIM_Base_SetConfig+0xf0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00b      	beq.n	8006d7e <TIM_Base_SetConfig+0x8a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <TIM_Base_SetConfig+0xf4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d007      	beq.n	8006d7e <TIM_Base_SetConfig+0x8a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a1e      	ldr	r2, [pc, #120]	; (8006dec <TIM_Base_SetConfig+0xf8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d003      	beq.n	8006d7e <TIM_Base_SetConfig+0x8a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <TIM_Base_SetConfig+0xfc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d108      	bne.n	8006d90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d103      	bne.n	8006dc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40014400 	.word	0x40014400
 8006df0:	40014800 	.word	0x40014800

08006df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 0302 	bic.w	r3, r3, #2
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <TIM_OC1_SetConfig+0xc8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10c      	bne.n	8006e6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0308 	bic.w	r3, r3, #8
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f023 0304 	bic.w	r3, r3, #4
 8006e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <TIM_OC1_SetConfig+0xc8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d111      	bne.n	8006e96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	40010000 	.word	0x40010000

08006ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f023 0210 	bic.w	r2, r3, #16
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0320 	bic.w	r3, r3, #32
 8006f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <TIM_OC2_SetConfig+0xd4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10d      	bne.n	8006f3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <TIM_OC2_SetConfig+0xd4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d113      	bne.n	8006f6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40010000 	.word	0x40010000

08006f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <TIM_OC3_SetConfig+0xd0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d10d      	bne.n	8007012 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a14      	ldr	r2, [pc, #80]	; (8007068 <TIM_OC3_SetConfig+0xd0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d113      	bne.n	8007042 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	621a      	str	r2, [r3, #32]
}
 800705c:	bf00      	nop
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	40010000 	.word	0x40010000

0800706c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	031b      	lsls	r3, r3, #12
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a10      	ldr	r2, [pc, #64]	; (8007108 <TIM_OC4_SetConfig+0x9c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d109      	bne.n	80070e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	019b      	lsls	r3, r3, #6
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	621a      	str	r2, [r3, #32]
}
 80070fa:	bf00      	nop
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000

0800710c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f023 0201 	bic.w	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f023 030a 	bic.w	r3, r3, #10
 8007148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4313      	orrs	r3, r2
 8007150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800716a:	b480      	push	{r7}
 800716c:	b087      	sub	sp, #28
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0210 	bic.w	r2, r3, #16
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f043 0307 	orr.w	r3, r3, #7
 80071ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	609a      	str	r2, [r3, #8]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800721a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	021a      	lsls	r2, r3, #8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	431a      	orrs	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4313      	orrs	r3, r2
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	609a      	str	r2, [r3, #8]
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 031f 	and.w	r3, r3, #31
 8007252:	2201      	movs	r2, #1
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1a      	ldr	r2, [r3, #32]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a1a      	ldr	r2, [r3, #32]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	fa01 f303 	lsl.w	r3, r1, r3
 8007278:	431a      	orrs	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e050      	b.n	8007346 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d018      	beq.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f0:	d013      	beq.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a18      	ldr	r2, [pc, #96]	; (8007358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00e      	beq.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a16      	ldr	r2, [pc, #88]	; (800735c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d009      	beq.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a15      	ldr	r2, [pc, #84]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d004      	beq.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a13      	ldr	r2, [pc, #76]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d10c      	bne.n	8007334 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4313      	orrs	r3, r2
 800732a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40010000 	.word	0x40010000
 8007358:	40000400 	.word	0x40000400
 800735c:	40000800 	.word	0x40000800
 8007360:	40000c00 	.word	0x40000c00
 8007364:	40014000 	.word	0x40014000

08007368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e03f      	b.n	80073fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fa fbc6 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2224      	movs	r2, #36	; 0x24
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fec7 	bl	8008140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695a      	ldr	r2, [r3, #20]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b08a      	sub	sp, #40	; 0x28
 8007406:	af02      	add	r7, sp, #8
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	603b      	str	r3, [r7, #0]
 800740e:	4613      	mov	r3, r2
 8007410:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b20      	cmp	r3, #32
 8007420:	d17c      	bne.n	800751c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <HAL_UART_Transmit+0x2c>
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e075      	b.n	800751e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_UART_Transmit+0x3e>
 800743c:	2302      	movs	r3, #2
 800743e:	e06e      	b.n	800751e <HAL_UART_Transmit+0x11c>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2221      	movs	r2, #33	; 0x21
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007456:	f7fa fdc3 	bl	8001fe0 <HAL_GetTick>
 800745a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	88fa      	ldrh	r2, [r7, #6]
 8007466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007470:	d108      	bne.n	8007484 <HAL_UART_Transmit+0x82>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e003      	b.n	800748c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007494:	e02a      	b.n	80074ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2200      	movs	r2, #0
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fc1c 	bl	8007cde <UART_WaitOnFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e036      	b.n	800751e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	3302      	adds	r3, #2
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	e007      	b.n	80074de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3301      	adds	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1cf      	bne.n	8007496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2200      	movs	r2, #0
 80074fe:	2140      	movs	r1, #64	; 0x40
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 fbec 	bl	8007cde <UART_WaitOnFlagUntilTimeout>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e006      	b.n	800751e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2220      	movs	r2, #32
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	e000      	b.n	800751e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800751c:	2302      	movs	r3, #2
  }
}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08c      	sub	sp, #48	; 0x30
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	4613      	mov	r3, r2
 8007534:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b20      	cmp	r3, #32
 8007540:	d165      	bne.n	800760e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <HAL_UART_Transmit_DMA+0x26>
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e05e      	b.n	8007610 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_UART_Transmit_DMA+0x38>
 800755c:	2302      	movs	r3, #2
 800755e:	e057      	b.n	8007610 <HAL_UART_Transmit_DMA+0xe8>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	88fa      	ldrh	r2, [r7, #6]
 8007572:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2221      	movs	r2, #33	; 0x21
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	4a22      	ldr	r2, [pc, #136]	; (8007618 <HAL_UART_Transmit_DMA+0xf0>)
 800758e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	4a21      	ldr	r2, [pc, #132]	; (800761c <HAL_UART_Transmit_DMA+0xf4>)
 8007596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759c:	4a20      	ldr	r2, [pc, #128]	; (8007620 <HAL_UART_Transmit_DMA+0xf8>)
 800759e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	2200      	movs	r2, #0
 80075a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80075a8:	f107 0308 	add.w	r3, r7, #8
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3304      	adds	r3, #4
 80075bc:	461a      	mov	r2, r3
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	f7fb fc3a 	bl	8002e38 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3314      	adds	r3, #20
 80075dc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	617b      	str	r3, [r7, #20]
   return(result);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3314      	adds	r3, #20
 80075f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f6:	627a      	str	r2, [r7, #36]	; 0x24
 80075f8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6a39      	ldr	r1, [r7, #32]
 80075fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	61fb      	str	r3, [r7, #28]
   return(result);
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e000      	b.n	8007610 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800760e:	2302      	movs	r3, #2
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3730      	adds	r7, #48	; 0x30
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	08007b95 	.word	0x08007b95
 800761c:	08007c2f 	.word	0x08007c2f
 8007620:	08007c4b 	.word	0x08007c4b

08007624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b0ba      	sub	sp, #232	; 0xe8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800764a:	2300      	movs	r3, #0
 800764c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007650:	2300      	movs	r3, #0
 8007652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10f      	bne.n	800768a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <HAL_UART_IRQHandler+0x66>
 8007676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fca0 	bl	8007fc8 <UART_Receive_IT>
      return;
 8007688:	e256      	b.n	8007b38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800768a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80de 	beq.w	8007850 <HAL_UART_IRQHandler+0x22c>
 8007694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80d1 	beq.w	8007850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <HAL_UART_IRQHandler+0xae>
 80076ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f043 0201 	orr.w	r2, r3, #1
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00b      	beq.n	80076f6 <HAL_UART_IRQHandler+0xd2>
 80076de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f043 0202 	orr.w	r2, r3, #2
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <HAL_UART_IRQHandler+0xf6>
 8007702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f043 0204 	orr.w	r2, r3, #4
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800771a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d011      	beq.n	800774a <HAL_UART_IRQHandler+0x126>
 8007726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b00      	cmp	r3, #0
 8007730:	d105      	bne.n	800773e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f043 0208 	orr.w	r2, r3, #8
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 81ed 	beq.w	8007b2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d008      	beq.n	8007772 <HAL_UART_IRQHandler+0x14e>
 8007760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007764:	f003 0320 	and.w	r3, r3, #32
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc2b 	bl	8007fc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	bf0c      	ite	eq
 8007780:	2301      	moveq	r3, #1
 8007782:	2300      	movne	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	f003 0308 	and.w	r3, r3, #8
 8007792:	2b00      	cmp	r3, #0
 8007794:	d103      	bne.n	800779e <HAL_UART_IRQHandler+0x17a>
 8007796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d04f      	beq.n	800783e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fb33 	bl	8007e0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d141      	bne.n	8007836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3314      	adds	r3, #20
 80077b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3314      	adds	r3, #20
 80077da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1d9      	bne.n	80077b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	2b00      	cmp	r3, #0
 8007804:	d013      	beq.n	800782e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	4a7d      	ldr	r2, [pc, #500]	; (8007a00 <HAL_UART_IRQHandler+0x3dc>)
 800780c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	4618      	mov	r0, r3
 8007814:	f7fb fbd8 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d016      	beq.n	800784c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800782c:	e00e      	b.n	800784c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f99a 	bl	8007b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007834:	e00a      	b.n	800784c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f996 	bl	8007b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783c:	e006      	b.n	800784c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f992 	bl	8007b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800784a:	e170      	b.n	8007b2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784c:	bf00      	nop
    return;
 800784e:	e16e      	b.n	8007b2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	2b01      	cmp	r3, #1
 8007856:	f040 814a 	bne.w	8007aee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800785a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785e:	f003 0310 	and.w	r3, r3, #16
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 8143 	beq.w	8007aee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 813c 	beq.w	8007aee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007876:	2300      	movs	r3, #0
 8007878:	60bb      	str	r3, [r7, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60bb      	str	r3, [r7, #8]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	60bb      	str	r3, [r7, #8]
 800788a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	f040 80b4 	bne.w	8007a04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8140 	beq.w	8007b32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ba:	429a      	cmp	r2, r3
 80078bc:	f080 8139 	bcs.w	8007b32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d2:	f000 8088 	beq.w	80079e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	330c      	adds	r3, #12
 80078fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800790e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800791a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1d9      	bne.n	80078d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3314      	adds	r3, #20
 8007928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007934:	f023 0301 	bic.w	r3, r3, #1
 8007938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3314      	adds	r3, #20
 8007942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800794a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800794e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e1      	bne.n	8007922 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3314      	adds	r3, #20
 8007964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800796e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3314      	adds	r3, #20
 800797e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e3      	bne.n	800795e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	330c      	adds	r3, #12
 80079aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b6:	f023 0310 	bic.w	r3, r3, #16
 80079ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	330c      	adds	r3, #12
 80079c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80079ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e3      	bne.n	80079a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fb fa81 	bl	8002ee8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f8c0 	bl	8007b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079fc:	e099      	b.n	8007b32 <HAL_UART_IRQHandler+0x50e>
 80079fe:	bf00      	nop
 8007a00:	08007ed1 	.word	0x08007ed1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 808b 	beq.w	8007b36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8086 	beq.w	8007b36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	330c      	adds	r3, #12
 8007a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8007a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e3      	bne.n	8007a2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3314      	adds	r3, #20
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	623b      	str	r3, [r7, #32]
   return(result);
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f023 0301 	bic.w	r3, r3, #1
 8007a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3314      	adds	r3, #20
 8007a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a86:	633a      	str	r2, [r7, #48]	; 0x30
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e3      	bne.n	8007a62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0310 	bic.w	r3, r3, #16
 8007abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007acc:	61fa      	str	r2, [r7, #28]
 8007ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	69b9      	ldr	r1, [r7, #24]
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e3      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f848 	bl	8007b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aec:	e023      	b.n	8007b36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d009      	beq.n	8007b0e <HAL_UART_IRQHandler+0x4ea>
 8007afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f9f6 	bl	8007ef8 <UART_Transmit_IT>
    return;
 8007b0c:	e014      	b.n	8007b38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00e      	beq.n	8007b38 <HAL_UART_IRQHandler+0x514>
 8007b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d008      	beq.n	8007b38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa36 	bl	8007f98 <UART_EndTransmit_IT>
    return;
 8007b2c:	e004      	b.n	8007b38 <HAL_UART_IRQHandler+0x514>
    return;
 8007b2e:	bf00      	nop
 8007b30:	e002      	b.n	8007b38 <HAL_UART_IRQHandler+0x514>
      return;
 8007b32:	bf00      	nop
 8007b34:	e000      	b.n	8007b38 <HAL_UART_IRQHandler+0x514>
      return;
 8007b36:	bf00      	nop
  }
}
 8007b38:	37e8      	adds	r7, #232	; 0xe8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop

08007b40 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b090      	sub	sp, #64	; 0x40
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d137      	bne.n	8007c20 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3314      	adds	r3, #20
 8007bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd6:	633a      	str	r2, [r7, #48]	; 0x30
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e5      	bne.n	8007bb6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	330c      	adds	r3, #12
 8007bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
 8007c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c0a:	61fa      	str	r2, [r7, #28]
 8007c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	69b9      	ldr	r1, [r7, #24]
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	617b      	str	r3, [r7, #20]
   return(result);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e5      	bne.n	8007bea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c1e:	e002      	b.n	8007c26 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c22:	f7f9 fcc5 	bl	80015b0 <HAL_UART_TxCpltCallback>
}
 8007c26:	bf00      	nop
 8007c28:	3740      	adds	r7, #64	; 0x40
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff ff7f 	bl	8007b40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	bf0c      	ite	eq
 8007c6a:	2301      	moveq	r3, #1
 8007c6c:	2300      	movne	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b21      	cmp	r3, #33	; 0x21
 8007c7c:	d108      	bne.n	8007c90 <UART_DMAError+0x46>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2200      	movs	r2, #0
 8007c88:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c8a:	68b8      	ldr	r0, [r7, #8]
 8007c8c:	f000 f895 	bl	8007dba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b40      	cmp	r3, #64	; 0x40
 8007c9c:	bf0c      	ite	eq
 8007c9e:	2301      	moveq	r3, #1
 8007ca0:	2300      	movne	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b22      	cmp	r3, #34	; 0x22
 8007cb0:	d108      	bne.n	8007cc4 <UART_DMAError+0x7a>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007cbe:	68b8      	ldr	r0, [r7, #8]
 8007cc0:	f000 f8a3 	bl	8007e0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	f043 0210 	orr.w	r2, r3, #16
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cd0:	68b8      	ldr	r0, [r7, #8]
 8007cd2:	f7ff ff49 	bl	8007b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b090      	sub	sp, #64	; 0x40
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	603b      	str	r3, [r7, #0]
 8007cea:	4613      	mov	r3, r2
 8007cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cee:	e050      	b.n	8007d92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d04c      	beq.n	8007d92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8007cfe:	f7fa f96f 	bl	8001fe0 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d241      	bcs.n	8007d92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d2e:	637a      	str	r2, [r7, #52]	; 0x34
 8007d30:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3314      	adds	r3, #20
 8007d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	613b      	str	r3, [r7, #16]
   return(result);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f023 0301 	bic.w	r3, r3, #1
 8007d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3314      	adds	r3, #20
 8007d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d62:	623a      	str	r2, [r7, #32]
 8007d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	69f9      	ldr	r1, [r7, #28]
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e5      	bne.n	8007d42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2220      	movs	r2, #32
 8007d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e00f      	b.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	bf0c      	ite	eq
 8007da2:	2301      	moveq	r3, #1
 8007da4:	2300      	movne	r3, #0
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d09f      	beq.n	8007cf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3740      	adds	r7, #64	; 0x40
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b089      	sub	sp, #36	; 0x24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007dd8:	61fb      	str	r3, [r7, #28]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	61ba      	str	r2, [r7, #24]
 8007de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6979      	ldr	r1, [r7, #20]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	613b      	str	r3, [r7, #16]
   return(result);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e5      	bne.n	8007dc2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007dfe:	bf00      	nop
 8007e00:	3724      	adds	r7, #36	; 0x24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b095      	sub	sp, #84	; 0x54
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e32:	643a      	str	r2, [r7, #64]	; 0x40
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e5      	bne.n	8007e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3314      	adds	r3, #20
 8007e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3314      	adds	r3, #20
 8007e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e5      	bne.n	8007e46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d119      	bne.n	8007eb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	330c      	adds	r3, #12
 8007e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f023 0310 	bic.w	r3, r3, #16
 8007e98:	647b      	str	r3, [r7, #68]	; 0x44
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ea2:	61ba      	str	r2, [r7, #24]
 8007ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6979      	ldr	r1, [r7, #20]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e5      	bne.n	8007e82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ec4:	bf00      	nop
 8007ec6:	3754      	adds	r7, #84	; 0x54
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f7ff fe3c 	bl	8007b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b21      	cmp	r3, #33	; 0x21
 8007f0a:	d13e      	bne.n	8007f8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f14:	d114      	bne.n	8007f40 <UART_Transmit_IT+0x48>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d110      	bne.n	8007f40 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	1c9a      	adds	r2, r3, #2
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	621a      	str	r2, [r3, #32]
 8007f3e:	e008      	b.n	8007f52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	1c59      	adds	r1, r3, #1
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6211      	str	r1, [r2, #32]
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10f      	bne.n	8007f86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	e000      	b.n	8007f8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f8a:	2302      	movs	r3, #2
  }
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7f9 faf9 	bl	80015b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08c      	sub	sp, #48	; 0x30
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b22      	cmp	r3, #34	; 0x22
 8007fda:	f040 80ab 	bne.w	8008134 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	d117      	bne.n	8008018 <UART_Receive_IT+0x50>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d113      	bne.n	8008018 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	b29b      	uxth	r3, r3
 8008002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008006:	b29a      	uxth	r2, r3
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008010:	1c9a      	adds	r2, r3, #2
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	629a      	str	r2, [r3, #40]	; 0x28
 8008016:	e026      	b.n	8008066 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802a:	d007      	beq.n	800803c <UART_Receive_IT+0x74>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <UART_Receive_IT+0x82>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d106      	bne.n	800804a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	b2da      	uxtb	r2, r3
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	701a      	strb	r2, [r3, #0]
 8008048:	e008      	b.n	800805c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008056:	b2da      	uxtb	r2, r3
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800806a:	b29b      	uxth	r3, r3
 800806c:	3b01      	subs	r3, #1
 800806e:	b29b      	uxth	r3, r3
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	4619      	mov	r1, r3
 8008074:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008076:	2b00      	cmp	r3, #0
 8008078:	d15a      	bne.n	8008130 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0220 	bic.w	r2, r2, #32
 8008088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	695a      	ldr	r2, [r3, #20]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0201 	bic.w	r2, r2, #1
 80080a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d135      	bne.n	8008126 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	330c      	adds	r3, #12
 80080c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	613b      	str	r3, [r7, #16]
   return(result);
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	330c      	adds	r3, #12
 80080de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e0:	623a      	str	r2, [r7, #32]
 80080e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	69f9      	ldr	r1, [r7, #28]
 80080e6:	6a3a      	ldr	r2, [r7, #32]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e5      	bne.n	80080c0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b10      	cmp	r3, #16
 8008100:	d10a      	bne.n	8008118 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fd2c 	bl	8007b7c <HAL_UARTEx_RxEventCallback>
 8008124:	e002      	b.n	800812c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fd14 	bl	8007b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	e002      	b.n	8008136 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	e000      	b.n	8008136 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008134:	2302      	movs	r3, #2
  }
}
 8008136:	4618      	mov	r0, r3
 8008138:	3730      	adds	r7, #48	; 0x30
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	b09f      	sub	sp, #124	; 0x7c
 8008146:	af00      	add	r7, sp, #0
 8008148:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800814a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008156:	68d9      	ldr	r1, [r3, #12]
 8008158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	ea40 0301 	orr.w	r3, r0, r1
 8008160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	431a      	orrs	r2, r3
 800816c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	431a      	orrs	r2, r3
 8008172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	4313      	orrs	r3, r2
 8008178:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800817a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008184:	f021 010c 	bic.w	r1, r1, #12
 8008188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800818e:	430b      	orrs	r3, r1
 8008190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800819c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819e:	6999      	ldr	r1, [r3, #24]
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	ea40 0301 	orr.w	r3, r0, r1
 80081a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4bc5      	ldr	r3, [pc, #788]	; (80084c4 <UART_SetConfig+0x384>)
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d004      	beq.n	80081be <UART_SetConfig+0x7e>
 80081b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	4bc3      	ldr	r3, [pc, #780]	; (80084c8 <UART_SetConfig+0x388>)
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d103      	bne.n	80081c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081be:	f7fe f9e3 	bl	8006588 <HAL_RCC_GetPCLK2Freq>
 80081c2:	6778      	str	r0, [r7, #116]	; 0x74
 80081c4:	e002      	b.n	80081cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081c6:	f7fe f9cb 	bl	8006560 <HAL_RCC_GetPCLK1Freq>
 80081ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d4:	f040 80b6 	bne.w	8008344 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081da:	461c      	mov	r4, r3
 80081dc:	f04f 0500 	mov.w	r5, #0
 80081e0:	4622      	mov	r2, r4
 80081e2:	462b      	mov	r3, r5
 80081e4:	1891      	adds	r1, r2, r2
 80081e6:	6439      	str	r1, [r7, #64]	; 0x40
 80081e8:	415b      	adcs	r3, r3
 80081ea:	647b      	str	r3, [r7, #68]	; 0x44
 80081ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081f0:	1912      	adds	r2, r2, r4
 80081f2:	eb45 0303 	adc.w	r3, r5, r3
 80081f6:	f04f 0000 	mov.w	r0, #0
 80081fa:	f04f 0100 	mov.w	r1, #0
 80081fe:	00d9      	lsls	r1, r3, #3
 8008200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008204:	00d0      	lsls	r0, r2, #3
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	1911      	adds	r1, r2, r4
 800820c:	6639      	str	r1, [r7, #96]	; 0x60
 800820e:	416b      	adcs	r3, r5
 8008210:	667b      	str	r3, [r7, #100]	; 0x64
 8008212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	461a      	mov	r2, r3
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	1891      	adds	r1, r2, r2
 800821e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008220:	415b      	adcs	r3, r3
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008228:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800822c:	f7f8 fd14 	bl	8000c58 <__aeabi_uldivmod>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4ba5      	ldr	r3, [pc, #660]	; (80084cc <UART_SetConfig+0x38c>)
 8008236:	fba3 2302 	umull	r2, r3, r3, r2
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	011e      	lsls	r6, r3, #4
 800823e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008240:	461c      	mov	r4, r3
 8008242:	f04f 0500 	mov.w	r5, #0
 8008246:	4622      	mov	r2, r4
 8008248:	462b      	mov	r3, r5
 800824a:	1891      	adds	r1, r2, r2
 800824c:	6339      	str	r1, [r7, #48]	; 0x30
 800824e:	415b      	adcs	r3, r3
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
 8008252:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008256:	1912      	adds	r2, r2, r4
 8008258:	eb45 0303 	adc.w	r3, r5, r3
 800825c:	f04f 0000 	mov.w	r0, #0
 8008260:	f04f 0100 	mov.w	r1, #0
 8008264:	00d9      	lsls	r1, r3, #3
 8008266:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800826a:	00d0      	lsls	r0, r2, #3
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	1911      	adds	r1, r2, r4
 8008272:	65b9      	str	r1, [r7, #88]	; 0x58
 8008274:	416b      	adcs	r3, r5
 8008276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	461a      	mov	r2, r3
 800827e:	f04f 0300 	mov.w	r3, #0
 8008282:	1891      	adds	r1, r2, r2
 8008284:	62b9      	str	r1, [r7, #40]	; 0x28
 8008286:	415b      	adcs	r3, r3
 8008288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800828a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800828e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008292:	f7f8 fce1 	bl	8000c58 <__aeabi_uldivmod>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4b8c      	ldr	r3, [pc, #560]	; (80084cc <UART_SetConfig+0x38c>)
 800829c:	fba3 1302 	umull	r1, r3, r3, r2
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	2164      	movs	r1, #100	; 0x64
 80082a4:	fb01 f303 	mul.w	r3, r1, r3
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	3332      	adds	r3, #50	; 0x32
 80082ae:	4a87      	ldr	r2, [pc, #540]	; (80084cc <UART_SetConfig+0x38c>)
 80082b0:	fba2 2303 	umull	r2, r3, r2, r3
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082bc:	441e      	add	r6, r3
 80082be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082c0:	4618      	mov	r0, r3
 80082c2:	f04f 0100 	mov.w	r1, #0
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	1894      	adds	r4, r2, r2
 80082cc:	623c      	str	r4, [r7, #32]
 80082ce:	415b      	adcs	r3, r3
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
 80082d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082d6:	1812      	adds	r2, r2, r0
 80082d8:	eb41 0303 	adc.w	r3, r1, r3
 80082dc:	f04f 0400 	mov.w	r4, #0
 80082e0:	f04f 0500 	mov.w	r5, #0
 80082e4:	00dd      	lsls	r5, r3, #3
 80082e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082ea:	00d4      	lsls	r4, r2, #3
 80082ec:	4622      	mov	r2, r4
 80082ee:	462b      	mov	r3, r5
 80082f0:	1814      	adds	r4, r2, r0
 80082f2:	653c      	str	r4, [r7, #80]	; 0x50
 80082f4:	414b      	adcs	r3, r1
 80082f6:	657b      	str	r3, [r7, #84]	; 0x54
 80082f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	461a      	mov	r2, r3
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	1891      	adds	r1, r2, r2
 8008304:	61b9      	str	r1, [r7, #24]
 8008306:	415b      	adcs	r3, r3
 8008308:	61fb      	str	r3, [r7, #28]
 800830a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800830e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008312:	f7f8 fca1 	bl	8000c58 <__aeabi_uldivmod>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4b6c      	ldr	r3, [pc, #432]	; (80084cc <UART_SetConfig+0x38c>)
 800831c:	fba3 1302 	umull	r1, r3, r3, r2
 8008320:	095b      	lsrs	r3, r3, #5
 8008322:	2164      	movs	r1, #100	; 0x64
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	3332      	adds	r3, #50	; 0x32
 800832e:	4a67      	ldr	r2, [pc, #412]	; (80084cc <UART_SetConfig+0x38c>)
 8008330:	fba2 2303 	umull	r2, r3, r2, r3
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	f003 0207 	and.w	r2, r3, #7
 800833a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4432      	add	r2, r6
 8008340:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008342:	e0b9      	b.n	80084b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008346:	461c      	mov	r4, r3
 8008348:	f04f 0500 	mov.w	r5, #0
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	1891      	adds	r1, r2, r2
 8008352:	6139      	str	r1, [r7, #16]
 8008354:	415b      	adcs	r3, r3
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800835c:	1912      	adds	r2, r2, r4
 800835e:	eb45 0303 	adc.w	r3, r5, r3
 8008362:	f04f 0000 	mov.w	r0, #0
 8008366:	f04f 0100 	mov.w	r1, #0
 800836a:	00d9      	lsls	r1, r3, #3
 800836c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008370:	00d0      	lsls	r0, r2, #3
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	eb12 0804 	adds.w	r8, r2, r4
 800837a:	eb43 0905 	adc.w	r9, r3, r5
 800837e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	4618      	mov	r0, r3
 8008384:	f04f 0100 	mov.w	r1, #0
 8008388:	f04f 0200 	mov.w	r2, #0
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	008b      	lsls	r3, r1, #2
 8008392:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008396:	0082      	lsls	r2, r0, #2
 8008398:	4640      	mov	r0, r8
 800839a:	4649      	mov	r1, r9
 800839c:	f7f8 fc5c 	bl	8000c58 <__aeabi_uldivmod>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4b49      	ldr	r3, [pc, #292]	; (80084cc <UART_SetConfig+0x38c>)
 80083a6:	fba3 2302 	umull	r2, r3, r3, r2
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	011e      	lsls	r6, r3, #4
 80083ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083b0:	4618      	mov	r0, r3
 80083b2:	f04f 0100 	mov.w	r1, #0
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	1894      	adds	r4, r2, r2
 80083bc:	60bc      	str	r4, [r7, #8]
 80083be:	415b      	adcs	r3, r3
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083c6:	1812      	adds	r2, r2, r0
 80083c8:	eb41 0303 	adc.w	r3, r1, r3
 80083cc:	f04f 0400 	mov.w	r4, #0
 80083d0:	f04f 0500 	mov.w	r5, #0
 80083d4:	00dd      	lsls	r5, r3, #3
 80083d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083da:	00d4      	lsls	r4, r2, #3
 80083dc:	4622      	mov	r2, r4
 80083de:	462b      	mov	r3, r5
 80083e0:	1814      	adds	r4, r2, r0
 80083e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80083e4:	414b      	adcs	r3, r1
 80083e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f04f 0100 	mov.w	r1, #0
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	008b      	lsls	r3, r1, #2
 80083fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008400:	0082      	lsls	r2, r0, #2
 8008402:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008406:	f7f8 fc27 	bl	8000c58 <__aeabi_uldivmod>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4b2f      	ldr	r3, [pc, #188]	; (80084cc <UART_SetConfig+0x38c>)
 8008410:	fba3 1302 	umull	r1, r3, r3, r2
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	2164      	movs	r1, #100	; 0x64
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	3332      	adds	r3, #50	; 0x32
 8008422:	4a2a      	ldr	r2, [pc, #168]	; (80084cc <UART_SetConfig+0x38c>)
 8008424:	fba2 2303 	umull	r2, r3, r2, r3
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800842e:	441e      	add	r6, r3
 8008430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008432:	4618      	mov	r0, r3
 8008434:	f04f 0100 	mov.w	r1, #0
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	1894      	adds	r4, r2, r2
 800843e:	603c      	str	r4, [r7, #0]
 8008440:	415b      	adcs	r3, r3
 8008442:	607b      	str	r3, [r7, #4]
 8008444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008448:	1812      	adds	r2, r2, r0
 800844a:	eb41 0303 	adc.w	r3, r1, r3
 800844e:	f04f 0400 	mov.w	r4, #0
 8008452:	f04f 0500 	mov.w	r5, #0
 8008456:	00dd      	lsls	r5, r3, #3
 8008458:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800845c:	00d4      	lsls	r4, r2, #3
 800845e:	4622      	mov	r2, r4
 8008460:	462b      	mov	r3, r5
 8008462:	eb12 0a00 	adds.w	sl, r2, r0
 8008466:	eb43 0b01 	adc.w	fp, r3, r1
 800846a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	4618      	mov	r0, r3
 8008470:	f04f 0100 	mov.w	r1, #0
 8008474:	f04f 0200 	mov.w	r2, #0
 8008478:	f04f 0300 	mov.w	r3, #0
 800847c:	008b      	lsls	r3, r1, #2
 800847e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008482:	0082      	lsls	r2, r0, #2
 8008484:	4650      	mov	r0, sl
 8008486:	4659      	mov	r1, fp
 8008488:	f7f8 fbe6 	bl	8000c58 <__aeabi_uldivmod>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4b0e      	ldr	r3, [pc, #56]	; (80084cc <UART_SetConfig+0x38c>)
 8008492:	fba3 1302 	umull	r1, r3, r3, r2
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	2164      	movs	r1, #100	; 0x64
 800849a:	fb01 f303 	mul.w	r3, r1, r3
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	3332      	adds	r3, #50	; 0x32
 80084a4:	4a09      	ldr	r2, [pc, #36]	; (80084cc <UART_SetConfig+0x38c>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	f003 020f 	and.w	r2, r3, #15
 80084b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4432      	add	r2, r6
 80084b6:	609a      	str	r2, [r3, #8]
}
 80084b8:	bf00      	nop
 80084ba:	377c      	adds	r7, #124	; 0x7c
 80084bc:	46bd      	mov	sp, r7
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c2:	bf00      	nop
 80084c4:	40011000 	.word	0x40011000
 80084c8:	40011400 	.word	0x40011400
 80084cc:	51eb851f 	.word	0x51eb851f

080084d0 <__errno>:
 80084d0:	4b01      	ldr	r3, [pc, #4]	; (80084d8 <__errno+0x8>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	20000014 	.word	0x20000014

080084dc <__libc_init_array>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4d0d      	ldr	r5, [pc, #52]	; (8008514 <__libc_init_array+0x38>)
 80084e0:	4c0d      	ldr	r4, [pc, #52]	; (8008518 <__libc_init_array+0x3c>)
 80084e2:	1b64      	subs	r4, r4, r5
 80084e4:	10a4      	asrs	r4, r4, #2
 80084e6:	2600      	movs	r6, #0
 80084e8:	42a6      	cmp	r6, r4
 80084ea:	d109      	bne.n	8008500 <__libc_init_array+0x24>
 80084ec:	4d0b      	ldr	r5, [pc, #44]	; (800851c <__libc_init_array+0x40>)
 80084ee:	4c0c      	ldr	r4, [pc, #48]	; (8008520 <__libc_init_array+0x44>)
 80084f0:	f002 febc 	bl	800b26c <_init>
 80084f4:	1b64      	subs	r4, r4, r5
 80084f6:	10a4      	asrs	r4, r4, #2
 80084f8:	2600      	movs	r6, #0
 80084fa:	42a6      	cmp	r6, r4
 80084fc:	d105      	bne.n	800850a <__libc_init_array+0x2e>
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	f855 3b04 	ldr.w	r3, [r5], #4
 8008504:	4798      	blx	r3
 8008506:	3601      	adds	r6, #1
 8008508:	e7ee      	b.n	80084e8 <__libc_init_array+0xc>
 800850a:	f855 3b04 	ldr.w	r3, [r5], #4
 800850e:	4798      	blx	r3
 8008510:	3601      	adds	r6, #1
 8008512:	e7f2      	b.n	80084fa <__libc_init_array+0x1e>
 8008514:	0800b6f4 	.word	0x0800b6f4
 8008518:	0800b6f4 	.word	0x0800b6f4
 800851c:	0800b6f4 	.word	0x0800b6f4
 8008520:	0800b6f8 	.word	0x0800b6f8

08008524 <memset>:
 8008524:	4402      	add	r2, r0
 8008526:	4603      	mov	r3, r0
 8008528:	4293      	cmp	r3, r2
 800852a:	d100      	bne.n	800852e <memset+0xa>
 800852c:	4770      	bx	lr
 800852e:	f803 1b01 	strb.w	r1, [r3], #1
 8008532:	e7f9      	b.n	8008528 <memset+0x4>

08008534 <__cvt>:
 8008534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	ec55 4b10 	vmov	r4, r5, d0
 800853c:	2d00      	cmp	r5, #0
 800853e:	460e      	mov	r6, r1
 8008540:	4619      	mov	r1, r3
 8008542:	462b      	mov	r3, r5
 8008544:	bfbb      	ittet	lt
 8008546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800854a:	461d      	movlt	r5, r3
 800854c:	2300      	movge	r3, #0
 800854e:	232d      	movlt	r3, #45	; 0x2d
 8008550:	700b      	strb	r3, [r1, #0]
 8008552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008554:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008558:	4691      	mov	r9, r2
 800855a:	f023 0820 	bic.w	r8, r3, #32
 800855e:	bfbc      	itt	lt
 8008560:	4622      	movlt	r2, r4
 8008562:	4614      	movlt	r4, r2
 8008564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008568:	d005      	beq.n	8008576 <__cvt+0x42>
 800856a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800856e:	d100      	bne.n	8008572 <__cvt+0x3e>
 8008570:	3601      	adds	r6, #1
 8008572:	2102      	movs	r1, #2
 8008574:	e000      	b.n	8008578 <__cvt+0x44>
 8008576:	2103      	movs	r1, #3
 8008578:	ab03      	add	r3, sp, #12
 800857a:	9301      	str	r3, [sp, #4]
 800857c:	ab02      	add	r3, sp, #8
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	ec45 4b10 	vmov	d0, r4, r5
 8008584:	4653      	mov	r3, sl
 8008586:	4632      	mov	r2, r6
 8008588:	f000 fcf2 	bl	8008f70 <_dtoa_r>
 800858c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008590:	4607      	mov	r7, r0
 8008592:	d102      	bne.n	800859a <__cvt+0x66>
 8008594:	f019 0f01 	tst.w	r9, #1
 8008598:	d022      	beq.n	80085e0 <__cvt+0xac>
 800859a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800859e:	eb07 0906 	add.w	r9, r7, r6
 80085a2:	d110      	bne.n	80085c6 <__cvt+0x92>
 80085a4:	783b      	ldrb	r3, [r7, #0]
 80085a6:	2b30      	cmp	r3, #48	; 0x30
 80085a8:	d10a      	bne.n	80085c0 <__cvt+0x8c>
 80085aa:	2200      	movs	r2, #0
 80085ac:	2300      	movs	r3, #0
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f8 fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80085b6:	b918      	cbnz	r0, 80085c0 <__cvt+0x8c>
 80085b8:	f1c6 0601 	rsb	r6, r6, #1
 80085bc:	f8ca 6000 	str.w	r6, [sl]
 80085c0:	f8da 3000 	ldr.w	r3, [sl]
 80085c4:	4499      	add	r9, r3
 80085c6:	2200      	movs	r2, #0
 80085c8:	2300      	movs	r3, #0
 80085ca:	4620      	mov	r0, r4
 80085cc:	4629      	mov	r1, r5
 80085ce:	f7f8 fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 80085d2:	b108      	cbz	r0, 80085d8 <__cvt+0xa4>
 80085d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80085d8:	2230      	movs	r2, #48	; 0x30
 80085da:	9b03      	ldr	r3, [sp, #12]
 80085dc:	454b      	cmp	r3, r9
 80085de:	d307      	bcc.n	80085f0 <__cvt+0xbc>
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085e4:	1bdb      	subs	r3, r3, r7
 80085e6:	4638      	mov	r0, r7
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	b004      	add	sp, #16
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	1c59      	adds	r1, r3, #1
 80085f2:	9103      	str	r1, [sp, #12]
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e7f0      	b.n	80085da <__cvt+0xa6>

080085f8 <__exponent>:
 80085f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085fa:	4603      	mov	r3, r0
 80085fc:	2900      	cmp	r1, #0
 80085fe:	bfb8      	it	lt
 8008600:	4249      	neglt	r1, r1
 8008602:	f803 2b02 	strb.w	r2, [r3], #2
 8008606:	bfb4      	ite	lt
 8008608:	222d      	movlt	r2, #45	; 0x2d
 800860a:	222b      	movge	r2, #43	; 0x2b
 800860c:	2909      	cmp	r1, #9
 800860e:	7042      	strb	r2, [r0, #1]
 8008610:	dd2a      	ble.n	8008668 <__exponent+0x70>
 8008612:	f10d 0407 	add.w	r4, sp, #7
 8008616:	46a4      	mov	ip, r4
 8008618:	270a      	movs	r7, #10
 800861a:	46a6      	mov	lr, r4
 800861c:	460a      	mov	r2, r1
 800861e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008622:	fb07 1516 	mls	r5, r7, r6, r1
 8008626:	3530      	adds	r5, #48	; 0x30
 8008628:	2a63      	cmp	r2, #99	; 0x63
 800862a:	f104 34ff 	add.w	r4, r4, #4294967295
 800862e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008632:	4631      	mov	r1, r6
 8008634:	dcf1      	bgt.n	800861a <__exponent+0x22>
 8008636:	3130      	adds	r1, #48	; 0x30
 8008638:	f1ae 0502 	sub.w	r5, lr, #2
 800863c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008640:	1c44      	adds	r4, r0, #1
 8008642:	4629      	mov	r1, r5
 8008644:	4561      	cmp	r1, ip
 8008646:	d30a      	bcc.n	800865e <__exponent+0x66>
 8008648:	f10d 0209 	add.w	r2, sp, #9
 800864c:	eba2 020e 	sub.w	r2, r2, lr
 8008650:	4565      	cmp	r5, ip
 8008652:	bf88      	it	hi
 8008654:	2200      	movhi	r2, #0
 8008656:	4413      	add	r3, r2
 8008658:	1a18      	subs	r0, r3, r0
 800865a:	b003      	add	sp, #12
 800865c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800865e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008662:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008666:	e7ed      	b.n	8008644 <__exponent+0x4c>
 8008668:	2330      	movs	r3, #48	; 0x30
 800866a:	3130      	adds	r1, #48	; 0x30
 800866c:	7083      	strb	r3, [r0, #2]
 800866e:	70c1      	strb	r1, [r0, #3]
 8008670:	1d03      	adds	r3, r0, #4
 8008672:	e7f1      	b.n	8008658 <__exponent+0x60>

08008674 <_printf_float>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	ed2d 8b02 	vpush	{d8}
 800867c:	b08d      	sub	sp, #52	; 0x34
 800867e:	460c      	mov	r4, r1
 8008680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008684:	4616      	mov	r6, r2
 8008686:	461f      	mov	r7, r3
 8008688:	4605      	mov	r5, r0
 800868a:	f001 fa5d 	bl	8009b48 <_localeconv_r>
 800868e:	f8d0 a000 	ldr.w	sl, [r0]
 8008692:	4650      	mov	r0, sl
 8008694:	f7f7 fda4 	bl	80001e0 <strlen>
 8008698:	2300      	movs	r3, #0
 800869a:	930a      	str	r3, [sp, #40]	; 0x28
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	f8d8 3000 	ldr.w	r3, [r8]
 80086a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086a8:	3307      	adds	r3, #7
 80086aa:	f023 0307 	bic.w	r3, r3, #7
 80086ae:	f103 0208 	add.w	r2, r3, #8
 80086b2:	f8c8 2000 	str.w	r2, [r8]
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086c6:	9307      	str	r3, [sp, #28]
 80086c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80086cc:	ee08 0a10 	vmov	s16, r0
 80086d0:	4b9f      	ldr	r3, [pc, #636]	; (8008950 <_printf_float+0x2dc>)
 80086d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
 80086da:	f7f8 fa2f 	bl	8000b3c <__aeabi_dcmpun>
 80086de:	bb88      	cbnz	r0, 8008744 <_printf_float+0xd0>
 80086e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086e4:	4b9a      	ldr	r3, [pc, #616]	; (8008950 <_printf_float+0x2dc>)
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ea:	f7f8 fa09 	bl	8000b00 <__aeabi_dcmple>
 80086ee:	bb48      	cbnz	r0, 8008744 <_printf_float+0xd0>
 80086f0:	2200      	movs	r2, #0
 80086f2:	2300      	movs	r3, #0
 80086f4:	4640      	mov	r0, r8
 80086f6:	4649      	mov	r1, r9
 80086f8:	f7f8 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80086fc:	b110      	cbz	r0, 8008704 <_printf_float+0x90>
 80086fe:	232d      	movs	r3, #45	; 0x2d
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008704:	4b93      	ldr	r3, [pc, #588]	; (8008954 <_printf_float+0x2e0>)
 8008706:	4894      	ldr	r0, [pc, #592]	; (8008958 <_printf_float+0x2e4>)
 8008708:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800870c:	bf94      	ite	ls
 800870e:	4698      	movls	r8, r3
 8008710:	4680      	movhi	r8, r0
 8008712:	2303      	movs	r3, #3
 8008714:	6123      	str	r3, [r4, #16]
 8008716:	9b05      	ldr	r3, [sp, #20]
 8008718:	f023 0204 	bic.w	r2, r3, #4
 800871c:	6022      	str	r2, [r4, #0]
 800871e:	f04f 0900 	mov.w	r9, #0
 8008722:	9700      	str	r7, [sp, #0]
 8008724:	4633      	mov	r3, r6
 8008726:	aa0b      	add	r2, sp, #44	; 0x2c
 8008728:	4621      	mov	r1, r4
 800872a:	4628      	mov	r0, r5
 800872c:	f000 f9d8 	bl	8008ae0 <_printf_common>
 8008730:	3001      	adds	r0, #1
 8008732:	f040 8090 	bne.w	8008856 <_printf_float+0x1e2>
 8008736:	f04f 30ff 	mov.w	r0, #4294967295
 800873a:	b00d      	add	sp, #52	; 0x34
 800873c:	ecbd 8b02 	vpop	{d8}
 8008740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008744:	4642      	mov	r2, r8
 8008746:	464b      	mov	r3, r9
 8008748:	4640      	mov	r0, r8
 800874a:	4649      	mov	r1, r9
 800874c:	f7f8 f9f6 	bl	8000b3c <__aeabi_dcmpun>
 8008750:	b140      	cbz	r0, 8008764 <_printf_float+0xf0>
 8008752:	464b      	mov	r3, r9
 8008754:	2b00      	cmp	r3, #0
 8008756:	bfbc      	itt	lt
 8008758:	232d      	movlt	r3, #45	; 0x2d
 800875a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800875e:	487f      	ldr	r0, [pc, #508]	; (800895c <_printf_float+0x2e8>)
 8008760:	4b7f      	ldr	r3, [pc, #508]	; (8008960 <_printf_float+0x2ec>)
 8008762:	e7d1      	b.n	8008708 <_printf_float+0x94>
 8008764:	6863      	ldr	r3, [r4, #4]
 8008766:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800876a:	9206      	str	r2, [sp, #24]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	d13f      	bne.n	80087f0 <_printf_float+0x17c>
 8008770:	2306      	movs	r3, #6
 8008772:	6063      	str	r3, [r4, #4]
 8008774:	9b05      	ldr	r3, [sp, #20]
 8008776:	6861      	ldr	r1, [r4, #4]
 8008778:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800877c:	2300      	movs	r3, #0
 800877e:	9303      	str	r3, [sp, #12]
 8008780:	ab0a      	add	r3, sp, #40	; 0x28
 8008782:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008786:	ab09      	add	r3, sp, #36	; 0x24
 8008788:	ec49 8b10 	vmov	d0, r8, r9
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	6022      	str	r2, [r4, #0]
 8008790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008794:	4628      	mov	r0, r5
 8008796:	f7ff fecd 	bl	8008534 <__cvt>
 800879a:	9b06      	ldr	r3, [sp, #24]
 800879c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800879e:	2b47      	cmp	r3, #71	; 0x47
 80087a0:	4680      	mov	r8, r0
 80087a2:	d108      	bne.n	80087b6 <_printf_float+0x142>
 80087a4:	1cc8      	adds	r0, r1, #3
 80087a6:	db02      	blt.n	80087ae <_printf_float+0x13a>
 80087a8:	6863      	ldr	r3, [r4, #4]
 80087aa:	4299      	cmp	r1, r3
 80087ac:	dd41      	ble.n	8008832 <_printf_float+0x1be>
 80087ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80087b2:	fa5f fb8b 	uxtb.w	fp, fp
 80087b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087ba:	d820      	bhi.n	80087fe <_printf_float+0x18a>
 80087bc:	3901      	subs	r1, #1
 80087be:	465a      	mov	r2, fp
 80087c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087c4:	9109      	str	r1, [sp, #36]	; 0x24
 80087c6:	f7ff ff17 	bl	80085f8 <__exponent>
 80087ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087cc:	1813      	adds	r3, r2, r0
 80087ce:	2a01      	cmp	r2, #1
 80087d0:	4681      	mov	r9, r0
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	dc02      	bgt.n	80087dc <_printf_float+0x168>
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	07d2      	lsls	r2, r2, #31
 80087da:	d501      	bpl.n	80087e0 <_printf_float+0x16c>
 80087dc:	3301      	adds	r3, #1
 80087de:	6123      	str	r3, [r4, #16]
 80087e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d09c      	beq.n	8008722 <_printf_float+0xae>
 80087e8:	232d      	movs	r3, #45	; 0x2d
 80087ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ee:	e798      	b.n	8008722 <_printf_float+0xae>
 80087f0:	9a06      	ldr	r2, [sp, #24]
 80087f2:	2a47      	cmp	r2, #71	; 0x47
 80087f4:	d1be      	bne.n	8008774 <_printf_float+0x100>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1bc      	bne.n	8008774 <_printf_float+0x100>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e7b9      	b.n	8008772 <_printf_float+0xfe>
 80087fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008802:	d118      	bne.n	8008836 <_printf_float+0x1c2>
 8008804:	2900      	cmp	r1, #0
 8008806:	6863      	ldr	r3, [r4, #4]
 8008808:	dd0b      	ble.n	8008822 <_printf_float+0x1ae>
 800880a:	6121      	str	r1, [r4, #16]
 800880c:	b913      	cbnz	r3, 8008814 <_printf_float+0x1a0>
 800880e:	6822      	ldr	r2, [r4, #0]
 8008810:	07d0      	lsls	r0, r2, #31
 8008812:	d502      	bpl.n	800881a <_printf_float+0x1a6>
 8008814:	3301      	adds	r3, #1
 8008816:	440b      	add	r3, r1
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	65a1      	str	r1, [r4, #88]	; 0x58
 800881c:	f04f 0900 	mov.w	r9, #0
 8008820:	e7de      	b.n	80087e0 <_printf_float+0x16c>
 8008822:	b913      	cbnz	r3, 800882a <_printf_float+0x1b6>
 8008824:	6822      	ldr	r2, [r4, #0]
 8008826:	07d2      	lsls	r2, r2, #31
 8008828:	d501      	bpl.n	800882e <_printf_float+0x1ba>
 800882a:	3302      	adds	r3, #2
 800882c:	e7f4      	b.n	8008818 <_printf_float+0x1a4>
 800882e:	2301      	movs	r3, #1
 8008830:	e7f2      	b.n	8008818 <_printf_float+0x1a4>
 8008832:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008838:	4299      	cmp	r1, r3
 800883a:	db05      	blt.n	8008848 <_printf_float+0x1d4>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	6121      	str	r1, [r4, #16]
 8008840:	07d8      	lsls	r0, r3, #31
 8008842:	d5ea      	bpl.n	800881a <_printf_float+0x1a6>
 8008844:	1c4b      	adds	r3, r1, #1
 8008846:	e7e7      	b.n	8008818 <_printf_float+0x1a4>
 8008848:	2900      	cmp	r1, #0
 800884a:	bfd4      	ite	le
 800884c:	f1c1 0202 	rsble	r2, r1, #2
 8008850:	2201      	movgt	r2, #1
 8008852:	4413      	add	r3, r2
 8008854:	e7e0      	b.n	8008818 <_printf_float+0x1a4>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	055a      	lsls	r2, r3, #21
 800885a:	d407      	bmi.n	800886c <_printf_float+0x1f8>
 800885c:	6923      	ldr	r3, [r4, #16]
 800885e:	4642      	mov	r2, r8
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	d12c      	bne.n	80088c4 <_printf_float+0x250>
 800886a:	e764      	b.n	8008736 <_printf_float+0xc2>
 800886c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008870:	f240 80e0 	bls.w	8008a34 <_printf_float+0x3c0>
 8008874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008878:	2200      	movs	r2, #0
 800887a:	2300      	movs	r3, #0
 800887c:	f7f8 f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008880:	2800      	cmp	r0, #0
 8008882:	d034      	beq.n	80088ee <_printf_float+0x27a>
 8008884:	4a37      	ldr	r2, [pc, #220]	; (8008964 <_printf_float+0x2f0>)
 8008886:	2301      	movs	r3, #1
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	47b8      	blx	r7
 800888e:	3001      	adds	r0, #1
 8008890:	f43f af51 	beq.w	8008736 <_printf_float+0xc2>
 8008894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008898:	429a      	cmp	r2, r3
 800889a:	db02      	blt.n	80088a2 <_printf_float+0x22e>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	07d8      	lsls	r0, r3, #31
 80088a0:	d510      	bpl.n	80088c4 <_printf_float+0x250>
 80088a2:	ee18 3a10 	vmov	r3, s16
 80088a6:	4652      	mov	r2, sl
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f af41 	beq.w	8008736 <_printf_float+0xc2>
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	f104 091a 	add.w	r9, r4, #26
 80088bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088be:	3b01      	subs	r3, #1
 80088c0:	4543      	cmp	r3, r8
 80088c2:	dc09      	bgt.n	80088d8 <_printf_float+0x264>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	079b      	lsls	r3, r3, #30
 80088c8:	f100 8105 	bmi.w	8008ad6 <_printf_float+0x462>
 80088cc:	68e0      	ldr	r0, [r4, #12]
 80088ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088d0:	4298      	cmp	r0, r3
 80088d2:	bfb8      	it	lt
 80088d4:	4618      	movlt	r0, r3
 80088d6:	e730      	b.n	800873a <_printf_float+0xc6>
 80088d8:	2301      	movs	r3, #1
 80088da:	464a      	mov	r2, r9
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af27 	beq.w	8008736 <_printf_float+0xc2>
 80088e8:	f108 0801 	add.w	r8, r8, #1
 80088ec:	e7e6      	b.n	80088bc <_printf_float+0x248>
 80088ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc39      	bgt.n	8008968 <_printf_float+0x2f4>
 80088f4:	4a1b      	ldr	r2, [pc, #108]	; (8008964 <_printf_float+0x2f0>)
 80088f6:	2301      	movs	r3, #1
 80088f8:	4631      	mov	r1, r6
 80088fa:	4628      	mov	r0, r5
 80088fc:	47b8      	blx	r7
 80088fe:	3001      	adds	r0, #1
 8008900:	f43f af19 	beq.w	8008736 <_printf_float+0xc2>
 8008904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008908:	4313      	orrs	r3, r2
 800890a:	d102      	bne.n	8008912 <_printf_float+0x29e>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	07d9      	lsls	r1, r3, #31
 8008910:	d5d8      	bpl.n	80088c4 <_printf_float+0x250>
 8008912:	ee18 3a10 	vmov	r3, s16
 8008916:	4652      	mov	r2, sl
 8008918:	4631      	mov	r1, r6
 800891a:	4628      	mov	r0, r5
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	f43f af09 	beq.w	8008736 <_printf_float+0xc2>
 8008924:	f04f 0900 	mov.w	r9, #0
 8008928:	f104 0a1a 	add.w	sl, r4, #26
 800892c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892e:	425b      	negs	r3, r3
 8008930:	454b      	cmp	r3, r9
 8008932:	dc01      	bgt.n	8008938 <_printf_float+0x2c4>
 8008934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008936:	e792      	b.n	800885e <_printf_float+0x1ea>
 8008938:	2301      	movs	r3, #1
 800893a:	4652      	mov	r2, sl
 800893c:	4631      	mov	r1, r6
 800893e:	4628      	mov	r0, r5
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f aef7 	beq.w	8008736 <_printf_float+0xc2>
 8008948:	f109 0901 	add.w	r9, r9, #1
 800894c:	e7ee      	b.n	800892c <_printf_float+0x2b8>
 800894e:	bf00      	nop
 8008950:	7fefffff 	.word	0x7fefffff
 8008954:	0800b310 	.word	0x0800b310
 8008958:	0800b314 	.word	0x0800b314
 800895c:	0800b31c 	.word	0x0800b31c
 8008960:	0800b318 	.word	0x0800b318
 8008964:	0800b320 	.word	0x0800b320
 8008968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800896a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800896c:	429a      	cmp	r2, r3
 800896e:	bfa8      	it	ge
 8008970:	461a      	movge	r2, r3
 8008972:	2a00      	cmp	r2, #0
 8008974:	4691      	mov	r9, r2
 8008976:	dc37      	bgt.n	80089e8 <_printf_float+0x374>
 8008978:	f04f 0b00 	mov.w	fp, #0
 800897c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008980:	f104 021a 	add.w	r2, r4, #26
 8008984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008986:	9305      	str	r3, [sp, #20]
 8008988:	eba3 0309 	sub.w	r3, r3, r9
 800898c:	455b      	cmp	r3, fp
 800898e:	dc33      	bgt.n	80089f8 <_printf_float+0x384>
 8008990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008994:	429a      	cmp	r2, r3
 8008996:	db3b      	blt.n	8008a10 <_printf_float+0x39c>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	07da      	lsls	r2, r3, #31
 800899c:	d438      	bmi.n	8008a10 <_printf_float+0x39c>
 800899e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089a0:	9b05      	ldr	r3, [sp, #20]
 80089a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	eba2 0901 	sub.w	r9, r2, r1
 80089aa:	4599      	cmp	r9, r3
 80089ac:	bfa8      	it	ge
 80089ae:	4699      	movge	r9, r3
 80089b0:	f1b9 0f00 	cmp.w	r9, #0
 80089b4:	dc35      	bgt.n	8008a22 <_printf_float+0x3ae>
 80089b6:	f04f 0800 	mov.w	r8, #0
 80089ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089be:	f104 0a1a 	add.w	sl, r4, #26
 80089c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	eba3 0309 	sub.w	r3, r3, r9
 80089cc:	4543      	cmp	r3, r8
 80089ce:	f77f af79 	ble.w	80088c4 <_printf_float+0x250>
 80089d2:	2301      	movs	r3, #1
 80089d4:	4652      	mov	r2, sl
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	f43f aeaa 	beq.w	8008736 <_printf_float+0xc2>
 80089e2:	f108 0801 	add.w	r8, r8, #1
 80089e6:	e7ec      	b.n	80089c2 <_printf_float+0x34e>
 80089e8:	4613      	mov	r3, r2
 80089ea:	4631      	mov	r1, r6
 80089ec:	4642      	mov	r2, r8
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b8      	blx	r7
 80089f2:	3001      	adds	r0, #1
 80089f4:	d1c0      	bne.n	8008978 <_printf_float+0x304>
 80089f6:	e69e      	b.n	8008736 <_printf_float+0xc2>
 80089f8:	2301      	movs	r3, #1
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	9205      	str	r2, [sp, #20]
 8008a00:	47b8      	blx	r7
 8008a02:	3001      	adds	r0, #1
 8008a04:	f43f ae97 	beq.w	8008736 <_printf_float+0xc2>
 8008a08:	9a05      	ldr	r2, [sp, #20]
 8008a0a:	f10b 0b01 	add.w	fp, fp, #1
 8008a0e:	e7b9      	b.n	8008984 <_printf_float+0x310>
 8008a10:	ee18 3a10 	vmov	r3, s16
 8008a14:	4652      	mov	r2, sl
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d1be      	bne.n	800899e <_printf_float+0x32a>
 8008a20:	e689      	b.n	8008736 <_printf_float+0xc2>
 8008a22:	9a05      	ldr	r2, [sp, #20]
 8008a24:	464b      	mov	r3, r9
 8008a26:	4442      	add	r2, r8
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	47b8      	blx	r7
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d1c1      	bne.n	80089b6 <_printf_float+0x342>
 8008a32:	e680      	b.n	8008736 <_printf_float+0xc2>
 8008a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a36:	2a01      	cmp	r2, #1
 8008a38:	dc01      	bgt.n	8008a3e <_printf_float+0x3ca>
 8008a3a:	07db      	lsls	r3, r3, #31
 8008a3c:	d538      	bpl.n	8008ab0 <_printf_float+0x43c>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4642      	mov	r2, r8
 8008a42:	4631      	mov	r1, r6
 8008a44:	4628      	mov	r0, r5
 8008a46:	47b8      	blx	r7
 8008a48:	3001      	adds	r0, #1
 8008a4a:	f43f ae74 	beq.w	8008736 <_printf_float+0xc2>
 8008a4e:	ee18 3a10 	vmov	r3, s16
 8008a52:	4652      	mov	r2, sl
 8008a54:	4631      	mov	r1, r6
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b8      	blx	r7
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f43f ae6b 	beq.w	8008736 <_printf_float+0xc2>
 8008a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a64:	2200      	movs	r2, #0
 8008a66:	2300      	movs	r3, #0
 8008a68:	f7f8 f836 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a6c:	b9d8      	cbnz	r0, 8008aa6 <_printf_float+0x432>
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	f108 0201 	add.w	r2, r8, #1
 8008a74:	3b01      	subs	r3, #1
 8008a76:	4631      	mov	r1, r6
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b8      	blx	r7
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d10e      	bne.n	8008a9e <_printf_float+0x42a>
 8008a80:	e659      	b.n	8008736 <_printf_float+0xc2>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4652      	mov	r2, sl
 8008a86:	4631      	mov	r1, r6
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b8      	blx	r7
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	f43f ae52 	beq.w	8008736 <_printf_float+0xc2>
 8008a92:	f108 0801 	add.w	r8, r8, #1
 8008a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	4543      	cmp	r3, r8
 8008a9c:	dcf1      	bgt.n	8008a82 <_printf_float+0x40e>
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008aa4:	e6dc      	b.n	8008860 <_printf_float+0x1ec>
 8008aa6:	f04f 0800 	mov.w	r8, #0
 8008aaa:	f104 0a1a 	add.w	sl, r4, #26
 8008aae:	e7f2      	b.n	8008a96 <_printf_float+0x422>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4642      	mov	r2, r8
 8008ab4:	e7df      	b.n	8008a76 <_printf_float+0x402>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	464a      	mov	r2, r9
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f43f ae38 	beq.w	8008736 <_printf_float+0xc2>
 8008ac6:	f108 0801 	add.w	r8, r8, #1
 8008aca:	68e3      	ldr	r3, [r4, #12]
 8008acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ace:	1a5b      	subs	r3, r3, r1
 8008ad0:	4543      	cmp	r3, r8
 8008ad2:	dcf0      	bgt.n	8008ab6 <_printf_float+0x442>
 8008ad4:	e6fa      	b.n	80088cc <_printf_float+0x258>
 8008ad6:	f04f 0800 	mov.w	r8, #0
 8008ada:	f104 0919 	add.w	r9, r4, #25
 8008ade:	e7f4      	b.n	8008aca <_printf_float+0x456>

08008ae0 <_printf_common>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	4616      	mov	r6, r2
 8008ae6:	4699      	mov	r9, r3
 8008ae8:	688a      	ldr	r2, [r1, #8]
 8008aea:	690b      	ldr	r3, [r1, #16]
 8008aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	bfb8      	it	lt
 8008af4:	4613      	movlt	r3, r2
 8008af6:	6033      	str	r3, [r6, #0]
 8008af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008afc:	4607      	mov	r7, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	b10a      	cbz	r2, 8008b06 <_printf_common+0x26>
 8008b02:	3301      	adds	r3, #1
 8008b04:	6033      	str	r3, [r6, #0]
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	0699      	lsls	r1, r3, #26
 8008b0a:	bf42      	ittt	mi
 8008b0c:	6833      	ldrmi	r3, [r6, #0]
 8008b0e:	3302      	addmi	r3, #2
 8008b10:	6033      	strmi	r3, [r6, #0]
 8008b12:	6825      	ldr	r5, [r4, #0]
 8008b14:	f015 0506 	ands.w	r5, r5, #6
 8008b18:	d106      	bne.n	8008b28 <_printf_common+0x48>
 8008b1a:	f104 0a19 	add.w	sl, r4, #25
 8008b1e:	68e3      	ldr	r3, [r4, #12]
 8008b20:	6832      	ldr	r2, [r6, #0]
 8008b22:	1a9b      	subs	r3, r3, r2
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	dc26      	bgt.n	8008b76 <_printf_common+0x96>
 8008b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b2c:	1e13      	subs	r3, r2, #0
 8008b2e:	6822      	ldr	r2, [r4, #0]
 8008b30:	bf18      	it	ne
 8008b32:	2301      	movne	r3, #1
 8008b34:	0692      	lsls	r2, r2, #26
 8008b36:	d42b      	bmi.n	8008b90 <_printf_common+0xb0>
 8008b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	4638      	mov	r0, r7
 8008b40:	47c0      	blx	r8
 8008b42:	3001      	adds	r0, #1
 8008b44:	d01e      	beq.n	8008b84 <_printf_common+0xa4>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	68e5      	ldr	r5, [r4, #12]
 8008b4a:	6832      	ldr	r2, [r6, #0]
 8008b4c:	f003 0306 	and.w	r3, r3, #6
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	bf08      	it	eq
 8008b54:	1aad      	subeq	r5, r5, r2
 8008b56:	68a3      	ldr	r3, [r4, #8]
 8008b58:	6922      	ldr	r2, [r4, #16]
 8008b5a:	bf0c      	ite	eq
 8008b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b60:	2500      	movne	r5, #0
 8008b62:	4293      	cmp	r3, r2
 8008b64:	bfc4      	itt	gt
 8008b66:	1a9b      	subgt	r3, r3, r2
 8008b68:	18ed      	addgt	r5, r5, r3
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	341a      	adds	r4, #26
 8008b6e:	42b5      	cmp	r5, r6
 8008b70:	d11a      	bne.n	8008ba8 <_printf_common+0xc8>
 8008b72:	2000      	movs	r0, #0
 8008b74:	e008      	b.n	8008b88 <_printf_common+0xa8>
 8008b76:	2301      	movs	r3, #1
 8008b78:	4652      	mov	r2, sl
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	47c0      	blx	r8
 8008b80:	3001      	adds	r0, #1
 8008b82:	d103      	bne.n	8008b8c <_printf_common+0xac>
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	e7c6      	b.n	8008b1e <_printf_common+0x3e>
 8008b90:	18e1      	adds	r1, r4, r3
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	2030      	movs	r0, #48	; 0x30
 8008b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b9a:	4422      	add	r2, r4
 8008b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	e7c7      	b.n	8008b38 <_printf_common+0x58>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4622      	mov	r2, r4
 8008bac:	4649      	mov	r1, r9
 8008bae:	4638      	mov	r0, r7
 8008bb0:	47c0      	blx	r8
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d0e6      	beq.n	8008b84 <_printf_common+0xa4>
 8008bb6:	3601      	adds	r6, #1
 8008bb8:	e7d9      	b.n	8008b6e <_printf_common+0x8e>
	...

08008bbc <_printf_i>:
 8008bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	4691      	mov	r9, r2
 8008bc4:	7e27      	ldrb	r7, [r4, #24]
 8008bc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bc8:	2f78      	cmp	r7, #120	; 0x78
 8008bca:	4680      	mov	r8, r0
 8008bcc:	469a      	mov	sl, r3
 8008bce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bd2:	d807      	bhi.n	8008be4 <_printf_i+0x28>
 8008bd4:	2f62      	cmp	r7, #98	; 0x62
 8008bd6:	d80a      	bhi.n	8008bee <_printf_i+0x32>
 8008bd8:	2f00      	cmp	r7, #0
 8008bda:	f000 80d8 	beq.w	8008d8e <_printf_i+0x1d2>
 8008bde:	2f58      	cmp	r7, #88	; 0x58
 8008be0:	f000 80a3 	beq.w	8008d2a <_printf_i+0x16e>
 8008be4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bec:	e03a      	b.n	8008c64 <_printf_i+0xa8>
 8008bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bf2:	2b15      	cmp	r3, #21
 8008bf4:	d8f6      	bhi.n	8008be4 <_printf_i+0x28>
 8008bf6:	a001      	add	r0, pc, #4	; (adr r0, 8008bfc <_printf_i+0x40>)
 8008bf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008bfc:	08008c55 	.word	0x08008c55
 8008c00:	08008c69 	.word	0x08008c69
 8008c04:	08008be5 	.word	0x08008be5
 8008c08:	08008be5 	.word	0x08008be5
 8008c0c:	08008be5 	.word	0x08008be5
 8008c10:	08008be5 	.word	0x08008be5
 8008c14:	08008c69 	.word	0x08008c69
 8008c18:	08008be5 	.word	0x08008be5
 8008c1c:	08008be5 	.word	0x08008be5
 8008c20:	08008be5 	.word	0x08008be5
 8008c24:	08008be5 	.word	0x08008be5
 8008c28:	08008d75 	.word	0x08008d75
 8008c2c:	08008c99 	.word	0x08008c99
 8008c30:	08008d57 	.word	0x08008d57
 8008c34:	08008be5 	.word	0x08008be5
 8008c38:	08008be5 	.word	0x08008be5
 8008c3c:	08008d97 	.word	0x08008d97
 8008c40:	08008be5 	.word	0x08008be5
 8008c44:	08008c99 	.word	0x08008c99
 8008c48:	08008be5 	.word	0x08008be5
 8008c4c:	08008be5 	.word	0x08008be5
 8008c50:	08008d5f 	.word	0x08008d5f
 8008c54:	680b      	ldr	r3, [r1, #0]
 8008c56:	1d1a      	adds	r2, r3, #4
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	600a      	str	r2, [r1, #0]
 8008c5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c64:	2301      	movs	r3, #1
 8008c66:	e0a3      	b.n	8008db0 <_printf_i+0x1f4>
 8008c68:	6825      	ldr	r5, [r4, #0]
 8008c6a:	6808      	ldr	r0, [r1, #0]
 8008c6c:	062e      	lsls	r6, r5, #24
 8008c6e:	f100 0304 	add.w	r3, r0, #4
 8008c72:	d50a      	bpl.n	8008c8a <_printf_i+0xce>
 8008c74:	6805      	ldr	r5, [r0, #0]
 8008c76:	600b      	str	r3, [r1, #0]
 8008c78:	2d00      	cmp	r5, #0
 8008c7a:	da03      	bge.n	8008c84 <_printf_i+0xc8>
 8008c7c:	232d      	movs	r3, #45	; 0x2d
 8008c7e:	426d      	negs	r5, r5
 8008c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c84:	485e      	ldr	r0, [pc, #376]	; (8008e00 <_printf_i+0x244>)
 8008c86:	230a      	movs	r3, #10
 8008c88:	e019      	b.n	8008cbe <_printf_i+0x102>
 8008c8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c8e:	6805      	ldr	r5, [r0, #0]
 8008c90:	600b      	str	r3, [r1, #0]
 8008c92:	bf18      	it	ne
 8008c94:	b22d      	sxthne	r5, r5
 8008c96:	e7ef      	b.n	8008c78 <_printf_i+0xbc>
 8008c98:	680b      	ldr	r3, [r1, #0]
 8008c9a:	6825      	ldr	r5, [r4, #0]
 8008c9c:	1d18      	adds	r0, r3, #4
 8008c9e:	6008      	str	r0, [r1, #0]
 8008ca0:	0628      	lsls	r0, r5, #24
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_i+0xec>
 8008ca4:	681d      	ldr	r5, [r3, #0]
 8008ca6:	e002      	b.n	8008cae <_printf_i+0xf2>
 8008ca8:	0669      	lsls	r1, r5, #25
 8008caa:	d5fb      	bpl.n	8008ca4 <_printf_i+0xe8>
 8008cac:	881d      	ldrh	r5, [r3, #0]
 8008cae:	4854      	ldr	r0, [pc, #336]	; (8008e00 <_printf_i+0x244>)
 8008cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8008cb2:	bf0c      	ite	eq
 8008cb4:	2308      	moveq	r3, #8
 8008cb6:	230a      	movne	r3, #10
 8008cb8:	2100      	movs	r1, #0
 8008cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cbe:	6866      	ldr	r6, [r4, #4]
 8008cc0:	60a6      	str	r6, [r4, #8]
 8008cc2:	2e00      	cmp	r6, #0
 8008cc4:	bfa2      	ittt	ge
 8008cc6:	6821      	ldrge	r1, [r4, #0]
 8008cc8:	f021 0104 	bicge.w	r1, r1, #4
 8008ccc:	6021      	strge	r1, [r4, #0]
 8008cce:	b90d      	cbnz	r5, 8008cd4 <_printf_i+0x118>
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	d04d      	beq.n	8008d70 <_printf_i+0x1b4>
 8008cd4:	4616      	mov	r6, r2
 8008cd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cda:	fb03 5711 	mls	r7, r3, r1, r5
 8008cde:	5dc7      	ldrb	r7, [r0, r7]
 8008ce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ce4:	462f      	mov	r7, r5
 8008ce6:	42bb      	cmp	r3, r7
 8008ce8:	460d      	mov	r5, r1
 8008cea:	d9f4      	bls.n	8008cd6 <_printf_i+0x11a>
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d10b      	bne.n	8008d08 <_printf_i+0x14c>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	07df      	lsls	r7, r3, #31
 8008cf4:	d508      	bpl.n	8008d08 <_printf_i+0x14c>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	6861      	ldr	r1, [r4, #4]
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	bfde      	ittt	le
 8008cfe:	2330      	movle	r3, #48	; 0x30
 8008d00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d08:	1b92      	subs	r2, r2, r6
 8008d0a:	6122      	str	r2, [r4, #16]
 8008d0c:	f8cd a000 	str.w	sl, [sp]
 8008d10:	464b      	mov	r3, r9
 8008d12:	aa03      	add	r2, sp, #12
 8008d14:	4621      	mov	r1, r4
 8008d16:	4640      	mov	r0, r8
 8008d18:	f7ff fee2 	bl	8008ae0 <_printf_common>
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d14c      	bne.n	8008dba <_printf_i+0x1fe>
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	b004      	add	sp, #16
 8008d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2a:	4835      	ldr	r0, [pc, #212]	; (8008e00 <_printf_i+0x244>)
 8008d2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	680e      	ldr	r6, [r1, #0]
 8008d34:	061f      	lsls	r7, r3, #24
 8008d36:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d3a:	600e      	str	r6, [r1, #0]
 8008d3c:	d514      	bpl.n	8008d68 <_printf_i+0x1ac>
 8008d3e:	07d9      	lsls	r1, r3, #31
 8008d40:	bf44      	itt	mi
 8008d42:	f043 0320 	orrmi.w	r3, r3, #32
 8008d46:	6023      	strmi	r3, [r4, #0]
 8008d48:	b91d      	cbnz	r5, 8008d52 <_printf_i+0x196>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	f023 0320 	bic.w	r3, r3, #32
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	2310      	movs	r3, #16
 8008d54:	e7b0      	b.n	8008cb8 <_printf_i+0xfc>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	f043 0320 	orr.w	r3, r3, #32
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	2378      	movs	r3, #120	; 0x78
 8008d60:	4828      	ldr	r0, [pc, #160]	; (8008e04 <_printf_i+0x248>)
 8008d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d66:	e7e3      	b.n	8008d30 <_printf_i+0x174>
 8008d68:	065e      	lsls	r6, r3, #25
 8008d6a:	bf48      	it	mi
 8008d6c:	b2ad      	uxthmi	r5, r5
 8008d6e:	e7e6      	b.n	8008d3e <_printf_i+0x182>
 8008d70:	4616      	mov	r6, r2
 8008d72:	e7bb      	b.n	8008cec <_printf_i+0x130>
 8008d74:	680b      	ldr	r3, [r1, #0]
 8008d76:	6826      	ldr	r6, [r4, #0]
 8008d78:	6960      	ldr	r0, [r4, #20]
 8008d7a:	1d1d      	adds	r5, r3, #4
 8008d7c:	600d      	str	r5, [r1, #0]
 8008d7e:	0635      	lsls	r5, r6, #24
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	d501      	bpl.n	8008d88 <_printf_i+0x1cc>
 8008d84:	6018      	str	r0, [r3, #0]
 8008d86:	e002      	b.n	8008d8e <_printf_i+0x1d2>
 8008d88:	0671      	lsls	r1, r6, #25
 8008d8a:	d5fb      	bpl.n	8008d84 <_printf_i+0x1c8>
 8008d8c:	8018      	strh	r0, [r3, #0]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	6123      	str	r3, [r4, #16]
 8008d92:	4616      	mov	r6, r2
 8008d94:	e7ba      	b.n	8008d0c <_printf_i+0x150>
 8008d96:	680b      	ldr	r3, [r1, #0]
 8008d98:	1d1a      	adds	r2, r3, #4
 8008d9a:	600a      	str	r2, [r1, #0]
 8008d9c:	681e      	ldr	r6, [r3, #0]
 8008d9e:	6862      	ldr	r2, [r4, #4]
 8008da0:	2100      	movs	r1, #0
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7f7 fa24 	bl	80001f0 <memchr>
 8008da8:	b108      	cbz	r0, 8008dae <_printf_i+0x1f2>
 8008daa:	1b80      	subs	r0, r0, r6
 8008dac:	6060      	str	r0, [r4, #4]
 8008dae:	6863      	ldr	r3, [r4, #4]
 8008db0:	6123      	str	r3, [r4, #16]
 8008db2:	2300      	movs	r3, #0
 8008db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db8:	e7a8      	b.n	8008d0c <_printf_i+0x150>
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	4632      	mov	r2, r6
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	47d0      	blx	sl
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d0ab      	beq.n	8008d20 <_printf_i+0x164>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	079b      	lsls	r3, r3, #30
 8008dcc:	d413      	bmi.n	8008df6 <_printf_i+0x23a>
 8008dce:	68e0      	ldr	r0, [r4, #12]
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	4298      	cmp	r0, r3
 8008dd4:	bfb8      	it	lt
 8008dd6:	4618      	movlt	r0, r3
 8008dd8:	e7a4      	b.n	8008d24 <_printf_i+0x168>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4632      	mov	r2, r6
 8008dde:	4649      	mov	r1, r9
 8008de0:	4640      	mov	r0, r8
 8008de2:	47d0      	blx	sl
 8008de4:	3001      	adds	r0, #1
 8008de6:	d09b      	beq.n	8008d20 <_printf_i+0x164>
 8008de8:	3501      	adds	r5, #1
 8008dea:	68e3      	ldr	r3, [r4, #12]
 8008dec:	9903      	ldr	r1, [sp, #12]
 8008dee:	1a5b      	subs	r3, r3, r1
 8008df0:	42ab      	cmp	r3, r5
 8008df2:	dcf2      	bgt.n	8008dda <_printf_i+0x21e>
 8008df4:	e7eb      	b.n	8008dce <_printf_i+0x212>
 8008df6:	2500      	movs	r5, #0
 8008df8:	f104 0619 	add.w	r6, r4, #25
 8008dfc:	e7f5      	b.n	8008dea <_printf_i+0x22e>
 8008dfe:	bf00      	nop
 8008e00:	0800b322 	.word	0x0800b322
 8008e04:	0800b333 	.word	0x0800b333

08008e08 <siprintf>:
 8008e08:	b40e      	push	{r1, r2, r3}
 8008e0a:	b500      	push	{lr}
 8008e0c:	b09c      	sub	sp, #112	; 0x70
 8008e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e10:	9002      	str	r0, [sp, #8]
 8008e12:	9006      	str	r0, [sp, #24]
 8008e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e18:	4809      	ldr	r0, [pc, #36]	; (8008e40 <siprintf+0x38>)
 8008e1a:	9107      	str	r1, [sp, #28]
 8008e1c:	9104      	str	r1, [sp, #16]
 8008e1e:	4909      	ldr	r1, [pc, #36]	; (8008e44 <siprintf+0x3c>)
 8008e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e24:	9105      	str	r1, [sp, #20]
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	a902      	add	r1, sp, #8
 8008e2c:	f001 fb3a 	bl	800a4a4 <_svfiprintf_r>
 8008e30:	9b02      	ldr	r3, [sp, #8]
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	b01c      	add	sp, #112	; 0x70
 8008e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e3c:	b003      	add	sp, #12
 8008e3e:	4770      	bx	lr
 8008e40:	20000014 	.word	0x20000014
 8008e44:	ffff0208 	.word	0xffff0208

08008e48 <strcpy>:
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e4e:	f803 2b01 	strb.w	r2, [r3], #1
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	d1f9      	bne.n	8008e4a <strcpy+0x2>
 8008e56:	4770      	bx	lr

08008e58 <quorem>:
 8008e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	6903      	ldr	r3, [r0, #16]
 8008e5e:	690c      	ldr	r4, [r1, #16]
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	4607      	mov	r7, r0
 8008e64:	f2c0 8081 	blt.w	8008f6a <quorem+0x112>
 8008e68:	3c01      	subs	r4, #1
 8008e6a:	f101 0814 	add.w	r8, r1, #20
 8008e6e:	f100 0514 	add.w	r5, r0, #20
 8008e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e80:	3301      	adds	r3, #1
 8008e82:	429a      	cmp	r2, r3
 8008e84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e90:	d331      	bcc.n	8008ef6 <quorem+0x9e>
 8008e92:	f04f 0e00 	mov.w	lr, #0
 8008e96:	4640      	mov	r0, r8
 8008e98:	46ac      	mov	ip, r5
 8008e9a:	46f2      	mov	sl, lr
 8008e9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ea0:	b293      	uxth	r3, r2
 8008ea2:	fb06 e303 	mla	r3, r6, r3, lr
 8008ea6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	ebaa 0303 	sub.w	r3, sl, r3
 8008eb0:	0c12      	lsrs	r2, r2, #16
 8008eb2:	f8dc a000 	ldr.w	sl, [ip]
 8008eb6:	fb06 e202 	mla	r2, r6, r2, lr
 8008eba:	fa13 f38a 	uxtah	r3, r3, sl
 8008ebe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ec2:	fa1f fa82 	uxth.w	sl, r2
 8008ec6:	f8dc 2000 	ldr.w	r2, [ip]
 8008eca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008ece:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed8:	4581      	cmp	r9, r0
 8008eda:	f84c 3b04 	str.w	r3, [ip], #4
 8008ede:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ee2:	d2db      	bcs.n	8008e9c <quorem+0x44>
 8008ee4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ee8:	b92b      	cbnz	r3, 8008ef6 <quorem+0x9e>
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	3b04      	subs	r3, #4
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	d32e      	bcc.n	8008f52 <quorem+0xfa>
 8008ef4:	613c      	str	r4, [r7, #16]
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	f001 f8be 	bl	800a078 <__mcmp>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	db24      	blt.n	8008f4a <quorem+0xf2>
 8008f00:	3601      	adds	r6, #1
 8008f02:	4628      	mov	r0, r5
 8008f04:	f04f 0c00 	mov.w	ip, #0
 8008f08:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f0c:	f8d0 e000 	ldr.w	lr, [r0]
 8008f10:	b293      	uxth	r3, r2
 8008f12:	ebac 0303 	sub.w	r3, ip, r3
 8008f16:	0c12      	lsrs	r2, r2, #16
 8008f18:	fa13 f38e 	uxtah	r3, r3, lr
 8008f1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f2a:	45c1      	cmp	r9, r8
 8008f2c:	f840 3b04 	str.w	r3, [r0], #4
 8008f30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f34:	d2e8      	bcs.n	8008f08 <quorem+0xb0>
 8008f36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f3e:	b922      	cbnz	r2, 8008f4a <quorem+0xf2>
 8008f40:	3b04      	subs	r3, #4
 8008f42:	429d      	cmp	r5, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	d30a      	bcc.n	8008f5e <quorem+0x106>
 8008f48:	613c      	str	r4, [r7, #16]
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	b003      	add	sp, #12
 8008f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f52:	6812      	ldr	r2, [r2, #0]
 8008f54:	3b04      	subs	r3, #4
 8008f56:	2a00      	cmp	r2, #0
 8008f58:	d1cc      	bne.n	8008ef4 <quorem+0x9c>
 8008f5a:	3c01      	subs	r4, #1
 8008f5c:	e7c7      	b.n	8008eee <quorem+0x96>
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	3b04      	subs	r3, #4
 8008f62:	2a00      	cmp	r2, #0
 8008f64:	d1f0      	bne.n	8008f48 <quorem+0xf0>
 8008f66:	3c01      	subs	r4, #1
 8008f68:	e7eb      	b.n	8008f42 <quorem+0xea>
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	e7ee      	b.n	8008f4c <quorem+0xf4>
	...

08008f70 <_dtoa_r>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	ed2d 8b02 	vpush	{d8}
 8008f78:	ec57 6b10 	vmov	r6, r7, d0
 8008f7c:	b095      	sub	sp, #84	; 0x54
 8008f7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f84:	9105      	str	r1, [sp, #20]
 8008f86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f90:	b975      	cbnz	r5, 8008fb0 <_dtoa_r+0x40>
 8008f92:	2010      	movs	r0, #16
 8008f94:	f000 fddc 	bl	8009b50 <malloc>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6260      	str	r0, [r4, #36]	; 0x24
 8008f9c:	b920      	cbnz	r0, 8008fa8 <_dtoa_r+0x38>
 8008f9e:	4bb2      	ldr	r3, [pc, #712]	; (8009268 <_dtoa_r+0x2f8>)
 8008fa0:	21ea      	movs	r1, #234	; 0xea
 8008fa2:	48b2      	ldr	r0, [pc, #712]	; (800926c <_dtoa_r+0x2fc>)
 8008fa4:	f001 fb8e 	bl	800a6c4 <__assert_func>
 8008fa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fac:	6005      	str	r5, [r0, #0]
 8008fae:	60c5      	str	r5, [r0, #12]
 8008fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	b151      	cbz	r1, 8008fcc <_dtoa_r+0x5c>
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	604a      	str	r2, [r1, #4]
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4093      	lsls	r3, r2
 8008fbe:	608b      	str	r3, [r1, #8]
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 fe1b 	bl	8009bfc <_Bfree>
 8008fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	1e3b      	subs	r3, r7, #0
 8008fce:	bfb9      	ittee	lt
 8008fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008fd4:	9303      	strlt	r3, [sp, #12]
 8008fd6:	2300      	movge	r3, #0
 8008fd8:	f8c8 3000 	strge.w	r3, [r8]
 8008fdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008fe0:	4ba3      	ldr	r3, [pc, #652]	; (8009270 <_dtoa_r+0x300>)
 8008fe2:	bfbc      	itt	lt
 8008fe4:	2201      	movlt	r2, #1
 8008fe6:	f8c8 2000 	strlt.w	r2, [r8]
 8008fea:	ea33 0309 	bics.w	r3, r3, r9
 8008fee:	d11b      	bne.n	8009028 <_dtoa_r+0xb8>
 8008ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ff2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ffc:	4333      	orrs	r3, r6
 8008ffe:	f000 857a 	beq.w	8009af6 <_dtoa_r+0xb86>
 8009002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009004:	b963      	cbnz	r3, 8009020 <_dtoa_r+0xb0>
 8009006:	4b9b      	ldr	r3, [pc, #620]	; (8009274 <_dtoa_r+0x304>)
 8009008:	e024      	b.n	8009054 <_dtoa_r+0xe4>
 800900a:	4b9b      	ldr	r3, [pc, #620]	; (8009278 <_dtoa_r+0x308>)
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	3308      	adds	r3, #8
 8009010:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	9800      	ldr	r0, [sp, #0]
 8009016:	b015      	add	sp, #84	; 0x54
 8009018:	ecbd 8b02 	vpop	{d8}
 800901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009020:	4b94      	ldr	r3, [pc, #592]	; (8009274 <_dtoa_r+0x304>)
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	3303      	adds	r3, #3
 8009026:	e7f3      	b.n	8009010 <_dtoa_r+0xa0>
 8009028:	ed9d 7b02 	vldr	d7, [sp, #8]
 800902c:	2200      	movs	r2, #0
 800902e:	ec51 0b17 	vmov	r0, r1, d7
 8009032:	2300      	movs	r3, #0
 8009034:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009038:	f7f7 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800903c:	4680      	mov	r8, r0
 800903e:	b158      	cbz	r0, 8009058 <_dtoa_r+0xe8>
 8009040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009042:	2301      	movs	r3, #1
 8009044:	6013      	str	r3, [r2, #0]
 8009046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 8551 	beq.w	8009af0 <_dtoa_r+0xb80>
 800904e:	488b      	ldr	r0, [pc, #556]	; (800927c <_dtoa_r+0x30c>)
 8009050:	6018      	str	r0, [r3, #0]
 8009052:	1e43      	subs	r3, r0, #1
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	e7dd      	b.n	8009014 <_dtoa_r+0xa4>
 8009058:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800905c:	aa12      	add	r2, sp, #72	; 0x48
 800905e:	a913      	add	r1, sp, #76	; 0x4c
 8009060:	4620      	mov	r0, r4
 8009062:	f001 f8ad 	bl	800a1c0 <__d2b>
 8009066:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800906a:	4683      	mov	fp, r0
 800906c:	2d00      	cmp	r5, #0
 800906e:	d07c      	beq.n	800916a <_dtoa_r+0x1fa>
 8009070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009072:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800907a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800907e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800908a:	4b7d      	ldr	r3, [pc, #500]	; (8009280 <_dtoa_r+0x310>)
 800908c:	2200      	movs	r2, #0
 800908e:	4630      	mov	r0, r6
 8009090:	4639      	mov	r1, r7
 8009092:	f7f7 f901 	bl	8000298 <__aeabi_dsub>
 8009096:	a36e      	add	r3, pc, #440	; (adr r3, 8009250 <_dtoa_r+0x2e0>)
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f7f7 fab4 	bl	8000608 <__aeabi_dmul>
 80090a0:	a36d      	add	r3, pc, #436	; (adr r3, 8009258 <_dtoa_r+0x2e8>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	f7f7 f8f9 	bl	800029c <__adddf3>
 80090aa:	4606      	mov	r6, r0
 80090ac:	4628      	mov	r0, r5
 80090ae:	460f      	mov	r7, r1
 80090b0:	f7f7 fa40 	bl	8000534 <__aeabi_i2d>
 80090b4:	a36a      	add	r3, pc, #424	; (adr r3, 8009260 <_dtoa_r+0x2f0>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 faa5 	bl	8000608 <__aeabi_dmul>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4630      	mov	r0, r6
 80090c4:	4639      	mov	r1, r7
 80090c6:	f7f7 f8e9 	bl	800029c <__adddf3>
 80090ca:	4606      	mov	r6, r0
 80090cc:	460f      	mov	r7, r1
 80090ce:	f7f7 fd4b 	bl	8000b68 <__aeabi_d2iz>
 80090d2:	2200      	movs	r2, #0
 80090d4:	4682      	mov	sl, r0
 80090d6:	2300      	movs	r3, #0
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	f7f7 fd06 	bl	8000aec <__aeabi_dcmplt>
 80090e0:	b148      	cbz	r0, 80090f6 <_dtoa_r+0x186>
 80090e2:	4650      	mov	r0, sl
 80090e4:	f7f7 fa26 	bl	8000534 <__aeabi_i2d>
 80090e8:	4632      	mov	r2, r6
 80090ea:	463b      	mov	r3, r7
 80090ec:	f7f7 fcf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80090f0:	b908      	cbnz	r0, 80090f6 <_dtoa_r+0x186>
 80090f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090f6:	f1ba 0f16 	cmp.w	sl, #22
 80090fa:	d854      	bhi.n	80091a6 <_dtoa_r+0x236>
 80090fc:	4b61      	ldr	r3, [pc, #388]	; (8009284 <_dtoa_r+0x314>)
 80090fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800910a:	f7f7 fcef 	bl	8000aec <__aeabi_dcmplt>
 800910e:	2800      	cmp	r0, #0
 8009110:	d04b      	beq.n	80091aa <_dtoa_r+0x23a>
 8009112:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009116:	2300      	movs	r3, #0
 8009118:	930e      	str	r3, [sp, #56]	; 0x38
 800911a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800911c:	1b5d      	subs	r5, r3, r5
 800911e:	1e6b      	subs	r3, r5, #1
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	bf43      	ittte	mi
 8009124:	2300      	movmi	r3, #0
 8009126:	f1c5 0801 	rsbmi	r8, r5, #1
 800912a:	9304      	strmi	r3, [sp, #16]
 800912c:	f04f 0800 	movpl.w	r8, #0
 8009130:	f1ba 0f00 	cmp.w	sl, #0
 8009134:	db3b      	blt.n	80091ae <_dtoa_r+0x23e>
 8009136:	9b04      	ldr	r3, [sp, #16]
 8009138:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800913c:	4453      	add	r3, sl
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	2300      	movs	r3, #0
 8009142:	9306      	str	r3, [sp, #24]
 8009144:	9b05      	ldr	r3, [sp, #20]
 8009146:	2b09      	cmp	r3, #9
 8009148:	d869      	bhi.n	800921e <_dtoa_r+0x2ae>
 800914a:	2b05      	cmp	r3, #5
 800914c:	bfc4      	itt	gt
 800914e:	3b04      	subgt	r3, #4
 8009150:	9305      	strgt	r3, [sp, #20]
 8009152:	9b05      	ldr	r3, [sp, #20]
 8009154:	f1a3 0302 	sub.w	r3, r3, #2
 8009158:	bfcc      	ite	gt
 800915a:	2500      	movgt	r5, #0
 800915c:	2501      	movle	r5, #1
 800915e:	2b03      	cmp	r3, #3
 8009160:	d869      	bhi.n	8009236 <_dtoa_r+0x2c6>
 8009162:	e8df f003 	tbb	[pc, r3]
 8009166:	4e2c      	.short	0x4e2c
 8009168:	5a4c      	.short	0x5a4c
 800916a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800916e:	441d      	add	r5, r3
 8009170:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009174:	2b20      	cmp	r3, #32
 8009176:	bfc1      	itttt	gt
 8009178:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800917c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009180:	fa09 f303 	lslgt.w	r3, r9, r3
 8009184:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009188:	bfda      	itte	le
 800918a:	f1c3 0320 	rsble	r3, r3, #32
 800918e:	fa06 f003 	lslle.w	r0, r6, r3
 8009192:	4318      	orrgt	r0, r3
 8009194:	f7f7 f9be 	bl	8000514 <__aeabi_ui2d>
 8009198:	2301      	movs	r3, #1
 800919a:	4606      	mov	r6, r0
 800919c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80091a0:	3d01      	subs	r5, #1
 80091a2:	9310      	str	r3, [sp, #64]	; 0x40
 80091a4:	e771      	b.n	800908a <_dtoa_r+0x11a>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e7b6      	b.n	8009118 <_dtoa_r+0x1a8>
 80091aa:	900e      	str	r0, [sp, #56]	; 0x38
 80091ac:	e7b5      	b.n	800911a <_dtoa_r+0x1aa>
 80091ae:	f1ca 0300 	rsb	r3, sl, #0
 80091b2:	9306      	str	r3, [sp, #24]
 80091b4:	2300      	movs	r3, #0
 80091b6:	eba8 080a 	sub.w	r8, r8, sl
 80091ba:	930d      	str	r3, [sp, #52]	; 0x34
 80091bc:	e7c2      	b.n	8009144 <_dtoa_r+0x1d4>
 80091be:	2300      	movs	r3, #0
 80091c0:	9308      	str	r3, [sp, #32]
 80091c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	dc39      	bgt.n	800923c <_dtoa_r+0x2cc>
 80091c8:	f04f 0901 	mov.w	r9, #1
 80091cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80091d0:	464b      	mov	r3, r9
 80091d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80091d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091d8:	2200      	movs	r2, #0
 80091da:	6042      	str	r2, [r0, #4]
 80091dc:	2204      	movs	r2, #4
 80091de:	f102 0614 	add.w	r6, r2, #20
 80091e2:	429e      	cmp	r6, r3
 80091e4:	6841      	ldr	r1, [r0, #4]
 80091e6:	d92f      	bls.n	8009248 <_dtoa_r+0x2d8>
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fcc7 	bl	8009b7c <_Balloc>
 80091ee:	9000      	str	r0, [sp, #0]
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d14b      	bne.n	800928c <_dtoa_r+0x31c>
 80091f4:	4b24      	ldr	r3, [pc, #144]	; (8009288 <_dtoa_r+0x318>)
 80091f6:	4602      	mov	r2, r0
 80091f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091fc:	e6d1      	b.n	8008fa2 <_dtoa_r+0x32>
 80091fe:	2301      	movs	r3, #1
 8009200:	e7de      	b.n	80091c0 <_dtoa_r+0x250>
 8009202:	2300      	movs	r3, #0
 8009204:	9308      	str	r3, [sp, #32]
 8009206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009208:	eb0a 0903 	add.w	r9, sl, r3
 800920c:	f109 0301 	add.w	r3, r9, #1
 8009210:	2b01      	cmp	r3, #1
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	bfb8      	it	lt
 8009216:	2301      	movlt	r3, #1
 8009218:	e7dd      	b.n	80091d6 <_dtoa_r+0x266>
 800921a:	2301      	movs	r3, #1
 800921c:	e7f2      	b.n	8009204 <_dtoa_r+0x294>
 800921e:	2501      	movs	r5, #1
 8009220:	2300      	movs	r3, #0
 8009222:	9305      	str	r3, [sp, #20]
 8009224:	9508      	str	r5, [sp, #32]
 8009226:	f04f 39ff 	mov.w	r9, #4294967295
 800922a:	2200      	movs	r2, #0
 800922c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009230:	2312      	movs	r3, #18
 8009232:	9209      	str	r2, [sp, #36]	; 0x24
 8009234:	e7cf      	b.n	80091d6 <_dtoa_r+0x266>
 8009236:	2301      	movs	r3, #1
 8009238:	9308      	str	r3, [sp, #32]
 800923a:	e7f4      	b.n	8009226 <_dtoa_r+0x2b6>
 800923c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009240:	f8cd 9004 	str.w	r9, [sp, #4]
 8009244:	464b      	mov	r3, r9
 8009246:	e7c6      	b.n	80091d6 <_dtoa_r+0x266>
 8009248:	3101      	adds	r1, #1
 800924a:	6041      	str	r1, [r0, #4]
 800924c:	0052      	lsls	r2, r2, #1
 800924e:	e7c6      	b.n	80091de <_dtoa_r+0x26e>
 8009250:	636f4361 	.word	0x636f4361
 8009254:	3fd287a7 	.word	0x3fd287a7
 8009258:	8b60c8b3 	.word	0x8b60c8b3
 800925c:	3fc68a28 	.word	0x3fc68a28
 8009260:	509f79fb 	.word	0x509f79fb
 8009264:	3fd34413 	.word	0x3fd34413
 8009268:	0800b351 	.word	0x0800b351
 800926c:	0800b368 	.word	0x0800b368
 8009270:	7ff00000 	.word	0x7ff00000
 8009274:	0800b34d 	.word	0x0800b34d
 8009278:	0800b344 	.word	0x0800b344
 800927c:	0800b321 	.word	0x0800b321
 8009280:	3ff80000 	.word	0x3ff80000
 8009284:	0800b460 	.word	0x0800b460
 8009288:	0800b3c7 	.word	0x0800b3c7
 800928c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800928e:	9a00      	ldr	r2, [sp, #0]
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	9b01      	ldr	r3, [sp, #4]
 8009294:	2b0e      	cmp	r3, #14
 8009296:	f200 80ad 	bhi.w	80093f4 <_dtoa_r+0x484>
 800929a:	2d00      	cmp	r5, #0
 800929c:	f000 80aa 	beq.w	80093f4 <_dtoa_r+0x484>
 80092a0:	f1ba 0f00 	cmp.w	sl, #0
 80092a4:	dd36      	ble.n	8009314 <_dtoa_r+0x3a4>
 80092a6:	4ac3      	ldr	r2, [pc, #780]	; (80095b4 <_dtoa_r+0x644>)
 80092a8:	f00a 030f 	and.w	r3, sl, #15
 80092ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092b0:	ed93 7b00 	vldr	d7, [r3]
 80092b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80092b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80092bc:	eeb0 8a47 	vmov.f32	s16, s14
 80092c0:	eef0 8a67 	vmov.f32	s17, s15
 80092c4:	d016      	beq.n	80092f4 <_dtoa_r+0x384>
 80092c6:	4bbc      	ldr	r3, [pc, #752]	; (80095b8 <_dtoa_r+0x648>)
 80092c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092d0:	f7f7 fac4 	bl	800085c <__aeabi_ddiv>
 80092d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092d8:	f007 070f 	and.w	r7, r7, #15
 80092dc:	2503      	movs	r5, #3
 80092de:	4eb6      	ldr	r6, [pc, #728]	; (80095b8 <_dtoa_r+0x648>)
 80092e0:	b957      	cbnz	r7, 80092f8 <_dtoa_r+0x388>
 80092e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092e6:	ec53 2b18 	vmov	r2, r3, d8
 80092ea:	f7f7 fab7 	bl	800085c <__aeabi_ddiv>
 80092ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092f2:	e029      	b.n	8009348 <_dtoa_r+0x3d8>
 80092f4:	2502      	movs	r5, #2
 80092f6:	e7f2      	b.n	80092de <_dtoa_r+0x36e>
 80092f8:	07f9      	lsls	r1, r7, #31
 80092fa:	d508      	bpl.n	800930e <_dtoa_r+0x39e>
 80092fc:	ec51 0b18 	vmov	r0, r1, d8
 8009300:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009304:	f7f7 f980 	bl	8000608 <__aeabi_dmul>
 8009308:	ec41 0b18 	vmov	d8, r0, r1
 800930c:	3501      	adds	r5, #1
 800930e:	107f      	asrs	r7, r7, #1
 8009310:	3608      	adds	r6, #8
 8009312:	e7e5      	b.n	80092e0 <_dtoa_r+0x370>
 8009314:	f000 80a6 	beq.w	8009464 <_dtoa_r+0x4f4>
 8009318:	f1ca 0600 	rsb	r6, sl, #0
 800931c:	4ba5      	ldr	r3, [pc, #660]	; (80095b4 <_dtoa_r+0x644>)
 800931e:	4fa6      	ldr	r7, [pc, #664]	; (80095b8 <_dtoa_r+0x648>)
 8009320:	f006 020f 	and.w	r2, r6, #15
 8009324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009330:	f7f7 f96a 	bl	8000608 <__aeabi_dmul>
 8009334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009338:	1136      	asrs	r6, r6, #4
 800933a:	2300      	movs	r3, #0
 800933c:	2502      	movs	r5, #2
 800933e:	2e00      	cmp	r6, #0
 8009340:	f040 8085 	bne.w	800944e <_dtoa_r+0x4de>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1d2      	bne.n	80092ee <_dtoa_r+0x37e>
 8009348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 808c 	beq.w	8009468 <_dtoa_r+0x4f8>
 8009350:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009354:	4b99      	ldr	r3, [pc, #612]	; (80095bc <_dtoa_r+0x64c>)
 8009356:	2200      	movs	r2, #0
 8009358:	4630      	mov	r0, r6
 800935a:	4639      	mov	r1, r7
 800935c:	f7f7 fbc6 	bl	8000aec <__aeabi_dcmplt>
 8009360:	2800      	cmp	r0, #0
 8009362:	f000 8081 	beq.w	8009468 <_dtoa_r+0x4f8>
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d07d      	beq.n	8009468 <_dtoa_r+0x4f8>
 800936c:	f1b9 0f00 	cmp.w	r9, #0
 8009370:	dd3c      	ble.n	80093ec <_dtoa_r+0x47c>
 8009372:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	2200      	movs	r2, #0
 800937a:	4b91      	ldr	r3, [pc, #580]	; (80095c0 <_dtoa_r+0x650>)
 800937c:	4630      	mov	r0, r6
 800937e:	4639      	mov	r1, r7
 8009380:	f7f7 f942 	bl	8000608 <__aeabi_dmul>
 8009384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009388:	3501      	adds	r5, #1
 800938a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800938e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009392:	4628      	mov	r0, r5
 8009394:	f7f7 f8ce 	bl	8000534 <__aeabi_i2d>
 8009398:	4632      	mov	r2, r6
 800939a:	463b      	mov	r3, r7
 800939c:	f7f7 f934 	bl	8000608 <__aeabi_dmul>
 80093a0:	4b88      	ldr	r3, [pc, #544]	; (80095c4 <_dtoa_r+0x654>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	f7f6 ff7a 	bl	800029c <__adddf3>
 80093a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80093ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093b0:	9303      	str	r3, [sp, #12]
 80093b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d15c      	bne.n	8009472 <_dtoa_r+0x502>
 80093b8:	4b83      	ldr	r3, [pc, #524]	; (80095c8 <_dtoa_r+0x658>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f6 ff6a 	bl	8000298 <__aeabi_dsub>
 80093c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093c8:	4606      	mov	r6, r0
 80093ca:	460f      	mov	r7, r1
 80093cc:	f7f7 fbac 	bl	8000b28 <__aeabi_dcmpgt>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f040 8296 	bne.w	8009902 <_dtoa_r+0x992>
 80093d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80093da:	4630      	mov	r0, r6
 80093dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f7 fb83 	bl	8000aec <__aeabi_dcmplt>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f040 8288 	bne.w	80098fc <_dtoa_r+0x98c>
 80093ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f2c0 8158 	blt.w	80096ac <_dtoa_r+0x73c>
 80093fc:	f1ba 0f0e 	cmp.w	sl, #14
 8009400:	f300 8154 	bgt.w	80096ac <_dtoa_r+0x73c>
 8009404:	4b6b      	ldr	r3, [pc, #428]	; (80095b4 <_dtoa_r+0x644>)
 8009406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800940a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009410:	2b00      	cmp	r3, #0
 8009412:	f280 80e3 	bge.w	80095dc <_dtoa_r+0x66c>
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	f300 80df 	bgt.w	80095dc <_dtoa_r+0x66c>
 800941e:	f040 826d 	bne.w	80098fc <_dtoa_r+0x98c>
 8009422:	4b69      	ldr	r3, [pc, #420]	; (80095c8 <_dtoa_r+0x658>)
 8009424:	2200      	movs	r2, #0
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	f7f7 f8ed 	bl	8000608 <__aeabi_dmul>
 800942e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009432:	f7f7 fb6f 	bl	8000b14 <__aeabi_dcmpge>
 8009436:	9e01      	ldr	r6, [sp, #4]
 8009438:	4637      	mov	r7, r6
 800943a:	2800      	cmp	r0, #0
 800943c:	f040 8243 	bne.w	80098c6 <_dtoa_r+0x956>
 8009440:	9d00      	ldr	r5, [sp, #0]
 8009442:	2331      	movs	r3, #49	; 0x31
 8009444:	f805 3b01 	strb.w	r3, [r5], #1
 8009448:	f10a 0a01 	add.w	sl, sl, #1
 800944c:	e23f      	b.n	80098ce <_dtoa_r+0x95e>
 800944e:	07f2      	lsls	r2, r6, #31
 8009450:	d505      	bpl.n	800945e <_dtoa_r+0x4ee>
 8009452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009456:	f7f7 f8d7 	bl	8000608 <__aeabi_dmul>
 800945a:	3501      	adds	r5, #1
 800945c:	2301      	movs	r3, #1
 800945e:	1076      	asrs	r6, r6, #1
 8009460:	3708      	adds	r7, #8
 8009462:	e76c      	b.n	800933e <_dtoa_r+0x3ce>
 8009464:	2502      	movs	r5, #2
 8009466:	e76f      	b.n	8009348 <_dtoa_r+0x3d8>
 8009468:	9b01      	ldr	r3, [sp, #4]
 800946a:	f8cd a01c 	str.w	sl, [sp, #28]
 800946e:	930c      	str	r3, [sp, #48]	; 0x30
 8009470:	e78d      	b.n	800938e <_dtoa_r+0x41e>
 8009472:	9900      	ldr	r1, [sp, #0]
 8009474:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009478:	4b4e      	ldr	r3, [pc, #312]	; (80095b4 <_dtoa_r+0x644>)
 800947a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800947e:	4401      	add	r1, r0
 8009480:	9102      	str	r1, [sp, #8]
 8009482:	9908      	ldr	r1, [sp, #32]
 8009484:	eeb0 8a47 	vmov.f32	s16, s14
 8009488:	eef0 8a67 	vmov.f32	s17, s15
 800948c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009494:	2900      	cmp	r1, #0
 8009496:	d045      	beq.n	8009524 <_dtoa_r+0x5b4>
 8009498:	494c      	ldr	r1, [pc, #304]	; (80095cc <_dtoa_r+0x65c>)
 800949a:	2000      	movs	r0, #0
 800949c:	f7f7 f9de 	bl	800085c <__aeabi_ddiv>
 80094a0:	ec53 2b18 	vmov	r2, r3, d8
 80094a4:	f7f6 fef8 	bl	8000298 <__aeabi_dsub>
 80094a8:	9d00      	ldr	r5, [sp, #0]
 80094aa:	ec41 0b18 	vmov	d8, r0, r1
 80094ae:	4639      	mov	r1, r7
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7f7 fb59 	bl	8000b68 <__aeabi_d2iz>
 80094b6:	900c      	str	r0, [sp, #48]	; 0x30
 80094b8:	f7f7 f83c 	bl	8000534 <__aeabi_i2d>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4630      	mov	r0, r6
 80094c2:	4639      	mov	r1, r7
 80094c4:	f7f6 fee8 	bl	8000298 <__aeabi_dsub>
 80094c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ca:	3330      	adds	r3, #48	; 0x30
 80094cc:	f805 3b01 	strb.w	r3, [r5], #1
 80094d0:	ec53 2b18 	vmov	r2, r3, d8
 80094d4:	4606      	mov	r6, r0
 80094d6:	460f      	mov	r7, r1
 80094d8:	f7f7 fb08 	bl	8000aec <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d165      	bne.n	80095ac <_dtoa_r+0x63c>
 80094e0:	4632      	mov	r2, r6
 80094e2:	463b      	mov	r3, r7
 80094e4:	4935      	ldr	r1, [pc, #212]	; (80095bc <_dtoa_r+0x64c>)
 80094e6:	2000      	movs	r0, #0
 80094e8:	f7f6 fed6 	bl	8000298 <__aeabi_dsub>
 80094ec:	ec53 2b18 	vmov	r2, r3, d8
 80094f0:	f7f7 fafc 	bl	8000aec <__aeabi_dcmplt>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	f040 80b9 	bne.w	800966c <_dtoa_r+0x6fc>
 80094fa:	9b02      	ldr	r3, [sp, #8]
 80094fc:	429d      	cmp	r5, r3
 80094fe:	f43f af75 	beq.w	80093ec <_dtoa_r+0x47c>
 8009502:	4b2f      	ldr	r3, [pc, #188]	; (80095c0 <_dtoa_r+0x650>)
 8009504:	ec51 0b18 	vmov	r0, r1, d8
 8009508:	2200      	movs	r2, #0
 800950a:	f7f7 f87d 	bl	8000608 <__aeabi_dmul>
 800950e:	4b2c      	ldr	r3, [pc, #176]	; (80095c0 <_dtoa_r+0x650>)
 8009510:	ec41 0b18 	vmov	d8, r0, r1
 8009514:	2200      	movs	r2, #0
 8009516:	4630      	mov	r0, r6
 8009518:	4639      	mov	r1, r7
 800951a:	f7f7 f875 	bl	8000608 <__aeabi_dmul>
 800951e:	4606      	mov	r6, r0
 8009520:	460f      	mov	r7, r1
 8009522:	e7c4      	b.n	80094ae <_dtoa_r+0x53e>
 8009524:	ec51 0b17 	vmov	r0, r1, d7
 8009528:	f7f7 f86e 	bl	8000608 <__aeabi_dmul>
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	9d00      	ldr	r5, [sp, #0]
 8009530:	930c      	str	r3, [sp, #48]	; 0x30
 8009532:	ec41 0b18 	vmov	d8, r0, r1
 8009536:	4639      	mov	r1, r7
 8009538:	4630      	mov	r0, r6
 800953a:	f7f7 fb15 	bl	8000b68 <__aeabi_d2iz>
 800953e:	9011      	str	r0, [sp, #68]	; 0x44
 8009540:	f7f6 fff8 	bl	8000534 <__aeabi_i2d>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4630      	mov	r0, r6
 800954a:	4639      	mov	r1, r7
 800954c:	f7f6 fea4 	bl	8000298 <__aeabi_dsub>
 8009550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009552:	3330      	adds	r3, #48	; 0x30
 8009554:	f805 3b01 	strb.w	r3, [r5], #1
 8009558:	9b02      	ldr	r3, [sp, #8]
 800955a:	429d      	cmp	r5, r3
 800955c:	4606      	mov	r6, r0
 800955e:	460f      	mov	r7, r1
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	d134      	bne.n	80095d0 <_dtoa_r+0x660>
 8009566:	4b19      	ldr	r3, [pc, #100]	; (80095cc <_dtoa_r+0x65c>)
 8009568:	ec51 0b18 	vmov	r0, r1, d8
 800956c:	f7f6 fe96 	bl	800029c <__adddf3>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4630      	mov	r0, r6
 8009576:	4639      	mov	r1, r7
 8009578:	f7f7 fad6 	bl	8000b28 <__aeabi_dcmpgt>
 800957c:	2800      	cmp	r0, #0
 800957e:	d175      	bne.n	800966c <_dtoa_r+0x6fc>
 8009580:	ec53 2b18 	vmov	r2, r3, d8
 8009584:	4911      	ldr	r1, [pc, #68]	; (80095cc <_dtoa_r+0x65c>)
 8009586:	2000      	movs	r0, #0
 8009588:	f7f6 fe86 	bl	8000298 <__aeabi_dsub>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f7 faaa 	bl	8000aec <__aeabi_dcmplt>
 8009598:	2800      	cmp	r0, #0
 800959a:	f43f af27 	beq.w	80093ec <_dtoa_r+0x47c>
 800959e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095a0:	1e6b      	subs	r3, r5, #1
 80095a2:	930c      	str	r3, [sp, #48]	; 0x30
 80095a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095a8:	2b30      	cmp	r3, #48	; 0x30
 80095aa:	d0f8      	beq.n	800959e <_dtoa_r+0x62e>
 80095ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095b0:	e04a      	b.n	8009648 <_dtoa_r+0x6d8>
 80095b2:	bf00      	nop
 80095b4:	0800b460 	.word	0x0800b460
 80095b8:	0800b438 	.word	0x0800b438
 80095bc:	3ff00000 	.word	0x3ff00000
 80095c0:	40240000 	.word	0x40240000
 80095c4:	401c0000 	.word	0x401c0000
 80095c8:	40140000 	.word	0x40140000
 80095cc:	3fe00000 	.word	0x3fe00000
 80095d0:	4baf      	ldr	r3, [pc, #700]	; (8009890 <_dtoa_r+0x920>)
 80095d2:	f7f7 f819 	bl	8000608 <__aeabi_dmul>
 80095d6:	4606      	mov	r6, r0
 80095d8:	460f      	mov	r7, r1
 80095da:	e7ac      	b.n	8009536 <_dtoa_r+0x5c6>
 80095dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095e0:	9d00      	ldr	r5, [sp, #0]
 80095e2:	4642      	mov	r2, r8
 80095e4:	464b      	mov	r3, r9
 80095e6:	4630      	mov	r0, r6
 80095e8:	4639      	mov	r1, r7
 80095ea:	f7f7 f937 	bl	800085c <__aeabi_ddiv>
 80095ee:	f7f7 fabb 	bl	8000b68 <__aeabi_d2iz>
 80095f2:	9002      	str	r0, [sp, #8]
 80095f4:	f7f6 ff9e 	bl	8000534 <__aeabi_i2d>
 80095f8:	4642      	mov	r2, r8
 80095fa:	464b      	mov	r3, r9
 80095fc:	f7f7 f804 	bl	8000608 <__aeabi_dmul>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4630      	mov	r0, r6
 8009606:	4639      	mov	r1, r7
 8009608:	f7f6 fe46 	bl	8000298 <__aeabi_dsub>
 800960c:	9e02      	ldr	r6, [sp, #8]
 800960e:	9f01      	ldr	r7, [sp, #4]
 8009610:	3630      	adds	r6, #48	; 0x30
 8009612:	f805 6b01 	strb.w	r6, [r5], #1
 8009616:	9e00      	ldr	r6, [sp, #0]
 8009618:	1bae      	subs	r6, r5, r6
 800961a:	42b7      	cmp	r7, r6
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	d137      	bne.n	8009692 <_dtoa_r+0x722>
 8009622:	f7f6 fe3b 	bl	800029c <__adddf3>
 8009626:	4642      	mov	r2, r8
 8009628:	464b      	mov	r3, r9
 800962a:	4606      	mov	r6, r0
 800962c:	460f      	mov	r7, r1
 800962e:	f7f7 fa7b 	bl	8000b28 <__aeabi_dcmpgt>
 8009632:	b9c8      	cbnz	r0, 8009668 <_dtoa_r+0x6f8>
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	4630      	mov	r0, r6
 800963a:	4639      	mov	r1, r7
 800963c:	f7f7 fa4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009640:	b110      	cbz	r0, 8009648 <_dtoa_r+0x6d8>
 8009642:	9b02      	ldr	r3, [sp, #8]
 8009644:	07d9      	lsls	r1, r3, #31
 8009646:	d40f      	bmi.n	8009668 <_dtoa_r+0x6f8>
 8009648:	4620      	mov	r0, r4
 800964a:	4659      	mov	r1, fp
 800964c:	f000 fad6 	bl	8009bfc <_Bfree>
 8009650:	2300      	movs	r3, #0
 8009652:	702b      	strb	r3, [r5, #0]
 8009654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009656:	f10a 0001 	add.w	r0, sl, #1
 800965a:	6018      	str	r0, [r3, #0]
 800965c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800965e:	2b00      	cmp	r3, #0
 8009660:	f43f acd8 	beq.w	8009014 <_dtoa_r+0xa4>
 8009664:	601d      	str	r5, [r3, #0]
 8009666:	e4d5      	b.n	8009014 <_dtoa_r+0xa4>
 8009668:	f8cd a01c 	str.w	sl, [sp, #28]
 800966c:	462b      	mov	r3, r5
 800966e:	461d      	mov	r5, r3
 8009670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009674:	2a39      	cmp	r2, #57	; 0x39
 8009676:	d108      	bne.n	800968a <_dtoa_r+0x71a>
 8009678:	9a00      	ldr	r2, [sp, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d1f7      	bne.n	800966e <_dtoa_r+0x6fe>
 800967e:	9a07      	ldr	r2, [sp, #28]
 8009680:	9900      	ldr	r1, [sp, #0]
 8009682:	3201      	adds	r2, #1
 8009684:	9207      	str	r2, [sp, #28]
 8009686:	2230      	movs	r2, #48	; 0x30
 8009688:	700a      	strb	r2, [r1, #0]
 800968a:	781a      	ldrb	r2, [r3, #0]
 800968c:	3201      	adds	r2, #1
 800968e:	701a      	strb	r2, [r3, #0]
 8009690:	e78c      	b.n	80095ac <_dtoa_r+0x63c>
 8009692:	4b7f      	ldr	r3, [pc, #508]	; (8009890 <_dtoa_r+0x920>)
 8009694:	2200      	movs	r2, #0
 8009696:	f7f6 ffb7 	bl	8000608 <__aeabi_dmul>
 800969a:	2200      	movs	r2, #0
 800969c:	2300      	movs	r3, #0
 800969e:	4606      	mov	r6, r0
 80096a0:	460f      	mov	r7, r1
 80096a2:	f7f7 fa19 	bl	8000ad8 <__aeabi_dcmpeq>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d09b      	beq.n	80095e2 <_dtoa_r+0x672>
 80096aa:	e7cd      	b.n	8009648 <_dtoa_r+0x6d8>
 80096ac:	9a08      	ldr	r2, [sp, #32]
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	f000 80c4 	beq.w	800983c <_dtoa_r+0x8cc>
 80096b4:	9a05      	ldr	r2, [sp, #20]
 80096b6:	2a01      	cmp	r2, #1
 80096b8:	f300 80a8 	bgt.w	800980c <_dtoa_r+0x89c>
 80096bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096be:	2a00      	cmp	r2, #0
 80096c0:	f000 80a0 	beq.w	8009804 <_dtoa_r+0x894>
 80096c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096c8:	9e06      	ldr	r6, [sp, #24]
 80096ca:	4645      	mov	r5, r8
 80096cc:	9a04      	ldr	r2, [sp, #16]
 80096ce:	2101      	movs	r1, #1
 80096d0:	441a      	add	r2, r3
 80096d2:	4620      	mov	r0, r4
 80096d4:	4498      	add	r8, r3
 80096d6:	9204      	str	r2, [sp, #16]
 80096d8:	f000 fb4c 	bl	8009d74 <__i2b>
 80096dc:	4607      	mov	r7, r0
 80096de:	2d00      	cmp	r5, #0
 80096e0:	dd0b      	ble.n	80096fa <_dtoa_r+0x78a>
 80096e2:	9b04      	ldr	r3, [sp, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	dd08      	ble.n	80096fa <_dtoa_r+0x78a>
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	9a04      	ldr	r2, [sp, #16]
 80096ec:	bfa8      	it	ge
 80096ee:	462b      	movge	r3, r5
 80096f0:	eba8 0803 	sub.w	r8, r8, r3
 80096f4:	1aed      	subs	r5, r5, r3
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	9b06      	ldr	r3, [sp, #24]
 80096fc:	b1fb      	cbz	r3, 800973e <_dtoa_r+0x7ce>
 80096fe:	9b08      	ldr	r3, [sp, #32]
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 809f 	beq.w	8009844 <_dtoa_r+0x8d4>
 8009706:	2e00      	cmp	r6, #0
 8009708:	dd11      	ble.n	800972e <_dtoa_r+0x7be>
 800970a:	4639      	mov	r1, r7
 800970c:	4632      	mov	r2, r6
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fbec 	bl	8009eec <__pow5mult>
 8009714:	465a      	mov	r2, fp
 8009716:	4601      	mov	r1, r0
 8009718:	4607      	mov	r7, r0
 800971a:	4620      	mov	r0, r4
 800971c:	f000 fb40 	bl	8009da0 <__multiply>
 8009720:	4659      	mov	r1, fp
 8009722:	9007      	str	r0, [sp, #28]
 8009724:	4620      	mov	r0, r4
 8009726:	f000 fa69 	bl	8009bfc <_Bfree>
 800972a:	9b07      	ldr	r3, [sp, #28]
 800972c:	469b      	mov	fp, r3
 800972e:	9b06      	ldr	r3, [sp, #24]
 8009730:	1b9a      	subs	r2, r3, r6
 8009732:	d004      	beq.n	800973e <_dtoa_r+0x7ce>
 8009734:	4659      	mov	r1, fp
 8009736:	4620      	mov	r0, r4
 8009738:	f000 fbd8 	bl	8009eec <__pow5mult>
 800973c:	4683      	mov	fp, r0
 800973e:	2101      	movs	r1, #1
 8009740:	4620      	mov	r0, r4
 8009742:	f000 fb17 	bl	8009d74 <__i2b>
 8009746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009748:	2b00      	cmp	r3, #0
 800974a:	4606      	mov	r6, r0
 800974c:	dd7c      	ble.n	8009848 <_dtoa_r+0x8d8>
 800974e:	461a      	mov	r2, r3
 8009750:	4601      	mov	r1, r0
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fbca 	bl	8009eec <__pow5mult>
 8009758:	9b05      	ldr	r3, [sp, #20]
 800975a:	2b01      	cmp	r3, #1
 800975c:	4606      	mov	r6, r0
 800975e:	dd76      	ble.n	800984e <_dtoa_r+0x8de>
 8009760:	2300      	movs	r3, #0
 8009762:	9306      	str	r3, [sp, #24]
 8009764:	6933      	ldr	r3, [r6, #16]
 8009766:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800976a:	6918      	ldr	r0, [r3, #16]
 800976c:	f000 fab2 	bl	8009cd4 <__hi0bits>
 8009770:	f1c0 0020 	rsb	r0, r0, #32
 8009774:	9b04      	ldr	r3, [sp, #16]
 8009776:	4418      	add	r0, r3
 8009778:	f010 001f 	ands.w	r0, r0, #31
 800977c:	f000 8086 	beq.w	800988c <_dtoa_r+0x91c>
 8009780:	f1c0 0320 	rsb	r3, r0, #32
 8009784:	2b04      	cmp	r3, #4
 8009786:	dd7f      	ble.n	8009888 <_dtoa_r+0x918>
 8009788:	f1c0 001c 	rsb	r0, r0, #28
 800978c:	9b04      	ldr	r3, [sp, #16]
 800978e:	4403      	add	r3, r0
 8009790:	4480      	add	r8, r0
 8009792:	4405      	add	r5, r0
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	f1b8 0f00 	cmp.w	r8, #0
 800979a:	dd05      	ble.n	80097a8 <_dtoa_r+0x838>
 800979c:	4659      	mov	r1, fp
 800979e:	4642      	mov	r2, r8
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 fbfd 	bl	8009fa0 <__lshift>
 80097a6:	4683      	mov	fp, r0
 80097a8:	9b04      	ldr	r3, [sp, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dd05      	ble.n	80097ba <_dtoa_r+0x84a>
 80097ae:	4631      	mov	r1, r6
 80097b0:	461a      	mov	r2, r3
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 fbf4 	bl	8009fa0 <__lshift>
 80097b8:	4606      	mov	r6, r0
 80097ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d069      	beq.n	8009894 <_dtoa_r+0x924>
 80097c0:	4631      	mov	r1, r6
 80097c2:	4658      	mov	r0, fp
 80097c4:	f000 fc58 	bl	800a078 <__mcmp>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	da63      	bge.n	8009894 <_dtoa_r+0x924>
 80097cc:	2300      	movs	r3, #0
 80097ce:	4659      	mov	r1, fp
 80097d0:	220a      	movs	r2, #10
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 fa34 	bl	8009c40 <__multadd>
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097de:	4683      	mov	fp, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 818f 	beq.w	8009b04 <_dtoa_r+0xb94>
 80097e6:	4639      	mov	r1, r7
 80097e8:	2300      	movs	r3, #0
 80097ea:	220a      	movs	r2, #10
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fa27 	bl	8009c40 <__multadd>
 80097f2:	f1b9 0f00 	cmp.w	r9, #0
 80097f6:	4607      	mov	r7, r0
 80097f8:	f300 808e 	bgt.w	8009918 <_dtoa_r+0x9a8>
 80097fc:	9b05      	ldr	r3, [sp, #20]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	dc50      	bgt.n	80098a4 <_dtoa_r+0x934>
 8009802:	e089      	b.n	8009918 <_dtoa_r+0x9a8>
 8009804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800980a:	e75d      	b.n	80096c8 <_dtoa_r+0x758>
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	1e5e      	subs	r6, r3, #1
 8009810:	9b06      	ldr	r3, [sp, #24]
 8009812:	42b3      	cmp	r3, r6
 8009814:	bfbf      	itttt	lt
 8009816:	9b06      	ldrlt	r3, [sp, #24]
 8009818:	9606      	strlt	r6, [sp, #24]
 800981a:	1af2      	sublt	r2, r6, r3
 800981c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800981e:	bfb6      	itet	lt
 8009820:	189b      	addlt	r3, r3, r2
 8009822:	1b9e      	subge	r6, r3, r6
 8009824:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009826:	9b01      	ldr	r3, [sp, #4]
 8009828:	bfb8      	it	lt
 800982a:	2600      	movlt	r6, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	bfb5      	itete	lt
 8009830:	eba8 0503 	sublt.w	r5, r8, r3
 8009834:	9b01      	ldrge	r3, [sp, #4]
 8009836:	2300      	movlt	r3, #0
 8009838:	4645      	movge	r5, r8
 800983a:	e747      	b.n	80096cc <_dtoa_r+0x75c>
 800983c:	9e06      	ldr	r6, [sp, #24]
 800983e:	9f08      	ldr	r7, [sp, #32]
 8009840:	4645      	mov	r5, r8
 8009842:	e74c      	b.n	80096de <_dtoa_r+0x76e>
 8009844:	9a06      	ldr	r2, [sp, #24]
 8009846:	e775      	b.n	8009734 <_dtoa_r+0x7c4>
 8009848:	9b05      	ldr	r3, [sp, #20]
 800984a:	2b01      	cmp	r3, #1
 800984c:	dc18      	bgt.n	8009880 <_dtoa_r+0x910>
 800984e:	9b02      	ldr	r3, [sp, #8]
 8009850:	b9b3      	cbnz	r3, 8009880 <_dtoa_r+0x910>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009858:	b9a3      	cbnz	r3, 8009884 <_dtoa_r+0x914>
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009860:	0d1b      	lsrs	r3, r3, #20
 8009862:	051b      	lsls	r3, r3, #20
 8009864:	b12b      	cbz	r3, 8009872 <_dtoa_r+0x902>
 8009866:	9b04      	ldr	r3, [sp, #16]
 8009868:	3301      	adds	r3, #1
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	f108 0801 	add.w	r8, r8, #1
 8009870:	2301      	movs	r3, #1
 8009872:	9306      	str	r3, [sp, #24]
 8009874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009876:	2b00      	cmp	r3, #0
 8009878:	f47f af74 	bne.w	8009764 <_dtoa_r+0x7f4>
 800987c:	2001      	movs	r0, #1
 800987e:	e779      	b.n	8009774 <_dtoa_r+0x804>
 8009880:	2300      	movs	r3, #0
 8009882:	e7f6      	b.n	8009872 <_dtoa_r+0x902>
 8009884:	9b02      	ldr	r3, [sp, #8]
 8009886:	e7f4      	b.n	8009872 <_dtoa_r+0x902>
 8009888:	d085      	beq.n	8009796 <_dtoa_r+0x826>
 800988a:	4618      	mov	r0, r3
 800988c:	301c      	adds	r0, #28
 800988e:	e77d      	b.n	800978c <_dtoa_r+0x81c>
 8009890:	40240000 	.word	0x40240000
 8009894:	9b01      	ldr	r3, [sp, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	dc38      	bgt.n	800990c <_dtoa_r+0x99c>
 800989a:	9b05      	ldr	r3, [sp, #20]
 800989c:	2b02      	cmp	r3, #2
 800989e:	dd35      	ble.n	800990c <_dtoa_r+0x99c>
 80098a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80098a4:	f1b9 0f00 	cmp.w	r9, #0
 80098a8:	d10d      	bne.n	80098c6 <_dtoa_r+0x956>
 80098aa:	4631      	mov	r1, r6
 80098ac:	464b      	mov	r3, r9
 80098ae:	2205      	movs	r2, #5
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 f9c5 	bl	8009c40 <__multadd>
 80098b6:	4601      	mov	r1, r0
 80098b8:	4606      	mov	r6, r0
 80098ba:	4658      	mov	r0, fp
 80098bc:	f000 fbdc 	bl	800a078 <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	f73f adbd 	bgt.w	8009440 <_dtoa_r+0x4d0>
 80098c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c8:	9d00      	ldr	r5, [sp, #0]
 80098ca:	ea6f 0a03 	mvn.w	sl, r3
 80098ce:	f04f 0800 	mov.w	r8, #0
 80098d2:	4631      	mov	r1, r6
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 f991 	bl	8009bfc <_Bfree>
 80098da:	2f00      	cmp	r7, #0
 80098dc:	f43f aeb4 	beq.w	8009648 <_dtoa_r+0x6d8>
 80098e0:	f1b8 0f00 	cmp.w	r8, #0
 80098e4:	d005      	beq.n	80098f2 <_dtoa_r+0x982>
 80098e6:	45b8      	cmp	r8, r7
 80098e8:	d003      	beq.n	80098f2 <_dtoa_r+0x982>
 80098ea:	4641      	mov	r1, r8
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f985 	bl	8009bfc <_Bfree>
 80098f2:	4639      	mov	r1, r7
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 f981 	bl	8009bfc <_Bfree>
 80098fa:	e6a5      	b.n	8009648 <_dtoa_r+0x6d8>
 80098fc:	2600      	movs	r6, #0
 80098fe:	4637      	mov	r7, r6
 8009900:	e7e1      	b.n	80098c6 <_dtoa_r+0x956>
 8009902:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009904:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009908:	4637      	mov	r7, r6
 800990a:	e599      	b.n	8009440 <_dtoa_r+0x4d0>
 800990c:	9b08      	ldr	r3, [sp, #32]
 800990e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 80fd 	beq.w	8009b12 <_dtoa_r+0xba2>
 8009918:	2d00      	cmp	r5, #0
 800991a:	dd05      	ble.n	8009928 <_dtoa_r+0x9b8>
 800991c:	4639      	mov	r1, r7
 800991e:	462a      	mov	r2, r5
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fb3d 	bl	8009fa0 <__lshift>
 8009926:	4607      	mov	r7, r0
 8009928:	9b06      	ldr	r3, [sp, #24]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d05c      	beq.n	80099e8 <_dtoa_r+0xa78>
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	4620      	mov	r0, r4
 8009932:	f000 f923 	bl	8009b7c <_Balloc>
 8009936:	4605      	mov	r5, r0
 8009938:	b928      	cbnz	r0, 8009946 <_dtoa_r+0x9d6>
 800993a:	4b80      	ldr	r3, [pc, #512]	; (8009b3c <_dtoa_r+0xbcc>)
 800993c:	4602      	mov	r2, r0
 800993e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009942:	f7ff bb2e 	b.w	8008fa2 <_dtoa_r+0x32>
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	3202      	adds	r2, #2
 800994a:	0092      	lsls	r2, r2, #2
 800994c:	f107 010c 	add.w	r1, r7, #12
 8009950:	300c      	adds	r0, #12
 8009952:	f000 f905 	bl	8009b60 <memcpy>
 8009956:	2201      	movs	r2, #1
 8009958:	4629      	mov	r1, r5
 800995a:	4620      	mov	r0, r4
 800995c:	f000 fb20 	bl	8009fa0 <__lshift>
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	444b      	add	r3, r9
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	9b02      	ldr	r3, [sp, #8]
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	46b8      	mov	r8, r7
 8009974:	9306      	str	r3, [sp, #24]
 8009976:	4607      	mov	r7, r0
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	4631      	mov	r1, r6
 800997c:	3b01      	subs	r3, #1
 800997e:	4658      	mov	r0, fp
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	f7ff fa69 	bl	8008e58 <quorem>
 8009986:	4603      	mov	r3, r0
 8009988:	3330      	adds	r3, #48	; 0x30
 800998a:	9004      	str	r0, [sp, #16]
 800998c:	4641      	mov	r1, r8
 800998e:	4658      	mov	r0, fp
 8009990:	9308      	str	r3, [sp, #32]
 8009992:	f000 fb71 	bl	800a078 <__mcmp>
 8009996:	463a      	mov	r2, r7
 8009998:	4681      	mov	r9, r0
 800999a:	4631      	mov	r1, r6
 800999c:	4620      	mov	r0, r4
 800999e:	f000 fb87 	bl	800a0b0 <__mdiff>
 80099a2:	68c2      	ldr	r2, [r0, #12]
 80099a4:	9b08      	ldr	r3, [sp, #32]
 80099a6:	4605      	mov	r5, r0
 80099a8:	bb02      	cbnz	r2, 80099ec <_dtoa_r+0xa7c>
 80099aa:	4601      	mov	r1, r0
 80099ac:	4658      	mov	r0, fp
 80099ae:	f000 fb63 	bl	800a078 <__mcmp>
 80099b2:	9b08      	ldr	r3, [sp, #32]
 80099b4:	4602      	mov	r2, r0
 80099b6:	4629      	mov	r1, r5
 80099b8:	4620      	mov	r0, r4
 80099ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80099be:	f000 f91d 	bl	8009bfc <_Bfree>
 80099c2:	9b05      	ldr	r3, [sp, #20]
 80099c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c6:	9d01      	ldr	r5, [sp, #4]
 80099c8:	ea43 0102 	orr.w	r1, r3, r2
 80099cc:	9b06      	ldr	r3, [sp, #24]
 80099ce:	430b      	orrs	r3, r1
 80099d0:	9b08      	ldr	r3, [sp, #32]
 80099d2:	d10d      	bne.n	80099f0 <_dtoa_r+0xa80>
 80099d4:	2b39      	cmp	r3, #57	; 0x39
 80099d6:	d029      	beq.n	8009a2c <_dtoa_r+0xabc>
 80099d8:	f1b9 0f00 	cmp.w	r9, #0
 80099dc:	dd01      	ble.n	80099e2 <_dtoa_r+0xa72>
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	3331      	adds	r3, #49	; 0x31
 80099e2:	9a02      	ldr	r2, [sp, #8]
 80099e4:	7013      	strb	r3, [r2, #0]
 80099e6:	e774      	b.n	80098d2 <_dtoa_r+0x962>
 80099e8:	4638      	mov	r0, r7
 80099ea:	e7b9      	b.n	8009960 <_dtoa_r+0x9f0>
 80099ec:	2201      	movs	r2, #1
 80099ee:	e7e2      	b.n	80099b6 <_dtoa_r+0xa46>
 80099f0:	f1b9 0f00 	cmp.w	r9, #0
 80099f4:	db06      	blt.n	8009a04 <_dtoa_r+0xa94>
 80099f6:	9905      	ldr	r1, [sp, #20]
 80099f8:	ea41 0909 	orr.w	r9, r1, r9
 80099fc:	9906      	ldr	r1, [sp, #24]
 80099fe:	ea59 0101 	orrs.w	r1, r9, r1
 8009a02:	d120      	bne.n	8009a46 <_dtoa_r+0xad6>
 8009a04:	2a00      	cmp	r2, #0
 8009a06:	ddec      	ble.n	80099e2 <_dtoa_r+0xa72>
 8009a08:	4659      	mov	r1, fp
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	f000 fac6 	bl	8009fa0 <__lshift>
 8009a14:	4631      	mov	r1, r6
 8009a16:	4683      	mov	fp, r0
 8009a18:	f000 fb2e 	bl	800a078 <__mcmp>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	9b01      	ldr	r3, [sp, #4]
 8009a20:	dc02      	bgt.n	8009a28 <_dtoa_r+0xab8>
 8009a22:	d1de      	bne.n	80099e2 <_dtoa_r+0xa72>
 8009a24:	07da      	lsls	r2, r3, #31
 8009a26:	d5dc      	bpl.n	80099e2 <_dtoa_r+0xa72>
 8009a28:	2b39      	cmp	r3, #57	; 0x39
 8009a2a:	d1d8      	bne.n	80099de <_dtoa_r+0xa6e>
 8009a2c:	9a02      	ldr	r2, [sp, #8]
 8009a2e:	2339      	movs	r3, #57	; 0x39
 8009a30:	7013      	strb	r3, [r2, #0]
 8009a32:	462b      	mov	r3, r5
 8009a34:	461d      	mov	r5, r3
 8009a36:	3b01      	subs	r3, #1
 8009a38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a3c:	2a39      	cmp	r2, #57	; 0x39
 8009a3e:	d050      	beq.n	8009ae2 <_dtoa_r+0xb72>
 8009a40:	3201      	adds	r2, #1
 8009a42:	701a      	strb	r2, [r3, #0]
 8009a44:	e745      	b.n	80098d2 <_dtoa_r+0x962>
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	dd03      	ble.n	8009a52 <_dtoa_r+0xae2>
 8009a4a:	2b39      	cmp	r3, #57	; 0x39
 8009a4c:	d0ee      	beq.n	8009a2c <_dtoa_r+0xabc>
 8009a4e:	3301      	adds	r3, #1
 8009a50:	e7c7      	b.n	80099e2 <_dtoa_r+0xa72>
 8009a52:	9a01      	ldr	r2, [sp, #4]
 8009a54:	9907      	ldr	r1, [sp, #28]
 8009a56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a5a:	428a      	cmp	r2, r1
 8009a5c:	d02a      	beq.n	8009ab4 <_dtoa_r+0xb44>
 8009a5e:	4659      	mov	r1, fp
 8009a60:	2300      	movs	r3, #0
 8009a62:	220a      	movs	r2, #10
 8009a64:	4620      	mov	r0, r4
 8009a66:	f000 f8eb 	bl	8009c40 <__multadd>
 8009a6a:	45b8      	cmp	r8, r7
 8009a6c:	4683      	mov	fp, r0
 8009a6e:	f04f 0300 	mov.w	r3, #0
 8009a72:	f04f 020a 	mov.w	r2, #10
 8009a76:	4641      	mov	r1, r8
 8009a78:	4620      	mov	r0, r4
 8009a7a:	d107      	bne.n	8009a8c <_dtoa_r+0xb1c>
 8009a7c:	f000 f8e0 	bl	8009c40 <__multadd>
 8009a80:	4680      	mov	r8, r0
 8009a82:	4607      	mov	r7, r0
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	3301      	adds	r3, #1
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	e775      	b.n	8009978 <_dtoa_r+0xa08>
 8009a8c:	f000 f8d8 	bl	8009c40 <__multadd>
 8009a90:	4639      	mov	r1, r7
 8009a92:	4680      	mov	r8, r0
 8009a94:	2300      	movs	r3, #0
 8009a96:	220a      	movs	r2, #10
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 f8d1 	bl	8009c40 <__multadd>
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	e7f0      	b.n	8009a84 <_dtoa_r+0xb14>
 8009aa2:	f1b9 0f00 	cmp.w	r9, #0
 8009aa6:	9a00      	ldr	r2, [sp, #0]
 8009aa8:	bfcc      	ite	gt
 8009aaa:	464d      	movgt	r5, r9
 8009aac:	2501      	movle	r5, #1
 8009aae:	4415      	add	r5, r2
 8009ab0:	f04f 0800 	mov.w	r8, #0
 8009ab4:	4659      	mov	r1, fp
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	4620      	mov	r0, r4
 8009aba:	9301      	str	r3, [sp, #4]
 8009abc:	f000 fa70 	bl	8009fa0 <__lshift>
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4683      	mov	fp, r0
 8009ac4:	f000 fad8 	bl	800a078 <__mcmp>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	dcb2      	bgt.n	8009a32 <_dtoa_r+0xac2>
 8009acc:	d102      	bne.n	8009ad4 <_dtoa_r+0xb64>
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	07db      	lsls	r3, r3, #31
 8009ad2:	d4ae      	bmi.n	8009a32 <_dtoa_r+0xac2>
 8009ad4:	462b      	mov	r3, r5
 8009ad6:	461d      	mov	r5, r3
 8009ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009adc:	2a30      	cmp	r2, #48	; 0x30
 8009ade:	d0fa      	beq.n	8009ad6 <_dtoa_r+0xb66>
 8009ae0:	e6f7      	b.n	80098d2 <_dtoa_r+0x962>
 8009ae2:	9a00      	ldr	r2, [sp, #0]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d1a5      	bne.n	8009a34 <_dtoa_r+0xac4>
 8009ae8:	f10a 0a01 	add.w	sl, sl, #1
 8009aec:	2331      	movs	r3, #49	; 0x31
 8009aee:	e779      	b.n	80099e4 <_dtoa_r+0xa74>
 8009af0:	4b13      	ldr	r3, [pc, #76]	; (8009b40 <_dtoa_r+0xbd0>)
 8009af2:	f7ff baaf 	b.w	8009054 <_dtoa_r+0xe4>
 8009af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f47f aa86 	bne.w	800900a <_dtoa_r+0x9a>
 8009afe:	4b11      	ldr	r3, [pc, #68]	; (8009b44 <_dtoa_r+0xbd4>)
 8009b00:	f7ff baa8 	b.w	8009054 <_dtoa_r+0xe4>
 8009b04:	f1b9 0f00 	cmp.w	r9, #0
 8009b08:	dc03      	bgt.n	8009b12 <_dtoa_r+0xba2>
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	f73f aec9 	bgt.w	80098a4 <_dtoa_r+0x934>
 8009b12:	9d00      	ldr	r5, [sp, #0]
 8009b14:	4631      	mov	r1, r6
 8009b16:	4658      	mov	r0, fp
 8009b18:	f7ff f99e 	bl	8008e58 <quorem>
 8009b1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b20:	f805 3b01 	strb.w	r3, [r5], #1
 8009b24:	9a00      	ldr	r2, [sp, #0]
 8009b26:	1aaa      	subs	r2, r5, r2
 8009b28:	4591      	cmp	r9, r2
 8009b2a:	ddba      	ble.n	8009aa2 <_dtoa_r+0xb32>
 8009b2c:	4659      	mov	r1, fp
 8009b2e:	2300      	movs	r3, #0
 8009b30:	220a      	movs	r2, #10
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f884 	bl	8009c40 <__multadd>
 8009b38:	4683      	mov	fp, r0
 8009b3a:	e7eb      	b.n	8009b14 <_dtoa_r+0xba4>
 8009b3c:	0800b3c7 	.word	0x0800b3c7
 8009b40:	0800b320 	.word	0x0800b320
 8009b44:	0800b344 	.word	0x0800b344

08009b48 <_localeconv_r>:
 8009b48:	4800      	ldr	r0, [pc, #0]	; (8009b4c <_localeconv_r+0x4>)
 8009b4a:	4770      	bx	lr
 8009b4c:	20000168 	.word	0x20000168

08009b50 <malloc>:
 8009b50:	4b02      	ldr	r3, [pc, #8]	; (8009b5c <malloc+0xc>)
 8009b52:	4601      	mov	r1, r0
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	f000 bbef 	b.w	800a338 <_malloc_r>
 8009b5a:	bf00      	nop
 8009b5c:	20000014 	.word	0x20000014

08009b60 <memcpy>:
 8009b60:	440a      	add	r2, r1
 8009b62:	4291      	cmp	r1, r2
 8009b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b68:	d100      	bne.n	8009b6c <memcpy+0xc>
 8009b6a:	4770      	bx	lr
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b76:	4291      	cmp	r1, r2
 8009b78:	d1f9      	bne.n	8009b6e <memcpy+0xe>
 8009b7a:	bd10      	pop	{r4, pc}

08009b7c <_Balloc>:
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b80:	4604      	mov	r4, r0
 8009b82:	460d      	mov	r5, r1
 8009b84:	b976      	cbnz	r6, 8009ba4 <_Balloc+0x28>
 8009b86:	2010      	movs	r0, #16
 8009b88:	f7ff ffe2 	bl	8009b50 <malloc>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	6260      	str	r0, [r4, #36]	; 0x24
 8009b90:	b920      	cbnz	r0, 8009b9c <_Balloc+0x20>
 8009b92:	4b18      	ldr	r3, [pc, #96]	; (8009bf4 <_Balloc+0x78>)
 8009b94:	4818      	ldr	r0, [pc, #96]	; (8009bf8 <_Balloc+0x7c>)
 8009b96:	2166      	movs	r1, #102	; 0x66
 8009b98:	f000 fd94 	bl	800a6c4 <__assert_func>
 8009b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ba0:	6006      	str	r6, [r0, #0]
 8009ba2:	60c6      	str	r6, [r0, #12]
 8009ba4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ba6:	68f3      	ldr	r3, [r6, #12]
 8009ba8:	b183      	cbz	r3, 8009bcc <_Balloc+0x50>
 8009baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bb2:	b9b8      	cbnz	r0, 8009be4 <_Balloc+0x68>
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	fa01 f605 	lsl.w	r6, r1, r5
 8009bba:	1d72      	adds	r2, r6, #5
 8009bbc:	0092      	lsls	r2, r2, #2
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 fb5a 	bl	800a278 <_calloc_r>
 8009bc4:	b160      	cbz	r0, 8009be0 <_Balloc+0x64>
 8009bc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bca:	e00e      	b.n	8009bea <_Balloc+0x6e>
 8009bcc:	2221      	movs	r2, #33	; 0x21
 8009bce:	2104      	movs	r1, #4
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f000 fb51 	bl	800a278 <_calloc_r>
 8009bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bd8:	60f0      	str	r0, [r6, #12]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e4      	bne.n	8009baa <_Balloc+0x2e>
 8009be0:	2000      	movs	r0, #0
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	6802      	ldr	r2, [r0, #0]
 8009be6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bea:	2300      	movs	r3, #0
 8009bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bf0:	e7f7      	b.n	8009be2 <_Balloc+0x66>
 8009bf2:	bf00      	nop
 8009bf4:	0800b351 	.word	0x0800b351
 8009bf8:	0800b3d8 	.word	0x0800b3d8

08009bfc <_Bfree>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c00:	4605      	mov	r5, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	b976      	cbnz	r6, 8009c24 <_Bfree+0x28>
 8009c06:	2010      	movs	r0, #16
 8009c08:	f7ff ffa2 	bl	8009b50 <malloc>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	6268      	str	r0, [r5, #36]	; 0x24
 8009c10:	b920      	cbnz	r0, 8009c1c <_Bfree+0x20>
 8009c12:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <_Bfree+0x3c>)
 8009c14:	4809      	ldr	r0, [pc, #36]	; (8009c3c <_Bfree+0x40>)
 8009c16:	218a      	movs	r1, #138	; 0x8a
 8009c18:	f000 fd54 	bl	800a6c4 <__assert_func>
 8009c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c20:	6006      	str	r6, [r0, #0]
 8009c22:	60c6      	str	r6, [r0, #12]
 8009c24:	b13c      	cbz	r4, 8009c36 <_Bfree+0x3a>
 8009c26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c28:	6862      	ldr	r2, [r4, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c30:	6021      	str	r1, [r4, #0]
 8009c32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	0800b351 	.word	0x0800b351
 8009c3c:	0800b3d8 	.word	0x0800b3d8

08009c40 <__multadd>:
 8009c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c44:	690e      	ldr	r6, [r1, #16]
 8009c46:	4607      	mov	r7, r0
 8009c48:	4698      	mov	r8, r3
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	f101 0014 	add.w	r0, r1, #20
 8009c50:	2300      	movs	r3, #0
 8009c52:	6805      	ldr	r5, [r0, #0]
 8009c54:	b2a9      	uxth	r1, r5
 8009c56:	fb02 8101 	mla	r1, r2, r1, r8
 8009c5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009c5e:	0c2d      	lsrs	r5, r5, #16
 8009c60:	fb02 c505 	mla	r5, r2, r5, ip
 8009c64:	b289      	uxth	r1, r1
 8009c66:	3301      	adds	r3, #1
 8009c68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009c6c:	429e      	cmp	r6, r3
 8009c6e:	f840 1b04 	str.w	r1, [r0], #4
 8009c72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009c76:	dcec      	bgt.n	8009c52 <__multadd+0x12>
 8009c78:	f1b8 0f00 	cmp.w	r8, #0
 8009c7c:	d022      	beq.n	8009cc4 <__multadd+0x84>
 8009c7e:	68a3      	ldr	r3, [r4, #8]
 8009c80:	42b3      	cmp	r3, r6
 8009c82:	dc19      	bgt.n	8009cb8 <__multadd+0x78>
 8009c84:	6861      	ldr	r1, [r4, #4]
 8009c86:	4638      	mov	r0, r7
 8009c88:	3101      	adds	r1, #1
 8009c8a:	f7ff ff77 	bl	8009b7c <_Balloc>
 8009c8e:	4605      	mov	r5, r0
 8009c90:	b928      	cbnz	r0, 8009c9e <__multadd+0x5e>
 8009c92:	4602      	mov	r2, r0
 8009c94:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <__multadd+0x8c>)
 8009c96:	480e      	ldr	r0, [pc, #56]	; (8009cd0 <__multadd+0x90>)
 8009c98:	21b5      	movs	r1, #181	; 0xb5
 8009c9a:	f000 fd13 	bl	800a6c4 <__assert_func>
 8009c9e:	6922      	ldr	r2, [r4, #16]
 8009ca0:	3202      	adds	r2, #2
 8009ca2:	f104 010c 	add.w	r1, r4, #12
 8009ca6:	0092      	lsls	r2, r2, #2
 8009ca8:	300c      	adds	r0, #12
 8009caa:	f7ff ff59 	bl	8009b60 <memcpy>
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	f7ff ffa3 	bl	8009bfc <_Bfree>
 8009cb6:	462c      	mov	r4, r5
 8009cb8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009cbc:	3601      	adds	r6, #1
 8009cbe:	f8c3 8014 	str.w	r8, [r3, #20]
 8009cc2:	6126      	str	r6, [r4, #16]
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cca:	bf00      	nop
 8009ccc:	0800b3c7 	.word	0x0800b3c7
 8009cd0:	0800b3d8 	.word	0x0800b3d8

08009cd4 <__hi0bits>:
 8009cd4:	0c03      	lsrs	r3, r0, #16
 8009cd6:	041b      	lsls	r3, r3, #16
 8009cd8:	b9d3      	cbnz	r3, 8009d10 <__hi0bits+0x3c>
 8009cda:	0400      	lsls	r0, r0, #16
 8009cdc:	2310      	movs	r3, #16
 8009cde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ce2:	bf04      	itt	eq
 8009ce4:	0200      	lsleq	r0, r0, #8
 8009ce6:	3308      	addeq	r3, #8
 8009ce8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009cec:	bf04      	itt	eq
 8009cee:	0100      	lsleq	r0, r0, #4
 8009cf0:	3304      	addeq	r3, #4
 8009cf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009cf6:	bf04      	itt	eq
 8009cf8:	0080      	lsleq	r0, r0, #2
 8009cfa:	3302      	addeq	r3, #2
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	db05      	blt.n	8009d0c <__hi0bits+0x38>
 8009d00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d04:	f103 0301 	add.w	r3, r3, #1
 8009d08:	bf08      	it	eq
 8009d0a:	2320      	moveq	r3, #32
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	4770      	bx	lr
 8009d10:	2300      	movs	r3, #0
 8009d12:	e7e4      	b.n	8009cde <__hi0bits+0xa>

08009d14 <__lo0bits>:
 8009d14:	6803      	ldr	r3, [r0, #0]
 8009d16:	f013 0207 	ands.w	r2, r3, #7
 8009d1a:	4601      	mov	r1, r0
 8009d1c:	d00b      	beq.n	8009d36 <__lo0bits+0x22>
 8009d1e:	07da      	lsls	r2, r3, #31
 8009d20:	d424      	bmi.n	8009d6c <__lo0bits+0x58>
 8009d22:	0798      	lsls	r0, r3, #30
 8009d24:	bf49      	itett	mi
 8009d26:	085b      	lsrmi	r3, r3, #1
 8009d28:	089b      	lsrpl	r3, r3, #2
 8009d2a:	2001      	movmi	r0, #1
 8009d2c:	600b      	strmi	r3, [r1, #0]
 8009d2e:	bf5c      	itt	pl
 8009d30:	600b      	strpl	r3, [r1, #0]
 8009d32:	2002      	movpl	r0, #2
 8009d34:	4770      	bx	lr
 8009d36:	b298      	uxth	r0, r3
 8009d38:	b9b0      	cbnz	r0, 8009d68 <__lo0bits+0x54>
 8009d3a:	0c1b      	lsrs	r3, r3, #16
 8009d3c:	2010      	movs	r0, #16
 8009d3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d42:	bf04      	itt	eq
 8009d44:	0a1b      	lsreq	r3, r3, #8
 8009d46:	3008      	addeq	r0, #8
 8009d48:	071a      	lsls	r2, r3, #28
 8009d4a:	bf04      	itt	eq
 8009d4c:	091b      	lsreq	r3, r3, #4
 8009d4e:	3004      	addeq	r0, #4
 8009d50:	079a      	lsls	r2, r3, #30
 8009d52:	bf04      	itt	eq
 8009d54:	089b      	lsreq	r3, r3, #2
 8009d56:	3002      	addeq	r0, #2
 8009d58:	07da      	lsls	r2, r3, #31
 8009d5a:	d403      	bmi.n	8009d64 <__lo0bits+0x50>
 8009d5c:	085b      	lsrs	r3, r3, #1
 8009d5e:	f100 0001 	add.w	r0, r0, #1
 8009d62:	d005      	beq.n	8009d70 <__lo0bits+0x5c>
 8009d64:	600b      	str	r3, [r1, #0]
 8009d66:	4770      	bx	lr
 8009d68:	4610      	mov	r0, r2
 8009d6a:	e7e8      	b.n	8009d3e <__lo0bits+0x2a>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	4770      	bx	lr
 8009d70:	2020      	movs	r0, #32
 8009d72:	4770      	bx	lr

08009d74 <__i2b>:
 8009d74:	b510      	push	{r4, lr}
 8009d76:	460c      	mov	r4, r1
 8009d78:	2101      	movs	r1, #1
 8009d7a:	f7ff feff 	bl	8009b7c <_Balloc>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	b928      	cbnz	r0, 8009d8e <__i2b+0x1a>
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <__i2b+0x24>)
 8009d84:	4805      	ldr	r0, [pc, #20]	; (8009d9c <__i2b+0x28>)
 8009d86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d8a:	f000 fc9b 	bl	800a6c4 <__assert_func>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	6144      	str	r4, [r0, #20]
 8009d92:	6103      	str	r3, [r0, #16]
 8009d94:	bd10      	pop	{r4, pc}
 8009d96:	bf00      	nop
 8009d98:	0800b3c7 	.word	0x0800b3c7
 8009d9c:	0800b3d8 	.word	0x0800b3d8

08009da0 <__multiply>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	4614      	mov	r4, r2
 8009da6:	690a      	ldr	r2, [r1, #16]
 8009da8:	6923      	ldr	r3, [r4, #16]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	bfb8      	it	lt
 8009dae:	460b      	movlt	r3, r1
 8009db0:	460d      	mov	r5, r1
 8009db2:	bfbc      	itt	lt
 8009db4:	4625      	movlt	r5, r4
 8009db6:	461c      	movlt	r4, r3
 8009db8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009dbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009dc0:	68ab      	ldr	r3, [r5, #8]
 8009dc2:	6869      	ldr	r1, [r5, #4]
 8009dc4:	eb0a 0709 	add.w	r7, sl, r9
 8009dc8:	42bb      	cmp	r3, r7
 8009dca:	b085      	sub	sp, #20
 8009dcc:	bfb8      	it	lt
 8009dce:	3101      	addlt	r1, #1
 8009dd0:	f7ff fed4 	bl	8009b7c <_Balloc>
 8009dd4:	b930      	cbnz	r0, 8009de4 <__multiply+0x44>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	4b42      	ldr	r3, [pc, #264]	; (8009ee4 <__multiply+0x144>)
 8009dda:	4843      	ldr	r0, [pc, #268]	; (8009ee8 <__multiply+0x148>)
 8009ddc:	f240 115d 	movw	r1, #349	; 0x15d
 8009de0:	f000 fc70 	bl	800a6c4 <__assert_func>
 8009de4:	f100 0614 	add.w	r6, r0, #20
 8009de8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009dec:	4633      	mov	r3, r6
 8009dee:	2200      	movs	r2, #0
 8009df0:	4543      	cmp	r3, r8
 8009df2:	d31e      	bcc.n	8009e32 <__multiply+0x92>
 8009df4:	f105 0c14 	add.w	ip, r5, #20
 8009df8:	f104 0314 	add.w	r3, r4, #20
 8009dfc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009e00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009e04:	9202      	str	r2, [sp, #8]
 8009e06:	ebac 0205 	sub.w	r2, ip, r5
 8009e0a:	3a15      	subs	r2, #21
 8009e0c:	f022 0203 	bic.w	r2, r2, #3
 8009e10:	3204      	adds	r2, #4
 8009e12:	f105 0115 	add.w	r1, r5, #21
 8009e16:	458c      	cmp	ip, r1
 8009e18:	bf38      	it	cc
 8009e1a:	2204      	movcc	r2, #4
 8009e1c:	9201      	str	r2, [sp, #4]
 8009e1e:	9a02      	ldr	r2, [sp, #8]
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d808      	bhi.n	8009e38 <__multiply+0x98>
 8009e26:	2f00      	cmp	r7, #0
 8009e28:	dc55      	bgt.n	8009ed6 <__multiply+0x136>
 8009e2a:	6107      	str	r7, [r0, #16]
 8009e2c:	b005      	add	sp, #20
 8009e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e32:	f843 2b04 	str.w	r2, [r3], #4
 8009e36:	e7db      	b.n	8009df0 <__multiply+0x50>
 8009e38:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e3c:	f1ba 0f00 	cmp.w	sl, #0
 8009e40:	d020      	beq.n	8009e84 <__multiply+0xe4>
 8009e42:	f105 0e14 	add.w	lr, r5, #20
 8009e46:	46b1      	mov	r9, r6
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009e4e:	f8d9 b000 	ldr.w	fp, [r9]
 8009e52:	b2a1      	uxth	r1, r4
 8009e54:	fa1f fb8b 	uxth.w	fp, fp
 8009e58:	fb0a b101 	mla	r1, sl, r1, fp
 8009e5c:	4411      	add	r1, r2
 8009e5e:	f8d9 2000 	ldr.w	r2, [r9]
 8009e62:	0c24      	lsrs	r4, r4, #16
 8009e64:	0c12      	lsrs	r2, r2, #16
 8009e66:	fb0a 2404 	mla	r4, sl, r4, r2
 8009e6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009e6e:	b289      	uxth	r1, r1
 8009e70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e74:	45f4      	cmp	ip, lr
 8009e76:	f849 1b04 	str.w	r1, [r9], #4
 8009e7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009e7e:	d8e4      	bhi.n	8009e4a <__multiply+0xaa>
 8009e80:	9901      	ldr	r1, [sp, #4]
 8009e82:	5072      	str	r2, [r6, r1]
 8009e84:	9a03      	ldr	r2, [sp, #12]
 8009e86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	f1b9 0f00 	cmp.w	r9, #0
 8009e90:	d01f      	beq.n	8009ed2 <__multiply+0x132>
 8009e92:	6834      	ldr	r4, [r6, #0]
 8009e94:	f105 0114 	add.w	r1, r5, #20
 8009e98:	46b6      	mov	lr, r6
 8009e9a:	f04f 0a00 	mov.w	sl, #0
 8009e9e:	880a      	ldrh	r2, [r1, #0]
 8009ea0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ea4:	fb09 b202 	mla	r2, r9, r2, fp
 8009ea8:	4492      	add	sl, r2
 8009eaa:	b2a4      	uxth	r4, r4
 8009eac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009eb0:	f84e 4b04 	str.w	r4, [lr], #4
 8009eb4:	f851 4b04 	ldr.w	r4, [r1], #4
 8009eb8:	f8be 2000 	ldrh.w	r2, [lr]
 8009ebc:	0c24      	lsrs	r4, r4, #16
 8009ebe:	fb09 2404 	mla	r4, r9, r4, r2
 8009ec2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ec6:	458c      	cmp	ip, r1
 8009ec8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ecc:	d8e7      	bhi.n	8009e9e <__multiply+0xfe>
 8009ece:	9a01      	ldr	r2, [sp, #4]
 8009ed0:	50b4      	str	r4, [r6, r2]
 8009ed2:	3604      	adds	r6, #4
 8009ed4:	e7a3      	b.n	8009e1e <__multiply+0x7e>
 8009ed6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1a5      	bne.n	8009e2a <__multiply+0x8a>
 8009ede:	3f01      	subs	r7, #1
 8009ee0:	e7a1      	b.n	8009e26 <__multiply+0x86>
 8009ee2:	bf00      	nop
 8009ee4:	0800b3c7 	.word	0x0800b3c7
 8009ee8:	0800b3d8 	.word	0x0800b3d8

08009eec <__pow5mult>:
 8009eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef0:	4615      	mov	r5, r2
 8009ef2:	f012 0203 	ands.w	r2, r2, #3
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460f      	mov	r7, r1
 8009efa:	d007      	beq.n	8009f0c <__pow5mult+0x20>
 8009efc:	4c25      	ldr	r4, [pc, #148]	; (8009f94 <__pow5mult+0xa8>)
 8009efe:	3a01      	subs	r2, #1
 8009f00:	2300      	movs	r3, #0
 8009f02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f06:	f7ff fe9b 	bl	8009c40 <__multadd>
 8009f0a:	4607      	mov	r7, r0
 8009f0c:	10ad      	asrs	r5, r5, #2
 8009f0e:	d03d      	beq.n	8009f8c <__pow5mult+0xa0>
 8009f10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f12:	b97c      	cbnz	r4, 8009f34 <__pow5mult+0x48>
 8009f14:	2010      	movs	r0, #16
 8009f16:	f7ff fe1b 	bl	8009b50 <malloc>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	6270      	str	r0, [r6, #36]	; 0x24
 8009f1e:	b928      	cbnz	r0, 8009f2c <__pow5mult+0x40>
 8009f20:	4b1d      	ldr	r3, [pc, #116]	; (8009f98 <__pow5mult+0xac>)
 8009f22:	481e      	ldr	r0, [pc, #120]	; (8009f9c <__pow5mult+0xb0>)
 8009f24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f28:	f000 fbcc 	bl	800a6c4 <__assert_func>
 8009f2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f30:	6004      	str	r4, [r0, #0]
 8009f32:	60c4      	str	r4, [r0, #12]
 8009f34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f3c:	b94c      	cbnz	r4, 8009f52 <__pow5mult+0x66>
 8009f3e:	f240 2171 	movw	r1, #625	; 0x271
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7ff ff16 	bl	8009d74 <__i2b>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f4e:	4604      	mov	r4, r0
 8009f50:	6003      	str	r3, [r0, #0]
 8009f52:	f04f 0900 	mov.w	r9, #0
 8009f56:	07eb      	lsls	r3, r5, #31
 8009f58:	d50a      	bpl.n	8009f70 <__pow5mult+0x84>
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	4622      	mov	r2, r4
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f7ff ff1e 	bl	8009da0 <__multiply>
 8009f64:	4639      	mov	r1, r7
 8009f66:	4680      	mov	r8, r0
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7ff fe47 	bl	8009bfc <_Bfree>
 8009f6e:	4647      	mov	r7, r8
 8009f70:	106d      	asrs	r5, r5, #1
 8009f72:	d00b      	beq.n	8009f8c <__pow5mult+0xa0>
 8009f74:	6820      	ldr	r0, [r4, #0]
 8009f76:	b938      	cbnz	r0, 8009f88 <__pow5mult+0x9c>
 8009f78:	4622      	mov	r2, r4
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7ff ff0f 	bl	8009da0 <__multiply>
 8009f82:	6020      	str	r0, [r4, #0]
 8009f84:	f8c0 9000 	str.w	r9, [r0]
 8009f88:	4604      	mov	r4, r0
 8009f8a:	e7e4      	b.n	8009f56 <__pow5mult+0x6a>
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f92:	bf00      	nop
 8009f94:	0800b528 	.word	0x0800b528
 8009f98:	0800b351 	.word	0x0800b351
 8009f9c:	0800b3d8 	.word	0x0800b3d8

08009fa0 <__lshift>:
 8009fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	6849      	ldr	r1, [r1, #4]
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fae:	68a3      	ldr	r3, [r4, #8]
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	4691      	mov	r9, r2
 8009fb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fb8:	f108 0601 	add.w	r6, r8, #1
 8009fbc:	42b3      	cmp	r3, r6
 8009fbe:	db0b      	blt.n	8009fd8 <__lshift+0x38>
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7ff fddb 	bl	8009b7c <_Balloc>
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	b948      	cbnz	r0, 8009fde <__lshift+0x3e>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	4b28      	ldr	r3, [pc, #160]	; (800a070 <__lshift+0xd0>)
 8009fce:	4829      	ldr	r0, [pc, #164]	; (800a074 <__lshift+0xd4>)
 8009fd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fd4:	f000 fb76 	bl	800a6c4 <__assert_func>
 8009fd8:	3101      	adds	r1, #1
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	e7ee      	b.n	8009fbc <__lshift+0x1c>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f100 0114 	add.w	r1, r0, #20
 8009fe4:	f100 0210 	add.w	r2, r0, #16
 8009fe8:	4618      	mov	r0, r3
 8009fea:	4553      	cmp	r3, sl
 8009fec:	db33      	blt.n	800a056 <__lshift+0xb6>
 8009fee:	6920      	ldr	r0, [r4, #16]
 8009ff0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ff4:	f104 0314 	add.w	r3, r4, #20
 8009ff8:	f019 091f 	ands.w	r9, r9, #31
 8009ffc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a000:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a004:	d02b      	beq.n	800a05e <__lshift+0xbe>
 800a006:	f1c9 0e20 	rsb	lr, r9, #32
 800a00a:	468a      	mov	sl, r1
 800a00c:	2200      	movs	r2, #0
 800a00e:	6818      	ldr	r0, [r3, #0]
 800a010:	fa00 f009 	lsl.w	r0, r0, r9
 800a014:	4302      	orrs	r2, r0
 800a016:	f84a 2b04 	str.w	r2, [sl], #4
 800a01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01e:	459c      	cmp	ip, r3
 800a020:	fa22 f20e 	lsr.w	r2, r2, lr
 800a024:	d8f3      	bhi.n	800a00e <__lshift+0x6e>
 800a026:	ebac 0304 	sub.w	r3, ip, r4
 800a02a:	3b15      	subs	r3, #21
 800a02c:	f023 0303 	bic.w	r3, r3, #3
 800a030:	3304      	adds	r3, #4
 800a032:	f104 0015 	add.w	r0, r4, #21
 800a036:	4584      	cmp	ip, r0
 800a038:	bf38      	it	cc
 800a03a:	2304      	movcc	r3, #4
 800a03c:	50ca      	str	r2, [r1, r3]
 800a03e:	b10a      	cbz	r2, 800a044 <__lshift+0xa4>
 800a040:	f108 0602 	add.w	r6, r8, #2
 800a044:	3e01      	subs	r6, #1
 800a046:	4638      	mov	r0, r7
 800a048:	612e      	str	r6, [r5, #16]
 800a04a:	4621      	mov	r1, r4
 800a04c:	f7ff fdd6 	bl	8009bfc <_Bfree>
 800a050:	4628      	mov	r0, r5
 800a052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a056:	f842 0f04 	str.w	r0, [r2, #4]!
 800a05a:	3301      	adds	r3, #1
 800a05c:	e7c5      	b.n	8009fea <__lshift+0x4a>
 800a05e:	3904      	subs	r1, #4
 800a060:	f853 2b04 	ldr.w	r2, [r3], #4
 800a064:	f841 2f04 	str.w	r2, [r1, #4]!
 800a068:	459c      	cmp	ip, r3
 800a06a:	d8f9      	bhi.n	800a060 <__lshift+0xc0>
 800a06c:	e7ea      	b.n	800a044 <__lshift+0xa4>
 800a06e:	bf00      	nop
 800a070:	0800b3c7 	.word	0x0800b3c7
 800a074:	0800b3d8 	.word	0x0800b3d8

0800a078 <__mcmp>:
 800a078:	b530      	push	{r4, r5, lr}
 800a07a:	6902      	ldr	r2, [r0, #16]
 800a07c:	690c      	ldr	r4, [r1, #16]
 800a07e:	1b12      	subs	r2, r2, r4
 800a080:	d10e      	bne.n	800a0a0 <__mcmp+0x28>
 800a082:	f100 0314 	add.w	r3, r0, #20
 800a086:	3114      	adds	r1, #20
 800a088:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a08c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a090:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a094:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a098:	42a5      	cmp	r5, r4
 800a09a:	d003      	beq.n	800a0a4 <__mcmp+0x2c>
 800a09c:	d305      	bcc.n	800a0aa <__mcmp+0x32>
 800a09e:	2201      	movs	r2, #1
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	bd30      	pop	{r4, r5, pc}
 800a0a4:	4283      	cmp	r3, r0
 800a0a6:	d3f3      	bcc.n	800a090 <__mcmp+0x18>
 800a0a8:	e7fa      	b.n	800a0a0 <__mcmp+0x28>
 800a0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ae:	e7f7      	b.n	800a0a0 <__mcmp+0x28>

0800a0b0 <__mdiff>:
 800a0b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	4617      	mov	r7, r2
 800a0be:	f7ff ffdb 	bl	800a078 <__mcmp>
 800a0c2:	1e05      	subs	r5, r0, #0
 800a0c4:	d110      	bne.n	800a0e8 <__mdiff+0x38>
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7ff fd57 	bl	8009b7c <_Balloc>
 800a0ce:	b930      	cbnz	r0, 800a0de <__mdiff+0x2e>
 800a0d0:	4b39      	ldr	r3, [pc, #228]	; (800a1b8 <__mdiff+0x108>)
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	f240 2132 	movw	r1, #562	; 0x232
 800a0d8:	4838      	ldr	r0, [pc, #224]	; (800a1bc <__mdiff+0x10c>)
 800a0da:	f000 faf3 	bl	800a6c4 <__assert_func>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	bfa4      	itt	ge
 800a0ea:	463b      	movge	r3, r7
 800a0ec:	4627      	movge	r7, r4
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	bfa6      	itte	ge
 800a0f4:	461c      	movge	r4, r3
 800a0f6:	2500      	movge	r5, #0
 800a0f8:	2501      	movlt	r5, #1
 800a0fa:	f7ff fd3f 	bl	8009b7c <_Balloc>
 800a0fe:	b920      	cbnz	r0, 800a10a <__mdiff+0x5a>
 800a100:	4b2d      	ldr	r3, [pc, #180]	; (800a1b8 <__mdiff+0x108>)
 800a102:	4602      	mov	r2, r0
 800a104:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a108:	e7e6      	b.n	800a0d8 <__mdiff+0x28>
 800a10a:	693e      	ldr	r6, [r7, #16]
 800a10c:	60c5      	str	r5, [r0, #12]
 800a10e:	6925      	ldr	r5, [r4, #16]
 800a110:	f107 0114 	add.w	r1, r7, #20
 800a114:	f104 0914 	add.w	r9, r4, #20
 800a118:	f100 0e14 	add.w	lr, r0, #20
 800a11c:	f107 0210 	add.w	r2, r7, #16
 800a120:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a124:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a128:	46f2      	mov	sl, lr
 800a12a:	2700      	movs	r7, #0
 800a12c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a130:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a134:	fa1f f883 	uxth.w	r8, r3
 800a138:	fa17 f78b 	uxtah	r7, r7, fp
 800a13c:	0c1b      	lsrs	r3, r3, #16
 800a13e:	eba7 0808 	sub.w	r8, r7, r8
 800a142:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a146:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a14a:	fa1f f888 	uxth.w	r8, r8
 800a14e:	141f      	asrs	r7, r3, #16
 800a150:	454d      	cmp	r5, r9
 800a152:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a156:	f84a 3b04 	str.w	r3, [sl], #4
 800a15a:	d8e7      	bhi.n	800a12c <__mdiff+0x7c>
 800a15c:	1b2b      	subs	r3, r5, r4
 800a15e:	3b15      	subs	r3, #21
 800a160:	f023 0303 	bic.w	r3, r3, #3
 800a164:	3304      	adds	r3, #4
 800a166:	3415      	adds	r4, #21
 800a168:	42a5      	cmp	r5, r4
 800a16a:	bf38      	it	cc
 800a16c:	2304      	movcc	r3, #4
 800a16e:	4419      	add	r1, r3
 800a170:	4473      	add	r3, lr
 800a172:	469e      	mov	lr, r3
 800a174:	460d      	mov	r5, r1
 800a176:	4565      	cmp	r5, ip
 800a178:	d30e      	bcc.n	800a198 <__mdiff+0xe8>
 800a17a:	f10c 0203 	add.w	r2, ip, #3
 800a17e:	1a52      	subs	r2, r2, r1
 800a180:	f022 0203 	bic.w	r2, r2, #3
 800a184:	3903      	subs	r1, #3
 800a186:	458c      	cmp	ip, r1
 800a188:	bf38      	it	cc
 800a18a:	2200      	movcc	r2, #0
 800a18c:	441a      	add	r2, r3
 800a18e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a192:	b17b      	cbz	r3, 800a1b4 <__mdiff+0x104>
 800a194:	6106      	str	r6, [r0, #16]
 800a196:	e7a5      	b.n	800a0e4 <__mdiff+0x34>
 800a198:	f855 8b04 	ldr.w	r8, [r5], #4
 800a19c:	fa17 f488 	uxtah	r4, r7, r8
 800a1a0:	1422      	asrs	r2, r4, #16
 800a1a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a1a6:	b2a4      	uxth	r4, r4
 800a1a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a1ac:	f84e 4b04 	str.w	r4, [lr], #4
 800a1b0:	1417      	asrs	r7, r2, #16
 800a1b2:	e7e0      	b.n	800a176 <__mdiff+0xc6>
 800a1b4:	3e01      	subs	r6, #1
 800a1b6:	e7ea      	b.n	800a18e <__mdiff+0xde>
 800a1b8:	0800b3c7 	.word	0x0800b3c7
 800a1bc:	0800b3d8 	.word	0x0800b3d8

0800a1c0 <__d2b>:
 800a1c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1c4:	4689      	mov	r9, r1
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	ec57 6b10 	vmov	r6, r7, d0
 800a1cc:	4690      	mov	r8, r2
 800a1ce:	f7ff fcd5 	bl	8009b7c <_Balloc>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	b930      	cbnz	r0, 800a1e4 <__d2b+0x24>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	4b25      	ldr	r3, [pc, #148]	; (800a270 <__d2b+0xb0>)
 800a1da:	4826      	ldr	r0, [pc, #152]	; (800a274 <__d2b+0xb4>)
 800a1dc:	f240 310a 	movw	r1, #778	; 0x30a
 800a1e0:	f000 fa70 	bl	800a6c4 <__assert_func>
 800a1e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a1e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1ec:	bb35      	cbnz	r5, 800a23c <__d2b+0x7c>
 800a1ee:	2e00      	cmp	r6, #0
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	d028      	beq.n	800a246 <__d2b+0x86>
 800a1f4:	4668      	mov	r0, sp
 800a1f6:	9600      	str	r6, [sp, #0]
 800a1f8:	f7ff fd8c 	bl	8009d14 <__lo0bits>
 800a1fc:	9900      	ldr	r1, [sp, #0]
 800a1fe:	b300      	cbz	r0, 800a242 <__d2b+0x82>
 800a200:	9a01      	ldr	r2, [sp, #4]
 800a202:	f1c0 0320 	rsb	r3, r0, #32
 800a206:	fa02 f303 	lsl.w	r3, r2, r3
 800a20a:	430b      	orrs	r3, r1
 800a20c:	40c2      	lsrs	r2, r0
 800a20e:	6163      	str	r3, [r4, #20]
 800a210:	9201      	str	r2, [sp, #4]
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	61a3      	str	r3, [r4, #24]
 800a216:	2b00      	cmp	r3, #0
 800a218:	bf14      	ite	ne
 800a21a:	2202      	movne	r2, #2
 800a21c:	2201      	moveq	r2, #1
 800a21e:	6122      	str	r2, [r4, #16]
 800a220:	b1d5      	cbz	r5, 800a258 <__d2b+0x98>
 800a222:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a226:	4405      	add	r5, r0
 800a228:	f8c9 5000 	str.w	r5, [r9]
 800a22c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a230:	f8c8 0000 	str.w	r0, [r8]
 800a234:	4620      	mov	r0, r4
 800a236:	b003      	add	sp, #12
 800a238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a23c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a240:	e7d5      	b.n	800a1ee <__d2b+0x2e>
 800a242:	6161      	str	r1, [r4, #20]
 800a244:	e7e5      	b.n	800a212 <__d2b+0x52>
 800a246:	a801      	add	r0, sp, #4
 800a248:	f7ff fd64 	bl	8009d14 <__lo0bits>
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	6163      	str	r3, [r4, #20]
 800a250:	2201      	movs	r2, #1
 800a252:	6122      	str	r2, [r4, #16]
 800a254:	3020      	adds	r0, #32
 800a256:	e7e3      	b.n	800a220 <__d2b+0x60>
 800a258:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a25c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a260:	f8c9 0000 	str.w	r0, [r9]
 800a264:	6918      	ldr	r0, [r3, #16]
 800a266:	f7ff fd35 	bl	8009cd4 <__hi0bits>
 800a26a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a26e:	e7df      	b.n	800a230 <__d2b+0x70>
 800a270:	0800b3c7 	.word	0x0800b3c7
 800a274:	0800b3d8 	.word	0x0800b3d8

0800a278 <_calloc_r>:
 800a278:	b513      	push	{r0, r1, r4, lr}
 800a27a:	434a      	muls	r2, r1
 800a27c:	4611      	mov	r1, r2
 800a27e:	9201      	str	r2, [sp, #4]
 800a280:	f000 f85a 	bl	800a338 <_malloc_r>
 800a284:	4604      	mov	r4, r0
 800a286:	b118      	cbz	r0, 800a290 <_calloc_r+0x18>
 800a288:	9a01      	ldr	r2, [sp, #4]
 800a28a:	2100      	movs	r1, #0
 800a28c:	f7fe f94a 	bl	8008524 <memset>
 800a290:	4620      	mov	r0, r4
 800a292:	b002      	add	sp, #8
 800a294:	bd10      	pop	{r4, pc}
	...

0800a298 <_free_r>:
 800a298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a29a:	2900      	cmp	r1, #0
 800a29c:	d048      	beq.n	800a330 <_free_r+0x98>
 800a29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a2:	9001      	str	r0, [sp, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a2aa:	bfb8      	it	lt
 800a2ac:	18e4      	addlt	r4, r4, r3
 800a2ae:	f000 fa65 	bl	800a77c <__malloc_lock>
 800a2b2:	4a20      	ldr	r2, [pc, #128]	; (800a334 <_free_r+0x9c>)
 800a2b4:	9801      	ldr	r0, [sp, #4]
 800a2b6:	6813      	ldr	r3, [r2, #0]
 800a2b8:	4615      	mov	r5, r2
 800a2ba:	b933      	cbnz	r3, 800a2ca <_free_r+0x32>
 800a2bc:	6063      	str	r3, [r4, #4]
 800a2be:	6014      	str	r4, [r2, #0]
 800a2c0:	b003      	add	sp, #12
 800a2c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2c6:	f000 ba5f 	b.w	800a788 <__malloc_unlock>
 800a2ca:	42a3      	cmp	r3, r4
 800a2cc:	d90b      	bls.n	800a2e6 <_free_r+0x4e>
 800a2ce:	6821      	ldr	r1, [r4, #0]
 800a2d0:	1862      	adds	r2, r4, r1
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	bf04      	itt	eq
 800a2d6:	681a      	ldreq	r2, [r3, #0]
 800a2d8:	685b      	ldreq	r3, [r3, #4]
 800a2da:	6063      	str	r3, [r4, #4]
 800a2dc:	bf04      	itt	eq
 800a2de:	1852      	addeq	r2, r2, r1
 800a2e0:	6022      	streq	r2, [r4, #0]
 800a2e2:	602c      	str	r4, [r5, #0]
 800a2e4:	e7ec      	b.n	800a2c0 <_free_r+0x28>
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	b10b      	cbz	r3, 800a2f0 <_free_r+0x58>
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	d9fa      	bls.n	800a2e6 <_free_r+0x4e>
 800a2f0:	6811      	ldr	r1, [r2, #0]
 800a2f2:	1855      	adds	r5, r2, r1
 800a2f4:	42a5      	cmp	r5, r4
 800a2f6:	d10b      	bne.n	800a310 <_free_r+0x78>
 800a2f8:	6824      	ldr	r4, [r4, #0]
 800a2fa:	4421      	add	r1, r4
 800a2fc:	1854      	adds	r4, r2, r1
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	6011      	str	r1, [r2, #0]
 800a302:	d1dd      	bne.n	800a2c0 <_free_r+0x28>
 800a304:	681c      	ldr	r4, [r3, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	6053      	str	r3, [r2, #4]
 800a30a:	4421      	add	r1, r4
 800a30c:	6011      	str	r1, [r2, #0]
 800a30e:	e7d7      	b.n	800a2c0 <_free_r+0x28>
 800a310:	d902      	bls.n	800a318 <_free_r+0x80>
 800a312:	230c      	movs	r3, #12
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	e7d3      	b.n	800a2c0 <_free_r+0x28>
 800a318:	6825      	ldr	r5, [r4, #0]
 800a31a:	1961      	adds	r1, r4, r5
 800a31c:	428b      	cmp	r3, r1
 800a31e:	bf04      	itt	eq
 800a320:	6819      	ldreq	r1, [r3, #0]
 800a322:	685b      	ldreq	r3, [r3, #4]
 800a324:	6063      	str	r3, [r4, #4]
 800a326:	bf04      	itt	eq
 800a328:	1949      	addeq	r1, r1, r5
 800a32a:	6021      	streq	r1, [r4, #0]
 800a32c:	6054      	str	r4, [r2, #4]
 800a32e:	e7c7      	b.n	800a2c0 <_free_r+0x28>
 800a330:	b003      	add	sp, #12
 800a332:	bd30      	pop	{r4, r5, pc}
 800a334:	20000204 	.word	0x20000204

0800a338 <_malloc_r>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	1ccd      	adds	r5, r1, #3
 800a33c:	f025 0503 	bic.w	r5, r5, #3
 800a340:	3508      	adds	r5, #8
 800a342:	2d0c      	cmp	r5, #12
 800a344:	bf38      	it	cc
 800a346:	250c      	movcc	r5, #12
 800a348:	2d00      	cmp	r5, #0
 800a34a:	4606      	mov	r6, r0
 800a34c:	db01      	blt.n	800a352 <_malloc_r+0x1a>
 800a34e:	42a9      	cmp	r1, r5
 800a350:	d903      	bls.n	800a35a <_malloc_r+0x22>
 800a352:	230c      	movs	r3, #12
 800a354:	6033      	str	r3, [r6, #0]
 800a356:	2000      	movs	r0, #0
 800a358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a35a:	f000 fa0f 	bl	800a77c <__malloc_lock>
 800a35e:	4921      	ldr	r1, [pc, #132]	; (800a3e4 <_malloc_r+0xac>)
 800a360:	680a      	ldr	r2, [r1, #0]
 800a362:	4614      	mov	r4, r2
 800a364:	b99c      	cbnz	r4, 800a38e <_malloc_r+0x56>
 800a366:	4f20      	ldr	r7, [pc, #128]	; (800a3e8 <_malloc_r+0xb0>)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	b923      	cbnz	r3, 800a376 <_malloc_r+0x3e>
 800a36c:	4621      	mov	r1, r4
 800a36e:	4630      	mov	r0, r6
 800a370:	f000 f998 	bl	800a6a4 <_sbrk_r>
 800a374:	6038      	str	r0, [r7, #0]
 800a376:	4629      	mov	r1, r5
 800a378:	4630      	mov	r0, r6
 800a37a:	f000 f993 	bl	800a6a4 <_sbrk_r>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d123      	bne.n	800a3ca <_malloc_r+0x92>
 800a382:	230c      	movs	r3, #12
 800a384:	6033      	str	r3, [r6, #0]
 800a386:	4630      	mov	r0, r6
 800a388:	f000 f9fe 	bl	800a788 <__malloc_unlock>
 800a38c:	e7e3      	b.n	800a356 <_malloc_r+0x1e>
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	1b5b      	subs	r3, r3, r5
 800a392:	d417      	bmi.n	800a3c4 <_malloc_r+0x8c>
 800a394:	2b0b      	cmp	r3, #11
 800a396:	d903      	bls.n	800a3a0 <_malloc_r+0x68>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	441c      	add	r4, r3
 800a39c:	6025      	str	r5, [r4, #0]
 800a39e:	e004      	b.n	800a3aa <_malloc_r+0x72>
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	42a2      	cmp	r2, r4
 800a3a4:	bf0c      	ite	eq
 800a3a6:	600b      	streq	r3, [r1, #0]
 800a3a8:	6053      	strne	r3, [r2, #4]
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f000 f9ec 	bl	800a788 <__malloc_unlock>
 800a3b0:	f104 000b 	add.w	r0, r4, #11
 800a3b4:	1d23      	adds	r3, r4, #4
 800a3b6:	f020 0007 	bic.w	r0, r0, #7
 800a3ba:	1ac2      	subs	r2, r0, r3
 800a3bc:	d0cc      	beq.n	800a358 <_malloc_r+0x20>
 800a3be:	1a1b      	subs	r3, r3, r0
 800a3c0:	50a3      	str	r3, [r4, r2]
 800a3c2:	e7c9      	b.n	800a358 <_malloc_r+0x20>
 800a3c4:	4622      	mov	r2, r4
 800a3c6:	6864      	ldr	r4, [r4, #4]
 800a3c8:	e7cc      	b.n	800a364 <_malloc_r+0x2c>
 800a3ca:	1cc4      	adds	r4, r0, #3
 800a3cc:	f024 0403 	bic.w	r4, r4, #3
 800a3d0:	42a0      	cmp	r0, r4
 800a3d2:	d0e3      	beq.n	800a39c <_malloc_r+0x64>
 800a3d4:	1a21      	subs	r1, r4, r0
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f000 f964 	bl	800a6a4 <_sbrk_r>
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d1dd      	bne.n	800a39c <_malloc_r+0x64>
 800a3e0:	e7cf      	b.n	800a382 <_malloc_r+0x4a>
 800a3e2:	bf00      	nop
 800a3e4:	20000204 	.word	0x20000204
 800a3e8:	20000208 	.word	0x20000208

0800a3ec <__ssputs_r>:
 800a3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f0:	688e      	ldr	r6, [r1, #8]
 800a3f2:	429e      	cmp	r6, r3
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	4690      	mov	r8, r2
 800a3fa:	461f      	mov	r7, r3
 800a3fc:	d838      	bhi.n	800a470 <__ssputs_r+0x84>
 800a3fe:	898a      	ldrh	r2, [r1, #12]
 800a400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a404:	d032      	beq.n	800a46c <__ssputs_r+0x80>
 800a406:	6825      	ldr	r5, [r4, #0]
 800a408:	6909      	ldr	r1, [r1, #16]
 800a40a:	eba5 0901 	sub.w	r9, r5, r1
 800a40e:	6965      	ldr	r5, [r4, #20]
 800a410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a418:	3301      	adds	r3, #1
 800a41a:	444b      	add	r3, r9
 800a41c:	106d      	asrs	r5, r5, #1
 800a41e:	429d      	cmp	r5, r3
 800a420:	bf38      	it	cc
 800a422:	461d      	movcc	r5, r3
 800a424:	0553      	lsls	r3, r2, #21
 800a426:	d531      	bpl.n	800a48c <__ssputs_r+0xa0>
 800a428:	4629      	mov	r1, r5
 800a42a:	f7ff ff85 	bl	800a338 <_malloc_r>
 800a42e:	4606      	mov	r6, r0
 800a430:	b950      	cbnz	r0, 800a448 <__ssputs_r+0x5c>
 800a432:	230c      	movs	r3, #12
 800a434:	f8ca 3000 	str.w	r3, [sl]
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a43e:	81a3      	strh	r3, [r4, #12]
 800a440:	f04f 30ff 	mov.w	r0, #4294967295
 800a444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a448:	6921      	ldr	r1, [r4, #16]
 800a44a:	464a      	mov	r2, r9
 800a44c:	f7ff fb88 	bl	8009b60 <memcpy>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	6126      	str	r6, [r4, #16]
 800a45e:	6165      	str	r5, [r4, #20]
 800a460:	444e      	add	r6, r9
 800a462:	eba5 0509 	sub.w	r5, r5, r9
 800a466:	6026      	str	r6, [r4, #0]
 800a468:	60a5      	str	r5, [r4, #8]
 800a46a:	463e      	mov	r6, r7
 800a46c:	42be      	cmp	r6, r7
 800a46e:	d900      	bls.n	800a472 <__ssputs_r+0x86>
 800a470:	463e      	mov	r6, r7
 800a472:	4632      	mov	r2, r6
 800a474:	6820      	ldr	r0, [r4, #0]
 800a476:	4641      	mov	r1, r8
 800a478:	f000 f966 	bl	800a748 <memmove>
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	6822      	ldr	r2, [r4, #0]
 800a480:	1b9b      	subs	r3, r3, r6
 800a482:	4432      	add	r2, r6
 800a484:	60a3      	str	r3, [r4, #8]
 800a486:	6022      	str	r2, [r4, #0]
 800a488:	2000      	movs	r0, #0
 800a48a:	e7db      	b.n	800a444 <__ssputs_r+0x58>
 800a48c:	462a      	mov	r2, r5
 800a48e:	f000 f981 	bl	800a794 <_realloc_r>
 800a492:	4606      	mov	r6, r0
 800a494:	2800      	cmp	r0, #0
 800a496:	d1e1      	bne.n	800a45c <__ssputs_r+0x70>
 800a498:	6921      	ldr	r1, [r4, #16]
 800a49a:	4650      	mov	r0, sl
 800a49c:	f7ff fefc 	bl	800a298 <_free_r>
 800a4a0:	e7c7      	b.n	800a432 <__ssputs_r+0x46>
	...

0800a4a4 <_svfiprintf_r>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	4698      	mov	r8, r3
 800a4aa:	898b      	ldrh	r3, [r1, #12]
 800a4ac:	061b      	lsls	r3, r3, #24
 800a4ae:	b09d      	sub	sp, #116	; 0x74
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	4614      	mov	r4, r2
 800a4b6:	d50e      	bpl.n	800a4d6 <_svfiprintf_r+0x32>
 800a4b8:	690b      	ldr	r3, [r1, #16]
 800a4ba:	b963      	cbnz	r3, 800a4d6 <_svfiprintf_r+0x32>
 800a4bc:	2140      	movs	r1, #64	; 0x40
 800a4be:	f7ff ff3b 	bl	800a338 <_malloc_r>
 800a4c2:	6028      	str	r0, [r5, #0]
 800a4c4:	6128      	str	r0, [r5, #16]
 800a4c6:	b920      	cbnz	r0, 800a4d2 <_svfiprintf_r+0x2e>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	e0d1      	b.n	800a676 <_svfiprintf_r+0x1d2>
 800a4d2:	2340      	movs	r3, #64	; 0x40
 800a4d4:	616b      	str	r3, [r5, #20]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4da:	2320      	movs	r3, #32
 800a4dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4e4:	2330      	movs	r3, #48	; 0x30
 800a4e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a690 <_svfiprintf_r+0x1ec>
 800a4ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4ee:	f04f 0901 	mov.w	r9, #1
 800a4f2:	4623      	mov	r3, r4
 800a4f4:	469a      	mov	sl, r3
 800a4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4fa:	b10a      	cbz	r2, 800a500 <_svfiprintf_r+0x5c>
 800a4fc:	2a25      	cmp	r2, #37	; 0x25
 800a4fe:	d1f9      	bne.n	800a4f4 <_svfiprintf_r+0x50>
 800a500:	ebba 0b04 	subs.w	fp, sl, r4
 800a504:	d00b      	beq.n	800a51e <_svfiprintf_r+0x7a>
 800a506:	465b      	mov	r3, fp
 800a508:	4622      	mov	r2, r4
 800a50a:	4629      	mov	r1, r5
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff ff6d 	bl	800a3ec <__ssputs_r>
 800a512:	3001      	adds	r0, #1
 800a514:	f000 80aa 	beq.w	800a66c <_svfiprintf_r+0x1c8>
 800a518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a51a:	445a      	add	r2, fp
 800a51c:	9209      	str	r2, [sp, #36]	; 0x24
 800a51e:	f89a 3000 	ldrb.w	r3, [sl]
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 80a2 	beq.w	800a66c <_svfiprintf_r+0x1c8>
 800a528:	2300      	movs	r3, #0
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a532:	f10a 0a01 	add.w	sl, sl, #1
 800a536:	9304      	str	r3, [sp, #16]
 800a538:	9307      	str	r3, [sp, #28]
 800a53a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a53e:	931a      	str	r3, [sp, #104]	; 0x68
 800a540:	4654      	mov	r4, sl
 800a542:	2205      	movs	r2, #5
 800a544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a548:	4851      	ldr	r0, [pc, #324]	; (800a690 <_svfiprintf_r+0x1ec>)
 800a54a:	f7f5 fe51 	bl	80001f0 <memchr>
 800a54e:	9a04      	ldr	r2, [sp, #16]
 800a550:	b9d8      	cbnz	r0, 800a58a <_svfiprintf_r+0xe6>
 800a552:	06d0      	lsls	r0, r2, #27
 800a554:	bf44      	itt	mi
 800a556:	2320      	movmi	r3, #32
 800a558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55c:	0711      	lsls	r1, r2, #28
 800a55e:	bf44      	itt	mi
 800a560:	232b      	movmi	r3, #43	; 0x2b
 800a562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a566:	f89a 3000 	ldrb.w	r3, [sl]
 800a56a:	2b2a      	cmp	r3, #42	; 0x2a
 800a56c:	d015      	beq.n	800a59a <_svfiprintf_r+0xf6>
 800a56e:	9a07      	ldr	r2, [sp, #28]
 800a570:	4654      	mov	r4, sl
 800a572:	2000      	movs	r0, #0
 800a574:	f04f 0c0a 	mov.w	ip, #10
 800a578:	4621      	mov	r1, r4
 800a57a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a57e:	3b30      	subs	r3, #48	; 0x30
 800a580:	2b09      	cmp	r3, #9
 800a582:	d94e      	bls.n	800a622 <_svfiprintf_r+0x17e>
 800a584:	b1b0      	cbz	r0, 800a5b4 <_svfiprintf_r+0x110>
 800a586:	9207      	str	r2, [sp, #28]
 800a588:	e014      	b.n	800a5b4 <_svfiprintf_r+0x110>
 800a58a:	eba0 0308 	sub.w	r3, r0, r8
 800a58e:	fa09 f303 	lsl.w	r3, r9, r3
 800a592:	4313      	orrs	r3, r2
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	46a2      	mov	sl, r4
 800a598:	e7d2      	b.n	800a540 <_svfiprintf_r+0x9c>
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	1d19      	adds	r1, r3, #4
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	9103      	str	r1, [sp, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	bfbb      	ittet	lt
 800a5a6:	425b      	neglt	r3, r3
 800a5a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a5ac:	9307      	strge	r3, [sp, #28]
 800a5ae:	9307      	strlt	r3, [sp, #28]
 800a5b0:	bfb8      	it	lt
 800a5b2:	9204      	strlt	r2, [sp, #16]
 800a5b4:	7823      	ldrb	r3, [r4, #0]
 800a5b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b8:	d10c      	bne.n	800a5d4 <_svfiprintf_r+0x130>
 800a5ba:	7863      	ldrb	r3, [r4, #1]
 800a5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a5be:	d135      	bne.n	800a62c <_svfiprintf_r+0x188>
 800a5c0:	9b03      	ldr	r3, [sp, #12]
 800a5c2:	1d1a      	adds	r2, r3, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	9203      	str	r2, [sp, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bfb8      	it	lt
 800a5cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5d0:	3402      	adds	r4, #2
 800a5d2:	9305      	str	r3, [sp, #20]
 800a5d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6a0 <_svfiprintf_r+0x1fc>
 800a5d8:	7821      	ldrb	r1, [r4, #0]
 800a5da:	2203      	movs	r2, #3
 800a5dc:	4650      	mov	r0, sl
 800a5de:	f7f5 fe07 	bl	80001f0 <memchr>
 800a5e2:	b140      	cbz	r0, 800a5f6 <_svfiprintf_r+0x152>
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	eba0 000a 	sub.w	r0, r0, sl
 800a5ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a5ee:	9b04      	ldr	r3, [sp, #16]
 800a5f0:	4303      	orrs	r3, r0
 800a5f2:	3401      	adds	r4, #1
 800a5f4:	9304      	str	r3, [sp, #16]
 800a5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fa:	4826      	ldr	r0, [pc, #152]	; (800a694 <_svfiprintf_r+0x1f0>)
 800a5fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a600:	2206      	movs	r2, #6
 800a602:	f7f5 fdf5 	bl	80001f0 <memchr>
 800a606:	2800      	cmp	r0, #0
 800a608:	d038      	beq.n	800a67c <_svfiprintf_r+0x1d8>
 800a60a:	4b23      	ldr	r3, [pc, #140]	; (800a698 <_svfiprintf_r+0x1f4>)
 800a60c:	bb1b      	cbnz	r3, 800a656 <_svfiprintf_r+0x1b2>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	3307      	adds	r3, #7
 800a612:	f023 0307 	bic.w	r3, r3, #7
 800a616:	3308      	adds	r3, #8
 800a618:	9303      	str	r3, [sp, #12]
 800a61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61c:	4433      	add	r3, r6
 800a61e:	9309      	str	r3, [sp, #36]	; 0x24
 800a620:	e767      	b.n	800a4f2 <_svfiprintf_r+0x4e>
 800a622:	fb0c 3202 	mla	r2, ip, r2, r3
 800a626:	460c      	mov	r4, r1
 800a628:	2001      	movs	r0, #1
 800a62a:	e7a5      	b.n	800a578 <_svfiprintf_r+0xd4>
 800a62c:	2300      	movs	r3, #0
 800a62e:	3401      	adds	r4, #1
 800a630:	9305      	str	r3, [sp, #20]
 800a632:	4619      	mov	r1, r3
 800a634:	f04f 0c0a 	mov.w	ip, #10
 800a638:	4620      	mov	r0, r4
 800a63a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a63e:	3a30      	subs	r2, #48	; 0x30
 800a640:	2a09      	cmp	r2, #9
 800a642:	d903      	bls.n	800a64c <_svfiprintf_r+0x1a8>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0c5      	beq.n	800a5d4 <_svfiprintf_r+0x130>
 800a648:	9105      	str	r1, [sp, #20]
 800a64a:	e7c3      	b.n	800a5d4 <_svfiprintf_r+0x130>
 800a64c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a650:	4604      	mov	r4, r0
 800a652:	2301      	movs	r3, #1
 800a654:	e7f0      	b.n	800a638 <_svfiprintf_r+0x194>
 800a656:	ab03      	add	r3, sp, #12
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	462a      	mov	r2, r5
 800a65c:	4b0f      	ldr	r3, [pc, #60]	; (800a69c <_svfiprintf_r+0x1f8>)
 800a65e:	a904      	add	r1, sp, #16
 800a660:	4638      	mov	r0, r7
 800a662:	f7fe f807 	bl	8008674 <_printf_float>
 800a666:	1c42      	adds	r2, r0, #1
 800a668:	4606      	mov	r6, r0
 800a66a:	d1d6      	bne.n	800a61a <_svfiprintf_r+0x176>
 800a66c:	89ab      	ldrh	r3, [r5, #12]
 800a66e:	065b      	lsls	r3, r3, #25
 800a670:	f53f af2c 	bmi.w	800a4cc <_svfiprintf_r+0x28>
 800a674:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a676:	b01d      	add	sp, #116	; 0x74
 800a678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67c:	ab03      	add	r3, sp, #12
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	462a      	mov	r2, r5
 800a682:	4b06      	ldr	r3, [pc, #24]	; (800a69c <_svfiprintf_r+0x1f8>)
 800a684:	a904      	add	r1, sp, #16
 800a686:	4638      	mov	r0, r7
 800a688:	f7fe fa98 	bl	8008bbc <_printf_i>
 800a68c:	e7eb      	b.n	800a666 <_svfiprintf_r+0x1c2>
 800a68e:	bf00      	nop
 800a690:	0800b534 	.word	0x0800b534
 800a694:	0800b53e 	.word	0x0800b53e
 800a698:	08008675 	.word	0x08008675
 800a69c:	0800a3ed 	.word	0x0800a3ed
 800a6a0:	0800b53a 	.word	0x0800b53a

0800a6a4 <_sbrk_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d06      	ldr	r5, [pc, #24]	; (800a6c0 <_sbrk_r+0x1c>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	f7f7 fbbe 	bl	8001e30 <_sbrk>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_sbrk_r+0x1a>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_sbrk_r+0x1a>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	200004ec 	.word	0x200004ec

0800a6c4 <__assert_func>:
 800a6c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6c6:	4614      	mov	r4, r2
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	4b09      	ldr	r3, [pc, #36]	; (800a6f0 <__assert_func+0x2c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	68d8      	ldr	r0, [r3, #12]
 800a6d2:	b14c      	cbz	r4, 800a6e8 <__assert_func+0x24>
 800a6d4:	4b07      	ldr	r3, [pc, #28]	; (800a6f4 <__assert_func+0x30>)
 800a6d6:	9100      	str	r1, [sp, #0]
 800a6d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6dc:	4906      	ldr	r1, [pc, #24]	; (800a6f8 <__assert_func+0x34>)
 800a6de:	462b      	mov	r3, r5
 800a6e0:	f000 f80e 	bl	800a700 <fiprintf>
 800a6e4:	f000 faa4 	bl	800ac30 <abort>
 800a6e8:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <__assert_func+0x38>)
 800a6ea:	461c      	mov	r4, r3
 800a6ec:	e7f3      	b.n	800a6d6 <__assert_func+0x12>
 800a6ee:	bf00      	nop
 800a6f0:	20000014 	.word	0x20000014
 800a6f4:	0800b545 	.word	0x0800b545
 800a6f8:	0800b552 	.word	0x0800b552
 800a6fc:	0800b580 	.word	0x0800b580

0800a700 <fiprintf>:
 800a700:	b40e      	push	{r1, r2, r3}
 800a702:	b503      	push	{r0, r1, lr}
 800a704:	4601      	mov	r1, r0
 800a706:	ab03      	add	r3, sp, #12
 800a708:	4805      	ldr	r0, [pc, #20]	; (800a720 <fiprintf+0x20>)
 800a70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70e:	6800      	ldr	r0, [r0, #0]
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	f000 f88f 	bl	800a834 <_vfiprintf_r>
 800a716:	b002      	add	sp, #8
 800a718:	f85d eb04 	ldr.w	lr, [sp], #4
 800a71c:	b003      	add	sp, #12
 800a71e:	4770      	bx	lr
 800a720:	20000014 	.word	0x20000014

0800a724 <__ascii_mbtowc>:
 800a724:	b082      	sub	sp, #8
 800a726:	b901      	cbnz	r1, 800a72a <__ascii_mbtowc+0x6>
 800a728:	a901      	add	r1, sp, #4
 800a72a:	b142      	cbz	r2, 800a73e <__ascii_mbtowc+0x1a>
 800a72c:	b14b      	cbz	r3, 800a742 <__ascii_mbtowc+0x1e>
 800a72e:	7813      	ldrb	r3, [r2, #0]
 800a730:	600b      	str	r3, [r1, #0]
 800a732:	7812      	ldrb	r2, [r2, #0]
 800a734:	1e10      	subs	r0, r2, #0
 800a736:	bf18      	it	ne
 800a738:	2001      	movne	r0, #1
 800a73a:	b002      	add	sp, #8
 800a73c:	4770      	bx	lr
 800a73e:	4610      	mov	r0, r2
 800a740:	e7fb      	b.n	800a73a <__ascii_mbtowc+0x16>
 800a742:	f06f 0001 	mvn.w	r0, #1
 800a746:	e7f8      	b.n	800a73a <__ascii_mbtowc+0x16>

0800a748 <memmove>:
 800a748:	4288      	cmp	r0, r1
 800a74a:	b510      	push	{r4, lr}
 800a74c:	eb01 0402 	add.w	r4, r1, r2
 800a750:	d902      	bls.n	800a758 <memmove+0x10>
 800a752:	4284      	cmp	r4, r0
 800a754:	4623      	mov	r3, r4
 800a756:	d807      	bhi.n	800a768 <memmove+0x20>
 800a758:	1e43      	subs	r3, r0, #1
 800a75a:	42a1      	cmp	r1, r4
 800a75c:	d008      	beq.n	800a770 <memmove+0x28>
 800a75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a762:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a766:	e7f8      	b.n	800a75a <memmove+0x12>
 800a768:	4402      	add	r2, r0
 800a76a:	4601      	mov	r1, r0
 800a76c:	428a      	cmp	r2, r1
 800a76e:	d100      	bne.n	800a772 <memmove+0x2a>
 800a770:	bd10      	pop	{r4, pc}
 800a772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a77a:	e7f7      	b.n	800a76c <memmove+0x24>

0800a77c <__malloc_lock>:
 800a77c:	4801      	ldr	r0, [pc, #4]	; (800a784 <__malloc_lock+0x8>)
 800a77e:	f000 bc17 	b.w	800afb0 <__retarget_lock_acquire_recursive>
 800a782:	bf00      	nop
 800a784:	200004f4 	.word	0x200004f4

0800a788 <__malloc_unlock>:
 800a788:	4801      	ldr	r0, [pc, #4]	; (800a790 <__malloc_unlock+0x8>)
 800a78a:	f000 bc12 	b.w	800afb2 <__retarget_lock_release_recursive>
 800a78e:	bf00      	nop
 800a790:	200004f4 	.word	0x200004f4

0800a794 <_realloc_r>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	4607      	mov	r7, r0
 800a798:	4614      	mov	r4, r2
 800a79a:	460e      	mov	r6, r1
 800a79c:	b921      	cbnz	r1, 800a7a8 <_realloc_r+0x14>
 800a79e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	f7ff bdc8 	b.w	800a338 <_malloc_r>
 800a7a8:	b922      	cbnz	r2, 800a7b4 <_realloc_r+0x20>
 800a7aa:	f7ff fd75 	bl	800a298 <_free_r>
 800a7ae:	4625      	mov	r5, r4
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b4:	f000 fc62 	bl	800b07c <_malloc_usable_size_r>
 800a7b8:	42a0      	cmp	r0, r4
 800a7ba:	d20f      	bcs.n	800a7dc <_realloc_r+0x48>
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f7ff fdba 	bl	800a338 <_malloc_r>
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0f2      	beq.n	800a7b0 <_realloc_r+0x1c>
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	f7ff f9c7 	bl	8009b60 <memcpy>
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7ff fd5f 	bl	800a298 <_free_r>
 800a7da:	e7e9      	b.n	800a7b0 <_realloc_r+0x1c>
 800a7dc:	4635      	mov	r5, r6
 800a7de:	e7e7      	b.n	800a7b0 <_realloc_r+0x1c>

0800a7e0 <__sfputc_r>:
 800a7e0:	6893      	ldr	r3, [r2, #8]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	b410      	push	{r4}
 800a7e8:	6093      	str	r3, [r2, #8]
 800a7ea:	da08      	bge.n	800a7fe <__sfputc_r+0x1e>
 800a7ec:	6994      	ldr	r4, [r2, #24]
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	db01      	blt.n	800a7f6 <__sfputc_r+0x16>
 800a7f2:	290a      	cmp	r1, #10
 800a7f4:	d103      	bne.n	800a7fe <__sfputc_r+0x1e>
 800a7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7fa:	f000 b94b 	b.w	800aa94 <__swbuf_r>
 800a7fe:	6813      	ldr	r3, [r2, #0]
 800a800:	1c58      	adds	r0, r3, #1
 800a802:	6010      	str	r0, [r2, #0]
 800a804:	7019      	strb	r1, [r3, #0]
 800a806:	4608      	mov	r0, r1
 800a808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <__sfputs_r>:
 800a80e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	4614      	mov	r4, r2
 800a816:	18d5      	adds	r5, r2, r3
 800a818:	42ac      	cmp	r4, r5
 800a81a:	d101      	bne.n	800a820 <__sfputs_r+0x12>
 800a81c:	2000      	movs	r0, #0
 800a81e:	e007      	b.n	800a830 <__sfputs_r+0x22>
 800a820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a824:	463a      	mov	r2, r7
 800a826:	4630      	mov	r0, r6
 800a828:	f7ff ffda 	bl	800a7e0 <__sfputc_r>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d1f3      	bne.n	800a818 <__sfputs_r+0xa>
 800a830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a834 <_vfiprintf_r>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	460d      	mov	r5, r1
 800a83a:	b09d      	sub	sp, #116	; 0x74
 800a83c:	4614      	mov	r4, r2
 800a83e:	4698      	mov	r8, r3
 800a840:	4606      	mov	r6, r0
 800a842:	b118      	cbz	r0, 800a84c <_vfiprintf_r+0x18>
 800a844:	6983      	ldr	r3, [r0, #24]
 800a846:	b90b      	cbnz	r3, 800a84c <_vfiprintf_r+0x18>
 800a848:	f000 fb14 	bl	800ae74 <__sinit>
 800a84c:	4b89      	ldr	r3, [pc, #548]	; (800aa74 <_vfiprintf_r+0x240>)
 800a84e:	429d      	cmp	r5, r3
 800a850:	d11b      	bne.n	800a88a <_vfiprintf_r+0x56>
 800a852:	6875      	ldr	r5, [r6, #4]
 800a854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a856:	07d9      	lsls	r1, r3, #31
 800a858:	d405      	bmi.n	800a866 <_vfiprintf_r+0x32>
 800a85a:	89ab      	ldrh	r3, [r5, #12]
 800a85c:	059a      	lsls	r2, r3, #22
 800a85e:	d402      	bmi.n	800a866 <_vfiprintf_r+0x32>
 800a860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a862:	f000 fba5 	bl	800afb0 <__retarget_lock_acquire_recursive>
 800a866:	89ab      	ldrh	r3, [r5, #12]
 800a868:	071b      	lsls	r3, r3, #28
 800a86a:	d501      	bpl.n	800a870 <_vfiprintf_r+0x3c>
 800a86c:	692b      	ldr	r3, [r5, #16]
 800a86e:	b9eb      	cbnz	r3, 800a8ac <_vfiprintf_r+0x78>
 800a870:	4629      	mov	r1, r5
 800a872:	4630      	mov	r0, r6
 800a874:	f000 f96e 	bl	800ab54 <__swsetup_r>
 800a878:	b1c0      	cbz	r0, 800a8ac <_vfiprintf_r+0x78>
 800a87a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a87c:	07dc      	lsls	r4, r3, #31
 800a87e:	d50e      	bpl.n	800a89e <_vfiprintf_r+0x6a>
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	b01d      	add	sp, #116	; 0x74
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	4b7b      	ldr	r3, [pc, #492]	; (800aa78 <_vfiprintf_r+0x244>)
 800a88c:	429d      	cmp	r5, r3
 800a88e:	d101      	bne.n	800a894 <_vfiprintf_r+0x60>
 800a890:	68b5      	ldr	r5, [r6, #8]
 800a892:	e7df      	b.n	800a854 <_vfiprintf_r+0x20>
 800a894:	4b79      	ldr	r3, [pc, #484]	; (800aa7c <_vfiprintf_r+0x248>)
 800a896:	429d      	cmp	r5, r3
 800a898:	bf08      	it	eq
 800a89a:	68f5      	ldreq	r5, [r6, #12]
 800a89c:	e7da      	b.n	800a854 <_vfiprintf_r+0x20>
 800a89e:	89ab      	ldrh	r3, [r5, #12]
 800a8a0:	0598      	lsls	r0, r3, #22
 800a8a2:	d4ed      	bmi.n	800a880 <_vfiprintf_r+0x4c>
 800a8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8a6:	f000 fb84 	bl	800afb2 <__retarget_lock_release_recursive>
 800a8aa:	e7e9      	b.n	800a880 <_vfiprintf_r+0x4c>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	2320      	movs	r3, #32
 800a8b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ba:	2330      	movs	r3, #48	; 0x30
 800a8bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa80 <_vfiprintf_r+0x24c>
 800a8c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8c4:	f04f 0901 	mov.w	r9, #1
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	469a      	mov	sl, r3
 800a8cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8d0:	b10a      	cbz	r2, 800a8d6 <_vfiprintf_r+0xa2>
 800a8d2:	2a25      	cmp	r2, #37	; 0x25
 800a8d4:	d1f9      	bne.n	800a8ca <_vfiprintf_r+0x96>
 800a8d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a8da:	d00b      	beq.n	800a8f4 <_vfiprintf_r+0xc0>
 800a8dc:	465b      	mov	r3, fp
 800a8de:	4622      	mov	r2, r4
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7ff ff93 	bl	800a80e <__sfputs_r>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	f000 80aa 	beq.w	800aa42 <_vfiprintf_r+0x20e>
 800a8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8f0:	445a      	add	r2, fp
 800a8f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 80a2 	beq.w	800aa42 <_vfiprintf_r+0x20e>
 800a8fe:	2300      	movs	r3, #0
 800a900:	f04f 32ff 	mov.w	r2, #4294967295
 800a904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a908:	f10a 0a01 	add.w	sl, sl, #1
 800a90c:	9304      	str	r3, [sp, #16]
 800a90e:	9307      	str	r3, [sp, #28]
 800a910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a914:	931a      	str	r3, [sp, #104]	; 0x68
 800a916:	4654      	mov	r4, sl
 800a918:	2205      	movs	r2, #5
 800a91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91e:	4858      	ldr	r0, [pc, #352]	; (800aa80 <_vfiprintf_r+0x24c>)
 800a920:	f7f5 fc66 	bl	80001f0 <memchr>
 800a924:	9a04      	ldr	r2, [sp, #16]
 800a926:	b9d8      	cbnz	r0, 800a960 <_vfiprintf_r+0x12c>
 800a928:	06d1      	lsls	r1, r2, #27
 800a92a:	bf44      	itt	mi
 800a92c:	2320      	movmi	r3, #32
 800a92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a932:	0713      	lsls	r3, r2, #28
 800a934:	bf44      	itt	mi
 800a936:	232b      	movmi	r3, #43	; 0x2b
 800a938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a93c:	f89a 3000 	ldrb.w	r3, [sl]
 800a940:	2b2a      	cmp	r3, #42	; 0x2a
 800a942:	d015      	beq.n	800a970 <_vfiprintf_r+0x13c>
 800a944:	9a07      	ldr	r2, [sp, #28]
 800a946:	4654      	mov	r4, sl
 800a948:	2000      	movs	r0, #0
 800a94a:	f04f 0c0a 	mov.w	ip, #10
 800a94e:	4621      	mov	r1, r4
 800a950:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a954:	3b30      	subs	r3, #48	; 0x30
 800a956:	2b09      	cmp	r3, #9
 800a958:	d94e      	bls.n	800a9f8 <_vfiprintf_r+0x1c4>
 800a95a:	b1b0      	cbz	r0, 800a98a <_vfiprintf_r+0x156>
 800a95c:	9207      	str	r2, [sp, #28]
 800a95e:	e014      	b.n	800a98a <_vfiprintf_r+0x156>
 800a960:	eba0 0308 	sub.w	r3, r0, r8
 800a964:	fa09 f303 	lsl.w	r3, r9, r3
 800a968:	4313      	orrs	r3, r2
 800a96a:	9304      	str	r3, [sp, #16]
 800a96c:	46a2      	mov	sl, r4
 800a96e:	e7d2      	b.n	800a916 <_vfiprintf_r+0xe2>
 800a970:	9b03      	ldr	r3, [sp, #12]
 800a972:	1d19      	adds	r1, r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	9103      	str	r1, [sp, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	bfbb      	ittet	lt
 800a97c:	425b      	neglt	r3, r3
 800a97e:	f042 0202 	orrlt.w	r2, r2, #2
 800a982:	9307      	strge	r3, [sp, #28]
 800a984:	9307      	strlt	r3, [sp, #28]
 800a986:	bfb8      	it	lt
 800a988:	9204      	strlt	r2, [sp, #16]
 800a98a:	7823      	ldrb	r3, [r4, #0]
 800a98c:	2b2e      	cmp	r3, #46	; 0x2e
 800a98e:	d10c      	bne.n	800a9aa <_vfiprintf_r+0x176>
 800a990:	7863      	ldrb	r3, [r4, #1]
 800a992:	2b2a      	cmp	r3, #42	; 0x2a
 800a994:	d135      	bne.n	800aa02 <_vfiprintf_r+0x1ce>
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	1d1a      	adds	r2, r3, #4
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	9203      	str	r2, [sp, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9a6:	3402      	adds	r4, #2
 800a9a8:	9305      	str	r3, [sp, #20]
 800a9aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa90 <_vfiprintf_r+0x25c>
 800a9ae:	7821      	ldrb	r1, [r4, #0]
 800a9b0:	2203      	movs	r2, #3
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	f7f5 fc1c 	bl	80001f0 <memchr>
 800a9b8:	b140      	cbz	r0, 800a9cc <_vfiprintf_r+0x198>
 800a9ba:	2340      	movs	r3, #64	; 0x40
 800a9bc:	eba0 000a 	sub.w	r0, r0, sl
 800a9c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a9c4:	9b04      	ldr	r3, [sp, #16]
 800a9c6:	4303      	orrs	r3, r0
 800a9c8:	3401      	adds	r4, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d0:	482c      	ldr	r0, [pc, #176]	; (800aa84 <_vfiprintf_r+0x250>)
 800a9d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9d6:	2206      	movs	r2, #6
 800a9d8:	f7f5 fc0a 	bl	80001f0 <memchr>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d03f      	beq.n	800aa60 <_vfiprintf_r+0x22c>
 800a9e0:	4b29      	ldr	r3, [pc, #164]	; (800aa88 <_vfiprintf_r+0x254>)
 800a9e2:	bb1b      	cbnz	r3, 800aa2c <_vfiprintf_r+0x1f8>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	3307      	adds	r3, #7
 800a9e8:	f023 0307 	bic.w	r3, r3, #7
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	9303      	str	r3, [sp, #12]
 800a9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f2:	443b      	add	r3, r7
 800a9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f6:	e767      	b.n	800a8c8 <_vfiprintf_r+0x94>
 800a9f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	2001      	movs	r0, #1
 800aa00:	e7a5      	b.n	800a94e <_vfiprintf_r+0x11a>
 800aa02:	2300      	movs	r3, #0
 800aa04:	3401      	adds	r4, #1
 800aa06:	9305      	str	r3, [sp, #20]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	f04f 0c0a 	mov.w	ip, #10
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa14:	3a30      	subs	r2, #48	; 0x30
 800aa16:	2a09      	cmp	r2, #9
 800aa18:	d903      	bls.n	800aa22 <_vfiprintf_r+0x1ee>
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0c5      	beq.n	800a9aa <_vfiprintf_r+0x176>
 800aa1e:	9105      	str	r1, [sp, #20]
 800aa20:	e7c3      	b.n	800a9aa <_vfiprintf_r+0x176>
 800aa22:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa26:	4604      	mov	r4, r0
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e7f0      	b.n	800aa0e <_vfiprintf_r+0x1da>
 800aa2c:	ab03      	add	r3, sp, #12
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	462a      	mov	r2, r5
 800aa32:	4b16      	ldr	r3, [pc, #88]	; (800aa8c <_vfiprintf_r+0x258>)
 800aa34:	a904      	add	r1, sp, #16
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7fd fe1c 	bl	8008674 <_printf_float>
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	1c78      	adds	r0, r7, #1
 800aa40:	d1d6      	bne.n	800a9f0 <_vfiprintf_r+0x1bc>
 800aa42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa44:	07d9      	lsls	r1, r3, #31
 800aa46:	d405      	bmi.n	800aa54 <_vfiprintf_r+0x220>
 800aa48:	89ab      	ldrh	r3, [r5, #12]
 800aa4a:	059a      	lsls	r2, r3, #22
 800aa4c:	d402      	bmi.n	800aa54 <_vfiprintf_r+0x220>
 800aa4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa50:	f000 faaf 	bl	800afb2 <__retarget_lock_release_recursive>
 800aa54:	89ab      	ldrh	r3, [r5, #12]
 800aa56:	065b      	lsls	r3, r3, #25
 800aa58:	f53f af12 	bmi.w	800a880 <_vfiprintf_r+0x4c>
 800aa5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa5e:	e711      	b.n	800a884 <_vfiprintf_r+0x50>
 800aa60:	ab03      	add	r3, sp, #12
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	462a      	mov	r2, r5
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <_vfiprintf_r+0x258>)
 800aa68:	a904      	add	r1, sp, #16
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7fe f8a6 	bl	8008bbc <_printf_i>
 800aa70:	e7e4      	b.n	800aa3c <_vfiprintf_r+0x208>
 800aa72:	bf00      	nop
 800aa74:	0800b6ac 	.word	0x0800b6ac
 800aa78:	0800b6cc 	.word	0x0800b6cc
 800aa7c:	0800b68c 	.word	0x0800b68c
 800aa80:	0800b534 	.word	0x0800b534
 800aa84:	0800b53e 	.word	0x0800b53e
 800aa88:	08008675 	.word	0x08008675
 800aa8c:	0800a80f 	.word	0x0800a80f
 800aa90:	0800b53a 	.word	0x0800b53a

0800aa94 <__swbuf_r>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	460e      	mov	r6, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	b118      	cbz	r0, 800aaa6 <__swbuf_r+0x12>
 800aa9e:	6983      	ldr	r3, [r0, #24]
 800aaa0:	b90b      	cbnz	r3, 800aaa6 <__swbuf_r+0x12>
 800aaa2:	f000 f9e7 	bl	800ae74 <__sinit>
 800aaa6:	4b21      	ldr	r3, [pc, #132]	; (800ab2c <__swbuf_r+0x98>)
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	d12b      	bne.n	800ab04 <__swbuf_r+0x70>
 800aaac:	686c      	ldr	r4, [r5, #4]
 800aaae:	69a3      	ldr	r3, [r4, #24]
 800aab0:	60a3      	str	r3, [r4, #8]
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	071a      	lsls	r2, r3, #28
 800aab6:	d52f      	bpl.n	800ab18 <__swbuf_r+0x84>
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	b36b      	cbz	r3, 800ab18 <__swbuf_r+0x84>
 800aabc:	6923      	ldr	r3, [r4, #16]
 800aabe:	6820      	ldr	r0, [r4, #0]
 800aac0:	1ac0      	subs	r0, r0, r3
 800aac2:	6963      	ldr	r3, [r4, #20]
 800aac4:	b2f6      	uxtb	r6, r6
 800aac6:	4283      	cmp	r3, r0
 800aac8:	4637      	mov	r7, r6
 800aaca:	dc04      	bgt.n	800aad6 <__swbuf_r+0x42>
 800aacc:	4621      	mov	r1, r4
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 f93c 	bl	800ad4c <_fflush_r>
 800aad4:	bb30      	cbnz	r0, 800ab24 <__swbuf_r+0x90>
 800aad6:	68a3      	ldr	r3, [r4, #8]
 800aad8:	3b01      	subs	r3, #1
 800aada:	60a3      	str	r3, [r4, #8]
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	6022      	str	r2, [r4, #0]
 800aae2:	701e      	strb	r6, [r3, #0]
 800aae4:	6963      	ldr	r3, [r4, #20]
 800aae6:	3001      	adds	r0, #1
 800aae8:	4283      	cmp	r3, r0
 800aaea:	d004      	beq.n	800aaf6 <__swbuf_r+0x62>
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	07db      	lsls	r3, r3, #31
 800aaf0:	d506      	bpl.n	800ab00 <__swbuf_r+0x6c>
 800aaf2:	2e0a      	cmp	r6, #10
 800aaf4:	d104      	bne.n	800ab00 <__swbuf_r+0x6c>
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 f927 	bl	800ad4c <_fflush_r>
 800aafe:	b988      	cbnz	r0, 800ab24 <__swbuf_r+0x90>
 800ab00:	4638      	mov	r0, r7
 800ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab04:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <__swbuf_r+0x9c>)
 800ab06:	429c      	cmp	r4, r3
 800ab08:	d101      	bne.n	800ab0e <__swbuf_r+0x7a>
 800ab0a:	68ac      	ldr	r4, [r5, #8]
 800ab0c:	e7cf      	b.n	800aaae <__swbuf_r+0x1a>
 800ab0e:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <__swbuf_r+0xa0>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	bf08      	it	eq
 800ab14:	68ec      	ldreq	r4, [r5, #12]
 800ab16:	e7ca      	b.n	800aaae <__swbuf_r+0x1a>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f000 f81a 	bl	800ab54 <__swsetup_r>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d0cb      	beq.n	800aabc <__swbuf_r+0x28>
 800ab24:	f04f 37ff 	mov.w	r7, #4294967295
 800ab28:	e7ea      	b.n	800ab00 <__swbuf_r+0x6c>
 800ab2a:	bf00      	nop
 800ab2c:	0800b6ac 	.word	0x0800b6ac
 800ab30:	0800b6cc 	.word	0x0800b6cc
 800ab34:	0800b68c 	.word	0x0800b68c

0800ab38 <__ascii_wctomb>:
 800ab38:	b149      	cbz	r1, 800ab4e <__ascii_wctomb+0x16>
 800ab3a:	2aff      	cmp	r2, #255	; 0xff
 800ab3c:	bf85      	ittet	hi
 800ab3e:	238a      	movhi	r3, #138	; 0x8a
 800ab40:	6003      	strhi	r3, [r0, #0]
 800ab42:	700a      	strbls	r2, [r1, #0]
 800ab44:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab48:	bf98      	it	ls
 800ab4a:	2001      	movls	r0, #1
 800ab4c:	4770      	bx	lr
 800ab4e:	4608      	mov	r0, r1
 800ab50:	4770      	bx	lr
	...

0800ab54 <__swsetup_r>:
 800ab54:	4b32      	ldr	r3, [pc, #200]	; (800ac20 <__swsetup_r+0xcc>)
 800ab56:	b570      	push	{r4, r5, r6, lr}
 800ab58:	681d      	ldr	r5, [r3, #0]
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	b125      	cbz	r5, 800ab6a <__swsetup_r+0x16>
 800ab60:	69ab      	ldr	r3, [r5, #24]
 800ab62:	b913      	cbnz	r3, 800ab6a <__swsetup_r+0x16>
 800ab64:	4628      	mov	r0, r5
 800ab66:	f000 f985 	bl	800ae74 <__sinit>
 800ab6a:	4b2e      	ldr	r3, [pc, #184]	; (800ac24 <__swsetup_r+0xd0>)
 800ab6c:	429c      	cmp	r4, r3
 800ab6e:	d10f      	bne.n	800ab90 <__swsetup_r+0x3c>
 800ab70:	686c      	ldr	r4, [r5, #4]
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab78:	0719      	lsls	r1, r3, #28
 800ab7a:	d42c      	bmi.n	800abd6 <__swsetup_r+0x82>
 800ab7c:	06dd      	lsls	r5, r3, #27
 800ab7e:	d411      	bmi.n	800aba4 <__swsetup_r+0x50>
 800ab80:	2309      	movs	r3, #9
 800ab82:	6033      	str	r3, [r6, #0]
 800ab84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8e:	e03e      	b.n	800ac0e <__swsetup_r+0xba>
 800ab90:	4b25      	ldr	r3, [pc, #148]	; (800ac28 <__swsetup_r+0xd4>)
 800ab92:	429c      	cmp	r4, r3
 800ab94:	d101      	bne.n	800ab9a <__swsetup_r+0x46>
 800ab96:	68ac      	ldr	r4, [r5, #8]
 800ab98:	e7eb      	b.n	800ab72 <__swsetup_r+0x1e>
 800ab9a:	4b24      	ldr	r3, [pc, #144]	; (800ac2c <__swsetup_r+0xd8>)
 800ab9c:	429c      	cmp	r4, r3
 800ab9e:	bf08      	it	eq
 800aba0:	68ec      	ldreq	r4, [r5, #12]
 800aba2:	e7e6      	b.n	800ab72 <__swsetup_r+0x1e>
 800aba4:	0758      	lsls	r0, r3, #29
 800aba6:	d512      	bpl.n	800abce <__swsetup_r+0x7a>
 800aba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abaa:	b141      	cbz	r1, 800abbe <__swsetup_r+0x6a>
 800abac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abb0:	4299      	cmp	r1, r3
 800abb2:	d002      	beq.n	800abba <__swsetup_r+0x66>
 800abb4:	4630      	mov	r0, r6
 800abb6:	f7ff fb6f 	bl	800a298 <_free_r>
 800abba:	2300      	movs	r3, #0
 800abbc:	6363      	str	r3, [r4, #52]	; 0x34
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	2300      	movs	r3, #0
 800abc8:	6063      	str	r3, [r4, #4]
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	f043 0308 	orr.w	r3, r3, #8
 800abd4:	81a3      	strh	r3, [r4, #12]
 800abd6:	6923      	ldr	r3, [r4, #16]
 800abd8:	b94b      	cbnz	r3, 800abee <__swsetup_r+0x9a>
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abe4:	d003      	beq.n	800abee <__swsetup_r+0x9a>
 800abe6:	4621      	mov	r1, r4
 800abe8:	4630      	mov	r0, r6
 800abea:	f000 fa07 	bl	800affc <__smakebuf_r>
 800abee:	89a0      	ldrh	r0, [r4, #12]
 800abf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abf4:	f010 0301 	ands.w	r3, r0, #1
 800abf8:	d00a      	beq.n	800ac10 <__swsetup_r+0xbc>
 800abfa:	2300      	movs	r3, #0
 800abfc:	60a3      	str	r3, [r4, #8]
 800abfe:	6963      	ldr	r3, [r4, #20]
 800ac00:	425b      	negs	r3, r3
 800ac02:	61a3      	str	r3, [r4, #24]
 800ac04:	6923      	ldr	r3, [r4, #16]
 800ac06:	b943      	cbnz	r3, 800ac1a <__swsetup_r+0xc6>
 800ac08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac0c:	d1ba      	bne.n	800ab84 <__swsetup_r+0x30>
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	0781      	lsls	r1, r0, #30
 800ac12:	bf58      	it	pl
 800ac14:	6963      	ldrpl	r3, [r4, #20]
 800ac16:	60a3      	str	r3, [r4, #8]
 800ac18:	e7f4      	b.n	800ac04 <__swsetup_r+0xb0>
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	e7f7      	b.n	800ac0e <__swsetup_r+0xba>
 800ac1e:	bf00      	nop
 800ac20:	20000014 	.word	0x20000014
 800ac24:	0800b6ac 	.word	0x0800b6ac
 800ac28:	0800b6cc 	.word	0x0800b6cc
 800ac2c:	0800b68c 	.word	0x0800b68c

0800ac30 <abort>:
 800ac30:	b508      	push	{r3, lr}
 800ac32:	2006      	movs	r0, #6
 800ac34:	f000 fa52 	bl	800b0dc <raise>
 800ac38:	2001      	movs	r0, #1
 800ac3a:	f7f7 f881 	bl	8001d40 <_exit>
	...

0800ac40 <__sflush_r>:
 800ac40:	898a      	ldrh	r2, [r1, #12]
 800ac42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	4605      	mov	r5, r0
 800ac48:	0710      	lsls	r0, r2, #28
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	d458      	bmi.n	800ad00 <__sflush_r+0xc0>
 800ac4e:	684b      	ldr	r3, [r1, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	dc05      	bgt.n	800ac60 <__sflush_r+0x20>
 800ac54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dc02      	bgt.n	800ac60 <__sflush_r+0x20>
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	d0f9      	beq.n	800ac5a <__sflush_r+0x1a>
 800ac66:	2300      	movs	r3, #0
 800ac68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac6c:	682f      	ldr	r7, [r5, #0]
 800ac6e:	602b      	str	r3, [r5, #0]
 800ac70:	d032      	beq.n	800acd8 <__sflush_r+0x98>
 800ac72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	075a      	lsls	r2, r3, #29
 800ac78:	d505      	bpl.n	800ac86 <__sflush_r+0x46>
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	1ac0      	subs	r0, r0, r3
 800ac7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac80:	b10b      	cbz	r3, 800ac86 <__sflush_r+0x46>
 800ac82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac84:	1ac0      	subs	r0, r0, r3
 800ac86:	2300      	movs	r3, #0
 800ac88:	4602      	mov	r2, r0
 800ac8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac8c:	6a21      	ldr	r1, [r4, #32]
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b0      	blx	r6
 800ac92:	1c43      	adds	r3, r0, #1
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	d106      	bne.n	800aca6 <__sflush_r+0x66>
 800ac98:	6829      	ldr	r1, [r5, #0]
 800ac9a:	291d      	cmp	r1, #29
 800ac9c:	d82c      	bhi.n	800acf8 <__sflush_r+0xb8>
 800ac9e:	4a2a      	ldr	r2, [pc, #168]	; (800ad48 <__sflush_r+0x108>)
 800aca0:	40ca      	lsrs	r2, r1
 800aca2:	07d6      	lsls	r6, r2, #31
 800aca4:	d528      	bpl.n	800acf8 <__sflush_r+0xb8>
 800aca6:	2200      	movs	r2, #0
 800aca8:	6062      	str	r2, [r4, #4]
 800acaa:	04d9      	lsls	r1, r3, #19
 800acac:	6922      	ldr	r2, [r4, #16]
 800acae:	6022      	str	r2, [r4, #0]
 800acb0:	d504      	bpl.n	800acbc <__sflush_r+0x7c>
 800acb2:	1c42      	adds	r2, r0, #1
 800acb4:	d101      	bne.n	800acba <__sflush_r+0x7a>
 800acb6:	682b      	ldr	r3, [r5, #0]
 800acb8:	b903      	cbnz	r3, 800acbc <__sflush_r+0x7c>
 800acba:	6560      	str	r0, [r4, #84]	; 0x54
 800acbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acbe:	602f      	str	r7, [r5, #0]
 800acc0:	2900      	cmp	r1, #0
 800acc2:	d0ca      	beq.n	800ac5a <__sflush_r+0x1a>
 800acc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc8:	4299      	cmp	r1, r3
 800acca:	d002      	beq.n	800acd2 <__sflush_r+0x92>
 800accc:	4628      	mov	r0, r5
 800acce:	f7ff fae3 	bl	800a298 <_free_r>
 800acd2:	2000      	movs	r0, #0
 800acd4:	6360      	str	r0, [r4, #52]	; 0x34
 800acd6:	e7c1      	b.n	800ac5c <__sflush_r+0x1c>
 800acd8:	6a21      	ldr	r1, [r4, #32]
 800acda:	2301      	movs	r3, #1
 800acdc:	4628      	mov	r0, r5
 800acde:	47b0      	blx	r6
 800ace0:	1c41      	adds	r1, r0, #1
 800ace2:	d1c7      	bne.n	800ac74 <__sflush_r+0x34>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0c4      	beq.n	800ac74 <__sflush_r+0x34>
 800acea:	2b1d      	cmp	r3, #29
 800acec:	d001      	beq.n	800acf2 <__sflush_r+0xb2>
 800acee:	2b16      	cmp	r3, #22
 800acf0:	d101      	bne.n	800acf6 <__sflush_r+0xb6>
 800acf2:	602f      	str	r7, [r5, #0]
 800acf4:	e7b1      	b.n	800ac5a <__sflush_r+0x1a>
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	e7ad      	b.n	800ac5c <__sflush_r+0x1c>
 800ad00:	690f      	ldr	r7, [r1, #16]
 800ad02:	2f00      	cmp	r7, #0
 800ad04:	d0a9      	beq.n	800ac5a <__sflush_r+0x1a>
 800ad06:	0793      	lsls	r3, r2, #30
 800ad08:	680e      	ldr	r6, [r1, #0]
 800ad0a:	bf08      	it	eq
 800ad0c:	694b      	ldreq	r3, [r1, #20]
 800ad0e:	600f      	str	r7, [r1, #0]
 800ad10:	bf18      	it	ne
 800ad12:	2300      	movne	r3, #0
 800ad14:	eba6 0807 	sub.w	r8, r6, r7
 800ad18:	608b      	str	r3, [r1, #8]
 800ad1a:	f1b8 0f00 	cmp.w	r8, #0
 800ad1e:	dd9c      	ble.n	800ac5a <__sflush_r+0x1a>
 800ad20:	6a21      	ldr	r1, [r4, #32]
 800ad22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad24:	4643      	mov	r3, r8
 800ad26:	463a      	mov	r2, r7
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b0      	blx	r6
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	dc06      	bgt.n	800ad3e <__sflush_r+0xfe>
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad36:	81a3      	strh	r3, [r4, #12]
 800ad38:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3c:	e78e      	b.n	800ac5c <__sflush_r+0x1c>
 800ad3e:	4407      	add	r7, r0
 800ad40:	eba8 0800 	sub.w	r8, r8, r0
 800ad44:	e7e9      	b.n	800ad1a <__sflush_r+0xda>
 800ad46:	bf00      	nop
 800ad48:	20400001 	.word	0x20400001

0800ad4c <_fflush_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	690b      	ldr	r3, [r1, #16]
 800ad50:	4605      	mov	r5, r0
 800ad52:	460c      	mov	r4, r1
 800ad54:	b913      	cbnz	r3, 800ad5c <_fflush_r+0x10>
 800ad56:	2500      	movs	r5, #0
 800ad58:	4628      	mov	r0, r5
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	b118      	cbz	r0, 800ad66 <_fflush_r+0x1a>
 800ad5e:	6983      	ldr	r3, [r0, #24]
 800ad60:	b90b      	cbnz	r3, 800ad66 <_fflush_r+0x1a>
 800ad62:	f000 f887 	bl	800ae74 <__sinit>
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <_fflush_r+0x6c>)
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	d11b      	bne.n	800ada4 <_fflush_r+0x58>
 800ad6c:	686c      	ldr	r4, [r5, #4]
 800ad6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0ef      	beq.n	800ad56 <_fflush_r+0xa>
 800ad76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad78:	07d0      	lsls	r0, r2, #31
 800ad7a:	d404      	bmi.n	800ad86 <_fflush_r+0x3a>
 800ad7c:	0599      	lsls	r1, r3, #22
 800ad7e:	d402      	bmi.n	800ad86 <_fflush_r+0x3a>
 800ad80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad82:	f000 f915 	bl	800afb0 <__retarget_lock_acquire_recursive>
 800ad86:	4628      	mov	r0, r5
 800ad88:	4621      	mov	r1, r4
 800ad8a:	f7ff ff59 	bl	800ac40 <__sflush_r>
 800ad8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad90:	07da      	lsls	r2, r3, #31
 800ad92:	4605      	mov	r5, r0
 800ad94:	d4e0      	bmi.n	800ad58 <_fflush_r+0xc>
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	059b      	lsls	r3, r3, #22
 800ad9a:	d4dd      	bmi.n	800ad58 <_fflush_r+0xc>
 800ad9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad9e:	f000 f908 	bl	800afb2 <__retarget_lock_release_recursive>
 800ada2:	e7d9      	b.n	800ad58 <_fflush_r+0xc>
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <_fflush_r+0x70>)
 800ada6:	429c      	cmp	r4, r3
 800ada8:	d101      	bne.n	800adae <_fflush_r+0x62>
 800adaa:	68ac      	ldr	r4, [r5, #8]
 800adac:	e7df      	b.n	800ad6e <_fflush_r+0x22>
 800adae:	4b04      	ldr	r3, [pc, #16]	; (800adc0 <_fflush_r+0x74>)
 800adb0:	429c      	cmp	r4, r3
 800adb2:	bf08      	it	eq
 800adb4:	68ec      	ldreq	r4, [r5, #12]
 800adb6:	e7da      	b.n	800ad6e <_fflush_r+0x22>
 800adb8:	0800b6ac 	.word	0x0800b6ac
 800adbc:	0800b6cc 	.word	0x0800b6cc
 800adc0:	0800b68c 	.word	0x0800b68c

0800adc4 <std>:
 800adc4:	2300      	movs	r3, #0
 800adc6:	b510      	push	{r4, lr}
 800adc8:	4604      	mov	r4, r0
 800adca:	e9c0 3300 	strd	r3, r3, [r0]
 800adce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800add2:	6083      	str	r3, [r0, #8]
 800add4:	8181      	strh	r1, [r0, #12]
 800add6:	6643      	str	r3, [r0, #100]	; 0x64
 800add8:	81c2      	strh	r2, [r0, #14]
 800adda:	6183      	str	r3, [r0, #24]
 800addc:	4619      	mov	r1, r3
 800adde:	2208      	movs	r2, #8
 800ade0:	305c      	adds	r0, #92	; 0x5c
 800ade2:	f7fd fb9f 	bl	8008524 <memset>
 800ade6:	4b05      	ldr	r3, [pc, #20]	; (800adfc <std+0x38>)
 800ade8:	6263      	str	r3, [r4, #36]	; 0x24
 800adea:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <std+0x3c>)
 800adec:	62a3      	str	r3, [r4, #40]	; 0x28
 800adee:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <std+0x40>)
 800adf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <std+0x44>)
 800adf4:	6224      	str	r4, [r4, #32]
 800adf6:	6323      	str	r3, [r4, #48]	; 0x30
 800adf8:	bd10      	pop	{r4, pc}
 800adfa:	bf00      	nop
 800adfc:	0800b115 	.word	0x0800b115
 800ae00:	0800b137 	.word	0x0800b137
 800ae04:	0800b16f 	.word	0x0800b16f
 800ae08:	0800b193 	.word	0x0800b193

0800ae0c <_cleanup_r>:
 800ae0c:	4901      	ldr	r1, [pc, #4]	; (800ae14 <_cleanup_r+0x8>)
 800ae0e:	f000 b8af 	b.w	800af70 <_fwalk_reent>
 800ae12:	bf00      	nop
 800ae14:	0800ad4d 	.word	0x0800ad4d

0800ae18 <__sfmoreglue>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	1e4a      	subs	r2, r1, #1
 800ae1c:	2568      	movs	r5, #104	; 0x68
 800ae1e:	4355      	muls	r5, r2
 800ae20:	460e      	mov	r6, r1
 800ae22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae26:	f7ff fa87 	bl	800a338 <_malloc_r>
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	b140      	cbz	r0, 800ae40 <__sfmoreglue+0x28>
 800ae2e:	2100      	movs	r1, #0
 800ae30:	e9c0 1600 	strd	r1, r6, [r0]
 800ae34:	300c      	adds	r0, #12
 800ae36:	60a0      	str	r0, [r4, #8]
 800ae38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae3c:	f7fd fb72 	bl	8008524 <memset>
 800ae40:	4620      	mov	r0, r4
 800ae42:	bd70      	pop	{r4, r5, r6, pc}

0800ae44 <__sfp_lock_acquire>:
 800ae44:	4801      	ldr	r0, [pc, #4]	; (800ae4c <__sfp_lock_acquire+0x8>)
 800ae46:	f000 b8b3 	b.w	800afb0 <__retarget_lock_acquire_recursive>
 800ae4a:	bf00      	nop
 800ae4c:	200004f8 	.word	0x200004f8

0800ae50 <__sfp_lock_release>:
 800ae50:	4801      	ldr	r0, [pc, #4]	; (800ae58 <__sfp_lock_release+0x8>)
 800ae52:	f000 b8ae 	b.w	800afb2 <__retarget_lock_release_recursive>
 800ae56:	bf00      	nop
 800ae58:	200004f8 	.word	0x200004f8

0800ae5c <__sinit_lock_acquire>:
 800ae5c:	4801      	ldr	r0, [pc, #4]	; (800ae64 <__sinit_lock_acquire+0x8>)
 800ae5e:	f000 b8a7 	b.w	800afb0 <__retarget_lock_acquire_recursive>
 800ae62:	bf00      	nop
 800ae64:	200004f3 	.word	0x200004f3

0800ae68 <__sinit_lock_release>:
 800ae68:	4801      	ldr	r0, [pc, #4]	; (800ae70 <__sinit_lock_release+0x8>)
 800ae6a:	f000 b8a2 	b.w	800afb2 <__retarget_lock_release_recursive>
 800ae6e:	bf00      	nop
 800ae70:	200004f3 	.word	0x200004f3

0800ae74 <__sinit>:
 800ae74:	b510      	push	{r4, lr}
 800ae76:	4604      	mov	r4, r0
 800ae78:	f7ff fff0 	bl	800ae5c <__sinit_lock_acquire>
 800ae7c:	69a3      	ldr	r3, [r4, #24]
 800ae7e:	b11b      	cbz	r3, 800ae88 <__sinit+0x14>
 800ae80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae84:	f7ff bff0 	b.w	800ae68 <__sinit_lock_release>
 800ae88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <__sinit+0x68>)
 800ae90:	4a13      	ldr	r2, [pc, #76]	; (800aee0 <__sinit+0x6c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae96:	42a3      	cmp	r3, r4
 800ae98:	bf04      	itt	eq
 800ae9a:	2301      	moveq	r3, #1
 800ae9c:	61a3      	streq	r3, [r4, #24]
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f000 f820 	bl	800aee4 <__sfp>
 800aea4:	6060      	str	r0, [r4, #4]
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 f81c 	bl	800aee4 <__sfp>
 800aeac:	60a0      	str	r0, [r4, #8]
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 f818 	bl	800aee4 <__sfp>
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	60e0      	str	r0, [r4, #12]
 800aeb8:	2104      	movs	r1, #4
 800aeba:	6860      	ldr	r0, [r4, #4]
 800aebc:	f7ff ff82 	bl	800adc4 <std>
 800aec0:	68a0      	ldr	r0, [r4, #8]
 800aec2:	2201      	movs	r2, #1
 800aec4:	2109      	movs	r1, #9
 800aec6:	f7ff ff7d 	bl	800adc4 <std>
 800aeca:	68e0      	ldr	r0, [r4, #12]
 800aecc:	2202      	movs	r2, #2
 800aece:	2112      	movs	r1, #18
 800aed0:	f7ff ff78 	bl	800adc4 <std>
 800aed4:	2301      	movs	r3, #1
 800aed6:	61a3      	str	r3, [r4, #24]
 800aed8:	e7d2      	b.n	800ae80 <__sinit+0xc>
 800aeda:	bf00      	nop
 800aedc:	0800b30c 	.word	0x0800b30c
 800aee0:	0800ae0d 	.word	0x0800ae0d

0800aee4 <__sfp>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	4607      	mov	r7, r0
 800aee8:	f7ff ffac 	bl	800ae44 <__sfp_lock_acquire>
 800aeec:	4b1e      	ldr	r3, [pc, #120]	; (800af68 <__sfp+0x84>)
 800aeee:	681e      	ldr	r6, [r3, #0]
 800aef0:	69b3      	ldr	r3, [r6, #24]
 800aef2:	b913      	cbnz	r3, 800aefa <__sfp+0x16>
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff ffbd 	bl	800ae74 <__sinit>
 800aefa:	3648      	adds	r6, #72	; 0x48
 800aefc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af00:	3b01      	subs	r3, #1
 800af02:	d503      	bpl.n	800af0c <__sfp+0x28>
 800af04:	6833      	ldr	r3, [r6, #0]
 800af06:	b30b      	cbz	r3, 800af4c <__sfp+0x68>
 800af08:	6836      	ldr	r6, [r6, #0]
 800af0a:	e7f7      	b.n	800aefc <__sfp+0x18>
 800af0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af10:	b9d5      	cbnz	r5, 800af48 <__sfp+0x64>
 800af12:	4b16      	ldr	r3, [pc, #88]	; (800af6c <__sfp+0x88>)
 800af14:	60e3      	str	r3, [r4, #12]
 800af16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af1a:	6665      	str	r5, [r4, #100]	; 0x64
 800af1c:	f000 f847 	bl	800afae <__retarget_lock_init_recursive>
 800af20:	f7ff ff96 	bl	800ae50 <__sfp_lock_release>
 800af24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af2c:	6025      	str	r5, [r4, #0]
 800af2e:	61a5      	str	r5, [r4, #24]
 800af30:	2208      	movs	r2, #8
 800af32:	4629      	mov	r1, r5
 800af34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af38:	f7fd faf4 	bl	8008524 <memset>
 800af3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af44:	4620      	mov	r0, r4
 800af46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af48:	3468      	adds	r4, #104	; 0x68
 800af4a:	e7d9      	b.n	800af00 <__sfp+0x1c>
 800af4c:	2104      	movs	r1, #4
 800af4e:	4638      	mov	r0, r7
 800af50:	f7ff ff62 	bl	800ae18 <__sfmoreglue>
 800af54:	4604      	mov	r4, r0
 800af56:	6030      	str	r0, [r6, #0]
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1d5      	bne.n	800af08 <__sfp+0x24>
 800af5c:	f7ff ff78 	bl	800ae50 <__sfp_lock_release>
 800af60:	230c      	movs	r3, #12
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	e7ee      	b.n	800af44 <__sfp+0x60>
 800af66:	bf00      	nop
 800af68:	0800b30c 	.word	0x0800b30c
 800af6c:	ffff0001 	.word	0xffff0001

0800af70 <_fwalk_reent>:
 800af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af74:	4606      	mov	r6, r0
 800af76:	4688      	mov	r8, r1
 800af78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af7c:	2700      	movs	r7, #0
 800af7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af82:	f1b9 0901 	subs.w	r9, r9, #1
 800af86:	d505      	bpl.n	800af94 <_fwalk_reent+0x24>
 800af88:	6824      	ldr	r4, [r4, #0]
 800af8a:	2c00      	cmp	r4, #0
 800af8c:	d1f7      	bne.n	800af7e <_fwalk_reent+0xe>
 800af8e:	4638      	mov	r0, r7
 800af90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af94:	89ab      	ldrh	r3, [r5, #12]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d907      	bls.n	800afaa <_fwalk_reent+0x3a>
 800af9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af9e:	3301      	adds	r3, #1
 800afa0:	d003      	beq.n	800afaa <_fwalk_reent+0x3a>
 800afa2:	4629      	mov	r1, r5
 800afa4:	4630      	mov	r0, r6
 800afa6:	47c0      	blx	r8
 800afa8:	4307      	orrs	r7, r0
 800afaa:	3568      	adds	r5, #104	; 0x68
 800afac:	e7e9      	b.n	800af82 <_fwalk_reent+0x12>

0800afae <__retarget_lock_init_recursive>:
 800afae:	4770      	bx	lr

0800afb0 <__retarget_lock_acquire_recursive>:
 800afb0:	4770      	bx	lr

0800afb2 <__retarget_lock_release_recursive>:
 800afb2:	4770      	bx	lr

0800afb4 <__swhatbuf_r>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	460e      	mov	r6, r1
 800afb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afbc:	2900      	cmp	r1, #0
 800afbe:	b096      	sub	sp, #88	; 0x58
 800afc0:	4614      	mov	r4, r2
 800afc2:	461d      	mov	r5, r3
 800afc4:	da07      	bge.n	800afd6 <__swhatbuf_r+0x22>
 800afc6:	2300      	movs	r3, #0
 800afc8:	602b      	str	r3, [r5, #0]
 800afca:	89b3      	ldrh	r3, [r6, #12]
 800afcc:	061a      	lsls	r2, r3, #24
 800afce:	d410      	bmi.n	800aff2 <__swhatbuf_r+0x3e>
 800afd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afd4:	e00e      	b.n	800aff4 <__swhatbuf_r+0x40>
 800afd6:	466a      	mov	r2, sp
 800afd8:	f000 f902 	bl	800b1e0 <_fstat_r>
 800afdc:	2800      	cmp	r0, #0
 800afde:	dbf2      	blt.n	800afc6 <__swhatbuf_r+0x12>
 800afe0:	9a01      	ldr	r2, [sp, #4]
 800afe2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afe6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afea:	425a      	negs	r2, r3
 800afec:	415a      	adcs	r2, r3
 800afee:	602a      	str	r2, [r5, #0]
 800aff0:	e7ee      	b.n	800afd0 <__swhatbuf_r+0x1c>
 800aff2:	2340      	movs	r3, #64	; 0x40
 800aff4:	2000      	movs	r0, #0
 800aff6:	6023      	str	r3, [r4, #0]
 800aff8:	b016      	add	sp, #88	; 0x58
 800affa:	bd70      	pop	{r4, r5, r6, pc}

0800affc <__smakebuf_r>:
 800affc:	898b      	ldrh	r3, [r1, #12]
 800affe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b000:	079d      	lsls	r5, r3, #30
 800b002:	4606      	mov	r6, r0
 800b004:	460c      	mov	r4, r1
 800b006:	d507      	bpl.n	800b018 <__smakebuf_r+0x1c>
 800b008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	6123      	str	r3, [r4, #16]
 800b010:	2301      	movs	r3, #1
 800b012:	6163      	str	r3, [r4, #20]
 800b014:	b002      	add	sp, #8
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	ab01      	add	r3, sp, #4
 800b01a:	466a      	mov	r2, sp
 800b01c:	f7ff ffca 	bl	800afb4 <__swhatbuf_r>
 800b020:	9900      	ldr	r1, [sp, #0]
 800b022:	4605      	mov	r5, r0
 800b024:	4630      	mov	r0, r6
 800b026:	f7ff f987 	bl	800a338 <_malloc_r>
 800b02a:	b948      	cbnz	r0, 800b040 <__smakebuf_r+0x44>
 800b02c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b030:	059a      	lsls	r2, r3, #22
 800b032:	d4ef      	bmi.n	800b014 <__smakebuf_r+0x18>
 800b034:	f023 0303 	bic.w	r3, r3, #3
 800b038:	f043 0302 	orr.w	r3, r3, #2
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	e7e3      	b.n	800b008 <__smakebuf_r+0xc>
 800b040:	4b0d      	ldr	r3, [pc, #52]	; (800b078 <__smakebuf_r+0x7c>)
 800b042:	62b3      	str	r3, [r6, #40]	; 0x28
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	6020      	str	r0, [r4, #0]
 800b048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	9b00      	ldr	r3, [sp, #0]
 800b050:	6163      	str	r3, [r4, #20]
 800b052:	9b01      	ldr	r3, [sp, #4]
 800b054:	6120      	str	r0, [r4, #16]
 800b056:	b15b      	cbz	r3, 800b070 <__smakebuf_r+0x74>
 800b058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b05c:	4630      	mov	r0, r6
 800b05e:	f000 f8d1 	bl	800b204 <_isatty_r>
 800b062:	b128      	cbz	r0, 800b070 <__smakebuf_r+0x74>
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	f023 0303 	bic.w	r3, r3, #3
 800b06a:	f043 0301 	orr.w	r3, r3, #1
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	89a0      	ldrh	r0, [r4, #12]
 800b072:	4305      	orrs	r5, r0
 800b074:	81a5      	strh	r5, [r4, #12]
 800b076:	e7cd      	b.n	800b014 <__smakebuf_r+0x18>
 800b078:	0800ae0d 	.word	0x0800ae0d

0800b07c <_malloc_usable_size_r>:
 800b07c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b080:	1f18      	subs	r0, r3, #4
 800b082:	2b00      	cmp	r3, #0
 800b084:	bfbc      	itt	lt
 800b086:	580b      	ldrlt	r3, [r1, r0]
 800b088:	18c0      	addlt	r0, r0, r3
 800b08a:	4770      	bx	lr

0800b08c <_raise_r>:
 800b08c:	291f      	cmp	r1, #31
 800b08e:	b538      	push	{r3, r4, r5, lr}
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	d904      	bls.n	800b0a0 <_raise_r+0x14>
 800b096:	2316      	movs	r3, #22
 800b098:	6003      	str	r3, [r0, #0]
 800b09a:	f04f 30ff 	mov.w	r0, #4294967295
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0a2:	b112      	cbz	r2, 800b0aa <_raise_r+0x1e>
 800b0a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0a8:	b94b      	cbnz	r3, 800b0be <_raise_r+0x32>
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 f830 	bl	800b110 <_getpid_r>
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ba:	f000 b817 	b.w	800b0ec <_kill_r>
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d00a      	beq.n	800b0d8 <_raise_r+0x4c>
 800b0c2:	1c59      	adds	r1, r3, #1
 800b0c4:	d103      	bne.n	800b0ce <_raise_r+0x42>
 800b0c6:	2316      	movs	r3, #22
 800b0c8:	6003      	str	r3, [r0, #0]
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	e7e7      	b.n	800b09e <_raise_r+0x12>
 800b0ce:	2400      	movs	r4, #0
 800b0d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	4798      	blx	r3
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e7e0      	b.n	800b09e <_raise_r+0x12>

0800b0dc <raise>:
 800b0dc:	4b02      	ldr	r3, [pc, #8]	; (800b0e8 <raise+0xc>)
 800b0de:	4601      	mov	r1, r0
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	f7ff bfd3 	b.w	800b08c <_raise_r>
 800b0e6:	bf00      	nop
 800b0e8:	20000014 	.word	0x20000014

0800b0ec <_kill_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4d07      	ldr	r5, [pc, #28]	; (800b10c <_kill_r+0x20>)
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	602b      	str	r3, [r5, #0]
 800b0fa:	f7f6 fe11 	bl	8001d20 <_kill>
 800b0fe:	1c43      	adds	r3, r0, #1
 800b100:	d102      	bne.n	800b108 <_kill_r+0x1c>
 800b102:	682b      	ldr	r3, [r5, #0]
 800b104:	b103      	cbz	r3, 800b108 <_kill_r+0x1c>
 800b106:	6023      	str	r3, [r4, #0]
 800b108:	bd38      	pop	{r3, r4, r5, pc}
 800b10a:	bf00      	nop
 800b10c:	200004ec 	.word	0x200004ec

0800b110 <_getpid_r>:
 800b110:	f7f6 bdfe 	b.w	8001d10 <_getpid>

0800b114 <__sread>:
 800b114:	b510      	push	{r4, lr}
 800b116:	460c      	mov	r4, r1
 800b118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b11c:	f000 f894 	bl	800b248 <_read_r>
 800b120:	2800      	cmp	r0, #0
 800b122:	bfab      	itete	ge
 800b124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b126:	89a3      	ldrhlt	r3, [r4, #12]
 800b128:	181b      	addge	r3, r3, r0
 800b12a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b12e:	bfac      	ite	ge
 800b130:	6563      	strge	r3, [r4, #84]	; 0x54
 800b132:	81a3      	strhlt	r3, [r4, #12]
 800b134:	bd10      	pop	{r4, pc}

0800b136 <__swrite>:
 800b136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13a:	461f      	mov	r7, r3
 800b13c:	898b      	ldrh	r3, [r1, #12]
 800b13e:	05db      	lsls	r3, r3, #23
 800b140:	4605      	mov	r5, r0
 800b142:	460c      	mov	r4, r1
 800b144:	4616      	mov	r6, r2
 800b146:	d505      	bpl.n	800b154 <__swrite+0x1e>
 800b148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14c:	2302      	movs	r3, #2
 800b14e:	2200      	movs	r2, #0
 800b150:	f000 f868 	bl	800b224 <_lseek_r>
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b15a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b15e:	81a3      	strh	r3, [r4, #12]
 800b160:	4632      	mov	r2, r6
 800b162:	463b      	mov	r3, r7
 800b164:	4628      	mov	r0, r5
 800b166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b16a:	f000 b817 	b.w	800b19c <_write_r>

0800b16e <__sseek>:
 800b16e:	b510      	push	{r4, lr}
 800b170:	460c      	mov	r4, r1
 800b172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b176:	f000 f855 	bl	800b224 <_lseek_r>
 800b17a:	1c43      	adds	r3, r0, #1
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	bf15      	itete	ne
 800b180:	6560      	strne	r0, [r4, #84]	; 0x54
 800b182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b18a:	81a3      	strheq	r3, [r4, #12]
 800b18c:	bf18      	it	ne
 800b18e:	81a3      	strhne	r3, [r4, #12]
 800b190:	bd10      	pop	{r4, pc}

0800b192 <__sclose>:
 800b192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b196:	f000 b813 	b.w	800b1c0 <_close_r>
	...

0800b19c <_write_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d07      	ldr	r5, [pc, #28]	; (800b1bc <_write_r+0x20>)
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	4608      	mov	r0, r1
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	602a      	str	r2, [r5, #0]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	f7f6 fdef 	bl	8001d8e <_write>
 800b1b0:	1c43      	adds	r3, r0, #1
 800b1b2:	d102      	bne.n	800b1ba <_write_r+0x1e>
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	b103      	cbz	r3, 800b1ba <_write_r+0x1e>
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	200004ec 	.word	0x200004ec

0800b1c0 <_close_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d06      	ldr	r5, [pc, #24]	; (800b1dc <_close_r+0x1c>)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f6 fdfb 	bl	8001dc6 <_close>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_close_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_close_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	200004ec 	.word	0x200004ec

0800b1e0 <_fstat_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d07      	ldr	r5, [pc, #28]	; (800b200 <_fstat_r+0x20>)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	f7f6 fdf6 	bl	8001dde <_fstat>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d102      	bne.n	800b1fc <_fstat_r+0x1c>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	b103      	cbz	r3, 800b1fc <_fstat_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	200004ec 	.word	0x200004ec

0800b204 <_isatty_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	4d06      	ldr	r5, [pc, #24]	; (800b220 <_isatty_r+0x1c>)
 800b208:	2300      	movs	r3, #0
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	f7f6 fdf5 	bl	8001dfe <_isatty>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_isatty_r+0x1a>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_isatty_r+0x1a>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	200004ec 	.word	0x200004ec

0800b224 <_lseek_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d07      	ldr	r5, [pc, #28]	; (800b244 <_lseek_r+0x20>)
 800b228:	4604      	mov	r4, r0
 800b22a:	4608      	mov	r0, r1
 800b22c:	4611      	mov	r1, r2
 800b22e:	2200      	movs	r2, #0
 800b230:	602a      	str	r2, [r5, #0]
 800b232:	461a      	mov	r2, r3
 800b234:	f7f6 fdee 	bl	8001e14 <_lseek>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	d102      	bne.n	800b242 <_lseek_r+0x1e>
 800b23c:	682b      	ldr	r3, [r5, #0]
 800b23e:	b103      	cbz	r3, 800b242 <_lseek_r+0x1e>
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	bd38      	pop	{r3, r4, r5, pc}
 800b244:	200004ec 	.word	0x200004ec

0800b248 <_read_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4d07      	ldr	r5, [pc, #28]	; (800b268 <_read_r+0x20>)
 800b24c:	4604      	mov	r4, r0
 800b24e:	4608      	mov	r0, r1
 800b250:	4611      	mov	r1, r2
 800b252:	2200      	movs	r2, #0
 800b254:	602a      	str	r2, [r5, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	f7f6 fd7c 	bl	8001d54 <_read>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d102      	bne.n	800b266 <_read_r+0x1e>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	b103      	cbz	r3, 800b266 <_read_r+0x1e>
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	200004ec 	.word	0x200004ec

0800b26c <_init>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr

0800b278 <_fini>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr
