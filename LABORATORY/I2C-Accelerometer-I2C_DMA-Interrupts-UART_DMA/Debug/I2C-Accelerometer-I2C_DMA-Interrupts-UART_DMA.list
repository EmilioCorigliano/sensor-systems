
I2C-Accelerometer-I2C_DMA-Interrupts-UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009894  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08009a38  08009a38  00019a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb4  08009eb4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009eb4  08009eb4  00019eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ebc  08009ebc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ebc  08009ebc  00019ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001ec  0800a0b0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800a0b0  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d9d  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002305  00000000  00000000  00032fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000352c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00036298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017959  00000000  00000000  000371d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129cc  00000000  00000000  0004eb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009167b  00000000  00000000  000614f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2b70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005578  00000000  00000000  000f2bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a1c 	.word	0x08009a1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08009a1c 	.word	0x08009a1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eb0:	b598      	push	{r3, r4, r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eb4:	f000 fdc6 	bl	8001a44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eb8:	f000 f83a 	bl	8000f30 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_DMA_Init();
 8000ebc:	f000 f920 	bl	8001100 <MX_DMA_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ec0:	f000 f946 	bl	8001150 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ec4:	f000 f8f2 	bl	80010ac <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000ec8:	f000 f91a 	bl	8001100 <MX_DMA_Init>
	MX_I2C1_Init();
 8000ecc:	f000 f89c 	bl	8001008 <MX_I2C1_Init>
	MX_TIM11_Init();
 8000ed0:	f000 f8c8 	bl	8001064 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	if (init() == HAL_OK) {
 8000ed4:	f000 fa24 	bl	8001320 <init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d111      	bne.n	8000f02 <main+0x52>
		HAL_UART_Transmit(&huart2, starting_str, strlen(starting_str), 100); // DEBUG
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <main+0x70>)
 8000ee0:	681c      	ldr	r4, [r3, #0]
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <main+0x70>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f97a 	bl	80001e0 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <main+0x74>)
 8000ef6:	f004 fe58 	bl	8005baa <HAL_UART_Transmit>

		HAL_TIM_Base_Start_IT(&htim11);
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <main+0x78>)
 8000efc:	f004 fbe2 	bl	80056c4 <HAL_TIM_Base_Start_IT>
 8000f00:	e00d      	b.n	8000f1e <main+0x6e>
	} else {
		HAL_UART_Transmit(&huart2, error_str, strlen(error_str), 100); // DEBUG
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <main+0x7c>)
 8000f04:	681c      	ldr	r4, [r3, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <main+0x7c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff f968 	bl	80001e0 <strlen>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	4621      	mov	r1, r4
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <main+0x74>)
 8000f1a:	f004 fe46 	bl	8005baa <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f1e:	e7fe      	b.n	8000f1e <main+0x6e>
 8000f20:	20000000 	.word	0x20000000
 8000f24:	200003c4 	.word	0x200003c4
 8000f28:	20000314 	.word	0x20000314
 8000f2c:	2000000c 	.word	0x2000000c

08000f30 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f005 fece 	bl	8006ce0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <SystemClock_Config+0xd0>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a28      	ldr	r2, [pc, #160]	; (8001000 <SystemClock_Config+0xd0>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <SystemClock_Config+0xd0>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <SystemClock_Config+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <SystemClock_Config+0xd4>)
 8000f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <SystemClock_Config+0xd4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 febe 	bl	8004d3c <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x9a>
		Error_Handler();
 8000fc6:	f000 fa85 	bl	80014d4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fda:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 f920 	bl	800522c <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xc6>
		Error_Handler();
 8000ff2:	f000 fa6f 	bl	80014d4 <Error_Handler>
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3750      	adds	r7, #80	; 0x50
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x50>)
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <MX_I2C1_Init+0x54>)
 8001010:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C1_Init+0x50>)
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_I2C1_Init+0x58>)
 8001016:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_I2C1_Init+0x50>)
 8001026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_I2C1_Init+0x50>)
 8001046:	f001 fc3b 	bl	80028c0 <HAL_I2C_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001050:	f000 fa40 	bl	80014d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000214 	.word	0x20000214
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_TIM11_Init+0x40>)
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_TIM11_Init+0x44>)
 800106c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 2000;
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_TIM11_Init+0x40>)
 8001070:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001074:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_TIM11_Init+0x40>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 42000;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_TIM11_Init+0x40>)
 800107e:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001082:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_TIM11_Init+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_TIM11_Init+0x40>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_TIM11_Init+0x40>)
 8001092:	f004 fac7 	bl	8005624 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM11_Init+0x3c>
		Error_Handler();
 800109c:	f000 fa1a 	bl	80014d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000314 	.word	0x20000314
 80010a8:	40014800 	.word	0x40014800

080010ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART2_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f004 fd14 	bl	8005b10 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80010ee:	f000 f9f1 	bl	80014d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200003c4 	.word	0x200003c4
 80010fc:	40004400 	.word	0x40004400

08001100 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_DMA_Init+0x4c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <MX_DMA_Init+0x4c>)
 8001110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_DMA_Init+0x4c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2101      	movs	r1, #1
 8001126:	2010      	movs	r0, #16
 8001128:	f000 fdd9 	bl	8001cde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800112c:	2010      	movs	r0, #16
 800112e:	f000 fdf2 	bl	8001d16 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2101      	movs	r1, #1
 8001136:	2011      	movs	r0, #17
 8001138:	f000 fdd1 	bl	8001cde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800113c:	2011      	movs	r0, #17
 800113e:	f000 fdea 	bl	8001d16 <HAL_NVIC_EnableIRQ>

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a25      	ldr	r2, [pc, #148]	; (8001220 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2120      	movs	r1, #32
 80011da:	4812      	ldr	r0, [pc, #72]	; (8001224 <MX_GPIO_Init+0xd4>)
 80011dc:	f001 fb56 	bl	800288c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_GPIO_Init+0xd8>)
 80011f8:	f001 f9c4 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80011fc:	2320      	movs	r3, #32
 80011fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_GPIO_Init+0xd4>)
 8001214:	f001 f9b6 	bl	8002584 <HAL_GPIO_Init>

}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020800 	.word	0x40020800

0800122c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/**
 * @brief callback of the timer, samples the data in DMA non-blocking mode
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d110      	bne.n	800125e <HAL_TIM_PeriodElapsedCallback+0x32>
		HAL_UART_Transmit(&huart2, tim_str, strlen(tim_str), 100); // DEBUG
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800123e:	681c      	ldr	r4, [r3, #0]
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7fe ffcb 	bl	80001e0 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	4621      	mov	r1, r4
 8001252:	4807      	ldr	r0, [pc, #28]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001254:	f004 fca9 	bl	8005baa <HAL_UART_Transmit>
		sampleDMA(data);
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800125a:	f000 f8eb 	bl	8001434 <sampleDMA>
	}
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
 8001266:	bf00      	nop
 8001268:	20000314 	.word	0x20000314
 800126c:	20000004 	.word	0x20000004
 8001270:	200003c4 	.word	0x200003c4
 8001274:	2000035c 	.word	0x2000035c

08001278 <HAL_I2C_MasterRxCpltCallback>:

/**
 * @brief callback of the I2C receiver DMA, called when all the sample is transferred. Converts and prints in DMA mode the sample received
 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <HAL_I2C_MasterRxCpltCallback+0x94>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d13d      	bne.n	8001304 <HAL_I2C_MasterRxCpltCallback+0x8c>
		HAL_UART_Transmit(&huart2, i2c_str, strlen(i2c_str), 100);  // DEBUG
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_I2C_MasterRxCpltCallback+0x98>)
 800128a:	681c      	ldr	r4, [r3, #0]
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_I2C_MasterRxCpltCallback+0x98>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffa5 	bl	80001e0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	4621      	mov	r1, r4
 800129e:	481d      	ldr	r0, [pc, #116]	; (8001314 <HAL_I2C_MasterRxCpltCallback+0x9c>)
 80012a0:	f004 fc83 	bl	8005baa <HAL_UART_Transmit>
		accelData.acc_x = convertToAcc(data[0]);
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_I2C_MasterRxCpltCallback+0xa0>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f846 	bl	800133c <convertToAcc>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_I2C_MasterRxCpltCallback+0xa4>)
 80012b6:	edc3 7a00 	vstr	s15, [r3]
		accelData.acc_y = convertToAcc(data[2]);
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_I2C_MasterRxCpltCallback+0xa0>)
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f83b 	bl	800133c <convertToAcc>
 80012c6:	eef0 7a40 	vmov.f32	s15, s0
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_I2C_MasterRxCpltCallback+0xa4>)
 80012cc:	edc3 7a01 	vstr	s15, [r3, #4]
		accelData.acc_z = convertToAcc(data[4]);
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_I2C_MasterRxCpltCallback+0xa0>)
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f830 	bl	800133c <convertToAcc>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_I2C_MasterRxCpltCallback+0xa4>)
 80012e2:	edc3 7a02 	vstr	s15, [r3, #8]
		printSampleDMA(accelData);
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_I2C_MasterRxCpltCallback+0xa4>)
 80012e8:	edd3 6a00 	vldr	s13, [r3]
 80012ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80012f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012f4:	eeb0 0a66 	vmov.f32	s0, s13
 80012f8:	eef0 0a47 	vmov.f32	s1, s14
 80012fc:	eeb0 1a67 	vmov.f32	s2, s15
 8001300:	f000 f8a6 	bl	8001450 <printSampleDMA>
	}
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	20000214 	.word	0x20000214
 8001310:	20000008 	.word	0x20000008
 8001314:	200003c4 	.word	0x200003c4
 8001318:	2000035c 	.word	0x2000035c
 800131c:	20000268 	.word	0x20000268

08001320 <init>:

/**
 * @brief initializes the accelerometer
 * @return HAL_OK if the sensor has been configured, HAL_ERROR otherwise
 */
HAL_StatusTypeDef init() {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	// enabling normal mode (1Hz) and enabling X,Y,Z outputs
	if (writeReg(CTRL_REG1, 0b00010111) != HAL_OK) {
 8001324:	2117      	movs	r1, #23
 8001326:	2020      	movs	r0, #32
 8001328:	f000 f866 	bl	80013f8 <writeReg>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <init+0x16>
		return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <init+0x18>
	}

	return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}

0800133c <convertToAcc>:
/**
 * @brief converts a byte into the acceleration in g
 * @param data the byte read from the accelerometer
 * @return the float signed value of the acceleration in g
 */
float convertToAcc(int8_t value) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	// multiplying the read data by the FSR and dividing by 2^bytes=256
	return (float) value * 4 / 256.0;
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001352:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001374 <convertToAcc+0x38>
 800135e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001362:	eef0 7a66 	vmov.f32	s15, s13
}
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	43800000 	.word	0x43800000

08001378 <readRegDMA>:
 * @param regAddress the address on which we want to read
 * @param data the pointer to the array of bytes into we will store the read data
 * @param nData the number of bytes to read
 * @return HAL_OK if sensor acknowledged, HAL_ERROR otherwise
 */
HAL_StatusTypeDef readRegDMA(Reg regAddress, uint8_t *buf, int nData) {
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af02      	add	r7, sp, #8
 800137e:	4603      	mov	r3, r0
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	73fb      	strb	r3, [r7, #15]
	// setting the autoincrement bit in order to read nData DIFFERENT registers
	// (and not the same register nData times).
	if (nData > 1) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	dd04      	ble.n	8001396 <readRegDMA+0x1e>
		regAddress |= AUTOINCREMENT;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
	}

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, accel_addr,
 8001396:	f107 020f 	add.w	r2, r7, #15
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	2150      	movs	r1, #80	; 0x50
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <readRegDMA+0x74>)
 80013a6:	f001 fbcf 	bl	8002b48 <HAL_I2C_Master_Transmit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	75fb      	strb	r3, [r7, #23]
			&regAddress, 1, 1000);
	if (ret == HAL_OK) {
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d107      	bne.n	80013c4 <readRegDMA+0x4c>
		return HAL_I2C_Master_Receive_DMA(&hi2c1, accel_addr + 1, buf, 5);
 80013b4:	2305      	movs	r3, #5
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	2151      	movs	r1, #81	; 0x51
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <readRegDMA+0x74>)
 80013bc:	f001 fcc2 	bl	8002d44 <HAL_I2C_Master_Receive_DMA>
 80013c0:	4603      	mov	r3, r0
 80013c2:	e00e      	b.n	80013e2 <readRegDMA+0x6a>
	} else {
		HAL_UART_Transmit(&huart2, error_str, strlen(error_str), 100);  // DEBUG
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <readRegDMA+0x78>)
 80013c6:	681c      	ldr	r4, [r3, #0]
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <readRegDMA+0x78>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff07 	bl	80001e0 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	4621      	mov	r1, r4
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <readRegDMA+0x7c>)
 80013dc:	f004 fbe5 	bl	8005baa <HAL_UART_Transmit>
		return ret;
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000214 	.word	0x20000214
 80013f0:	2000000c 	.word	0x2000000c
 80013f4:	200003c4 	.word	0x200003c4

080013f8 <writeReg>:
 * @brief writes into the register the value passed
 * @param regAddress register to be written
 * @param value the value to write into the register
 * @return the same return of the HAL_I2C_Transmit
 */
HAL_StatusTypeDef writeReg(Reg regAddress, int8_t value) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	4613      	mov	r3, r2
 8001406:	71bb      	strb	r3, [r7, #6]
	uint8_t datar[2] = { regAddress, value };
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	733b      	strb	r3, [r7, #12]
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&hi2c1, accel_addr, datar, 2, 1000);
 8001410:	f107 020c 	add.w	r2, r7, #12
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2302      	movs	r3, #2
 800141c:	2150      	movs	r1, #80	; 0x50
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <writeReg+0x38>)
 8001420:	f001 fb92 	bl	8002b48 <HAL_I2C_Master_Transmit>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000214 	.word	0x20000214

08001434 <sampleDMA>:
 * @brief samples the accelerometer in DMA mode.
 * In this case it's only a wrapper to the readRegDMA but it's kept anyway in order to keep the same structure and have a easily understandable code
 * @param accelData the structure to update
 * @return HAL_OK if new data has been sampled, HAL_ERROR otherwise
 */
HAL_StatusTypeDef sampleDMA(uint8_t *buf) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	// sampling values from X to Z register included
	return readRegDMA(OUT_X, buf, 5);
 800143c:	2205      	movs	r2, #5
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2029      	movs	r0, #41	; 0x29
 8001442:	f7ff ff99 	bl	8001378 <readRegDMA>
 8001446:	4603      	mov	r3, r0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <printSampleDMA>:

/**
 * @brief prints over the serial communication the sample passed in DMA mode
 * @param accelData the structure to print
 */
void printSampleDMA(AccelData accelData) {
 8001450:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001454:	b088      	sub	sp, #32
 8001456:	af04      	add	r7, sp, #16
 8001458:	eef0 6a40 	vmov.f32	s13, s0
 800145c:	eeb0 7a60 	vmov.f32	s14, s1
 8001460:	eef0 7a41 	vmov.f32	s15, s2
 8001464:	edc7 6a01 	vstr	s13, [r7, #4]
 8001468:	ed87 7a02 	vstr	s14, [r7, #8]
 800146c:	edc7 7a03 	vstr	s15, [r7, #12]
	sprintf(sample_str,
			"Non Blocking I2C DMA\r\nX: %+.3f\r\nY: %+.3f\r\nZ: %+.3f\r\n\n",
			accelData.acc_x, accelData.acc_y, accelData.acc_z);
 8001470:	687b      	ldr	r3, [r7, #4]
	sprintf(sample_str,
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f870 	bl	8000558 <__aeabi_f2d>
 8001478:	4680      	mov	r8, r0
 800147a:	4689      	mov	r9, r1
			accelData.acc_x, accelData.acc_y, accelData.acc_z);
 800147c:	68bb      	ldr	r3, [r7, #8]
	sprintf(sample_str,
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f86a 	bl	8000558 <__aeabi_f2d>
 8001484:	4604      	mov	r4, r0
 8001486:	460d      	mov	r5, r1
			accelData.acc_x, accelData.acc_y, accelData.acc_z);
 8001488:	68fb      	ldr	r3, [r7, #12]
	sprintf(sample_str,
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f864 	bl	8000558 <__aeabi_f2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001498:	e9cd 4500 	strd	r4, r5, [sp]
 800149c:	4642      	mov	r2, r8
 800149e:	464b      	mov	r3, r9
 80014a0:	4909      	ldr	r1, [pc, #36]	; (80014c8 <printSampleDMA+0x78>)
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <printSampleDMA+0x7c>)
 80014a4:	f006 f88e 	bl	80075c4 <siprintf>
	HAL_UART_Transmit_DMA(&huart2, sample_str, strlen(sample_str));
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <printSampleDMA+0x7c>)
 80014aa:	f7fe fe99 	bl	80001e0 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	4905      	ldr	r1, [pc, #20]	; (80014cc <printSampleDMA+0x7c>)
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <printSampleDMA+0x80>)
 80014b8:	f004 fc0a 	bl	8005cd0 <HAL_UART_Transmit_DMA>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014c6:	bf00      	nop
 80014c8:	08009a7c 	.word	0x08009a7c
 80014cc:	20000274 	.word	0x20000274
 80014d0:	200003c4 	.word	0x200003c4

080014d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_MspInit+0x4c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x4c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800151e:	2006      	movs	r0, #6
 8001520:	f000 fbd2 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a34      	ldr	r2, [pc, #208]	; (8001620 <HAL_I2C_MspInit+0xf0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d162      	bne.n	8001618 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_I2C_MspInit+0xf4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a32      	ldr	r2, [pc, #200]	; (8001624 <HAL_I2C_MspInit+0xf4>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_I2C_MspInit+0xf4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001574:	2312      	movs	r3, #18
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001580:	2304      	movs	r3, #4
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4827      	ldr	r0, [pc, #156]	; (8001628 <HAL_I2C_MspInit+0xf8>)
 800158c:	f000 fffa 	bl	8002584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_I2C_MspInit+0xf4>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a22      	ldr	r2, [pc, #136]	; (8001624 <HAL_I2C_MspInit+0xf4>)
 800159a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_I2C_MspInit+0xf4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015ae:	4a20      	ldr	r2, [pc, #128]	; (8001630 <HAL_I2C_MspInit+0x100>)
 80015b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015ec:	480f      	ldr	r0, [pc, #60]	; (800162c <HAL_I2C_MspInit+0xfc>)
 80015ee:	f000 fbad 	bl	8001d4c <HAL_DMA_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80015f8:	f7ff ff6c 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_I2C_MspInit+0xfc>)
 8001600:	639a      	str	r2, [r3, #56]	; 0x38
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_I2C_MspInit+0xfc>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2101      	movs	r1, #1
 800160c:	201f      	movs	r0, #31
 800160e:	f000 fb66 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001612:	201f      	movs	r0, #31
 8001614:	f000 fb7f 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40005400 	.word	0x40005400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020400 	.word	0x40020400
 800162c:	20000364 	.word	0x20000364
 8001630:	40026088 	.word	0x40026088

08001634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_TIM_Base_MspInit+0x48>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d115      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_TIM_Base_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_TIM_Base_MspInit+0x4c>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_TIM_Base_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2101      	movs	r1, #1
 8001666:	201a      	movs	r0, #26
 8001668:	f000 fb39 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800166c:	201a      	movs	r0, #26
 800166e:	f000 fb52 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40014800 	.word	0x40014800
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a34      	ldr	r2, [pc, #208]	; (8001774 <HAL_UART_MspInit+0xf0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d161      	bne.n	800176a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_UART_MspInit+0xf4>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_UART_MspInit+0xf4>)
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_UART_MspInit+0xf4>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <HAL_UART_MspInit+0xf4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a2b      	ldr	r2, [pc, #172]	; (8001778 <HAL_UART_MspInit+0xf4>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_UART_MspInit+0xf4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016de:	230c      	movs	r3, #12
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ee:	2307      	movs	r3, #7
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4820      	ldr	r0, [pc, #128]	; (800177c <HAL_UART_MspInit+0xf8>)
 80016fa:	f000 ff43 	bl	8002584 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001700:	4a20      	ldr	r2, [pc, #128]	; (8001784 <HAL_UART_MspInit+0x100>)
 8001702:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_MspInit+0xfc>)
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_UART_MspInit+0xfc>)
 800171a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_UART_MspInit+0xfc>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0xfc>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800173e:	4810      	ldr	r0, [pc, #64]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001740:	f000 fb04 	bl	8001d4c <HAL_DMA_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800174a:	f7ff fec3 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2101      	movs	r1, #1
 800175e:	2026      	movs	r0, #38	; 0x26
 8001760:	f000 fabd 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001764:	2026      	movs	r0, #38	; 0x26
 8001766:	f000 fad6 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40004400 	.word	0x40004400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	200002b4 	.word	0x200002b4
 8001784:	400260a0 	.word	0x400260a0

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d4:	f000 f988 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream5_IRQHandler+0x10>)
 80017e2:	f000 fc4b 	bl	800207c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000364 	.word	0x20000364

080017f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA1_Stream6_IRQHandler+0x10>)
 80017f6:	f000 fc41 	bl	800207c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002b4 	.word	0x200002b4

08001804 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800180a:	f003 ffbd 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000314 	.word	0x20000314

08001818 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <I2C1_EV_IRQHandler+0x10>)
 800181e:	f001 fbc1 	bl	8002fa4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000214 	.word	0x20000214

0800182c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <USART2_IRQHandler+0x10>)
 8001832:	f004 facb 	bl	8005dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200003c4 	.word	0x200003c4

08001840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
	return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_kill>:

int _kill(int pid, int sig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800185a:	f005 fa17 	bl	8006c8c <__errno>
 800185e:	4603      	mov	r3, r0
 8001860:	2216      	movs	r2, #22
 8001862:	601a      	str	r2, [r3, #0]
	return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_exit>:

void _exit (int status)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffe7 	bl	8001850 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001882:	e7fe      	b.n	8001882 <_exit+0x12>

08001884 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e00a      	b.n	80018ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001896:	f3af 8000 	nop.w
 800189a:	4601      	mov	r1, r0
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60ba      	str	r2, [r7, #8]
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbf0      	blt.n	8001896 <_read+0x12>
	}

return len;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e009      	b.n	80018e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf1      	blt.n	80018d0 <_write+0x12>
	}
	return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_close>:

int _close(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191e:	605a      	str	r2, [r3, #4]
	return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_isatty>:

int _isatty(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
	return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f005 f97c 	bl	8006c8c <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20018000 	.word	0x20018000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	20000208 	.word	0x20000208
 80019c8:	20000420 	.word	0x20000420

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019f6:	490e      	ldr	r1, [pc, #56]	; (8001a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a0c:	4c0b      	ldr	r4, [pc, #44]	; (8001a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a1a:	f7ff ffd7 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f005 f93b 	bl	8006c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7ff fa45 	bl	8000eb0 <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001a34:	08009ec4 	.word	0x08009ec4
  ldr r2, =_sbss
 8001a38:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001a3c:	2000041c 	.word	0x2000041c

08001a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <HAL_Init+0x40>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_Init+0x40>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x40>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f92b 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fd32 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f943 	bl	8001d32 <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f90b 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000010 	.word	0x20000010
 8001ae0:	20000018 	.word	0x20000018
 8001ae4:	20000014 	.word	0x20000014

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	20000408 	.word	0x20000408

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000408 	.word	0x20000408

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff feda 	bl	8001b10 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e099      	b.n	8001e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	e00f      	b.n	8001daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8a:	f7ff fec1 	bl	8001b10 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d908      	bls.n	8001daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e078      	b.n	8001e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e8      	bne.n	8001d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_DMA_Init+0x158>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d107      	bne.n	8001e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f023 0307 	bic.w	r3, r3, #7
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d117      	bne.n	8001e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fb1b 	bl	800248c <DMA_CheckFifoParam>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e016      	b.n	8001e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fad2 	bl	8002420 <DMA_CalcBaseAndBitshift>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	223f      	movs	r2, #63	; 0x3f
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	f010803f 	.word	0xf010803f

08001ea8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_DMA_Start_IT+0x26>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e040      	b.n	8001f50 <HAL_DMA_Start_IT+0xa8>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d12f      	bne.n	8001f42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fa64 	bl	80023c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	223f      	movs	r2, #63	; 0x3f
 8001f02:	409a      	lsls	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0216 	orr.w	r2, r2, #22
 8001f16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0208 	orr.w	r2, r2, #8
 8001f2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e005      	b.n	8001f4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f66:	f7ff fdd3 	bl	8001b10 <HAL_GetTick>
 8001f6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d008      	beq.n	8001f8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e052      	b.n	8002030 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0216 	bic.w	r2, r2, #22
 8001f98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_DMA_Abort+0x62>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0208 	bic.w	r2, r2, #8
 8001fc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fda:	e013      	b.n	8002004 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fdc:	f7ff fd98 	bl	8001b10 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d90c      	bls.n	8002004 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e015      	b.n	8002030 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e4      	bne.n	8001fdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	223f      	movs	r2, #63	; 0x3f
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d004      	beq.n	8002056 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00c      	b.n	8002070 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2205      	movs	r2, #5
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002088:	4b92      	ldr	r3, [pc, #584]	; (80022d4 <HAL_DMA_IRQHandler+0x258>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a92      	ldr	r2, [pc, #584]	; (80022d8 <HAL_DMA_IRQHandler+0x25c>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0a9b      	lsrs	r3, r3, #10
 8002094:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2208      	movs	r2, #8
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01a      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2208      	movs	r2, #8
 80020d6:	409a      	lsls	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	2201      	movs	r2, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d012      	beq.n	800211e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2201      	movs	r2, #1
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	f043 0202 	orr.w	r2, r3, #2
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	2204      	movs	r2, #4
 8002124:	409a      	lsls	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2204      	movs	r2, #4
 8002142:	409a      	lsls	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	f043 0204 	orr.w	r2, r3, #4
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	2210      	movs	r2, #16
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d043      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03c      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	2210      	movs	r2, #16
 8002178:	409a      	lsls	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d018      	beq.n	80021be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d108      	bne.n	80021ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d024      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
 80021aa:	e01f      	b.n	80021ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
 80021bc:	e016      	b.n	80021ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0208 	bic.w	r2, r2, #8
 80021da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	2220      	movs	r2, #32
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 808e 	beq.w	800231a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8086 	beq.w	800231a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	2220      	movs	r2, #32
 8002214:	409a      	lsls	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b05      	cmp	r3, #5
 8002224:	d136      	bne.n	8002294 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0216 	bic.w	r2, r2, #22
 8002234:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002244:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <HAL_DMA_IRQHandler+0x1da>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0208 	bic.w	r2, r2, #8
 8002264:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	223f      	movs	r2, #63	; 0x3f
 800226c:	409a      	lsls	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002286:	2b00      	cmp	r3, #0
 8002288:	d07d      	beq.n	8002386 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
        }
        return;
 8002292:	e078      	b.n	8002386 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01c      	beq.n	80022dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d108      	bne.n	80022c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d030      	beq.n	800231a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e02b      	b.n	800231a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d027      	beq.n	800231a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
 80022d2:	e022      	b.n	800231a <HAL_DMA_IRQHandler+0x29e>
 80022d4:	20000010 	.word	0x20000010
 80022d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0210 	bic.w	r2, r2, #16
 80022f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	2b00      	cmp	r3, #0
 8002320:	d032      	beq.n	8002388 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d022      	beq.n	8002374 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2205      	movs	r2, #5
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	3301      	adds	r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	429a      	cmp	r2, r3
 8002350:	d307      	bcc.n	8002362 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f2      	bne.n	8002346 <HAL_DMA_IRQHandler+0x2ca>
 8002360:	e000      	b.n	8002364 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002362:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
 8002384:	e000      	b.n	8002388 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002386:	bf00      	nop
    }
  }
}
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop

08002390 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239e:	b2db      	uxtb	r3, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	d108      	bne.n	8002404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002402:	e007      	b.n	8002414 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	60da      	str	r2, [r3, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3b10      	subs	r3, #16
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <DMA_CalcBaseAndBitshift+0x64>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800243a:	4a13      	ldr	r2, [pc, #76]	; (8002488 <DMA_CalcBaseAndBitshift+0x68>)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d909      	bls.n	8002462 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	1d1a      	adds	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	659a      	str	r2, [r3, #88]	; 0x58
 8002460:	e007      	b.n	8002472 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800246a:	f023 0303 	bic.w	r3, r3, #3
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	aaaaaaab 	.word	0xaaaaaaab
 8002488:	08009acc 	.word	0x08009acc

0800248c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d11f      	bne.n	80024e6 <DMA_CheckFifoParam+0x5a>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d856      	bhi.n	800255a <DMA_CheckFifoParam+0xce>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <DMA_CheckFifoParam+0x28>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024c5 	.word	0x080024c5
 80024b8:	080024d7 	.word	0x080024d7
 80024bc:	080024c5 	.word	0x080024c5
 80024c0:	0800255b 	.word	0x0800255b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d046      	beq.n	800255e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d4:	e043      	b.n	800255e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024de:	d140      	bne.n	8002562 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e4:	e03d      	b.n	8002562 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ee:	d121      	bne.n	8002534 <DMA_CheckFifoParam+0xa8>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d837      	bhi.n	8002566 <DMA_CheckFifoParam+0xda>
 80024f6:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <DMA_CheckFifoParam+0x70>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	0800250d 	.word	0x0800250d
 8002500:	08002513 	.word	0x08002513
 8002504:	0800250d 	.word	0x0800250d
 8002508:	08002525 	.word	0x08002525
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      break;
 8002510:	e030      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d025      	beq.n	800256a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002522:	e022      	b.n	800256a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800252c:	d11f      	bne.n	800256e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002532:	e01c      	b.n	800256e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d903      	bls.n	8002542 <DMA_CheckFifoParam+0xb6>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d003      	beq.n	8002548 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002540:	e018      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
      break;
 8002546:	e015      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      break;
 8002558:	e00b      	b.n	8002572 <DMA_CheckFifoParam+0xe6>
      break;
 800255a:	bf00      	nop
 800255c:	e00a      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
      break;
 800255e:	bf00      	nop
 8002560:	e008      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
      break;
 8002562:	bf00      	nop
 8002564:	e006      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
      break;
 8002566:	bf00      	nop
 8002568:	e004      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
      break;
 800256a:	bf00      	nop
 800256c:	e002      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
      break;   
 800256e:	bf00      	nop
 8002570:	e000      	b.n	8002574 <DMA_CheckFifoParam+0xe8>
      break;
 8002572:	bf00      	nop
    }
  } 
  
  return status; 
 8002574:	7bfb      	ldrb	r3, [r7, #15]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e159      	b.n	8002854 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f040 8148 	bne.w	800284e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d005      	beq.n	80025d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d130      	bne.n	8002638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800260c:	2201      	movs	r2, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 0201 	and.w	r2, r3, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b03      	cmp	r3, #3
 8002642:	d017      	beq.n	8002674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d123      	bne.n	80026c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0203 	and.w	r2, r3, #3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a2 	beq.w	800284e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b57      	ldr	r3, [pc, #348]	; (800286c <HAL_GPIO_Init+0x2e8>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a56      	ldr	r2, [pc, #344]	; (800286c <HAL_GPIO_Init+0x2e8>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b54      	ldr	r3, [pc, #336]	; (800286c <HAL_GPIO_Init+0x2e8>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002726:	4a52      	ldr	r2, [pc, #328]	; (8002870 <HAL_GPIO_Init+0x2ec>)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a49      	ldr	r2, [pc, #292]	; (8002874 <HAL_GPIO_Init+0x2f0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_GPIO_Init+0x202>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a48      	ldr	r2, [pc, #288]	; (8002878 <HAL_GPIO_Init+0x2f4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0x1fe>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a47      	ldr	r2, [pc, #284]	; (800287c <HAL_GPIO_Init+0x2f8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00d      	beq.n	800277e <HAL_GPIO_Init+0x1fa>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a46      	ldr	r2, [pc, #280]	; (8002880 <HAL_GPIO_Init+0x2fc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x1f6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a45      	ldr	r2, [pc, #276]	; (8002884 <HAL_GPIO_Init+0x300>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_GPIO_Init+0x1f2>
 8002772:	2304      	movs	r3, #4
 8002774:	e008      	b.n	8002788 <HAL_GPIO_Init+0x204>
 8002776:	2307      	movs	r3, #7
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x204>
 800277a:	2303      	movs	r3, #3
 800277c:	e004      	b.n	8002788 <HAL_GPIO_Init+0x204>
 800277e:	2302      	movs	r3, #2
 8002780:	e002      	b.n	8002788 <HAL_GPIO_Init+0x204>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_GPIO_Init+0x204>
 8002786:	2300      	movs	r3, #0
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f002 0203 	and.w	r2, r2, #3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4093      	lsls	r3, r2
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002798:	4935      	ldr	r1, [pc, #212]	; (8002870 <HAL_GPIO_Init+0x2ec>)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_GPIO_Init+0x304>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ca:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <HAL_GPIO_Init+0x304>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_GPIO_Init+0x304>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f4:	4a24      	ldr	r2, [pc, #144]	; (8002888 <HAL_GPIO_Init+0x304>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fa:	4b23      	ldr	r3, [pc, #140]	; (8002888 <HAL_GPIO_Init+0x304>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800281e:	4a1a      	ldr	r2, [pc, #104]	; (8002888 <HAL_GPIO_Init+0x304>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_GPIO_Init+0x304>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002848:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <HAL_GPIO_Init+0x304>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b0f      	cmp	r3, #15
 8002858:	f67f aea2 	bls.w	80025a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40013800 	.word	0x40013800
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400
 800287c:	40020800 	.word	0x40020800
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021000 	.word	0x40021000
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e12b      	b.n	8002b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fe22 	bl	8001530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002924:	f002 fe56 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8002928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a81      	ldr	r2, [pc, #516]	; (8002b34 <HAL_I2C_Init+0x274>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d807      	bhi.n	8002944 <HAL_I2C_Init+0x84>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <HAL_I2C_Init+0x278>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e006      	b.n	8002952 <HAL_I2C_Init+0x92>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a7d      	ldr	r2, [pc, #500]	; (8002b3c <HAL_I2C_Init+0x27c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0e7      	b.n	8002b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a78      	ldr	r2, [pc, #480]	; (8002b40 <HAL_I2C_Init+0x280>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0c9b      	lsrs	r3, r3, #18
 8002964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_I2C_Init+0x274>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d802      	bhi.n	8002994 <HAL_I2C_Init+0xd4>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3301      	adds	r3, #1
 8002992:	e009      	b.n	80029a8 <HAL_I2C_Init+0xe8>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	4a69      	ldr	r2, [pc, #420]	; (8002b44 <HAL_I2C_Init+0x284>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	3301      	adds	r3, #1
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	495c      	ldr	r1, [pc, #368]	; (8002b34 <HAL_I2C_Init+0x274>)
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d819      	bhi.n	80029fc <HAL_I2C_Init+0x13c>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e59      	subs	r1, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029dc:	400b      	ands	r3, r1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_I2C_Init+0x138>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e59      	subs	r1, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	e051      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e04f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d111      	bne.n	8002a28 <HAL_I2C_Init+0x168>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e012      	b.n	8002a4e <HAL_I2C_Init+0x18e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	0099      	lsls	r1, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Init+0x196>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e022      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <HAL_I2C_Init+0x1bc>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e58      	subs	r0, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	440b      	add	r3, r1
 8002a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	6809      	ldr	r1, [r1, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6911      	ldr	r1, [r2, #16]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68d2      	ldr	r2, [r2, #12]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	000186a0 	.word	0x000186a0
 8002b38:	001e847f 	.word	0x001e847f
 8002b3c:	003d08ff 	.word	0x003d08ff
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7fe ffd8 	bl	8001b10 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 80e0 	bne.w	8002d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2319      	movs	r3, #25
 8002b76:	2201      	movs	r2, #1
 8002b78:	4970      	ldr	r1, [pc, #448]	; (8002d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f001 ff0a 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0d3      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2C_Master_Transmit+0x50>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d007      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2221      	movs	r2, #33	; 0x21
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	893a      	ldrh	r2, [r7, #8]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f001 fc88 	bl	800451c <I2C_MasterRequestWrite>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e08d      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c2c:	e066      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f001 ff84 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	6a39      	ldr	r1, [r7, #32]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f001 ff74 	bl	8004bc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d107      	bne.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01a      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d194      	bne.n	8002c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	f040 810d 	bne.w	8002f84 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d6a:	4b89      	ldr	r3, [pc, #548]	; (8002f90 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	4a88      	ldr	r2, [pc, #544]	; (8002f94 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a1a      	lsrs	r2, r3, #8
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0e3      	b.n	8002f86 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d0db      	beq.n	8002d84 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Master_Receive_DMA+0x96>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e0d5      	b.n	8002f86 <HAL_I2C_Master_Receive_DMA+0x242>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d007      	beq.n	8002e00 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2222      	movs	r2, #34	; 0x22
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	893a      	ldrh	r2, [r7, #8]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a56      	ldr	r2, [pc, #344]	; (8002f98 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e42:	897a      	ldrh	r2, [r7, #10]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d07b      	beq.n	8002f48 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d02a      	beq.n	8002eae <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	4a4f      	ldr	r2, [pc, #316]	; (8002f9c <HAL_I2C_Master_Receive_DMA+0x258>)
 8002e5e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	4a4e      	ldr	r2, [pc, #312]	; (8002fa0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002e66:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	2200      	movs	r2, #0
 8002e86:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3310      	adds	r3, #16
 8002e92:	4619      	mov	r1, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	f7ff f803 	bl	8001ea8 <HAL_DMA_Start_IT>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d139      	bne.n	8002f20 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002eac:	e013      	b.n	8002ed6 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e057      	b.n	8002f86 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f0c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	e02f      	b.n	8002f80 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e01e      	b.n	8002f86 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f5e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000010 	.word	0x20000010
 8002f94:	14f8b589 	.word	0x14f8b589
 8002f98:	ffff0000 	.word	0xffff0000
 8002f9c:	08004621 	.word	0x08004621
 8002fa0:	080047cb 	.word	0x080047cb

08002fa4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d003      	beq.n	8002fdc <HAL_I2C_EV_IRQHandler+0x38>
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	f040 80c1 	bne.w	800315e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10d      	bne.n	8003012 <HAL_I2C_EV_IRQHandler+0x6e>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ffc:	d003      	beq.n	8003006 <HAL_I2C_EV_IRQHandler+0x62>
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003004:	d101      	bne.n	800300a <HAL_I2C_EV_IRQHandler+0x66>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_I2C_EV_IRQHandler+0x68>
 800300a:	2300      	movs	r3, #0
 800300c:	2b01      	cmp	r3, #1
 800300e:	f000 8132 	beq.w	8003276 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00c      	beq.n	8003036 <HAL_I2C_EV_IRQHandler+0x92>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	0a5b      	lsrs	r3, r3, #9
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d006      	beq.n	8003036 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f001 fe6c 	bl	8004d06 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fcc8 	bl	80039c4 <I2C_Master_SB>
 8003034:	e092      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	08db      	lsrs	r3, r3, #3
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0xb2>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	0a5b      	lsrs	r3, r3, #9
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fd3e 	bl	8003ad0 <I2C_Master_ADD10>
 8003054:	e082      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_I2C_EV_IRQHandler+0xd2>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	0a5b      	lsrs	r3, r3, #9
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fd58 	bl	8003b24 <I2C_Master_ADDR>
 8003074:	e072      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d03b      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003090:	f000 80f3 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	09db      	lsrs	r3, r3, #7
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00f      	beq.n	80030c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f942 	bl	8003342 <I2C_MasterTransmit_TXE>
 80030be:	e04d      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80d6 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	0a5b      	lsrs	r3, r3, #9
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80cf 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	2b21      	cmp	r3, #33	; 0x21
 80030e0:	d103      	bne.n	80030ea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f9c9 	bl	800347a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e8:	e0c7      	b.n	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	f040 80c4 	bne.w	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa37 	bl	8003566 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f8:	e0bf      	b.n	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003108:	f000 80b7 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00f      	beq.n	8003138 <HAL_I2C_EV_IRQHandler+0x194>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	0a9b      	lsrs	r3, r3, #10
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d009      	beq.n	8003138 <HAL_I2C_EV_IRQHandler+0x194>
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 faac 	bl	800368e <I2C_MasterReceive_RXNE>
 8003136:	e011      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 809a 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	0a5b      	lsrs	r3, r3, #9
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8093 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb4b 	bl	80037f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315a:	e08e      	b.n	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
 800315c:	e08d      	b.n	800327a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e007      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <HAL_I2C_EV_IRQHandler+0x20e>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031a8:	69b9      	ldr	r1, [r7, #24]
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 ff09 	bl	8003fc2 <I2C_Slave_ADDR>
 80031b0:	e066      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_I2C_EV_IRQHandler+0x22e>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	0a5b      	lsrs	r3, r3, #9
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 ff44 	bl	8004058 <I2C_Slave_STOPF>
 80031d0:	e056      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031d2:	7bbb      	ldrb	r3, [r7, #14]
 80031d4:	2b21      	cmp	r3, #33	; 0x21
 80031d6:	d002      	beq.n	80031de <HAL_I2C_EV_IRQHandler+0x23a>
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
 80031da:	2b29      	cmp	r3, #41	; 0x29
 80031dc:	d125      	bne.n	800322a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	09db      	lsrs	r3, r3, #7
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00f      	beq.n	800320a <HAL_I2C_EV_IRQHandler+0x266>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	0a9b      	lsrs	r3, r3, #10
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_I2C_EV_IRQHandler+0x266>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fe1f 	bl	8003e46 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003208:	e039      	b.n	800327e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d033      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x2da>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	0a5b      	lsrs	r3, r3, #9
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02d      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fe4c 	bl	8003ec0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003228:	e029      	b.n	800327e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00f      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	0a9b      	lsrs	r3, r3, #10
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fe57 	bl	8003f02 <I2C_SlaveReceive_RXNE>
 8003254:	e014      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	0a5b      	lsrs	r3, r3, #9
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fe85 	bl	8003f7e <I2C_SlaveReceive_BTF>
 8003274:	e004      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003276:	bf00      	nop
 8003278:	e002      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327a:	bf00      	nop
 800327c:	e000      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800327e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	70fb      	strb	r3, [r7, #3]
 80032ce:	4613      	mov	r3, r2
 80032d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003358:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d150      	bne.n	800340a <I2C_MasterTransmit_TXE+0xc8>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b21      	cmp	r3, #33	; 0x21
 800336c:	d14d      	bne.n	800340a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d01d      	beq.n	80033b0 <I2C_MasterTransmit_TXE+0x6e>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b20      	cmp	r3, #32
 8003378:	d01a      	beq.n	80033b0 <I2C_MasterTransmit_TXE+0x6e>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003380:	d016      	beq.n	80033b0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003390:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2211      	movs	r2, #17
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff6c 	bl	8003286 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ae:	e060      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033be:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d107      	bne.n	80033fa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ff7d 	bl	80032f2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033f8:	e03b      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff3f 	bl	8003286 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003408:	e033      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b21      	cmp	r3, #33	; 0x21
 800340e:	d005      	beq.n	800341c <I2C_MasterTransmit_TXE+0xda>
 8003410:	7bbb      	ldrb	r3, [r7, #14]
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d12d      	bne.n	8003472 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b22      	cmp	r3, #34	; 0x22
 800341a:	d12a      	bne.n	8003472 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003434:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003436:	e01c      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d103      	bne.n	800344c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f88e 	bl	8003566 <I2C_MemoryTransmit_TXE_BTF>
}
 800344a:	e012      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003470:	e7ff      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b21      	cmp	r3, #33	; 0x21
 8003492:	d164      	bne.n	800355e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80034c2:	e04c      	b.n	800355e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d01d      	beq.n	8003506 <I2C_MasterTransmit_BTF+0x8c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d01a      	beq.n	8003506 <I2C_MasterTransmit_BTF+0x8c>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d6:	d016      	beq.n	8003506 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2211      	movs	r2, #17
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fec1 	bl	8003286 <HAL_I2C_MasterTxCpltCallback>
}
 8003504:	e02b      	b.n	800355e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003514:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003524:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d107      	bne.n	8003550 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff fed2 	bl	80032f2 <HAL_I2C_MemTxCpltCallback>
}
 800354e:	e006      	b.n	800355e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fe94 	bl	8003286 <HAL_I2C_MasterTxCpltCallback>
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11d      	bne.n	80035ba <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d10b      	bne.n	800359e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358a:	b2da      	uxtb	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	1c9a      	adds	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800359c:	e073      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	121b      	asrs	r3, r3, #8
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035b8:	e065      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10b      	bne.n	80035da <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035d8:	e055      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d151      	bne.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b22      	cmp	r3, #34	; 0x22
 80035e6:	d10d      	bne.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003602:	e040      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d015      	beq.n	800363a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b21      	cmp	r3, #33	; 0x21
 8003612:	d112      	bne.n	800363a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003638:	e025      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d120      	bne.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b21      	cmp	r3, #33	; 0x21
 8003648:	d11d      	bne.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003658:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003668:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fe36 	bl	80032f2 <HAL_I2C_MemTxCpltCallback>
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b22      	cmp	r3, #34	; 0x22
 80036a0:	f040 80a2 	bne.w	80037e8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d921      	bls.n	80036f6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b03      	cmp	r3, #3
 80036e0:	f040 8082 	bne.w	80037e8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80036f4:	e078      	b.n	80037e8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d074      	beq.n	80037e8 <I2C_MasterReceive_RXNE+0x15a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d002      	beq.n	800370a <I2C_MasterReceive_RXNE+0x7c>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d16e      	bne.n	80037e8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f001 fa9a 	bl	8004c44 <I2C_WaitOnSTOPRequestThroughIT>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d142      	bne.n	800379c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003724:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003734:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d10a      	bne.n	8003786 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fdc1 	bl	8003306 <HAL_I2C_MemRxCpltCallback>
}
 8003784:	e030      	b.n	80037e8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2212      	movs	r2, #18
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fd fd6f 	bl	8001278 <HAL_I2C_MasterRxCpltCallback>
}
 800379a:	e025      	b.n	80037e8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fd99 	bl	800331a <HAL_I2C_ErrorCallback>
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b04      	cmp	r3, #4
 8003806:	d11b      	bne.n	8003840 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800383e:	e0bd      	b.n	80039bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d129      	bne.n	800389e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003858:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d00a      	beq.n	8003876 <I2C_MasterReceive_BTF+0x86>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d007      	beq.n	8003876 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003874:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800389c:	e08e      	b.n	80039bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d176      	bne.n	8003996 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d002      	beq.n	80038b4 <I2C_MasterReceive_BTF+0xc4>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d108      	bne.n	80038c6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e019      	b.n	80038fa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d002      	beq.n	80038d2 <I2C_MasterReceive_BTF+0xe2>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d108      	bne.n	80038e4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e00a      	b.n	80038fa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d007      	beq.n	80038fa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003954:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d10a      	bne.n	8003980 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fcc4 	bl	8003306 <HAL_I2C_MemRxCpltCallback>
}
 800397e:	e01d      	b.n	80039bc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2212      	movs	r2, #18
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fc72 	bl	8001278 <HAL_I2C_MasterRxCpltCallback>
}
 8003994:	e012      	b.n	80039bc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d117      	bne.n	8003a08 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039f2:	e067      	b.n	8003ac4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]
}
 8003a06:	e05d      	b.n	8003ac4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a10:	d133      	bne.n	8003a7a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b21      	cmp	r3, #33	; 0x21
 8003a1c:	d109      	bne.n	8003a32 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	e008      	b.n	8003a44 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <I2C_Master_SB+0x92>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d032      	beq.n	8003ac4 <I2C_Master_SB+0x100>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02d      	beq.n	8003ac4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a76:	605a      	str	r2, [r3, #4]
}
 8003a78:	e024      	b.n	8003ac4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10e      	bne.n	8003aa0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	11db      	asrs	r3, r3, #7
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 0306 	and.w	r3, r3, #6
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f063 030f 	orn	r3, r3, #15
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	611a      	str	r2, [r3, #16]
}
 8003a9e:	e011      	b.n	8003ac4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10d      	bne.n	8003ac4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	11db      	asrs	r3, r3, #7
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 0306 	and.w	r3, r3, #6
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f063 030e 	orn	r3, r3, #14
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	611a      	str	r2, [r3, #16]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <I2C_Master_ADD10+0x26>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <I2C_Master_ADD10+0x48>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b16:	605a      	str	r2, [r3, #4]
  }
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b091      	sub	sp, #68	; 0x44
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b22      	cmp	r3, #34	; 0x22
 8003b4c:	f040 8169 	bne.w	8003e22 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10f      	bne.n	8003b78 <I2C_Master_ADDR+0x54>
 8003b58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d10b      	bne.n	8003b78 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b60:	2300      	movs	r3, #0
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	e160      	b.n	8003e3a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d11d      	bne.n	8003bbc <I2C_Master_ADDR+0x98>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b88:	d118      	bne.n	8003bbc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8003bba:	e13e      	b.n	8003e3a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d113      	bne.n	8003bee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e115      	b.n	8003e1a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f040 808a 	bne.w	8003d0e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c00:	d137      	bne.n	8003c72 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c20:	d113      	bne.n	8003c4a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c30:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	e0e7      	b.n	8003e1a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e0d3      	b.n	8003e1a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d02e      	beq.n	8003cd6 <I2C_Master_ADDR+0x1b2>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d02b      	beq.n	8003cd6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c80:	2b12      	cmp	r3, #18
 8003c82:	d102      	bne.n	8003c8a <I2C_Master_ADDR+0x166>
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d125      	bne.n	8003cd6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d00e      	beq.n	8003cae <I2C_Master_ADDR+0x18a>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d00b      	beq.n	8003cae <I2C_Master_ADDR+0x18a>
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d008      	beq.n	8003cae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e007      	b.n	8003cbe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	e0a1      	b.n	8003e1a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e085      	b.n	8003e1a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d14d      	bne.n	8003db4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d016      	beq.n	8003d4c <I2C_Master_ADDR+0x228>
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d013      	beq.n	8003d4c <I2C_Master_ADDR+0x228>
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d010      	beq.n	8003d4c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e007      	b.n	8003d5c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6a:	d117      	bne.n	8003d9c <I2C_Master_ADDR+0x278>
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d72:	d00b      	beq.n	8003d8c <I2C_Master_ADDR+0x268>
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d008      	beq.n	8003d8c <I2C_Master_ADDR+0x268>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d005      	beq.n	8003d8c <I2C_Master_ADDR+0x268>
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	d002      	beq.n	8003d8c <I2C_Master_ADDR+0x268>
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d107      	bne.n	8003d9c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d9a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	e032      	b.n	8003e1a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd2:	d117      	bne.n	8003e04 <I2C_Master_ADDR+0x2e0>
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dda:	d00b      	beq.n	8003df4 <I2C_Master_ADDR+0x2d0>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d008      	beq.n	8003df4 <I2C_Master_ADDR+0x2d0>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d005      	beq.n	8003df4 <I2C_Master_ADDR+0x2d0>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d002      	beq.n	8003df4 <I2C_Master_ADDR+0x2d0>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d107      	bne.n	8003e04 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e02:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e20:	e00b      	b.n	8003e3a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
}
 8003e38:	e7ff      	b.n	8003e3a <I2C_Master_ADDR+0x316>
 8003e3a:	bf00      	nop
 8003e3c:	3744      	adds	r7, #68	; 0x44
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02b      	beq.n	8003eb8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d114      	bne.n	8003eb8 <I2C_SlaveTransmit_TXE+0x72>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b29      	cmp	r3, #41	; 0x29
 8003e92:	d111      	bne.n	8003eb8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2221      	movs	r2, #33	; 0x21
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2228      	movs	r2, #40	; 0x28
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff f9f1 	bl	800329a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02c      	beq.n	8003f76 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d114      	bne.n	8003f76 <I2C_SlaveReceive_RXNE+0x74>
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f50:	d111      	bne.n	8003f76 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f60:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2222      	movs	r2, #34	; 0x22
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2228      	movs	r2, #40	; 0x28
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff f99c 	bl	80032ae <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fdc:	2b28      	cmp	r3, #40	; 0x28
 8003fde:	d127      	bne.n	8004030 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	09db      	lsrs	r3, r3, #7
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	81bb      	strh	r3, [r7, #12]
 8004012:	e002      	b.n	800401a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004022:	89ba      	ldrh	r2, [r7, #12]
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	4619      	mov	r1, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff f94a 	bl	80032c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800402e:	e00e      	b.n	800404e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004076:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b4:	d172      	bne.n	800419c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b22      	cmp	r3, #34	; 0x22
 80040ba:	d002      	beq.n	80040c2 <I2C_Slave_STOPF+0x6a>
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	2b2a      	cmp	r3, #42	; 0x2a
 80040c0:	d135      	bne.n	800412e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f043 0204 	orr.w	r2, r3, #4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe f948 	bl	8002390 <HAL_DMA_GetState>
 8004100:	4603      	mov	r3, r0
 8004102:	2b01      	cmp	r3, #1
 8004104:	d049      	beq.n	800419a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	4a69      	ldr	r2, [pc, #420]	; (80042b0 <I2C_Slave_STOPF+0x258>)
 800410c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd ff90 	bl	8002038 <HAL_DMA_Abort_IT>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d03d      	beq.n	800419a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004128:	4610      	mov	r0, r2
 800412a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800412c:	e035      	b.n	800419a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004160:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe f912 	bl	8002390 <HAL_DMA_GetState>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	d014      	beq.n	800419c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	4a4e      	ldr	r2, [pc, #312]	; (80042b0 <I2C_Slave_STOPF+0x258>)
 8004178:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	4618      	mov	r0, r3
 8004180:	f7fd ff5a 	bl	8002038 <HAL_DMA_Abort_IT>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004194:	4610      	mov	r0, r2
 8004196:	4798      	blx	r3
 8004198:	e000      	b.n	800419c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800419a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03e      	beq.n	8004224 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d112      	bne.n	80041da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d112      	bne.n	800420e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f843 	bl	80042b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004232:	e039      	b.n	80042a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b2a      	cmp	r3, #42	; 0x2a
 8004238:	d109      	bne.n	800424e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2228      	movs	r2, #40	; 0x28
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff f830 	bl	80032ae <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b28      	cmp	r3, #40	; 0x28
 8004258:	d111      	bne.n	800427e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <I2C_Slave_STOPF+0x25c>)
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff f831 	bl	80032de <HAL_I2C_ListenCpltCallback>
}
 800427c:	e014      	b.n	80042a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	2b22      	cmp	r3, #34	; 0x22
 8004284:	d002      	beq.n	800428c <I2C_Slave_STOPF+0x234>
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2b22      	cmp	r3, #34	; 0x22
 800428a:	d10d      	bne.n	80042a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff f803 	bl	80032ae <HAL_I2C_SlaveRxCpltCallback>
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	08004845 	.word	0x08004845
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042d0:	7bbb      	ldrb	r3, [r7, #14]
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d002      	beq.n	80042dc <I2C_ITError+0x24>
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d10a      	bne.n	80042f2 <I2C_ITError+0x3a>
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b22      	cmp	r3, #34	; 0x22
 80042e0:	d107      	bne.n	80042f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042f8:	2b28      	cmp	r3, #40	; 0x28
 80042fa:	d107      	bne.n	800430c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2228      	movs	r2, #40	; 0x28
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800430a:	e015      	b.n	8004338 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431a:	d00a      	beq.n	8004332 <I2C_ITError+0x7a>
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b60      	cmp	r3, #96	; 0x60
 8004320:	d007      	beq.n	8004332 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004346:	d162      	bne.n	800440e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004356:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d020      	beq.n	80043a8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	4a6a      	ldr	r2, [pc, #424]	; (8004514 <I2C_ITError+0x25c>)
 800436c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd fe60 	bl	8002038 <HAL_DMA_Abort_IT>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8089 	beq.w	8004492 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043a2:	4610      	mov	r0, r2
 80043a4:	4798      	blx	r3
 80043a6:	e074      	b.n	8004492 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	4a59      	ldr	r2, [pc, #356]	; (8004514 <I2C_ITError+0x25c>)
 80043ae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fe3f 	bl	8002038 <HAL_DMA_Abort_IT>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d068      	beq.n	8004492 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d10b      	bne.n	80043e6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004408:	4610      	mov	r0, r2
 800440a:	4798      	blx	r3
 800440c:	e041      	b.n	8004492 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b60      	cmp	r3, #96	; 0x60
 8004418:	d125      	bne.n	8004466 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d10b      	bne.n	800444e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fe ff65 	bl	800332e <HAL_I2C_AbortCpltCallback>
 8004464:	e015      	b.n	8004492 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d10b      	bne.n	800448c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7fe ff44 	bl	800331a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10e      	bne.n	80044c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d113      	bne.n	800450c <I2C_ITError+0x254>
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b28      	cmp	r3, #40	; 0x28
 80044e8:	d110      	bne.n	800450c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <I2C_ITError+0x260>)
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fe fee9 	bl	80032de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	08004845 	.word	0x08004845
 8004518:	ffff0000 	.word	0xffff0000

0800451c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	460b      	mov	r3, r1
 800452a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d006      	beq.n	8004546 <I2C_MasterRequestWrite+0x2a>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d003      	beq.n	8004546 <I2C_MasterRequestWrite+0x2a>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004544:	d108      	bne.n	8004558 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e00b      	b.n	8004570 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	2b12      	cmp	r3, #18
 800455e:	d107      	bne.n	8004570 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800456e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fa09 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004596:	d103      	bne.n	80045a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e035      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045bc:	611a      	str	r2, [r3, #16]
 80045be:	e01b      	b.n	80045f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c0:	897b      	ldrh	r3, [r7, #10]
 80045c2:	11db      	asrs	r3, r3, #7
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0306 	and.w	r3, r3, #6
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f063 030f 	orn	r3, r3, #15
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	490e      	ldr	r1, [pc, #56]	; (8004618 <I2C_MasterRequestWrite+0xfc>)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fa2f 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e010      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045ee:	897b      	ldrh	r3, [r7, #10]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4907      	ldr	r1, [pc, #28]	; (800461c <I2C_MasterRequestWrite+0x100>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fa1f 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	00010008 	.word	0x00010008
 800461c:	00010002 	.word	0x00010002

08004620 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004652:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	2200      	movs	r2, #0
 8004662:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	2200      	movs	r2, #0
 8004672:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800467a:	2b21      	cmp	r3, #33	; 0x21
 800467c:	d007      	beq.n	800468e <I2C_DMAXferCplt+0x6e>
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004684:	2b22      	cmp	r3, #34	; 0x22
 8004686:	d131      	bne.n	80046ec <I2C_DMAXferCplt+0xcc>
 8004688:	7cbb      	ldrb	r3, [r7, #18]
 800468a:	2b20      	cmp	r3, #32
 800468c:	d12e      	bne.n	80046ec <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800469c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b29      	cmp	r3, #41	; 0x29
 80046a8:	d10a      	bne.n	80046c0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2221      	movs	r2, #33	; 0x21
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2228      	movs	r2, #40	; 0x28
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	f7fe fdee 	bl	800329a <HAL_I2C_SlaveTxCpltCallback>
 80046be:	e00c      	b.n	80046da <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	2b2a      	cmp	r3, #42	; 0x2a
 80046c4:	d109      	bne.n	80046da <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2222      	movs	r2, #34	; 0x22
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2228      	movs	r2, #40	; 0x28
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046d4:	6978      	ldr	r0, [r7, #20]
 80046d6:	f7fe fdea 	bl	80032ae <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80046e8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046ea:	e06a      	b.n	80047c2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d064      	beq.n	80047c2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004710:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004720:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004728:	d009      	beq.n	800473e <I2C_DMAXferCplt+0x11e>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d006      	beq.n	800473e <I2C_DMAXferCplt+0x11e>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004736:	d002      	beq.n	800473e <I2C_DMAXferCplt+0x11e>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b20      	cmp	r3, #32
 800473c:	d107      	bne.n	800474e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800475c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800477c:	6978      	ldr	r0, [r7, #20]
 800477e:	f7fe fdcc 	bl	800331a <HAL_I2C_ErrorCallback>
}
 8004782:	e01e      	b.n	80047c2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d10a      	bne.n	80047ae <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80047a6:	6978      	ldr	r0, [r7, #20]
 80047a8:	f7fe fdad 	bl	8003306 <HAL_I2C_MemRxCpltCallback>
}
 80047ac:	e009      	b.n	80047c2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2212      	movs	r2, #18
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80047bc:	6978      	ldr	r0, [r7, #20]
 80047be:	f7fc fd5b 	bl	8001278 <HAL_I2C_MasterRxCpltCallback>
}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	2200      	movs	r2, #0
 80047e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	2200      	movs	r2, #0
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fd fdd7 	bl	80023ac <HAL_DMA_GetError>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b02      	cmp	r3, #2
 8004802:	d01b      	beq.n	800483c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f043 0210 	orr.w	r2, r3, #16
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7fe fd6f 	bl	800331a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800485e:	4b4b      	ldr	r3, [pc, #300]	; (800498c <I2C_DMAAbort+0x148>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	08db      	lsrs	r3, r3, #3
 8004864:	4a4a      	ldr	r2, [pc, #296]	; (8004990 <I2C_DMAAbort+0x14c>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	0a1a      	lsrs	r2, r3, #8
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	00da      	lsls	r2, r3, #3
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800488a:	e00a      	b.n	80048a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b01      	subs	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a0:	d0ea      	beq.n	8004878 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	2200      	movs	r2, #0
 80048b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	2200      	movs	r2, #0
 80048c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2200      	movs	r2, #0
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	2200      	movs	r2, #0
 80048e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	2200      	movs	r2, #0
 80048f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b60      	cmp	r3, #96	; 0x60
 8004912:	d10e      	bne.n	8004932 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2200      	movs	r2, #0
 8004928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7fe fcff 	bl	800332e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004930:	e027      	b.n	8004982 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004938:	2b28      	cmp	r3, #40	; 0x28
 800493a:	d117      	bne.n	800496c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800495a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2228      	movs	r2, #40	; 0x28
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800496a:	e007      	b.n	800497c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800497c:	6978      	ldr	r0, [r7, #20]
 800497e:	f7fe fccc 	bl	800331a <HAL_I2C_ErrorCallback>
}
 8004982:	bf00      	nop
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000010 	.word	0x20000010
 8004990:	14f8b589 	.word	0x14f8b589

08004994 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a4:	e025      	b.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d021      	beq.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fd f8af 	bl	8001b10 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e023      	b.n	8004a3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d10d      	bne.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	e00c      	b.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d0b6      	beq.n	80049a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a50:	e051      	b.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	d123      	bne.n	8004aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e046      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d021      	beq.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fd f82d 	bl	8001b10 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e020      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10c      	bne.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e00b      	b.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	43da      	mvns	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d18d      	bne.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b4c:	e02d      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f8aa 	bl	8004ca8 <I2C_IsAcknowledgeFailed>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e02d      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d021      	beq.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fc ffd3 	bl	8001b10 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e007      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d1ca      	bne.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bce:	e02d      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f869 	bl	8004ca8 <I2C_IsAcknowledgeFailed>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e02d      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d021      	beq.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fc ff92 	bl	8001b10 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e007      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d1ca      	bne.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	0a1a      	lsrs	r2, r3, #8
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e008      	b.n	8004c94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c90:	d0e9      	beq.n	8004c66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	20000010 	.word	0x20000010
 8004ca4:	14f8b589 	.word	0x14f8b589

08004ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbe:	d11b      	bne.n	8004cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0204 	orr.w	r2, r3, #4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d16:	d103      	bne.n	8004d20 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d1e:	e007      	b.n	8004d30 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d28:	d102      	bne.n	8004d30 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e264      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d075      	beq.n	8004e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d5a:	4ba3      	ldr	r3, [pc, #652]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d00c      	beq.n	8004d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d66:	4ba0      	ldr	r3, [pc, #640]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d112      	bne.n	8004d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d72:	4b9d      	ldr	r3, [pc, #628]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7e:	d10b      	bne.n	8004d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d80:	4b99      	ldr	r3, [pc, #612]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d05b      	beq.n	8004e44 <HAL_RCC_OscConfig+0x108>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d157      	bne.n	8004e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e23f      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da0:	d106      	bne.n	8004db0 <HAL_RCC_OscConfig+0x74>
 8004da2:	4b91      	ldr	r3, [pc, #580]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a90      	ldr	r2, [pc, #576]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e01d      	b.n	8004dec <HAL_RCC_OscConfig+0xb0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x98>
 8004dba:	4b8b      	ldr	r3, [pc, #556]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a8a      	ldr	r2, [pc, #552]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4b88      	ldr	r3, [pc, #544]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a87      	ldr	r2, [pc, #540]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e00b      	b.n	8004dec <HAL_RCC_OscConfig+0xb0>
 8004dd4:	4b84      	ldr	r3, [pc, #528]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a83      	ldr	r2, [pc, #524]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	4b81      	ldr	r3, [pc, #516]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a80      	ldr	r2, [pc, #512]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d013      	beq.n	8004e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7fc fe8c 	bl	8001b10 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fc fe88 	bl	8001b10 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e204      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	4b76      	ldr	r3, [pc, #472]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0xc0>
 8004e1a:	e014      	b.n	8004e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fc fe78 	bl	8001b10 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e24:	f7fc fe74 	bl	8001b10 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e1f0      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e36:	4b6c      	ldr	r3, [pc, #432]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0xe8>
 8004e42:	e000      	b.n	8004e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d063      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e52:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5e:	4b62      	ldr	r3, [pc, #392]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d11c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6a:	4b5f      	ldr	r3, [pc, #380]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d116      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	4b5c      	ldr	r3, [pc, #368]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_RCC_OscConfig+0x152>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d001      	beq.n	8004e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e1c4      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8e:	4b56      	ldr	r3, [pc, #344]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	4952      	ldr	r1, [pc, #328]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	e03a      	b.n	8004f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eac:	4b4f      	ldr	r3, [pc, #316]	; (8004fec <HAL_RCC_OscConfig+0x2b0>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fc fe2d 	bl	8001b10 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eba:	f7fc fe29 	bl	8001b10 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e1a5      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ecc:	4b46      	ldr	r3, [pc, #280]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed8:	4b43      	ldr	r3, [pc, #268]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4940      	ldr	r1, [pc, #256]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]
 8004eec:	e015      	b.n	8004f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <HAL_RCC_OscConfig+0x2b0>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fc fe0c 	bl	8001b10 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004efc:	f7fc fe08 	bl	8001b10 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e184      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0e:	4b36      	ldr	r3, [pc, #216]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d030      	beq.n	8004f88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2e:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <HAL_RCC_OscConfig+0x2b4>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fc fdec 	bl	8001b10 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fc fde8 	bl	8001b10 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e164      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4e:	4b26      	ldr	r3, [pc, #152]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x200>
 8004f5a:	e015      	b.n	8004f88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5c:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <HAL_RCC_OscConfig+0x2b4>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f62:	f7fc fdd5 	bl	8001b10 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f6a:	f7fc fdd1 	bl	8001b10 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e14d      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80a0 	beq.w	80050d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_RCC_OscConfig+0x2b8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d121      	bne.n	8005016 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_RCC_OscConfig+0x2b8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <HAL_RCC_OscConfig+0x2b8>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fde:	f7fc fd97 	bl	8001b10 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	e011      	b.n	800500a <HAL_RCC_OscConfig+0x2ce>
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	42470000 	.word	0x42470000
 8004ff0:	42470e80 	.word	0x42470e80
 8004ff4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff8:	f7fc fd8a 	bl	8001b10 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e106      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b85      	ldr	r3, [pc, #532]	; (8005220 <HAL_RCC_OscConfig+0x4e4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d106      	bne.n	800502c <HAL_RCC_OscConfig+0x2f0>
 800501e:	4b81      	ldr	r3, [pc, #516]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	4a80      	ldr	r2, [pc, #512]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6713      	str	r3, [r2, #112]	; 0x70
 800502a:	e01c      	b.n	8005066 <HAL_RCC_OscConfig+0x32a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b05      	cmp	r3, #5
 8005032:	d10c      	bne.n	800504e <HAL_RCC_OscConfig+0x312>
 8005034:	4b7b      	ldr	r3, [pc, #492]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	4a7a      	ldr	r2, [pc, #488]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 800503a:	f043 0304 	orr.w	r3, r3, #4
 800503e:	6713      	str	r3, [r2, #112]	; 0x70
 8005040:	4b78      	ldr	r3, [pc, #480]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005044:	4a77      	ldr	r2, [pc, #476]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6713      	str	r3, [r2, #112]	; 0x70
 800504c:	e00b      	b.n	8005066 <HAL_RCC_OscConfig+0x32a>
 800504e:	4b75      	ldr	r3, [pc, #468]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	4a74      	ldr	r2, [pc, #464]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	6713      	str	r3, [r2, #112]	; 0x70
 800505a:	4b72      	ldr	r3, [pc, #456]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	4a71      	ldr	r2, [pc, #452]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005060:	f023 0304 	bic.w	r3, r3, #4
 8005064:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d015      	beq.n	800509a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506e:	f7fc fd4f 	bl	8001b10 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005074:	e00a      	b.n	800508c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005076:	f7fc fd4b 	bl	8001b10 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0c5      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508c:	4b65      	ldr	r3, [pc, #404]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ee      	beq.n	8005076 <HAL_RCC_OscConfig+0x33a>
 8005098:	e014      	b.n	80050c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509a:	f7fc fd39 	bl	8001b10 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a0:	e00a      	b.n	80050b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a2:	f7fc fd35 	bl	8001b10 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e0af      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b8:	4b5a      	ldr	r3, [pc, #360]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ee      	bne.n	80050a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d105      	bne.n	80050d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ca:	4b56      	ldr	r3, [pc, #344]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	4a55      	ldr	r2, [pc, #340]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 80050d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 809b 	beq.w	8005216 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050e0:	4b50      	ldr	r3, [pc, #320]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 030c 	and.w	r3, r3, #12
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d05c      	beq.n	80051a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d141      	bne.n	8005178 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f4:	4b4c      	ldr	r3, [pc, #304]	; (8005228 <HAL_RCC_OscConfig+0x4ec>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fa:	f7fc fd09 	bl	8001b10 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005102:	f7fc fd05 	bl	8001b10 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e081      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005114:	4b43      	ldr	r3, [pc, #268]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	019b      	lsls	r3, r3, #6
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	3b01      	subs	r3, #1
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	4937      	ldr	r1, [pc, #220]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 8005146:	4313      	orrs	r3, r2
 8005148:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514a:	4b37      	ldr	r3, [pc, #220]	; (8005228 <HAL_RCC_OscConfig+0x4ec>)
 800514c:	2201      	movs	r2, #1
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fc fcde 	bl	8001b10 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005158:	f7fc fcda 	bl	8001b10 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e056      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	4b2e      	ldr	r3, [pc, #184]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x41c>
 8005176:	e04e      	b.n	8005216 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005178:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <HAL_RCC_OscConfig+0x4ec>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517e:	f7fc fcc7 	bl	8001b10 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005186:	f7fc fcc3 	bl	8001b10 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e03f      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005198:	4b22      	ldr	r3, [pc, #136]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f0      	bne.n	8005186 <HAL_RCC_OscConfig+0x44a>
 80051a4:	e037      	b.n	8005216 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e032      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_RCC_OscConfig+0x4e8>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d028      	beq.n	8005212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d121      	bne.n	8005212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d11a      	bne.n	8005212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051e2:	4013      	ands	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d111      	bne.n	8005212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	3b01      	subs	r3, #1
 80051fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d107      	bne.n	8005212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d001      	beq.n	8005216 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40007000 	.word	0x40007000
 8005224:	40023800 	.word	0x40023800
 8005228:	42470060 	.word	0x42470060

0800522c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0cc      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005240:	4b68      	ldr	r3, [pc, #416]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d90c      	bls.n	8005268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b65      	ldr	r3, [pc, #404]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b63      	ldr	r3, [pc, #396]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0b8      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005280:	4b59      	ldr	r3, [pc, #356]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4a58      	ldr	r2, [pc, #352]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800528a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005298:	4b53      	ldr	r3, [pc, #332]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	4a52      	ldr	r2, [pc, #328]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a4:	4b50      	ldr	r3, [pc, #320]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	494d      	ldr	r1, [pc, #308]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d044      	beq.n	800534c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b47      	ldr	r3, [pc, #284]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d119      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e07f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d003      	beq.n	80052ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ea:	4b3f      	ldr	r3, [pc, #252]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e06f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	4b3b      	ldr	r3, [pc, #236]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e067      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b37      	ldr	r3, [pc, #220]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4934      	ldr	r1, [pc, #208]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800531c:	f7fc fbf8 	bl	8001b10 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7fc fbf4 	bl	8001b10 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e04f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800534c:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d20c      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e032      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005380:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4916      	ldr	r1, [pc, #88]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539e:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	490e      	ldr	r1, [pc, #56]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053b2:	f000 f821 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 80053b6:	4602      	mov	r2, r0
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	490a      	ldr	r1, [pc, #40]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 80053c4:	5ccb      	ldrb	r3, [r1, r3]
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fc fb58 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023c00 	.word	0x40023c00
 80053e8:	40023800 	.word	0x40023800
 80053ec:	08009ab4 	.word	0x08009ab4
 80053f0:	20000010 	.word	0x20000010
 80053f4:	20000014 	.word	0x20000014

080053f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	607b      	str	r3, [r7, #4]
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	2300      	movs	r3, #0
 800540a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005410:	4b67      	ldr	r3, [pc, #412]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 030c 	and.w	r3, r3, #12
 8005418:	2b08      	cmp	r3, #8
 800541a:	d00d      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x40>
 800541c:	2b08      	cmp	r3, #8
 800541e:	f200 80bd 	bhi.w	800559c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0x34>
 8005426:	2b04      	cmp	r3, #4
 8005428:	d003      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x3a>
 800542a:	e0b7      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800542c:	4b61      	ldr	r3, [pc, #388]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800542e:	60bb      	str	r3, [r7, #8]
       break;
 8005430:	e0b7      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005432:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005434:	60bb      	str	r3, [r7, #8]
      break;
 8005436:	e0b4      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005438:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005440:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005442:	4b5b      	ldr	r3, [pc, #364]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04d      	beq.n	80054ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544e:	4b58      	ldr	r3, [pc, #352]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	099b      	lsrs	r3, r3, #6
 8005454:	461a      	mov	r2, r3
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800545e:	f04f 0100 	mov.w	r1, #0
 8005462:	ea02 0800 	and.w	r8, r2, r0
 8005466:	ea03 0901 	and.w	r9, r3, r1
 800546a:	4640      	mov	r0, r8
 800546c:	4649      	mov	r1, r9
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	014b      	lsls	r3, r1, #5
 8005478:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800547c:	0142      	lsls	r2, r0, #5
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	ebb0 0008 	subs.w	r0, r0, r8
 8005486:	eb61 0109 	sbc.w	r1, r1, r9
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	018b      	lsls	r3, r1, #6
 8005494:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005498:	0182      	lsls	r2, r0, #6
 800549a:	1a12      	subs	r2, r2, r0
 800549c:	eb63 0301 	sbc.w	r3, r3, r1
 80054a0:	f04f 0000 	mov.w	r0, #0
 80054a4:	f04f 0100 	mov.w	r1, #0
 80054a8:	00d9      	lsls	r1, r3, #3
 80054aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054ae:	00d0      	lsls	r0, r2, #3
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	eb12 0208 	adds.w	r2, r2, r8
 80054b8:	eb43 0309 	adc.w	r3, r3, r9
 80054bc:	f04f 0000 	mov.w	r0, #0
 80054c0:	f04f 0100 	mov.w	r1, #0
 80054c4:	0259      	lsls	r1, r3, #9
 80054c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80054ca:	0250      	lsls	r0, r2, #9
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	f7fb fb6c 	bl	8000bb8 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4613      	mov	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e04a      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ea:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	ea02 0400 	and.w	r4, r2, r0
 8005502:	ea03 0501 	and.w	r5, r3, r1
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	014b      	lsls	r3, r1, #5
 8005514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005518:	0142      	lsls	r2, r0, #5
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	1b00      	subs	r0, r0, r4
 8005520:	eb61 0105 	sbc.w	r1, r1, r5
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	018b      	lsls	r3, r1, #6
 800552e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005532:	0182      	lsls	r2, r0, #6
 8005534:	1a12      	subs	r2, r2, r0
 8005536:	eb63 0301 	sbc.w	r3, r3, r1
 800553a:	f04f 0000 	mov.w	r0, #0
 800553e:	f04f 0100 	mov.w	r1, #0
 8005542:	00d9      	lsls	r1, r3, #3
 8005544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005548:	00d0      	lsls	r0, r2, #3
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	1912      	adds	r2, r2, r4
 8005550:	eb45 0303 	adc.w	r3, r5, r3
 8005554:	f04f 0000 	mov.w	r0, #0
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	0299      	lsls	r1, r3, #10
 800555e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005562:	0290      	lsls	r0, r2, #10
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	461a      	mov	r2, r3
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	f7fb fb20 	bl	8000bb8 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4613      	mov	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	3301      	adds	r3, #1
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	60bb      	str	r3, [r7, #8]
      break;
 800559a:	e002      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800559e:	60bb      	str	r3, [r7, #8]
      break;
 80055a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a2:	68bb      	ldr	r3, [r7, #8]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	007a1200 	.word	0x007a1200

080055bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000010 	.word	0x20000010

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055d8:	f7ff fff0 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0a9b      	lsrs	r3, r3, #10
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4903      	ldr	r1, [pc, #12]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40023800 	.word	0x40023800
 80055f8:	08009ac4 	.word	0x08009ac4

080055fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005600:	f7ff ffdc 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0b5b      	lsrs	r3, r3, #13
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	4903      	ldr	r1, [pc, #12]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	08009ac4 	.word	0x08009ac4

08005624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e041      	b.n	80056ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fb fff2 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 f9c0 	bl	80059e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d001      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e044      	b.n	8005766 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <HAL_TIM_Base_Start_IT+0xb0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x6c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d013      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x6c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1a      	ldr	r2, [pc, #104]	; (8005778 <HAL_TIM_Base_Start_IT+0xb4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x6c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a19      	ldr	r2, [pc, #100]	; (800577c <HAL_TIM_Base_Start_IT+0xb8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x6c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <HAL_TIM_Base_Start_IT+0xbc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x6c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a16      	ldr	r2, [pc, #88]	; (8005784 <HAL_TIM_Base_Start_IT+0xc0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d111      	bne.n	8005754 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d010      	beq.n	8005764 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	e007      	b.n	8005764 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40014000 	.word	0x40014000

08005788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d122      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d11b      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0202 	mvn.w	r2, #2
 80057b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8ee 	bl	80059ac <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8e0 	bl	8005998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f8f1 	bl	80059c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0204 	mvn.w	r2, #4
 8005808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8c4 	bl	80059ac <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8b6 	bl	8005998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f8c7 	bl	80059c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b08      	cmp	r3, #8
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b08      	cmp	r3, #8
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0208 	mvn.w	r2, #8
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f89a 	bl	80059ac <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f88c 	bl	8005998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f89d 	bl	80059c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b10      	cmp	r3, #16
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0210 	mvn.w	r2, #16
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2208      	movs	r2, #8
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f870 	bl	80059ac <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f862 	bl	8005998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f873 	bl	80059c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0201 	mvn.w	r2, #1
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb fc90 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	2b80      	cmp	r3, #128	; 0x80
 8005918:	d10e      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d107      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8e2 	bl	8005afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f838 	bl	80059d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b20      	cmp	r3, #32
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b20      	cmp	r3, #32
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0220 	mvn.w	r2, #32
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8ac 	bl	8005ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a34      	ldr	r2, [pc, #208]	; (8005acc <TIM_Base_SetConfig+0xe4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00f      	beq.n	8005a20 <TIM_Base_SetConfig+0x38>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a06:	d00b      	beq.n	8005a20 <TIM_Base_SetConfig+0x38>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a31      	ldr	r2, [pc, #196]	; (8005ad0 <TIM_Base_SetConfig+0xe8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d007      	beq.n	8005a20 <TIM_Base_SetConfig+0x38>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a30      	ldr	r2, [pc, #192]	; (8005ad4 <TIM_Base_SetConfig+0xec>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_Base_SetConfig+0x38>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a2f      	ldr	r2, [pc, #188]	; (8005ad8 <TIM_Base_SetConfig+0xf0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d108      	bne.n	8005a32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <TIM_Base_SetConfig+0xe4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01b      	beq.n	8005a72 <TIM_Base_SetConfig+0x8a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d017      	beq.n	8005a72 <TIM_Base_SetConfig+0x8a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <TIM_Base_SetConfig+0xe8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <TIM_Base_SetConfig+0x8a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a21      	ldr	r2, [pc, #132]	; (8005ad4 <TIM_Base_SetConfig+0xec>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00f      	beq.n	8005a72 <TIM_Base_SetConfig+0x8a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <TIM_Base_SetConfig+0xf0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0x8a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <TIM_Base_SetConfig+0xf4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0x8a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <TIM_Base_SetConfig+0xf8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0x8a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <TIM_Base_SetConfig+0xfc>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a08      	ldr	r2, [pc, #32]	; (8005acc <TIM_Base_SetConfig+0xe4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d103      	bne.n	8005ab8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	615a      	str	r2, [r3, #20]
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800

08005ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e03f      	b.n	8005ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fb fda4 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fed1 	bl	80068fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b08a      	sub	sp, #40	; 0x28
 8005bae:	af02      	add	r7, sp, #8
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d17c      	bne.n	8005cc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_UART_Transmit+0x2c>
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e075      	b.n	8005cc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_UART_Transmit+0x3e>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e06e      	b.n	8005cc6 <HAL_UART_Transmit+0x11c>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2221      	movs	r2, #33	; 0x21
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bfe:	f7fb ff87 	bl	8001b10 <HAL_GetTick>
 8005c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	88fa      	ldrh	r2, [r7, #6]
 8005c0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c18:	d108      	bne.n	8005c2c <HAL_UART_Transmit+0x82>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e003      	b.n	8005c34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c3c:	e02a      	b.n	8005c94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2200      	movs	r2, #0
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fc26 	bl	800649a <UART_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e036      	b.n	8005cc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	3302      	adds	r3, #2
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	e007      	b.n	8005c86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	781a      	ldrb	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	3301      	adds	r3, #1
 8005c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1cf      	bne.n	8005c3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2140      	movs	r1, #64	; 0x40
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fbf6 	bl	800649a <UART_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e006      	b.n	8005cc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	; 0x30
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d165      	bne.n	8005db6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_UART_Transmit_DMA+0x26>
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e05e      	b.n	8005db8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Transmit_DMA+0x38>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e057      	b.n	8005db8 <HAL_UART_Transmit_DMA+0xe8>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2221      	movs	r2, #33	; 0x21
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d34:	4a22      	ldr	r2, [pc, #136]	; (8005dc0 <HAL_UART_Transmit_DMA+0xf0>)
 8005d36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3c:	4a21      	ldr	r2, [pc, #132]	; (8005dc4 <HAL_UART_Transmit_DMA+0xf4>)
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	4a20      	ldr	r2, [pc, #128]	; (8005dc8 <HAL_UART_Transmit_DMA+0xf8>)
 8005d46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005d50:	f107 0308 	add.w	r3, r7, #8
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3304      	adds	r3, #4
 8005d64:	461a      	mov	r2, r3
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	f7fc f89e 	bl	8001ea8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3314      	adds	r3, #20
 8005d84:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3314      	adds	r3, #20
 8005d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005da0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6a39      	ldr	r1, [r7, #32]
 8005da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e5      	bne.n	8005d7e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e000      	b.n	8005db8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005db6:	2302      	movs	r3, #2
  }
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3730      	adds	r7, #48	; 0x30
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	08006351 	.word	0x08006351
 8005dc4:	080063eb 	.word	0x080063eb
 8005dc8:	08006407 	.word	0x08006407

08005dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0ba      	sub	sp, #232	; 0xe8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10f      	bne.n	8005e32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_UART_IRQHandler+0x66>
 8005e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fcaa 	bl	8006784 <UART_Receive_IT>
      return;
 8005e30:	e256      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80de 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x22c>
 8005e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80d1 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_UART_IRQHandler+0xae>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f043 0201 	orr.w	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xd2>
 8005e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xf6>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f043 0204 	orr.w	r2, r3, #4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d011      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x126>
 8005ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f043 0208 	orr.w	r2, r3, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 81ed 	beq.w	80062d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14e>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fc35 	bl	8006784 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	bf0c      	ite	eq
 8005f28:	2301      	moveq	r3, #1
 8005f2a:	2300      	movne	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <HAL_UART_IRQHandler+0x17a>
 8005f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04f      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb3d 	bl	80065c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d141      	bne.n	8005fde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1d9      	bne.n	8005f5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d013      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	4a7d      	ldr	r2, [pc, #500]	; (80061a8 <HAL_UART_IRQHandler+0x3dc>)
 8005fb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fc f83c 	bl	8002038 <HAL_DMA_Abort_IT>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00e      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9a4 	bl	8006324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e00a      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9a0 	bl	8006324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e006      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f99c 	bl	8006324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ff2:	e170      	b.n	80062d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	bf00      	nop
    return;
 8005ff6:	e16e      	b.n	80062d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	f040 814a 	bne.w	8006296 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 8143 	beq.w	8006296 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 813c 	beq.w	8006296 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800601e:	2300      	movs	r3, #0
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	f040 80b4 	bne.w	80061ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8140 	beq.w	80062da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800605e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006062:	429a      	cmp	r2, r3
 8006064:	f080 8139 	bcs.w	80062da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800606e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607a:	f000 8088 	beq.w	800618e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	330c      	adds	r3, #12
 8006084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1d9      	bne.n	800607e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3314      	adds	r3, #20
 80060d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e1      	bne.n	80060ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3314      	adds	r3, #20
 8006126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800612a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800612c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e3      	bne.n	8006106 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	330c      	adds	r3, #12
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800615c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615e:	f023 0310 	bic.w	r3, r3, #16
 8006162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	330c      	adds	r3, #12
 800616c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006170:	65ba      	str	r2, [r7, #88]	; 0x58
 8006172:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800617e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e3      	bne.n	800614c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	4618      	mov	r0, r3
 800618a:	f7fb fee5 	bl	8001f58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006196:	b29b      	uxth	r3, r3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8ca 	bl	8006338 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061a4:	e099      	b.n	80062da <HAL_UART_IRQHandler+0x50e>
 80061a6:	bf00      	nop
 80061a8:	0800668d 	.word	0x0800668d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 808b 	beq.w	80062de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8086 	beq.w	80062de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330c      	adds	r3, #12
 80061f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061f6:	647a      	str	r2, [r7, #68]	; 0x44
 80061f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e3      	bne.n	80061d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3314      	adds	r3, #20
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	623b      	str	r3, [r7, #32]
   return(result);
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800622e:	633a      	str	r2, [r7, #48]	; 0x30
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0310 	bic.w	r3, r3, #16
 8006266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006274:	61fa      	str	r2, [r7, #28]
 8006276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	69b9      	ldr	r1, [r7, #24]
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	617b      	str	r3, [r7, #20]
   return(result);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e3      	bne.n	8006250 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f852 	bl	8006338 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006294:	e023      	b.n	80062de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_UART_IRQHandler+0x4ea>
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa00 	bl	80066b4 <UART_Transmit_IT>
    return;
 80062b4:	e014      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <HAL_UART_IRQHandler+0x514>
 80062c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa40 	bl	8006754 <UART_EndTransmit_IT>
    return;
 80062d4:	e004      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
    return;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
      return;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
      return;
 80062de:	bf00      	nop
  }
}
 80062e0:	37e8      	adds	r7, #232	; 0xe8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop

080062e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b090      	sub	sp, #64	; 0x40
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006368:	2b00      	cmp	r3, #0
 800636a:	d137      	bne.n	80063dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800636c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636e:	2200      	movs	r2, #0
 8006370:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3314      	adds	r3, #20
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	623b      	str	r3, [r7, #32]
   return(result);
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006392:	633a      	str	r2, [r7, #48]	; 0x30
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
 80063be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c6:	61fa      	str	r2, [r7, #28]
 80063c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	69b9      	ldr	r1, [r7, #24]
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	617b      	str	r3, [r7, #20]
   return(result);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e5      	bne.n	80063a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063da:	e002      	b.n	80063e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80063dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063de:	f7ff ff83 	bl	80062e8 <HAL_UART_TxCpltCallback>
}
 80063e2:	bf00      	nop
 80063e4:	3740      	adds	r7, #64	; 0x40
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff ff7f 	bl	80062fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	bf0c      	ite	eq
 8006426:	2301      	moveq	r3, #1
 8006428:	2300      	movne	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b21      	cmp	r3, #33	; 0x21
 8006438:	d108      	bne.n	800644c <UART_DMAError+0x46>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006446:	68b8      	ldr	r0, [r7, #8]
 8006448:	f000 f895 	bl	8006576 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	bf0c      	ite	eq
 800645a:	2301      	moveq	r3, #1
 800645c:	2300      	movne	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b22      	cmp	r3, #34	; 0x22
 800646c:	d108      	bne.n	8006480 <UART_DMAError+0x7a>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800647a:	68b8      	ldr	r0, [r7, #8]
 800647c:	f000 f8a3 	bl	80065c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	f043 0210 	orr.w	r2, r3, #16
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800648c:	68b8      	ldr	r0, [r7, #8]
 800648e:	f7ff ff49 	bl	8006324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b090      	sub	sp, #64	; 0x40
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	603b      	str	r3, [r7, #0]
 80064a6:	4613      	mov	r3, r2
 80064a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064aa:	e050      	b.n	800654e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d04c      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <UART_WaitOnFlagUntilTimeout+0x30>
 80064ba:	f7fb fb29 	bl	8001b10 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d241      	bcs.n	800654e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064ea:	637a      	str	r2, [r7, #52]	; 0x34
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e5      	bne.n	80064ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	63bb      	str	r3, [r7, #56]	; 0x38
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3314      	adds	r3, #20
 800651c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651e:	623a      	str	r2, [r7, #32]
 8006520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	61bb      	str	r3, [r7, #24]
   return(result);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e00f      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4013      	ands	r3, r2
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	429a      	cmp	r2, r3
 800655c:	bf0c      	ite	eq
 800655e:	2301      	moveq	r3, #1
 8006560:	2300      	movne	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	429a      	cmp	r2, r3
 800656a:	d09f      	beq.n	80064ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3740      	adds	r7, #64	; 0x40
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006576:	b480      	push	{r7}
 8006578:	b089      	sub	sp, #36	; 0x24
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	60bb      	str	r3, [r7, #8]
   return(result);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	61ba      	str	r2, [r7, #24]
 80065a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6979      	ldr	r1, [r7, #20]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	613b      	str	r3, [r7, #16]
   return(result);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e5      	bne.n	800657e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80065ba:	bf00      	nop
 80065bc:	3724      	adds	r7, #36	; 0x24
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b095      	sub	sp, #84	; 0x54
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ee:	643a      	str	r2, [r7, #64]	; 0x40
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3314      	adds	r3, #20
 8006608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	61fb      	str	r3, [r7, #28]
   return(result);
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f023 0301 	bic.w	r3, r3, #1
 8006618:	64bb      	str	r3, [r7, #72]	; 0x48
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e5      	bne.n	8006602 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	2b01      	cmp	r3, #1
 800663c:	d119      	bne.n	8006672 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	60bb      	str	r3, [r7, #8]
   return(result);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f023 0310 	bic.w	r3, r3, #16
 8006654:	647b      	str	r3, [r7, #68]	; 0x44
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800665e:	61ba      	str	r2, [r7, #24]
 8006660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6979      	ldr	r1, [r7, #20]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	613b      	str	r3, [r7, #16]
   return(result);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e5      	bne.n	800663e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006680:	bf00      	nop
 8006682:	3754      	adds	r7, #84	; 0x54
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fe3c 	bl	8006324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b21      	cmp	r3, #33	; 0x21
 80066c6:	d13e      	bne.n	8006746 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d0:	d114      	bne.n	80066fc <UART_Transmit_IT+0x48>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d110      	bne.n	80066fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	1c9a      	adds	r2, r3, #2
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]
 80066fa:	e008      	b.n	800670e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	1c59      	adds	r1, r3, #1
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6211      	str	r1, [r2, #32]
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29b      	uxth	r3, r3
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	4619      	mov	r1, r3
 800671c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10f      	bne.n	8006742 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006730:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006740:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e000      	b.n	8006748 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006746:	2302      	movs	r3, #2
  }
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff fdb7 	bl	80062e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08c      	sub	sp, #48	; 0x30
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b22      	cmp	r3, #34	; 0x22
 8006796:	f040 80ab 	bne.w	80068f0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a2:	d117      	bne.n	80067d4 <UART_Receive_IT+0x50>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d113      	bne.n	80067d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	1c9a      	adds	r2, r3, #2
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	629a      	str	r2, [r3, #40]	; 0x28
 80067d2:	e026      	b.n	8006822 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e6:	d007      	beq.n	80067f8 <UART_Receive_IT+0x74>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <UART_Receive_IT+0x82>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	e008      	b.n	8006818 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006812:	b2da      	uxtb	r2, r3
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29b      	uxth	r3, r3
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4619      	mov	r1, r3
 8006830:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006832:	2b00      	cmp	r3, #0
 8006834:	d15a      	bne.n	80068ec <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0220 	bic.w	r2, r2, #32
 8006844:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695a      	ldr	r2, [r3, #20]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	2b01      	cmp	r3, #1
 8006874:	d135      	bne.n	80068e2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	613b      	str	r3, [r7, #16]
   return(result);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689c:	623a      	str	r2, [r7, #32]
 800689e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	69f9      	ldr	r1, [r7, #28]
 80068a2:	6a3a      	ldr	r2, [r7, #32]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e5      	bne.n	800687c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b10      	cmp	r3, #16
 80068bc:	d10a      	bne.n	80068d4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fd2c 	bl	8006338 <HAL_UARTEx_RxEventCallback>
 80068e0:	e002      	b.n	80068e8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fd14 	bl	8006310 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e002      	b.n	80068f2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3730      	adds	r7, #48	; 0x30
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006900:	b09f      	sub	sp, #124	; 0x7c
 8006902:	af00      	add	r7, sp, #0
 8006904:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006912:	68d9      	ldr	r1, [r3, #12]
 8006914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	ea40 0301 	orr.w	r3, r0, r1
 800691c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	431a      	orrs	r2, r3
 8006928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	431a      	orrs	r2, r3
 800692e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	4313      	orrs	r3, r2
 8006934:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006940:	f021 010c 	bic.w	r1, r1, #12
 8006944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800694a:	430b      	orrs	r3, r1
 800694c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800694e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	6999      	ldr	r1, [r3, #24]
 800695c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	ea40 0301 	orr.w	r3, r0, r1
 8006964:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4bc5      	ldr	r3, [pc, #788]	; (8006c80 <UART_SetConfig+0x384>)
 800696c:	429a      	cmp	r2, r3
 800696e:	d004      	beq.n	800697a <UART_SetConfig+0x7e>
 8006970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	4bc3      	ldr	r3, [pc, #780]	; (8006c84 <UART_SetConfig+0x388>)
 8006976:	429a      	cmp	r2, r3
 8006978:	d103      	bne.n	8006982 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800697a:	f7fe fe3f 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 800697e:	6778      	str	r0, [r7, #116]	; 0x74
 8006980:	e002      	b.n	8006988 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006982:	f7fe fe27 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006986:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006990:	f040 80b6 	bne.w	8006b00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006996:	461c      	mov	r4, r3
 8006998:	f04f 0500 	mov.w	r5, #0
 800699c:	4622      	mov	r2, r4
 800699e:	462b      	mov	r3, r5
 80069a0:	1891      	adds	r1, r2, r2
 80069a2:	6439      	str	r1, [r7, #64]	; 0x40
 80069a4:	415b      	adcs	r3, r3
 80069a6:	647b      	str	r3, [r7, #68]	; 0x44
 80069a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069ac:	1912      	adds	r2, r2, r4
 80069ae:	eb45 0303 	adc.w	r3, r5, r3
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f04f 0100 	mov.w	r1, #0
 80069ba:	00d9      	lsls	r1, r3, #3
 80069bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069c0:	00d0      	lsls	r0, r2, #3
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	1911      	adds	r1, r2, r4
 80069c8:	6639      	str	r1, [r7, #96]	; 0x60
 80069ca:	416b      	adcs	r3, r5
 80069cc:	667b      	str	r3, [r7, #100]	; 0x64
 80069ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	1891      	adds	r1, r2, r2
 80069da:	63b9      	str	r1, [r7, #56]	; 0x38
 80069dc:	415b      	adcs	r3, r3
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80069e8:	f7fa f8e6 	bl	8000bb8 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4ba5      	ldr	r3, [pc, #660]	; (8006c88 <UART_SetConfig+0x38c>)
 80069f2:	fba3 2302 	umull	r2, r3, r3, r2
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	011e      	lsls	r6, r3, #4
 80069fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069fc:	461c      	mov	r4, r3
 80069fe:	f04f 0500 	mov.w	r5, #0
 8006a02:	4622      	mov	r2, r4
 8006a04:	462b      	mov	r3, r5
 8006a06:	1891      	adds	r1, r2, r2
 8006a08:	6339      	str	r1, [r7, #48]	; 0x30
 8006a0a:	415b      	adcs	r3, r3
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a12:	1912      	adds	r2, r2, r4
 8006a14:	eb45 0303 	adc.w	r3, r5, r3
 8006a18:	f04f 0000 	mov.w	r0, #0
 8006a1c:	f04f 0100 	mov.w	r1, #0
 8006a20:	00d9      	lsls	r1, r3, #3
 8006a22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a26:	00d0      	lsls	r0, r2, #3
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	1911      	adds	r1, r2, r4
 8006a2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a30:	416b      	adcs	r3, r5
 8006a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	1891      	adds	r1, r2, r2
 8006a40:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a42:	415b      	adcs	r3, r3
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a4e:	f7fa f8b3 	bl	8000bb8 <__aeabi_uldivmod>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4b8c      	ldr	r3, [pc, #560]	; (8006c88 <UART_SetConfig+0x38c>)
 8006a58:	fba3 1302 	umull	r1, r3, r3, r2
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	2164      	movs	r1, #100	; 0x64
 8006a60:	fb01 f303 	mul.w	r3, r1, r3
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	3332      	adds	r3, #50	; 0x32
 8006a6a:	4a87      	ldr	r2, [pc, #540]	; (8006c88 <UART_SetConfig+0x38c>)
 8006a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a78:	441e      	add	r6, r3
 8006a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f04f 0100 	mov.w	r1, #0
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	1894      	adds	r4, r2, r2
 8006a88:	623c      	str	r4, [r7, #32]
 8006a8a:	415b      	adcs	r3, r3
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a92:	1812      	adds	r2, r2, r0
 8006a94:	eb41 0303 	adc.w	r3, r1, r3
 8006a98:	f04f 0400 	mov.w	r4, #0
 8006a9c:	f04f 0500 	mov.w	r5, #0
 8006aa0:	00dd      	lsls	r5, r3, #3
 8006aa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006aa6:	00d4      	lsls	r4, r2, #3
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	462b      	mov	r3, r5
 8006aac:	1814      	adds	r4, r2, r0
 8006aae:	653c      	str	r4, [r7, #80]	; 0x50
 8006ab0:	414b      	adcs	r3, r1
 8006ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f04f 0300 	mov.w	r3, #0
 8006abe:	1891      	adds	r1, r2, r2
 8006ac0:	61b9      	str	r1, [r7, #24]
 8006ac2:	415b      	adcs	r3, r3
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ace:	f7fa f873 	bl	8000bb8 <__aeabi_uldivmod>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4b6c      	ldr	r3, [pc, #432]	; (8006c88 <UART_SetConfig+0x38c>)
 8006ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8006adc:	095b      	lsrs	r3, r3, #5
 8006ade:	2164      	movs	r1, #100	; 0x64
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	3332      	adds	r3, #50	; 0x32
 8006aea:	4a67      	ldr	r2, [pc, #412]	; (8006c88 <UART_SetConfig+0x38c>)
 8006aec:	fba2 2303 	umull	r2, r3, r2, r3
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	f003 0207 	and.w	r2, r3, #7
 8006af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4432      	add	r2, r6
 8006afc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006afe:	e0b9      	b.n	8006c74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b02:	461c      	mov	r4, r3
 8006b04:	f04f 0500 	mov.w	r5, #0
 8006b08:	4622      	mov	r2, r4
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	1891      	adds	r1, r2, r2
 8006b0e:	6139      	str	r1, [r7, #16]
 8006b10:	415b      	adcs	r3, r3
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b18:	1912      	adds	r2, r2, r4
 8006b1a:	eb45 0303 	adc.w	r3, r5, r3
 8006b1e:	f04f 0000 	mov.w	r0, #0
 8006b22:	f04f 0100 	mov.w	r1, #0
 8006b26:	00d9      	lsls	r1, r3, #3
 8006b28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b2c:	00d0      	lsls	r0, r2, #3
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	eb12 0804 	adds.w	r8, r2, r4
 8006b36:	eb43 0905 	adc.w	r9, r3, r5
 8006b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f04f 0100 	mov.w	r1, #0
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	008b      	lsls	r3, r1, #2
 8006b4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b52:	0082      	lsls	r2, r0, #2
 8006b54:	4640      	mov	r0, r8
 8006b56:	4649      	mov	r1, r9
 8006b58:	f7fa f82e 	bl	8000bb8 <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4b49      	ldr	r3, [pc, #292]	; (8006c88 <UART_SetConfig+0x38c>)
 8006b62:	fba3 2302 	umull	r2, r3, r3, r2
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	011e      	lsls	r6, r3, #4
 8006b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f04f 0100 	mov.w	r1, #0
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	1894      	adds	r4, r2, r2
 8006b78:	60bc      	str	r4, [r7, #8]
 8006b7a:	415b      	adcs	r3, r3
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b82:	1812      	adds	r2, r2, r0
 8006b84:	eb41 0303 	adc.w	r3, r1, r3
 8006b88:	f04f 0400 	mov.w	r4, #0
 8006b8c:	f04f 0500 	mov.w	r5, #0
 8006b90:	00dd      	lsls	r5, r3, #3
 8006b92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b96:	00d4      	lsls	r4, r2, #3
 8006b98:	4622      	mov	r2, r4
 8006b9a:	462b      	mov	r3, r5
 8006b9c:	1814      	adds	r4, r2, r0
 8006b9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ba0:	414b      	adcs	r3, r1
 8006ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f04f 0100 	mov.w	r1, #0
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	008b      	lsls	r3, r1, #2
 8006bb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bbc:	0082      	lsls	r2, r0, #2
 8006bbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006bc2:	f7f9 fff9 	bl	8000bb8 <__aeabi_uldivmod>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <UART_SetConfig+0x38c>)
 8006bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	2164      	movs	r1, #100	; 0x64
 8006bd4:	fb01 f303 	mul.w	r3, r1, r3
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	3332      	adds	r3, #50	; 0x32
 8006bde:	4a2a      	ldr	r2, [pc, #168]	; (8006c88 <UART_SetConfig+0x38c>)
 8006be0:	fba2 2303 	umull	r2, r3, r2, r3
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bea:	441e      	add	r6, r3
 8006bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f04f 0100 	mov.w	r1, #0
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	1894      	adds	r4, r2, r2
 8006bfa:	603c      	str	r4, [r7, #0]
 8006bfc:	415b      	adcs	r3, r3
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c04:	1812      	adds	r2, r2, r0
 8006c06:	eb41 0303 	adc.w	r3, r1, r3
 8006c0a:	f04f 0400 	mov.w	r4, #0
 8006c0e:	f04f 0500 	mov.w	r5, #0
 8006c12:	00dd      	lsls	r5, r3, #3
 8006c14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c18:	00d4      	lsls	r4, r2, #3
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	eb12 0a00 	adds.w	sl, r2, r0
 8006c22:	eb43 0b01 	adc.w	fp, r3, r1
 8006c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f04f 0100 	mov.w	r1, #0
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	008b      	lsls	r3, r1, #2
 8006c3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c3e:	0082      	lsls	r2, r0, #2
 8006c40:	4650      	mov	r0, sl
 8006c42:	4659      	mov	r1, fp
 8006c44:	f7f9 ffb8 	bl	8000bb8 <__aeabi_uldivmod>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <UART_SetConfig+0x38c>)
 8006c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	2164      	movs	r1, #100	; 0x64
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	3332      	adds	r3, #50	; 0x32
 8006c60:	4a09      	ldr	r2, [pc, #36]	; (8006c88 <UART_SetConfig+0x38c>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	f003 020f 	and.w	r2, r3, #15
 8006c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4432      	add	r2, r6
 8006c72:	609a      	str	r2, [r3, #8]
}
 8006c74:	bf00      	nop
 8006c76:	377c      	adds	r7, #124	; 0x7c
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	bf00      	nop
 8006c80:	40011000 	.word	0x40011000
 8006c84:	40011400 	.word	0x40011400
 8006c88:	51eb851f 	.word	0x51eb851f

08006c8c <__errno>:
 8006c8c:	4b01      	ldr	r3, [pc, #4]	; (8006c94 <__errno+0x8>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	2000001c 	.word	0x2000001c

08006c98 <__libc_init_array>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4d0d      	ldr	r5, [pc, #52]	; (8006cd0 <__libc_init_array+0x38>)
 8006c9c:	4c0d      	ldr	r4, [pc, #52]	; (8006cd4 <__libc_init_array+0x3c>)
 8006c9e:	1b64      	subs	r4, r4, r5
 8006ca0:	10a4      	asrs	r4, r4, #2
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	d109      	bne.n	8006cbc <__libc_init_array+0x24>
 8006ca8:	4d0b      	ldr	r5, [pc, #44]	; (8006cd8 <__libc_init_array+0x40>)
 8006caa:	4c0c      	ldr	r4, [pc, #48]	; (8006cdc <__libc_init_array+0x44>)
 8006cac:	f002 feb6 	bl	8009a1c <_init>
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	42a6      	cmp	r6, r4
 8006cb8:	d105      	bne.n	8006cc6 <__libc_init_array+0x2e>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc0:	4798      	blx	r3
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__libc_init_array+0xc>
 8006cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cca:	4798      	blx	r3
 8006ccc:	3601      	adds	r6, #1
 8006cce:	e7f2      	b.n	8006cb6 <__libc_init_array+0x1e>
 8006cd0:	08009ebc 	.word	0x08009ebc
 8006cd4:	08009ebc 	.word	0x08009ebc
 8006cd8:	08009ebc 	.word	0x08009ebc
 8006cdc:	08009ec0 	.word	0x08009ec0

08006ce0 <memset>:
 8006ce0:	4402      	add	r2, r0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d100      	bne.n	8006cea <memset+0xa>
 8006ce8:	4770      	bx	lr
 8006cea:	f803 1b01 	strb.w	r1, [r3], #1
 8006cee:	e7f9      	b.n	8006ce4 <memset+0x4>

08006cf0 <__cvt>:
 8006cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf4:	ec55 4b10 	vmov	r4, r5, d0
 8006cf8:	2d00      	cmp	r5, #0
 8006cfa:	460e      	mov	r6, r1
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	462b      	mov	r3, r5
 8006d00:	bfbb      	ittet	lt
 8006d02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d06:	461d      	movlt	r5, r3
 8006d08:	2300      	movge	r3, #0
 8006d0a:	232d      	movlt	r3, #45	; 0x2d
 8006d0c:	700b      	strb	r3, [r1, #0]
 8006d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d14:	4691      	mov	r9, r2
 8006d16:	f023 0820 	bic.w	r8, r3, #32
 8006d1a:	bfbc      	itt	lt
 8006d1c:	4622      	movlt	r2, r4
 8006d1e:	4614      	movlt	r4, r2
 8006d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d24:	d005      	beq.n	8006d32 <__cvt+0x42>
 8006d26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d2a:	d100      	bne.n	8006d2e <__cvt+0x3e>
 8006d2c:	3601      	adds	r6, #1
 8006d2e:	2102      	movs	r1, #2
 8006d30:	e000      	b.n	8006d34 <__cvt+0x44>
 8006d32:	2103      	movs	r1, #3
 8006d34:	ab03      	add	r3, sp, #12
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	ab02      	add	r3, sp, #8
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	ec45 4b10 	vmov	d0, r4, r5
 8006d40:	4653      	mov	r3, sl
 8006d42:	4632      	mov	r2, r6
 8006d44:	f000 fcec 	bl	8007720 <_dtoa_r>
 8006d48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	d102      	bne.n	8006d56 <__cvt+0x66>
 8006d50:	f019 0f01 	tst.w	r9, #1
 8006d54:	d022      	beq.n	8006d9c <__cvt+0xac>
 8006d56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d5a:	eb07 0906 	add.w	r9, r7, r6
 8006d5e:	d110      	bne.n	8006d82 <__cvt+0x92>
 8006d60:	783b      	ldrb	r3, [r7, #0]
 8006d62:	2b30      	cmp	r3, #48	; 0x30
 8006d64:	d10a      	bne.n	8006d7c <__cvt+0x8c>
 8006d66:	2200      	movs	r2, #0
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	f7f9 feb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d72:	b918      	cbnz	r0, 8006d7c <__cvt+0x8c>
 8006d74:	f1c6 0601 	rsb	r6, r6, #1
 8006d78:	f8ca 6000 	str.w	r6, [sl]
 8006d7c:	f8da 3000 	ldr.w	r3, [sl]
 8006d80:	4499      	add	r9, r3
 8006d82:	2200      	movs	r2, #0
 8006d84:	2300      	movs	r3, #0
 8006d86:	4620      	mov	r0, r4
 8006d88:	4629      	mov	r1, r5
 8006d8a:	f7f9 fea5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d8e:	b108      	cbz	r0, 8006d94 <__cvt+0xa4>
 8006d90:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d94:	2230      	movs	r2, #48	; 0x30
 8006d96:	9b03      	ldr	r3, [sp, #12]
 8006d98:	454b      	cmp	r3, r9
 8006d9a:	d307      	bcc.n	8006dac <__cvt+0xbc>
 8006d9c:	9b03      	ldr	r3, [sp, #12]
 8006d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006da0:	1bdb      	subs	r3, r3, r7
 8006da2:	4638      	mov	r0, r7
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	b004      	add	sp, #16
 8006da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dac:	1c59      	adds	r1, r3, #1
 8006dae:	9103      	str	r1, [sp, #12]
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	e7f0      	b.n	8006d96 <__cvt+0xa6>

08006db4 <__exponent>:
 8006db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006db6:	4603      	mov	r3, r0
 8006db8:	2900      	cmp	r1, #0
 8006dba:	bfb8      	it	lt
 8006dbc:	4249      	neglt	r1, r1
 8006dbe:	f803 2b02 	strb.w	r2, [r3], #2
 8006dc2:	bfb4      	ite	lt
 8006dc4:	222d      	movlt	r2, #45	; 0x2d
 8006dc6:	222b      	movge	r2, #43	; 0x2b
 8006dc8:	2909      	cmp	r1, #9
 8006dca:	7042      	strb	r2, [r0, #1]
 8006dcc:	dd2a      	ble.n	8006e24 <__exponent+0x70>
 8006dce:	f10d 0407 	add.w	r4, sp, #7
 8006dd2:	46a4      	mov	ip, r4
 8006dd4:	270a      	movs	r7, #10
 8006dd6:	46a6      	mov	lr, r4
 8006dd8:	460a      	mov	r2, r1
 8006dda:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dde:	fb07 1516 	mls	r5, r7, r6, r1
 8006de2:	3530      	adds	r5, #48	; 0x30
 8006de4:	2a63      	cmp	r2, #99	; 0x63
 8006de6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006dee:	4631      	mov	r1, r6
 8006df0:	dcf1      	bgt.n	8006dd6 <__exponent+0x22>
 8006df2:	3130      	adds	r1, #48	; 0x30
 8006df4:	f1ae 0502 	sub.w	r5, lr, #2
 8006df8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006dfc:	1c44      	adds	r4, r0, #1
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4561      	cmp	r1, ip
 8006e02:	d30a      	bcc.n	8006e1a <__exponent+0x66>
 8006e04:	f10d 0209 	add.w	r2, sp, #9
 8006e08:	eba2 020e 	sub.w	r2, r2, lr
 8006e0c:	4565      	cmp	r5, ip
 8006e0e:	bf88      	it	hi
 8006e10:	2200      	movhi	r2, #0
 8006e12:	4413      	add	r3, r2
 8006e14:	1a18      	subs	r0, r3, r0
 8006e16:	b003      	add	sp, #12
 8006e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e22:	e7ed      	b.n	8006e00 <__exponent+0x4c>
 8006e24:	2330      	movs	r3, #48	; 0x30
 8006e26:	3130      	adds	r1, #48	; 0x30
 8006e28:	7083      	strb	r3, [r0, #2]
 8006e2a:	70c1      	strb	r1, [r0, #3]
 8006e2c:	1d03      	adds	r3, r0, #4
 8006e2e:	e7f1      	b.n	8006e14 <__exponent+0x60>

08006e30 <_printf_float>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	ed2d 8b02 	vpush	{d8}
 8006e38:	b08d      	sub	sp, #52	; 0x34
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e40:	4616      	mov	r6, r2
 8006e42:	461f      	mov	r7, r3
 8006e44:	4605      	mov	r5, r0
 8006e46:	f001 fa57 	bl	80082f8 <_localeconv_r>
 8006e4a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e4e:	4650      	mov	r0, sl
 8006e50:	f7f9 f9c6 	bl	80001e0 <strlen>
 8006e54:	2300      	movs	r3, #0
 8006e56:	930a      	str	r3, [sp, #40]	; 0x28
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	9305      	str	r3, [sp, #20]
 8006e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e64:	3307      	adds	r3, #7
 8006e66:	f023 0307 	bic.w	r3, r3, #7
 8006e6a:	f103 0208 	add.w	r2, r3, #8
 8006e6e:	f8c8 2000 	str.w	r2, [r8]
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e82:	9307      	str	r3, [sp, #28]
 8006e84:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e88:	ee08 0a10 	vmov	s16, r0
 8006e8c:	4b9f      	ldr	r3, [pc, #636]	; (800710c <_printf_float+0x2dc>)
 8006e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295
 8006e96:	f7f9 fe51 	bl	8000b3c <__aeabi_dcmpun>
 8006e9a:	bb88      	cbnz	r0, 8006f00 <_printf_float+0xd0>
 8006e9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea0:	4b9a      	ldr	r3, [pc, #616]	; (800710c <_printf_float+0x2dc>)
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	f7f9 fe2b 	bl	8000b00 <__aeabi_dcmple>
 8006eaa:	bb48      	cbnz	r0, 8006f00 <_printf_float+0xd0>
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	f7f9 fe1a 	bl	8000aec <__aeabi_dcmplt>
 8006eb8:	b110      	cbz	r0, 8006ec0 <_printf_float+0x90>
 8006eba:	232d      	movs	r3, #45	; 0x2d
 8006ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec0:	4b93      	ldr	r3, [pc, #588]	; (8007110 <_printf_float+0x2e0>)
 8006ec2:	4894      	ldr	r0, [pc, #592]	; (8007114 <_printf_float+0x2e4>)
 8006ec4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ec8:	bf94      	ite	ls
 8006eca:	4698      	movls	r8, r3
 8006ecc:	4680      	movhi	r8, r0
 8006ece:	2303      	movs	r3, #3
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	9b05      	ldr	r3, [sp, #20]
 8006ed4:	f023 0204 	bic.w	r2, r3, #4
 8006ed8:	6022      	str	r2, [r4, #0]
 8006eda:	f04f 0900 	mov.w	r9, #0
 8006ede:	9700      	str	r7, [sp, #0]
 8006ee0:	4633      	mov	r3, r6
 8006ee2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f9d8 	bl	800729c <_printf_common>
 8006eec:	3001      	adds	r0, #1
 8006eee:	f040 8090 	bne.w	8007012 <_printf_float+0x1e2>
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef6:	b00d      	add	sp, #52	; 0x34
 8006ef8:	ecbd 8b02 	vpop	{d8}
 8006efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f00:	4642      	mov	r2, r8
 8006f02:	464b      	mov	r3, r9
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	f7f9 fe18 	bl	8000b3c <__aeabi_dcmpun>
 8006f0c:	b140      	cbz	r0, 8006f20 <_printf_float+0xf0>
 8006f0e:	464b      	mov	r3, r9
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bfbc      	itt	lt
 8006f14:	232d      	movlt	r3, #45	; 0x2d
 8006f16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f1a:	487f      	ldr	r0, [pc, #508]	; (8007118 <_printf_float+0x2e8>)
 8006f1c:	4b7f      	ldr	r3, [pc, #508]	; (800711c <_printf_float+0x2ec>)
 8006f1e:	e7d1      	b.n	8006ec4 <_printf_float+0x94>
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f26:	9206      	str	r2, [sp, #24]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	d13f      	bne.n	8006fac <_printf_float+0x17c>
 8006f2c:	2306      	movs	r3, #6
 8006f2e:	6063      	str	r3, [r4, #4]
 8006f30:	9b05      	ldr	r3, [sp, #20]
 8006f32:	6861      	ldr	r1, [r4, #4]
 8006f34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9303      	str	r3, [sp, #12]
 8006f3c:	ab0a      	add	r3, sp, #40	; 0x28
 8006f3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f42:	ab09      	add	r3, sp, #36	; 0x24
 8006f44:	ec49 8b10 	vmov	d0, r8, r9
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	6022      	str	r2, [r4, #0]
 8006f4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f50:	4628      	mov	r0, r5
 8006f52:	f7ff fecd 	bl	8006cf0 <__cvt>
 8006f56:	9b06      	ldr	r3, [sp, #24]
 8006f58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f5a:	2b47      	cmp	r3, #71	; 0x47
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	d108      	bne.n	8006f72 <_printf_float+0x142>
 8006f60:	1cc8      	adds	r0, r1, #3
 8006f62:	db02      	blt.n	8006f6a <_printf_float+0x13a>
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	4299      	cmp	r1, r3
 8006f68:	dd41      	ble.n	8006fee <_printf_float+0x1be>
 8006f6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f6e:	fa5f fb8b 	uxtb.w	fp, fp
 8006f72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f76:	d820      	bhi.n	8006fba <_printf_float+0x18a>
 8006f78:	3901      	subs	r1, #1
 8006f7a:	465a      	mov	r2, fp
 8006f7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f80:	9109      	str	r1, [sp, #36]	; 0x24
 8006f82:	f7ff ff17 	bl	8006db4 <__exponent>
 8006f86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f88:	1813      	adds	r3, r2, r0
 8006f8a:	2a01      	cmp	r2, #1
 8006f8c:	4681      	mov	r9, r0
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	dc02      	bgt.n	8006f98 <_printf_float+0x168>
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	07d2      	lsls	r2, r2, #31
 8006f96:	d501      	bpl.n	8006f9c <_printf_float+0x16c>
 8006f98:	3301      	adds	r3, #1
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d09c      	beq.n	8006ede <_printf_float+0xae>
 8006fa4:	232d      	movs	r3, #45	; 0x2d
 8006fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006faa:	e798      	b.n	8006ede <_printf_float+0xae>
 8006fac:	9a06      	ldr	r2, [sp, #24]
 8006fae:	2a47      	cmp	r2, #71	; 0x47
 8006fb0:	d1be      	bne.n	8006f30 <_printf_float+0x100>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1bc      	bne.n	8006f30 <_printf_float+0x100>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e7b9      	b.n	8006f2e <_printf_float+0xfe>
 8006fba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fbe:	d118      	bne.n	8006ff2 <_printf_float+0x1c2>
 8006fc0:	2900      	cmp	r1, #0
 8006fc2:	6863      	ldr	r3, [r4, #4]
 8006fc4:	dd0b      	ble.n	8006fde <_printf_float+0x1ae>
 8006fc6:	6121      	str	r1, [r4, #16]
 8006fc8:	b913      	cbnz	r3, 8006fd0 <_printf_float+0x1a0>
 8006fca:	6822      	ldr	r2, [r4, #0]
 8006fcc:	07d0      	lsls	r0, r2, #31
 8006fce:	d502      	bpl.n	8006fd6 <_printf_float+0x1a6>
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	440b      	add	r3, r1
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fd8:	f04f 0900 	mov.w	r9, #0
 8006fdc:	e7de      	b.n	8006f9c <_printf_float+0x16c>
 8006fde:	b913      	cbnz	r3, 8006fe6 <_printf_float+0x1b6>
 8006fe0:	6822      	ldr	r2, [r4, #0]
 8006fe2:	07d2      	lsls	r2, r2, #31
 8006fe4:	d501      	bpl.n	8006fea <_printf_float+0x1ba>
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	e7f4      	b.n	8006fd4 <_printf_float+0x1a4>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e7f2      	b.n	8006fd4 <_printf_float+0x1a4>
 8006fee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	db05      	blt.n	8007004 <_printf_float+0x1d4>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	6121      	str	r1, [r4, #16]
 8006ffc:	07d8      	lsls	r0, r3, #31
 8006ffe:	d5ea      	bpl.n	8006fd6 <_printf_float+0x1a6>
 8007000:	1c4b      	adds	r3, r1, #1
 8007002:	e7e7      	b.n	8006fd4 <_printf_float+0x1a4>
 8007004:	2900      	cmp	r1, #0
 8007006:	bfd4      	ite	le
 8007008:	f1c1 0202 	rsble	r2, r1, #2
 800700c:	2201      	movgt	r2, #1
 800700e:	4413      	add	r3, r2
 8007010:	e7e0      	b.n	8006fd4 <_printf_float+0x1a4>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	055a      	lsls	r2, r3, #21
 8007016:	d407      	bmi.n	8007028 <_printf_float+0x1f8>
 8007018:	6923      	ldr	r3, [r4, #16]
 800701a:	4642      	mov	r2, r8
 800701c:	4631      	mov	r1, r6
 800701e:	4628      	mov	r0, r5
 8007020:	47b8      	blx	r7
 8007022:	3001      	adds	r0, #1
 8007024:	d12c      	bne.n	8007080 <_printf_float+0x250>
 8007026:	e764      	b.n	8006ef2 <_printf_float+0xc2>
 8007028:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800702c:	f240 80e0 	bls.w	80071f0 <_printf_float+0x3c0>
 8007030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007034:	2200      	movs	r2, #0
 8007036:	2300      	movs	r3, #0
 8007038:	f7f9 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800703c:	2800      	cmp	r0, #0
 800703e:	d034      	beq.n	80070aa <_printf_float+0x27a>
 8007040:	4a37      	ldr	r2, [pc, #220]	; (8007120 <_printf_float+0x2f0>)
 8007042:	2301      	movs	r3, #1
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	f43f af51 	beq.w	8006ef2 <_printf_float+0xc2>
 8007050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007054:	429a      	cmp	r2, r3
 8007056:	db02      	blt.n	800705e <_printf_float+0x22e>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07d8      	lsls	r0, r3, #31
 800705c:	d510      	bpl.n	8007080 <_printf_float+0x250>
 800705e:	ee18 3a10 	vmov	r3, s16
 8007062:	4652      	mov	r2, sl
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f af41 	beq.w	8006ef2 <_printf_float+0xc2>
 8007070:	f04f 0800 	mov.w	r8, #0
 8007074:	f104 091a 	add.w	r9, r4, #26
 8007078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800707a:	3b01      	subs	r3, #1
 800707c:	4543      	cmp	r3, r8
 800707e:	dc09      	bgt.n	8007094 <_printf_float+0x264>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	079b      	lsls	r3, r3, #30
 8007084:	f100 8105 	bmi.w	8007292 <_printf_float+0x462>
 8007088:	68e0      	ldr	r0, [r4, #12]
 800708a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800708c:	4298      	cmp	r0, r3
 800708e:	bfb8      	it	lt
 8007090:	4618      	movlt	r0, r3
 8007092:	e730      	b.n	8006ef6 <_printf_float+0xc6>
 8007094:	2301      	movs	r3, #1
 8007096:	464a      	mov	r2, r9
 8007098:	4631      	mov	r1, r6
 800709a:	4628      	mov	r0, r5
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	f43f af27 	beq.w	8006ef2 <_printf_float+0xc2>
 80070a4:	f108 0801 	add.w	r8, r8, #1
 80070a8:	e7e6      	b.n	8007078 <_printf_float+0x248>
 80070aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dc39      	bgt.n	8007124 <_printf_float+0x2f4>
 80070b0:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <_printf_float+0x2f0>)
 80070b2:	2301      	movs	r3, #1
 80070b4:	4631      	mov	r1, r6
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b8      	blx	r7
 80070ba:	3001      	adds	r0, #1
 80070bc:	f43f af19 	beq.w	8006ef2 <_printf_float+0xc2>
 80070c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d102      	bne.n	80070ce <_printf_float+0x29e>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	07d9      	lsls	r1, r3, #31
 80070cc:	d5d8      	bpl.n	8007080 <_printf_float+0x250>
 80070ce:	ee18 3a10 	vmov	r3, s16
 80070d2:	4652      	mov	r2, sl
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	f43f af09 	beq.w	8006ef2 <_printf_float+0xc2>
 80070e0:	f04f 0900 	mov.w	r9, #0
 80070e4:	f104 0a1a 	add.w	sl, r4, #26
 80070e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ea:	425b      	negs	r3, r3
 80070ec:	454b      	cmp	r3, r9
 80070ee:	dc01      	bgt.n	80070f4 <_printf_float+0x2c4>
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	e792      	b.n	800701a <_printf_float+0x1ea>
 80070f4:	2301      	movs	r3, #1
 80070f6:	4652      	mov	r2, sl
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	f43f aef7 	beq.w	8006ef2 <_printf_float+0xc2>
 8007104:	f109 0901 	add.w	r9, r9, #1
 8007108:	e7ee      	b.n	80070e8 <_printf_float+0x2b8>
 800710a:	bf00      	nop
 800710c:	7fefffff 	.word	0x7fefffff
 8007110:	08009ad8 	.word	0x08009ad8
 8007114:	08009adc 	.word	0x08009adc
 8007118:	08009ae4 	.word	0x08009ae4
 800711c:	08009ae0 	.word	0x08009ae0
 8007120:	08009ae8 	.word	0x08009ae8
 8007124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007128:	429a      	cmp	r2, r3
 800712a:	bfa8      	it	ge
 800712c:	461a      	movge	r2, r3
 800712e:	2a00      	cmp	r2, #0
 8007130:	4691      	mov	r9, r2
 8007132:	dc37      	bgt.n	80071a4 <_printf_float+0x374>
 8007134:	f04f 0b00 	mov.w	fp, #0
 8007138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800713c:	f104 021a 	add.w	r2, r4, #26
 8007140:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	eba3 0309 	sub.w	r3, r3, r9
 8007148:	455b      	cmp	r3, fp
 800714a:	dc33      	bgt.n	80071b4 <_printf_float+0x384>
 800714c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007150:	429a      	cmp	r2, r3
 8007152:	db3b      	blt.n	80071cc <_printf_float+0x39c>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	07da      	lsls	r2, r3, #31
 8007158:	d438      	bmi.n	80071cc <_printf_float+0x39c>
 800715a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800715c:	9b05      	ldr	r3, [sp, #20]
 800715e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	eba2 0901 	sub.w	r9, r2, r1
 8007166:	4599      	cmp	r9, r3
 8007168:	bfa8      	it	ge
 800716a:	4699      	movge	r9, r3
 800716c:	f1b9 0f00 	cmp.w	r9, #0
 8007170:	dc35      	bgt.n	80071de <_printf_float+0x3ae>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800717a:	f104 0a1a 	add.w	sl, r4, #26
 800717e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	eba3 0309 	sub.w	r3, r3, r9
 8007188:	4543      	cmp	r3, r8
 800718a:	f77f af79 	ble.w	8007080 <_printf_float+0x250>
 800718e:	2301      	movs	r3, #1
 8007190:	4652      	mov	r2, sl
 8007192:	4631      	mov	r1, r6
 8007194:	4628      	mov	r0, r5
 8007196:	47b8      	blx	r7
 8007198:	3001      	adds	r0, #1
 800719a:	f43f aeaa 	beq.w	8006ef2 <_printf_float+0xc2>
 800719e:	f108 0801 	add.w	r8, r8, #1
 80071a2:	e7ec      	b.n	800717e <_printf_float+0x34e>
 80071a4:	4613      	mov	r3, r2
 80071a6:	4631      	mov	r1, r6
 80071a8:	4642      	mov	r2, r8
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b8      	blx	r7
 80071ae:	3001      	adds	r0, #1
 80071b0:	d1c0      	bne.n	8007134 <_printf_float+0x304>
 80071b2:	e69e      	b.n	8006ef2 <_printf_float+0xc2>
 80071b4:	2301      	movs	r3, #1
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
 80071ba:	9205      	str	r2, [sp, #20]
 80071bc:	47b8      	blx	r7
 80071be:	3001      	adds	r0, #1
 80071c0:	f43f ae97 	beq.w	8006ef2 <_printf_float+0xc2>
 80071c4:	9a05      	ldr	r2, [sp, #20]
 80071c6:	f10b 0b01 	add.w	fp, fp, #1
 80071ca:	e7b9      	b.n	8007140 <_printf_float+0x310>
 80071cc:	ee18 3a10 	vmov	r3, s16
 80071d0:	4652      	mov	r2, sl
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	d1be      	bne.n	800715a <_printf_float+0x32a>
 80071dc:	e689      	b.n	8006ef2 <_printf_float+0xc2>
 80071de:	9a05      	ldr	r2, [sp, #20]
 80071e0:	464b      	mov	r3, r9
 80071e2:	4442      	add	r2, r8
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	d1c1      	bne.n	8007172 <_printf_float+0x342>
 80071ee:	e680      	b.n	8006ef2 <_printf_float+0xc2>
 80071f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f2:	2a01      	cmp	r2, #1
 80071f4:	dc01      	bgt.n	80071fa <_printf_float+0x3ca>
 80071f6:	07db      	lsls	r3, r3, #31
 80071f8:	d538      	bpl.n	800726c <_printf_float+0x43c>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4642      	mov	r2, r8
 80071fe:	4631      	mov	r1, r6
 8007200:	4628      	mov	r0, r5
 8007202:	47b8      	blx	r7
 8007204:	3001      	adds	r0, #1
 8007206:	f43f ae74 	beq.w	8006ef2 <_printf_float+0xc2>
 800720a:	ee18 3a10 	vmov	r3, s16
 800720e:	4652      	mov	r2, sl
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	f43f ae6b 	beq.w	8006ef2 <_printf_float+0xc2>
 800721c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007220:	2200      	movs	r2, #0
 8007222:	2300      	movs	r3, #0
 8007224:	f7f9 fc58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007228:	b9d8      	cbnz	r0, 8007262 <_printf_float+0x432>
 800722a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722c:	f108 0201 	add.w	r2, r8, #1
 8007230:	3b01      	subs	r3, #1
 8007232:	4631      	mov	r1, r6
 8007234:	4628      	mov	r0, r5
 8007236:	47b8      	blx	r7
 8007238:	3001      	adds	r0, #1
 800723a:	d10e      	bne.n	800725a <_printf_float+0x42a>
 800723c:	e659      	b.n	8006ef2 <_printf_float+0xc2>
 800723e:	2301      	movs	r3, #1
 8007240:	4652      	mov	r2, sl
 8007242:	4631      	mov	r1, r6
 8007244:	4628      	mov	r0, r5
 8007246:	47b8      	blx	r7
 8007248:	3001      	adds	r0, #1
 800724a:	f43f ae52 	beq.w	8006ef2 <_printf_float+0xc2>
 800724e:	f108 0801 	add.w	r8, r8, #1
 8007252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007254:	3b01      	subs	r3, #1
 8007256:	4543      	cmp	r3, r8
 8007258:	dcf1      	bgt.n	800723e <_printf_float+0x40e>
 800725a:	464b      	mov	r3, r9
 800725c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007260:	e6dc      	b.n	800701c <_printf_float+0x1ec>
 8007262:	f04f 0800 	mov.w	r8, #0
 8007266:	f104 0a1a 	add.w	sl, r4, #26
 800726a:	e7f2      	b.n	8007252 <_printf_float+0x422>
 800726c:	2301      	movs	r3, #1
 800726e:	4642      	mov	r2, r8
 8007270:	e7df      	b.n	8007232 <_printf_float+0x402>
 8007272:	2301      	movs	r3, #1
 8007274:	464a      	mov	r2, r9
 8007276:	4631      	mov	r1, r6
 8007278:	4628      	mov	r0, r5
 800727a:	47b8      	blx	r7
 800727c:	3001      	adds	r0, #1
 800727e:	f43f ae38 	beq.w	8006ef2 <_printf_float+0xc2>
 8007282:	f108 0801 	add.w	r8, r8, #1
 8007286:	68e3      	ldr	r3, [r4, #12]
 8007288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800728a:	1a5b      	subs	r3, r3, r1
 800728c:	4543      	cmp	r3, r8
 800728e:	dcf0      	bgt.n	8007272 <_printf_float+0x442>
 8007290:	e6fa      	b.n	8007088 <_printf_float+0x258>
 8007292:	f04f 0800 	mov.w	r8, #0
 8007296:	f104 0919 	add.w	r9, r4, #25
 800729a:	e7f4      	b.n	8007286 <_printf_float+0x456>

0800729c <_printf_common>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	4616      	mov	r6, r2
 80072a2:	4699      	mov	r9, r3
 80072a4:	688a      	ldr	r2, [r1, #8]
 80072a6:	690b      	ldr	r3, [r1, #16]
 80072a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072ac:	4293      	cmp	r3, r2
 80072ae:	bfb8      	it	lt
 80072b0:	4613      	movlt	r3, r2
 80072b2:	6033      	str	r3, [r6, #0]
 80072b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b8:	4607      	mov	r7, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b10a      	cbz	r2, 80072c2 <_printf_common+0x26>
 80072be:	3301      	adds	r3, #1
 80072c0:	6033      	str	r3, [r6, #0]
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	0699      	lsls	r1, r3, #26
 80072c6:	bf42      	ittt	mi
 80072c8:	6833      	ldrmi	r3, [r6, #0]
 80072ca:	3302      	addmi	r3, #2
 80072cc:	6033      	strmi	r3, [r6, #0]
 80072ce:	6825      	ldr	r5, [r4, #0]
 80072d0:	f015 0506 	ands.w	r5, r5, #6
 80072d4:	d106      	bne.n	80072e4 <_printf_common+0x48>
 80072d6:	f104 0a19 	add.w	sl, r4, #25
 80072da:	68e3      	ldr	r3, [r4, #12]
 80072dc:	6832      	ldr	r2, [r6, #0]
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dc26      	bgt.n	8007332 <_printf_common+0x96>
 80072e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e8:	1e13      	subs	r3, r2, #0
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	bf18      	it	ne
 80072ee:	2301      	movne	r3, #1
 80072f0:	0692      	lsls	r2, r2, #26
 80072f2:	d42b      	bmi.n	800734c <_printf_common+0xb0>
 80072f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f8:	4649      	mov	r1, r9
 80072fa:	4638      	mov	r0, r7
 80072fc:	47c0      	blx	r8
 80072fe:	3001      	adds	r0, #1
 8007300:	d01e      	beq.n	8007340 <_printf_common+0xa4>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	68e5      	ldr	r5, [r4, #12]
 8007306:	6832      	ldr	r2, [r6, #0]
 8007308:	f003 0306 	and.w	r3, r3, #6
 800730c:	2b04      	cmp	r3, #4
 800730e:	bf08      	it	eq
 8007310:	1aad      	subeq	r5, r5, r2
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	6922      	ldr	r2, [r4, #16]
 8007316:	bf0c      	ite	eq
 8007318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800731c:	2500      	movne	r5, #0
 800731e:	4293      	cmp	r3, r2
 8007320:	bfc4      	itt	gt
 8007322:	1a9b      	subgt	r3, r3, r2
 8007324:	18ed      	addgt	r5, r5, r3
 8007326:	2600      	movs	r6, #0
 8007328:	341a      	adds	r4, #26
 800732a:	42b5      	cmp	r5, r6
 800732c:	d11a      	bne.n	8007364 <_printf_common+0xc8>
 800732e:	2000      	movs	r0, #0
 8007330:	e008      	b.n	8007344 <_printf_common+0xa8>
 8007332:	2301      	movs	r3, #1
 8007334:	4652      	mov	r2, sl
 8007336:	4649      	mov	r1, r9
 8007338:	4638      	mov	r0, r7
 800733a:	47c0      	blx	r8
 800733c:	3001      	adds	r0, #1
 800733e:	d103      	bne.n	8007348 <_printf_common+0xac>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007348:	3501      	adds	r5, #1
 800734a:	e7c6      	b.n	80072da <_printf_common+0x3e>
 800734c:	18e1      	adds	r1, r4, r3
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	2030      	movs	r0, #48	; 0x30
 8007352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007356:	4422      	add	r2, r4
 8007358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800735c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007360:	3302      	adds	r3, #2
 8007362:	e7c7      	b.n	80072f4 <_printf_common+0x58>
 8007364:	2301      	movs	r3, #1
 8007366:	4622      	mov	r2, r4
 8007368:	4649      	mov	r1, r9
 800736a:	4638      	mov	r0, r7
 800736c:	47c0      	blx	r8
 800736e:	3001      	adds	r0, #1
 8007370:	d0e6      	beq.n	8007340 <_printf_common+0xa4>
 8007372:	3601      	adds	r6, #1
 8007374:	e7d9      	b.n	800732a <_printf_common+0x8e>
	...

08007378 <_printf_i>:
 8007378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	460c      	mov	r4, r1
 800737e:	4691      	mov	r9, r2
 8007380:	7e27      	ldrb	r7, [r4, #24]
 8007382:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007384:	2f78      	cmp	r7, #120	; 0x78
 8007386:	4680      	mov	r8, r0
 8007388:	469a      	mov	sl, r3
 800738a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800738e:	d807      	bhi.n	80073a0 <_printf_i+0x28>
 8007390:	2f62      	cmp	r7, #98	; 0x62
 8007392:	d80a      	bhi.n	80073aa <_printf_i+0x32>
 8007394:	2f00      	cmp	r7, #0
 8007396:	f000 80d8 	beq.w	800754a <_printf_i+0x1d2>
 800739a:	2f58      	cmp	r7, #88	; 0x58
 800739c:	f000 80a3 	beq.w	80074e6 <_printf_i+0x16e>
 80073a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a8:	e03a      	b.n	8007420 <_printf_i+0xa8>
 80073aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ae:	2b15      	cmp	r3, #21
 80073b0:	d8f6      	bhi.n	80073a0 <_printf_i+0x28>
 80073b2:	a001      	add	r0, pc, #4	; (adr r0, 80073b8 <_printf_i+0x40>)
 80073b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073b8:	08007411 	.word	0x08007411
 80073bc:	08007425 	.word	0x08007425
 80073c0:	080073a1 	.word	0x080073a1
 80073c4:	080073a1 	.word	0x080073a1
 80073c8:	080073a1 	.word	0x080073a1
 80073cc:	080073a1 	.word	0x080073a1
 80073d0:	08007425 	.word	0x08007425
 80073d4:	080073a1 	.word	0x080073a1
 80073d8:	080073a1 	.word	0x080073a1
 80073dc:	080073a1 	.word	0x080073a1
 80073e0:	080073a1 	.word	0x080073a1
 80073e4:	08007531 	.word	0x08007531
 80073e8:	08007455 	.word	0x08007455
 80073ec:	08007513 	.word	0x08007513
 80073f0:	080073a1 	.word	0x080073a1
 80073f4:	080073a1 	.word	0x080073a1
 80073f8:	08007553 	.word	0x08007553
 80073fc:	080073a1 	.word	0x080073a1
 8007400:	08007455 	.word	0x08007455
 8007404:	080073a1 	.word	0x080073a1
 8007408:	080073a1 	.word	0x080073a1
 800740c:	0800751b 	.word	0x0800751b
 8007410:	680b      	ldr	r3, [r1, #0]
 8007412:	1d1a      	adds	r2, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	600a      	str	r2, [r1, #0]
 8007418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800741c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007420:	2301      	movs	r3, #1
 8007422:	e0a3      	b.n	800756c <_printf_i+0x1f4>
 8007424:	6825      	ldr	r5, [r4, #0]
 8007426:	6808      	ldr	r0, [r1, #0]
 8007428:	062e      	lsls	r6, r5, #24
 800742a:	f100 0304 	add.w	r3, r0, #4
 800742e:	d50a      	bpl.n	8007446 <_printf_i+0xce>
 8007430:	6805      	ldr	r5, [r0, #0]
 8007432:	600b      	str	r3, [r1, #0]
 8007434:	2d00      	cmp	r5, #0
 8007436:	da03      	bge.n	8007440 <_printf_i+0xc8>
 8007438:	232d      	movs	r3, #45	; 0x2d
 800743a:	426d      	negs	r5, r5
 800743c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007440:	485e      	ldr	r0, [pc, #376]	; (80075bc <_printf_i+0x244>)
 8007442:	230a      	movs	r3, #10
 8007444:	e019      	b.n	800747a <_printf_i+0x102>
 8007446:	f015 0f40 	tst.w	r5, #64	; 0x40
 800744a:	6805      	ldr	r5, [r0, #0]
 800744c:	600b      	str	r3, [r1, #0]
 800744e:	bf18      	it	ne
 8007450:	b22d      	sxthne	r5, r5
 8007452:	e7ef      	b.n	8007434 <_printf_i+0xbc>
 8007454:	680b      	ldr	r3, [r1, #0]
 8007456:	6825      	ldr	r5, [r4, #0]
 8007458:	1d18      	adds	r0, r3, #4
 800745a:	6008      	str	r0, [r1, #0]
 800745c:	0628      	lsls	r0, r5, #24
 800745e:	d501      	bpl.n	8007464 <_printf_i+0xec>
 8007460:	681d      	ldr	r5, [r3, #0]
 8007462:	e002      	b.n	800746a <_printf_i+0xf2>
 8007464:	0669      	lsls	r1, r5, #25
 8007466:	d5fb      	bpl.n	8007460 <_printf_i+0xe8>
 8007468:	881d      	ldrh	r5, [r3, #0]
 800746a:	4854      	ldr	r0, [pc, #336]	; (80075bc <_printf_i+0x244>)
 800746c:	2f6f      	cmp	r7, #111	; 0x6f
 800746e:	bf0c      	ite	eq
 8007470:	2308      	moveq	r3, #8
 8007472:	230a      	movne	r3, #10
 8007474:	2100      	movs	r1, #0
 8007476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800747a:	6866      	ldr	r6, [r4, #4]
 800747c:	60a6      	str	r6, [r4, #8]
 800747e:	2e00      	cmp	r6, #0
 8007480:	bfa2      	ittt	ge
 8007482:	6821      	ldrge	r1, [r4, #0]
 8007484:	f021 0104 	bicge.w	r1, r1, #4
 8007488:	6021      	strge	r1, [r4, #0]
 800748a:	b90d      	cbnz	r5, 8007490 <_printf_i+0x118>
 800748c:	2e00      	cmp	r6, #0
 800748e:	d04d      	beq.n	800752c <_printf_i+0x1b4>
 8007490:	4616      	mov	r6, r2
 8007492:	fbb5 f1f3 	udiv	r1, r5, r3
 8007496:	fb03 5711 	mls	r7, r3, r1, r5
 800749a:	5dc7      	ldrb	r7, [r0, r7]
 800749c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074a0:	462f      	mov	r7, r5
 80074a2:	42bb      	cmp	r3, r7
 80074a4:	460d      	mov	r5, r1
 80074a6:	d9f4      	bls.n	8007492 <_printf_i+0x11a>
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d10b      	bne.n	80074c4 <_printf_i+0x14c>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	07df      	lsls	r7, r3, #31
 80074b0:	d508      	bpl.n	80074c4 <_printf_i+0x14c>
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	6861      	ldr	r1, [r4, #4]
 80074b6:	4299      	cmp	r1, r3
 80074b8:	bfde      	ittt	le
 80074ba:	2330      	movle	r3, #48	; 0x30
 80074bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074c4:	1b92      	subs	r2, r2, r6
 80074c6:	6122      	str	r2, [r4, #16]
 80074c8:	f8cd a000 	str.w	sl, [sp]
 80074cc:	464b      	mov	r3, r9
 80074ce:	aa03      	add	r2, sp, #12
 80074d0:	4621      	mov	r1, r4
 80074d2:	4640      	mov	r0, r8
 80074d4:	f7ff fee2 	bl	800729c <_printf_common>
 80074d8:	3001      	adds	r0, #1
 80074da:	d14c      	bne.n	8007576 <_printf_i+0x1fe>
 80074dc:	f04f 30ff 	mov.w	r0, #4294967295
 80074e0:	b004      	add	sp, #16
 80074e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e6:	4835      	ldr	r0, [pc, #212]	; (80075bc <_printf_i+0x244>)
 80074e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	680e      	ldr	r6, [r1, #0]
 80074f0:	061f      	lsls	r7, r3, #24
 80074f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80074f6:	600e      	str	r6, [r1, #0]
 80074f8:	d514      	bpl.n	8007524 <_printf_i+0x1ac>
 80074fa:	07d9      	lsls	r1, r3, #31
 80074fc:	bf44      	itt	mi
 80074fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007502:	6023      	strmi	r3, [r4, #0]
 8007504:	b91d      	cbnz	r5, 800750e <_printf_i+0x196>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	f023 0320 	bic.w	r3, r3, #32
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	2310      	movs	r3, #16
 8007510:	e7b0      	b.n	8007474 <_printf_i+0xfc>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	f043 0320 	orr.w	r3, r3, #32
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	2378      	movs	r3, #120	; 0x78
 800751c:	4828      	ldr	r0, [pc, #160]	; (80075c0 <_printf_i+0x248>)
 800751e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007522:	e7e3      	b.n	80074ec <_printf_i+0x174>
 8007524:	065e      	lsls	r6, r3, #25
 8007526:	bf48      	it	mi
 8007528:	b2ad      	uxthmi	r5, r5
 800752a:	e7e6      	b.n	80074fa <_printf_i+0x182>
 800752c:	4616      	mov	r6, r2
 800752e:	e7bb      	b.n	80074a8 <_printf_i+0x130>
 8007530:	680b      	ldr	r3, [r1, #0]
 8007532:	6826      	ldr	r6, [r4, #0]
 8007534:	6960      	ldr	r0, [r4, #20]
 8007536:	1d1d      	adds	r5, r3, #4
 8007538:	600d      	str	r5, [r1, #0]
 800753a:	0635      	lsls	r5, r6, #24
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	d501      	bpl.n	8007544 <_printf_i+0x1cc>
 8007540:	6018      	str	r0, [r3, #0]
 8007542:	e002      	b.n	800754a <_printf_i+0x1d2>
 8007544:	0671      	lsls	r1, r6, #25
 8007546:	d5fb      	bpl.n	8007540 <_printf_i+0x1c8>
 8007548:	8018      	strh	r0, [r3, #0]
 800754a:	2300      	movs	r3, #0
 800754c:	6123      	str	r3, [r4, #16]
 800754e:	4616      	mov	r6, r2
 8007550:	e7ba      	b.n	80074c8 <_printf_i+0x150>
 8007552:	680b      	ldr	r3, [r1, #0]
 8007554:	1d1a      	adds	r2, r3, #4
 8007556:	600a      	str	r2, [r1, #0]
 8007558:	681e      	ldr	r6, [r3, #0]
 800755a:	6862      	ldr	r2, [r4, #4]
 800755c:	2100      	movs	r1, #0
 800755e:	4630      	mov	r0, r6
 8007560:	f7f8 fe46 	bl	80001f0 <memchr>
 8007564:	b108      	cbz	r0, 800756a <_printf_i+0x1f2>
 8007566:	1b80      	subs	r0, r0, r6
 8007568:	6060      	str	r0, [r4, #4]
 800756a:	6863      	ldr	r3, [r4, #4]
 800756c:	6123      	str	r3, [r4, #16]
 800756e:	2300      	movs	r3, #0
 8007570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007574:	e7a8      	b.n	80074c8 <_printf_i+0x150>
 8007576:	6923      	ldr	r3, [r4, #16]
 8007578:	4632      	mov	r2, r6
 800757a:	4649      	mov	r1, r9
 800757c:	4640      	mov	r0, r8
 800757e:	47d0      	blx	sl
 8007580:	3001      	adds	r0, #1
 8007582:	d0ab      	beq.n	80074dc <_printf_i+0x164>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	079b      	lsls	r3, r3, #30
 8007588:	d413      	bmi.n	80075b2 <_printf_i+0x23a>
 800758a:	68e0      	ldr	r0, [r4, #12]
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	4298      	cmp	r0, r3
 8007590:	bfb8      	it	lt
 8007592:	4618      	movlt	r0, r3
 8007594:	e7a4      	b.n	80074e0 <_printf_i+0x168>
 8007596:	2301      	movs	r3, #1
 8007598:	4632      	mov	r2, r6
 800759a:	4649      	mov	r1, r9
 800759c:	4640      	mov	r0, r8
 800759e:	47d0      	blx	sl
 80075a0:	3001      	adds	r0, #1
 80075a2:	d09b      	beq.n	80074dc <_printf_i+0x164>
 80075a4:	3501      	adds	r5, #1
 80075a6:	68e3      	ldr	r3, [r4, #12]
 80075a8:	9903      	ldr	r1, [sp, #12]
 80075aa:	1a5b      	subs	r3, r3, r1
 80075ac:	42ab      	cmp	r3, r5
 80075ae:	dcf2      	bgt.n	8007596 <_printf_i+0x21e>
 80075b0:	e7eb      	b.n	800758a <_printf_i+0x212>
 80075b2:	2500      	movs	r5, #0
 80075b4:	f104 0619 	add.w	r6, r4, #25
 80075b8:	e7f5      	b.n	80075a6 <_printf_i+0x22e>
 80075ba:	bf00      	nop
 80075bc:	08009aea 	.word	0x08009aea
 80075c0:	08009afb 	.word	0x08009afb

080075c4 <siprintf>:
 80075c4:	b40e      	push	{r1, r2, r3}
 80075c6:	b500      	push	{lr}
 80075c8:	b09c      	sub	sp, #112	; 0x70
 80075ca:	ab1d      	add	r3, sp, #116	; 0x74
 80075cc:	9002      	str	r0, [sp, #8]
 80075ce:	9006      	str	r0, [sp, #24]
 80075d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075d4:	4809      	ldr	r0, [pc, #36]	; (80075fc <siprintf+0x38>)
 80075d6:	9107      	str	r1, [sp, #28]
 80075d8:	9104      	str	r1, [sp, #16]
 80075da:	4909      	ldr	r1, [pc, #36]	; (8007600 <siprintf+0x3c>)
 80075dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e0:	9105      	str	r1, [sp, #20]
 80075e2:	6800      	ldr	r0, [r0, #0]
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	a902      	add	r1, sp, #8
 80075e8:	f001 fb34 	bl	8008c54 <_svfiprintf_r>
 80075ec:	9b02      	ldr	r3, [sp, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	b01c      	add	sp, #112	; 0x70
 80075f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075f8:	b003      	add	sp, #12
 80075fa:	4770      	bx	lr
 80075fc:	2000001c 	.word	0x2000001c
 8007600:	ffff0208 	.word	0xffff0208

08007604 <quorem>:
 8007604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	6903      	ldr	r3, [r0, #16]
 800760a:	690c      	ldr	r4, [r1, #16]
 800760c:	42a3      	cmp	r3, r4
 800760e:	4607      	mov	r7, r0
 8007610:	f2c0 8081 	blt.w	8007716 <quorem+0x112>
 8007614:	3c01      	subs	r4, #1
 8007616:	f101 0814 	add.w	r8, r1, #20
 800761a:	f100 0514 	add.w	r5, r0, #20
 800761e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800762c:	3301      	adds	r3, #1
 800762e:	429a      	cmp	r2, r3
 8007630:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007634:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007638:	fbb2 f6f3 	udiv	r6, r2, r3
 800763c:	d331      	bcc.n	80076a2 <quorem+0x9e>
 800763e:	f04f 0e00 	mov.w	lr, #0
 8007642:	4640      	mov	r0, r8
 8007644:	46ac      	mov	ip, r5
 8007646:	46f2      	mov	sl, lr
 8007648:	f850 2b04 	ldr.w	r2, [r0], #4
 800764c:	b293      	uxth	r3, r2
 800764e:	fb06 e303 	mla	r3, r6, r3, lr
 8007652:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007656:	b29b      	uxth	r3, r3
 8007658:	ebaa 0303 	sub.w	r3, sl, r3
 800765c:	0c12      	lsrs	r2, r2, #16
 800765e:	f8dc a000 	ldr.w	sl, [ip]
 8007662:	fb06 e202 	mla	r2, r6, r2, lr
 8007666:	fa13 f38a 	uxtah	r3, r3, sl
 800766a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800766e:	fa1f fa82 	uxth.w	sl, r2
 8007672:	f8dc 2000 	ldr.w	r2, [ip]
 8007676:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800767a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007684:	4581      	cmp	r9, r0
 8007686:	f84c 3b04 	str.w	r3, [ip], #4
 800768a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800768e:	d2db      	bcs.n	8007648 <quorem+0x44>
 8007690:	f855 300b 	ldr.w	r3, [r5, fp]
 8007694:	b92b      	cbnz	r3, 80076a2 <quorem+0x9e>
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	3b04      	subs	r3, #4
 800769a:	429d      	cmp	r5, r3
 800769c:	461a      	mov	r2, r3
 800769e:	d32e      	bcc.n	80076fe <quorem+0xfa>
 80076a0:	613c      	str	r4, [r7, #16]
 80076a2:	4638      	mov	r0, r7
 80076a4:	f001 f8c0 	bl	8008828 <__mcmp>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	db24      	blt.n	80076f6 <quorem+0xf2>
 80076ac:	3601      	adds	r6, #1
 80076ae:	4628      	mov	r0, r5
 80076b0:	f04f 0c00 	mov.w	ip, #0
 80076b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076b8:	f8d0 e000 	ldr.w	lr, [r0]
 80076bc:	b293      	uxth	r3, r2
 80076be:	ebac 0303 	sub.w	r3, ip, r3
 80076c2:	0c12      	lsrs	r2, r2, #16
 80076c4:	fa13 f38e 	uxtah	r3, r3, lr
 80076c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076d6:	45c1      	cmp	r9, r8
 80076d8:	f840 3b04 	str.w	r3, [r0], #4
 80076dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076e0:	d2e8      	bcs.n	80076b4 <quorem+0xb0>
 80076e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ea:	b922      	cbnz	r2, 80076f6 <quorem+0xf2>
 80076ec:	3b04      	subs	r3, #4
 80076ee:	429d      	cmp	r5, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	d30a      	bcc.n	800770a <quorem+0x106>
 80076f4:	613c      	str	r4, [r7, #16]
 80076f6:	4630      	mov	r0, r6
 80076f8:	b003      	add	sp, #12
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	3b04      	subs	r3, #4
 8007702:	2a00      	cmp	r2, #0
 8007704:	d1cc      	bne.n	80076a0 <quorem+0x9c>
 8007706:	3c01      	subs	r4, #1
 8007708:	e7c7      	b.n	800769a <quorem+0x96>
 800770a:	6812      	ldr	r2, [r2, #0]
 800770c:	3b04      	subs	r3, #4
 800770e:	2a00      	cmp	r2, #0
 8007710:	d1f0      	bne.n	80076f4 <quorem+0xf0>
 8007712:	3c01      	subs	r4, #1
 8007714:	e7eb      	b.n	80076ee <quorem+0xea>
 8007716:	2000      	movs	r0, #0
 8007718:	e7ee      	b.n	80076f8 <quorem+0xf4>
 800771a:	0000      	movs	r0, r0
 800771c:	0000      	movs	r0, r0
	...

08007720 <_dtoa_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	ed2d 8b02 	vpush	{d8}
 8007728:	ec57 6b10 	vmov	r6, r7, d0
 800772c:	b095      	sub	sp, #84	; 0x54
 800772e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007730:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007734:	9105      	str	r1, [sp, #20]
 8007736:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800773a:	4604      	mov	r4, r0
 800773c:	9209      	str	r2, [sp, #36]	; 0x24
 800773e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007740:	b975      	cbnz	r5, 8007760 <_dtoa_r+0x40>
 8007742:	2010      	movs	r0, #16
 8007744:	f000 fddc 	bl	8008300 <malloc>
 8007748:	4602      	mov	r2, r0
 800774a:	6260      	str	r0, [r4, #36]	; 0x24
 800774c:	b920      	cbnz	r0, 8007758 <_dtoa_r+0x38>
 800774e:	4bb2      	ldr	r3, [pc, #712]	; (8007a18 <_dtoa_r+0x2f8>)
 8007750:	21ea      	movs	r1, #234	; 0xea
 8007752:	48b2      	ldr	r0, [pc, #712]	; (8007a1c <_dtoa_r+0x2fc>)
 8007754:	f001 fb8e 	bl	8008e74 <__assert_func>
 8007758:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800775c:	6005      	str	r5, [r0, #0]
 800775e:	60c5      	str	r5, [r0, #12]
 8007760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	b151      	cbz	r1, 800777c <_dtoa_r+0x5c>
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	604a      	str	r2, [r1, #4]
 800776a:	2301      	movs	r3, #1
 800776c:	4093      	lsls	r3, r2
 800776e:	608b      	str	r3, [r1, #8]
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fe1b 	bl	80083ac <_Bfree>
 8007776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	1e3b      	subs	r3, r7, #0
 800777e:	bfb9      	ittee	lt
 8007780:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007784:	9303      	strlt	r3, [sp, #12]
 8007786:	2300      	movge	r3, #0
 8007788:	f8c8 3000 	strge.w	r3, [r8]
 800778c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007790:	4ba3      	ldr	r3, [pc, #652]	; (8007a20 <_dtoa_r+0x300>)
 8007792:	bfbc      	itt	lt
 8007794:	2201      	movlt	r2, #1
 8007796:	f8c8 2000 	strlt.w	r2, [r8]
 800779a:	ea33 0309 	bics.w	r3, r3, r9
 800779e:	d11b      	bne.n	80077d8 <_dtoa_r+0xb8>
 80077a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077ac:	4333      	orrs	r3, r6
 80077ae:	f000 857a 	beq.w	80082a6 <_dtoa_r+0xb86>
 80077b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077b4:	b963      	cbnz	r3, 80077d0 <_dtoa_r+0xb0>
 80077b6:	4b9b      	ldr	r3, [pc, #620]	; (8007a24 <_dtoa_r+0x304>)
 80077b8:	e024      	b.n	8007804 <_dtoa_r+0xe4>
 80077ba:	4b9b      	ldr	r3, [pc, #620]	; (8007a28 <_dtoa_r+0x308>)
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	9800      	ldr	r0, [sp, #0]
 80077c6:	b015      	add	sp, #84	; 0x54
 80077c8:	ecbd 8b02 	vpop	{d8}
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	4b94      	ldr	r3, [pc, #592]	; (8007a24 <_dtoa_r+0x304>)
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	3303      	adds	r3, #3
 80077d6:	e7f3      	b.n	80077c0 <_dtoa_r+0xa0>
 80077d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	ec51 0b17 	vmov	r0, r1, d7
 80077e2:	2300      	movs	r3, #0
 80077e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80077e8:	f7f9 f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80077ec:	4680      	mov	r8, r0
 80077ee:	b158      	cbz	r0, 8007808 <_dtoa_r+0xe8>
 80077f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077f2:	2301      	movs	r3, #1
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 8551 	beq.w	80082a0 <_dtoa_r+0xb80>
 80077fe:	488b      	ldr	r0, [pc, #556]	; (8007a2c <_dtoa_r+0x30c>)
 8007800:	6018      	str	r0, [r3, #0]
 8007802:	1e43      	subs	r3, r0, #1
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	e7dd      	b.n	80077c4 <_dtoa_r+0xa4>
 8007808:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800780c:	aa12      	add	r2, sp, #72	; 0x48
 800780e:	a913      	add	r1, sp, #76	; 0x4c
 8007810:	4620      	mov	r0, r4
 8007812:	f001 f8ad 	bl	8008970 <__d2b>
 8007816:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800781a:	4683      	mov	fp, r0
 800781c:	2d00      	cmp	r5, #0
 800781e:	d07c      	beq.n	800791a <_dtoa_r+0x1fa>
 8007820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007822:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800782a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800782e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007832:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800783a:	4b7d      	ldr	r3, [pc, #500]	; (8007a30 <_dtoa_r+0x310>)
 800783c:	2200      	movs	r2, #0
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f8 fd29 	bl	8000298 <__aeabi_dsub>
 8007846:	a36e      	add	r3, pc, #440	; (adr r3, 8007a00 <_dtoa_r+0x2e0>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fedc 	bl	8000608 <__aeabi_dmul>
 8007850:	a36d      	add	r3, pc, #436	; (adr r3, 8007a08 <_dtoa_r+0x2e8>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f7f8 fd21 	bl	800029c <__adddf3>
 800785a:	4606      	mov	r6, r0
 800785c:	4628      	mov	r0, r5
 800785e:	460f      	mov	r7, r1
 8007860:	f7f8 fe68 	bl	8000534 <__aeabi_i2d>
 8007864:	a36a      	add	r3, pc, #424	; (adr r3, 8007a10 <_dtoa_r+0x2f0>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f7f8 fecd 	bl	8000608 <__aeabi_dmul>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f8 fd11 	bl	800029c <__adddf3>
 800787a:	4606      	mov	r6, r0
 800787c:	460f      	mov	r7, r1
 800787e:	f7f9 f973 	bl	8000b68 <__aeabi_d2iz>
 8007882:	2200      	movs	r2, #0
 8007884:	4682      	mov	sl, r0
 8007886:	2300      	movs	r3, #0
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f9 f92e 	bl	8000aec <__aeabi_dcmplt>
 8007890:	b148      	cbz	r0, 80078a6 <_dtoa_r+0x186>
 8007892:	4650      	mov	r0, sl
 8007894:	f7f8 fe4e 	bl	8000534 <__aeabi_i2d>
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	f7f9 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80078a0:	b908      	cbnz	r0, 80078a6 <_dtoa_r+0x186>
 80078a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078a6:	f1ba 0f16 	cmp.w	sl, #22
 80078aa:	d854      	bhi.n	8007956 <_dtoa_r+0x236>
 80078ac:	4b61      	ldr	r3, [pc, #388]	; (8007a34 <_dtoa_r+0x314>)
 80078ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078ba:	f7f9 f917 	bl	8000aec <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d04b      	beq.n	800795a <_dtoa_r+0x23a>
 80078c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078c6:	2300      	movs	r3, #0
 80078c8:	930e      	str	r3, [sp, #56]	; 0x38
 80078ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078cc:	1b5d      	subs	r5, r3, r5
 80078ce:	1e6b      	subs	r3, r5, #1
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	bf43      	ittte	mi
 80078d4:	2300      	movmi	r3, #0
 80078d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80078da:	9304      	strmi	r3, [sp, #16]
 80078dc:	f04f 0800 	movpl.w	r8, #0
 80078e0:	f1ba 0f00 	cmp.w	sl, #0
 80078e4:	db3b      	blt.n	800795e <_dtoa_r+0x23e>
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80078ec:	4453      	add	r3, sl
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	2300      	movs	r3, #0
 80078f2:	9306      	str	r3, [sp, #24]
 80078f4:	9b05      	ldr	r3, [sp, #20]
 80078f6:	2b09      	cmp	r3, #9
 80078f8:	d869      	bhi.n	80079ce <_dtoa_r+0x2ae>
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	bfc4      	itt	gt
 80078fe:	3b04      	subgt	r3, #4
 8007900:	9305      	strgt	r3, [sp, #20]
 8007902:	9b05      	ldr	r3, [sp, #20]
 8007904:	f1a3 0302 	sub.w	r3, r3, #2
 8007908:	bfcc      	ite	gt
 800790a:	2500      	movgt	r5, #0
 800790c:	2501      	movle	r5, #1
 800790e:	2b03      	cmp	r3, #3
 8007910:	d869      	bhi.n	80079e6 <_dtoa_r+0x2c6>
 8007912:	e8df f003 	tbb	[pc, r3]
 8007916:	4e2c      	.short	0x4e2c
 8007918:	5a4c      	.short	0x5a4c
 800791a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800791e:	441d      	add	r5, r3
 8007920:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007924:	2b20      	cmp	r3, #32
 8007926:	bfc1      	itttt	gt
 8007928:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800792c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007930:	fa09 f303 	lslgt.w	r3, r9, r3
 8007934:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007938:	bfda      	itte	le
 800793a:	f1c3 0320 	rsble	r3, r3, #32
 800793e:	fa06 f003 	lslle.w	r0, r6, r3
 8007942:	4318      	orrgt	r0, r3
 8007944:	f7f8 fde6 	bl	8000514 <__aeabi_ui2d>
 8007948:	2301      	movs	r3, #1
 800794a:	4606      	mov	r6, r0
 800794c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007950:	3d01      	subs	r5, #1
 8007952:	9310      	str	r3, [sp, #64]	; 0x40
 8007954:	e771      	b.n	800783a <_dtoa_r+0x11a>
 8007956:	2301      	movs	r3, #1
 8007958:	e7b6      	b.n	80078c8 <_dtoa_r+0x1a8>
 800795a:	900e      	str	r0, [sp, #56]	; 0x38
 800795c:	e7b5      	b.n	80078ca <_dtoa_r+0x1aa>
 800795e:	f1ca 0300 	rsb	r3, sl, #0
 8007962:	9306      	str	r3, [sp, #24]
 8007964:	2300      	movs	r3, #0
 8007966:	eba8 080a 	sub.w	r8, r8, sl
 800796a:	930d      	str	r3, [sp, #52]	; 0x34
 800796c:	e7c2      	b.n	80078f4 <_dtoa_r+0x1d4>
 800796e:	2300      	movs	r3, #0
 8007970:	9308      	str	r3, [sp, #32]
 8007972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc39      	bgt.n	80079ec <_dtoa_r+0x2cc>
 8007978:	f04f 0901 	mov.w	r9, #1
 800797c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007980:	464b      	mov	r3, r9
 8007982:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007986:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007988:	2200      	movs	r2, #0
 800798a:	6042      	str	r2, [r0, #4]
 800798c:	2204      	movs	r2, #4
 800798e:	f102 0614 	add.w	r6, r2, #20
 8007992:	429e      	cmp	r6, r3
 8007994:	6841      	ldr	r1, [r0, #4]
 8007996:	d92f      	bls.n	80079f8 <_dtoa_r+0x2d8>
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fcc7 	bl	800832c <_Balloc>
 800799e:	9000      	str	r0, [sp, #0]
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d14b      	bne.n	8007a3c <_dtoa_r+0x31c>
 80079a4:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <_dtoa_r+0x318>)
 80079a6:	4602      	mov	r2, r0
 80079a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079ac:	e6d1      	b.n	8007752 <_dtoa_r+0x32>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e7de      	b.n	8007970 <_dtoa_r+0x250>
 80079b2:	2300      	movs	r3, #0
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b8:	eb0a 0903 	add.w	r9, sl, r3
 80079bc:	f109 0301 	add.w	r3, r9, #1
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	bfb8      	it	lt
 80079c6:	2301      	movlt	r3, #1
 80079c8:	e7dd      	b.n	8007986 <_dtoa_r+0x266>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e7f2      	b.n	80079b4 <_dtoa_r+0x294>
 80079ce:	2501      	movs	r5, #1
 80079d0:	2300      	movs	r3, #0
 80079d2:	9305      	str	r3, [sp, #20]
 80079d4:	9508      	str	r5, [sp, #32]
 80079d6:	f04f 39ff 	mov.w	r9, #4294967295
 80079da:	2200      	movs	r2, #0
 80079dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80079e0:	2312      	movs	r3, #18
 80079e2:	9209      	str	r2, [sp, #36]	; 0x24
 80079e4:	e7cf      	b.n	8007986 <_dtoa_r+0x266>
 80079e6:	2301      	movs	r3, #1
 80079e8:	9308      	str	r3, [sp, #32]
 80079ea:	e7f4      	b.n	80079d6 <_dtoa_r+0x2b6>
 80079ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80079f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80079f4:	464b      	mov	r3, r9
 80079f6:	e7c6      	b.n	8007986 <_dtoa_r+0x266>
 80079f8:	3101      	adds	r1, #1
 80079fa:	6041      	str	r1, [r0, #4]
 80079fc:	0052      	lsls	r2, r2, #1
 80079fe:	e7c6      	b.n	800798e <_dtoa_r+0x26e>
 8007a00:	636f4361 	.word	0x636f4361
 8007a04:	3fd287a7 	.word	0x3fd287a7
 8007a08:	8b60c8b3 	.word	0x8b60c8b3
 8007a0c:	3fc68a28 	.word	0x3fc68a28
 8007a10:	509f79fb 	.word	0x509f79fb
 8007a14:	3fd34413 	.word	0x3fd34413
 8007a18:	08009b19 	.word	0x08009b19
 8007a1c:	08009b30 	.word	0x08009b30
 8007a20:	7ff00000 	.word	0x7ff00000
 8007a24:	08009b15 	.word	0x08009b15
 8007a28:	08009b0c 	.word	0x08009b0c
 8007a2c:	08009ae9 	.word	0x08009ae9
 8007a30:	3ff80000 	.word	0x3ff80000
 8007a34:	08009c28 	.word	0x08009c28
 8007a38:	08009b8f 	.word	0x08009b8f
 8007a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a3e:	9a00      	ldr	r2, [sp, #0]
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	9b01      	ldr	r3, [sp, #4]
 8007a44:	2b0e      	cmp	r3, #14
 8007a46:	f200 80ad 	bhi.w	8007ba4 <_dtoa_r+0x484>
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	f000 80aa 	beq.w	8007ba4 <_dtoa_r+0x484>
 8007a50:	f1ba 0f00 	cmp.w	sl, #0
 8007a54:	dd36      	ble.n	8007ac4 <_dtoa_r+0x3a4>
 8007a56:	4ac3      	ldr	r2, [pc, #780]	; (8007d64 <_dtoa_r+0x644>)
 8007a58:	f00a 030f 	and.w	r3, sl, #15
 8007a5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a60:	ed93 7b00 	vldr	d7, [r3]
 8007a64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007a68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007a6c:	eeb0 8a47 	vmov.f32	s16, s14
 8007a70:	eef0 8a67 	vmov.f32	s17, s15
 8007a74:	d016      	beq.n	8007aa4 <_dtoa_r+0x384>
 8007a76:	4bbc      	ldr	r3, [pc, #752]	; (8007d68 <_dtoa_r+0x648>)
 8007a78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a80:	f7f8 feec 	bl	800085c <__aeabi_ddiv>
 8007a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a88:	f007 070f 	and.w	r7, r7, #15
 8007a8c:	2503      	movs	r5, #3
 8007a8e:	4eb6      	ldr	r6, [pc, #728]	; (8007d68 <_dtoa_r+0x648>)
 8007a90:	b957      	cbnz	r7, 8007aa8 <_dtoa_r+0x388>
 8007a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a96:	ec53 2b18 	vmov	r2, r3, d8
 8007a9a:	f7f8 fedf 	bl	800085c <__aeabi_ddiv>
 8007a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa2:	e029      	b.n	8007af8 <_dtoa_r+0x3d8>
 8007aa4:	2502      	movs	r5, #2
 8007aa6:	e7f2      	b.n	8007a8e <_dtoa_r+0x36e>
 8007aa8:	07f9      	lsls	r1, r7, #31
 8007aaa:	d508      	bpl.n	8007abe <_dtoa_r+0x39e>
 8007aac:	ec51 0b18 	vmov	r0, r1, d8
 8007ab0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ab4:	f7f8 fda8 	bl	8000608 <__aeabi_dmul>
 8007ab8:	ec41 0b18 	vmov	d8, r0, r1
 8007abc:	3501      	adds	r5, #1
 8007abe:	107f      	asrs	r7, r7, #1
 8007ac0:	3608      	adds	r6, #8
 8007ac2:	e7e5      	b.n	8007a90 <_dtoa_r+0x370>
 8007ac4:	f000 80a6 	beq.w	8007c14 <_dtoa_r+0x4f4>
 8007ac8:	f1ca 0600 	rsb	r6, sl, #0
 8007acc:	4ba5      	ldr	r3, [pc, #660]	; (8007d64 <_dtoa_r+0x644>)
 8007ace:	4fa6      	ldr	r7, [pc, #664]	; (8007d68 <_dtoa_r+0x648>)
 8007ad0:	f006 020f 	and.w	r2, r6, #15
 8007ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ae0:	f7f8 fd92 	bl	8000608 <__aeabi_dmul>
 8007ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae8:	1136      	asrs	r6, r6, #4
 8007aea:	2300      	movs	r3, #0
 8007aec:	2502      	movs	r5, #2
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	f040 8085 	bne.w	8007bfe <_dtoa_r+0x4de>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1d2      	bne.n	8007a9e <_dtoa_r+0x37e>
 8007af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 808c 	beq.w	8007c18 <_dtoa_r+0x4f8>
 8007b00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b04:	4b99      	ldr	r3, [pc, #612]	; (8007d6c <_dtoa_r+0x64c>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f7f8 ffee 	bl	8000aec <__aeabi_dcmplt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	f000 8081 	beq.w	8007c18 <_dtoa_r+0x4f8>
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d07d      	beq.n	8007c18 <_dtoa_r+0x4f8>
 8007b1c:	f1b9 0f00 	cmp.w	r9, #0
 8007b20:	dd3c      	ble.n	8007b9c <_dtoa_r+0x47c>
 8007b22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b26:	9307      	str	r3, [sp, #28]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4b91      	ldr	r3, [pc, #580]	; (8007d70 <_dtoa_r+0x650>)
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f7f8 fd6a 	bl	8000608 <__aeabi_dmul>
 8007b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b38:	3501      	adds	r5, #1
 8007b3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007b3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7f8 fcf6 	bl	8000534 <__aeabi_i2d>
 8007b48:	4632      	mov	r2, r6
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	f7f8 fd5c 	bl	8000608 <__aeabi_dmul>
 8007b50:	4b88      	ldr	r3, [pc, #544]	; (8007d74 <_dtoa_r+0x654>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	f7f8 fba2 	bl	800029c <__adddf3>
 8007b58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d15c      	bne.n	8007c22 <_dtoa_r+0x502>
 8007b68:	4b83      	ldr	r3, [pc, #524]	; (8007d78 <_dtoa_r+0x658>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fb92 	bl	8000298 <__aeabi_dsub>
 8007b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b78:	4606      	mov	r6, r0
 8007b7a:	460f      	mov	r7, r1
 8007b7c:	f7f8 ffd4 	bl	8000b28 <__aeabi_dcmpgt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	f040 8296 	bne.w	80080b2 <_dtoa_r+0x992>
 8007b86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b90:	4639      	mov	r1, r7
 8007b92:	f7f8 ffab 	bl	8000aec <__aeabi_dcmplt>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f040 8288 	bne.w	80080ac <_dtoa_r+0x98c>
 8007b9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ba0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f2c0 8158 	blt.w	8007e5c <_dtoa_r+0x73c>
 8007bac:	f1ba 0f0e 	cmp.w	sl, #14
 8007bb0:	f300 8154 	bgt.w	8007e5c <_dtoa_r+0x73c>
 8007bb4:	4b6b      	ldr	r3, [pc, #428]	; (8007d64 <_dtoa_r+0x644>)
 8007bb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f280 80e3 	bge.w	8007d8c <_dtoa_r+0x66c>
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f300 80df 	bgt.w	8007d8c <_dtoa_r+0x66c>
 8007bce:	f040 826d 	bne.w	80080ac <_dtoa_r+0x98c>
 8007bd2:	4b69      	ldr	r3, [pc, #420]	; (8007d78 <_dtoa_r+0x658>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	f7f8 fd15 	bl	8000608 <__aeabi_dmul>
 8007bde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007be2:	f7f8 ff97 	bl	8000b14 <__aeabi_dcmpge>
 8007be6:	9e01      	ldr	r6, [sp, #4]
 8007be8:	4637      	mov	r7, r6
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f040 8243 	bne.w	8008076 <_dtoa_r+0x956>
 8007bf0:	9d00      	ldr	r5, [sp, #0]
 8007bf2:	2331      	movs	r3, #49	; 0x31
 8007bf4:	f805 3b01 	strb.w	r3, [r5], #1
 8007bf8:	f10a 0a01 	add.w	sl, sl, #1
 8007bfc:	e23f      	b.n	800807e <_dtoa_r+0x95e>
 8007bfe:	07f2      	lsls	r2, r6, #31
 8007c00:	d505      	bpl.n	8007c0e <_dtoa_r+0x4ee>
 8007c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c06:	f7f8 fcff 	bl	8000608 <__aeabi_dmul>
 8007c0a:	3501      	adds	r5, #1
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	1076      	asrs	r6, r6, #1
 8007c10:	3708      	adds	r7, #8
 8007c12:	e76c      	b.n	8007aee <_dtoa_r+0x3ce>
 8007c14:	2502      	movs	r5, #2
 8007c16:	e76f      	b.n	8007af8 <_dtoa_r+0x3d8>
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c20:	e78d      	b.n	8007b3e <_dtoa_r+0x41e>
 8007c22:	9900      	ldr	r1, [sp, #0]
 8007c24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c28:	4b4e      	ldr	r3, [pc, #312]	; (8007d64 <_dtoa_r+0x644>)
 8007c2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c2e:	4401      	add	r1, r0
 8007c30:	9102      	str	r1, [sp, #8]
 8007c32:	9908      	ldr	r1, [sp, #32]
 8007c34:	eeb0 8a47 	vmov.f32	s16, s14
 8007c38:	eef0 8a67 	vmov.f32	s17, s15
 8007c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d045      	beq.n	8007cd4 <_dtoa_r+0x5b4>
 8007c48:	494c      	ldr	r1, [pc, #304]	; (8007d7c <_dtoa_r+0x65c>)
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	f7f8 fe06 	bl	800085c <__aeabi_ddiv>
 8007c50:	ec53 2b18 	vmov	r2, r3, d8
 8007c54:	f7f8 fb20 	bl	8000298 <__aeabi_dsub>
 8007c58:	9d00      	ldr	r5, [sp, #0]
 8007c5a:	ec41 0b18 	vmov	d8, r0, r1
 8007c5e:	4639      	mov	r1, r7
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7f8 ff81 	bl	8000b68 <__aeabi_d2iz>
 8007c66:	900c      	str	r0, [sp, #48]	; 0x30
 8007c68:	f7f8 fc64 	bl	8000534 <__aeabi_i2d>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 fb10 	bl	8000298 <__aeabi_dsub>
 8007c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c7a:	3330      	adds	r3, #48	; 0x30
 8007c7c:	f805 3b01 	strb.w	r3, [r5], #1
 8007c80:	ec53 2b18 	vmov	r2, r3, d8
 8007c84:	4606      	mov	r6, r0
 8007c86:	460f      	mov	r7, r1
 8007c88:	f7f8 ff30 	bl	8000aec <__aeabi_dcmplt>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d165      	bne.n	8007d5c <_dtoa_r+0x63c>
 8007c90:	4632      	mov	r2, r6
 8007c92:	463b      	mov	r3, r7
 8007c94:	4935      	ldr	r1, [pc, #212]	; (8007d6c <_dtoa_r+0x64c>)
 8007c96:	2000      	movs	r0, #0
 8007c98:	f7f8 fafe 	bl	8000298 <__aeabi_dsub>
 8007c9c:	ec53 2b18 	vmov	r2, r3, d8
 8007ca0:	f7f8 ff24 	bl	8000aec <__aeabi_dcmplt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f040 80b9 	bne.w	8007e1c <_dtoa_r+0x6fc>
 8007caa:	9b02      	ldr	r3, [sp, #8]
 8007cac:	429d      	cmp	r5, r3
 8007cae:	f43f af75 	beq.w	8007b9c <_dtoa_r+0x47c>
 8007cb2:	4b2f      	ldr	r3, [pc, #188]	; (8007d70 <_dtoa_r+0x650>)
 8007cb4:	ec51 0b18 	vmov	r0, r1, d8
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f7f8 fca5 	bl	8000608 <__aeabi_dmul>
 8007cbe:	4b2c      	ldr	r3, [pc, #176]	; (8007d70 <_dtoa_r+0x650>)
 8007cc0:	ec41 0b18 	vmov	d8, r0, r1
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 fc9d 	bl	8000608 <__aeabi_dmul>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	e7c4      	b.n	8007c5e <_dtoa_r+0x53e>
 8007cd4:	ec51 0b17 	vmov	r0, r1, d7
 8007cd8:	f7f8 fc96 	bl	8000608 <__aeabi_dmul>
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	9d00      	ldr	r5, [sp, #0]
 8007ce0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce2:	ec41 0b18 	vmov	d8, r0, r1
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7f8 ff3d 	bl	8000b68 <__aeabi_d2iz>
 8007cee:	9011      	str	r0, [sp, #68]	; 0x44
 8007cf0:	f7f8 fc20 	bl	8000534 <__aeabi_i2d>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	f7f8 facc 	bl	8000298 <__aeabi_dsub>
 8007d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d02:	3330      	adds	r3, #48	; 0x30
 8007d04:	f805 3b01 	strb.w	r3, [r5], #1
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	429d      	cmp	r5, r3
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	460f      	mov	r7, r1
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	d134      	bne.n	8007d80 <_dtoa_r+0x660>
 8007d16:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <_dtoa_r+0x65c>)
 8007d18:	ec51 0b18 	vmov	r0, r1, d8
 8007d1c:	f7f8 fabe 	bl	800029c <__adddf3>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	f7f8 fefe 	bl	8000b28 <__aeabi_dcmpgt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d175      	bne.n	8007e1c <_dtoa_r+0x6fc>
 8007d30:	ec53 2b18 	vmov	r2, r3, d8
 8007d34:	4911      	ldr	r1, [pc, #68]	; (8007d7c <_dtoa_r+0x65c>)
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f8 faae 	bl	8000298 <__aeabi_dsub>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 fed2 	bl	8000aec <__aeabi_dcmplt>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f43f af27 	beq.w	8007b9c <_dtoa_r+0x47c>
 8007d4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d50:	1e6b      	subs	r3, r5, #1
 8007d52:	930c      	str	r3, [sp, #48]	; 0x30
 8007d54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d58:	2b30      	cmp	r3, #48	; 0x30
 8007d5a:	d0f8      	beq.n	8007d4e <_dtoa_r+0x62e>
 8007d5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007d60:	e04a      	b.n	8007df8 <_dtoa_r+0x6d8>
 8007d62:	bf00      	nop
 8007d64:	08009c28 	.word	0x08009c28
 8007d68:	08009c00 	.word	0x08009c00
 8007d6c:	3ff00000 	.word	0x3ff00000
 8007d70:	40240000 	.word	0x40240000
 8007d74:	401c0000 	.word	0x401c0000
 8007d78:	40140000 	.word	0x40140000
 8007d7c:	3fe00000 	.word	0x3fe00000
 8007d80:	4baf      	ldr	r3, [pc, #700]	; (8008040 <_dtoa_r+0x920>)
 8007d82:	f7f8 fc41 	bl	8000608 <__aeabi_dmul>
 8007d86:	4606      	mov	r6, r0
 8007d88:	460f      	mov	r7, r1
 8007d8a:	e7ac      	b.n	8007ce6 <_dtoa_r+0x5c6>
 8007d8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d90:	9d00      	ldr	r5, [sp, #0]
 8007d92:	4642      	mov	r2, r8
 8007d94:	464b      	mov	r3, r9
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7f8 fd5f 	bl	800085c <__aeabi_ddiv>
 8007d9e:	f7f8 fee3 	bl	8000b68 <__aeabi_d2iz>
 8007da2:	9002      	str	r0, [sp, #8]
 8007da4:	f7f8 fbc6 	bl	8000534 <__aeabi_i2d>
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	f7f8 fc2c 	bl	8000608 <__aeabi_dmul>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4630      	mov	r0, r6
 8007db6:	4639      	mov	r1, r7
 8007db8:	f7f8 fa6e 	bl	8000298 <__aeabi_dsub>
 8007dbc:	9e02      	ldr	r6, [sp, #8]
 8007dbe:	9f01      	ldr	r7, [sp, #4]
 8007dc0:	3630      	adds	r6, #48	; 0x30
 8007dc2:	f805 6b01 	strb.w	r6, [r5], #1
 8007dc6:	9e00      	ldr	r6, [sp, #0]
 8007dc8:	1bae      	subs	r6, r5, r6
 8007dca:	42b7      	cmp	r7, r6
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	d137      	bne.n	8007e42 <_dtoa_r+0x722>
 8007dd2:	f7f8 fa63 	bl	800029c <__adddf3>
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	464b      	mov	r3, r9
 8007dda:	4606      	mov	r6, r0
 8007ddc:	460f      	mov	r7, r1
 8007dde:	f7f8 fea3 	bl	8000b28 <__aeabi_dcmpgt>
 8007de2:	b9c8      	cbnz	r0, 8007e18 <_dtoa_r+0x6f8>
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8007df0:	b110      	cbz	r0, 8007df8 <_dtoa_r+0x6d8>
 8007df2:	9b02      	ldr	r3, [sp, #8]
 8007df4:	07d9      	lsls	r1, r3, #31
 8007df6:	d40f      	bmi.n	8007e18 <_dtoa_r+0x6f8>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	f000 fad6 	bl	80083ac <_Bfree>
 8007e00:	2300      	movs	r3, #0
 8007e02:	702b      	strb	r3, [r5, #0]
 8007e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e06:	f10a 0001 	add.w	r0, sl, #1
 8007e0a:	6018      	str	r0, [r3, #0]
 8007e0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f43f acd8 	beq.w	80077c4 <_dtoa_r+0xa4>
 8007e14:	601d      	str	r5, [r3, #0]
 8007e16:	e4d5      	b.n	80077c4 <_dtoa_r+0xa4>
 8007e18:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	461d      	mov	r5, r3
 8007e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e24:	2a39      	cmp	r2, #57	; 0x39
 8007e26:	d108      	bne.n	8007e3a <_dtoa_r+0x71a>
 8007e28:	9a00      	ldr	r2, [sp, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d1f7      	bne.n	8007e1e <_dtoa_r+0x6fe>
 8007e2e:	9a07      	ldr	r2, [sp, #28]
 8007e30:	9900      	ldr	r1, [sp, #0]
 8007e32:	3201      	adds	r2, #1
 8007e34:	9207      	str	r2, [sp, #28]
 8007e36:	2230      	movs	r2, #48	; 0x30
 8007e38:	700a      	strb	r2, [r1, #0]
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	3201      	adds	r2, #1
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	e78c      	b.n	8007d5c <_dtoa_r+0x63c>
 8007e42:	4b7f      	ldr	r3, [pc, #508]	; (8008040 <_dtoa_r+0x920>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	f7f8 fbdf 	bl	8000608 <__aeabi_dmul>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	f7f8 fe41 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d09b      	beq.n	8007d92 <_dtoa_r+0x672>
 8007e5a:	e7cd      	b.n	8007df8 <_dtoa_r+0x6d8>
 8007e5c:	9a08      	ldr	r2, [sp, #32]
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	f000 80c4 	beq.w	8007fec <_dtoa_r+0x8cc>
 8007e64:	9a05      	ldr	r2, [sp, #20]
 8007e66:	2a01      	cmp	r2, #1
 8007e68:	f300 80a8 	bgt.w	8007fbc <_dtoa_r+0x89c>
 8007e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	f000 80a0 	beq.w	8007fb4 <_dtoa_r+0x894>
 8007e74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e78:	9e06      	ldr	r6, [sp, #24]
 8007e7a:	4645      	mov	r5, r8
 8007e7c:	9a04      	ldr	r2, [sp, #16]
 8007e7e:	2101      	movs	r1, #1
 8007e80:	441a      	add	r2, r3
 8007e82:	4620      	mov	r0, r4
 8007e84:	4498      	add	r8, r3
 8007e86:	9204      	str	r2, [sp, #16]
 8007e88:	f000 fb4c 	bl	8008524 <__i2b>
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	2d00      	cmp	r5, #0
 8007e90:	dd0b      	ble.n	8007eaa <_dtoa_r+0x78a>
 8007e92:	9b04      	ldr	r3, [sp, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dd08      	ble.n	8007eaa <_dtoa_r+0x78a>
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	9a04      	ldr	r2, [sp, #16]
 8007e9c:	bfa8      	it	ge
 8007e9e:	462b      	movge	r3, r5
 8007ea0:	eba8 0803 	sub.w	r8, r8, r3
 8007ea4:	1aed      	subs	r5, r5, r3
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	9b06      	ldr	r3, [sp, #24]
 8007eac:	b1fb      	cbz	r3, 8007eee <_dtoa_r+0x7ce>
 8007eae:	9b08      	ldr	r3, [sp, #32]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 809f 	beq.w	8007ff4 <_dtoa_r+0x8d4>
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	dd11      	ble.n	8007ede <_dtoa_r+0x7be>
 8007eba:	4639      	mov	r1, r7
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 fbec 	bl	800869c <__pow5mult>
 8007ec4:	465a      	mov	r2, fp
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	4607      	mov	r7, r0
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 fb40 	bl	8008550 <__multiply>
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	9007      	str	r0, [sp, #28]
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 fa69 	bl	80083ac <_Bfree>
 8007eda:	9b07      	ldr	r3, [sp, #28]
 8007edc:	469b      	mov	fp, r3
 8007ede:	9b06      	ldr	r3, [sp, #24]
 8007ee0:	1b9a      	subs	r2, r3, r6
 8007ee2:	d004      	beq.n	8007eee <_dtoa_r+0x7ce>
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fbd8 	bl	800869c <__pow5mult>
 8007eec:	4683      	mov	fp, r0
 8007eee:	2101      	movs	r1, #1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fb17 	bl	8008524 <__i2b>
 8007ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	4606      	mov	r6, r0
 8007efc:	dd7c      	ble.n	8007ff8 <_dtoa_r+0x8d8>
 8007efe:	461a      	mov	r2, r3
 8007f00:	4601      	mov	r1, r0
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 fbca 	bl	800869c <__pow5mult>
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	dd76      	ble.n	8007ffe <_dtoa_r+0x8de>
 8007f10:	2300      	movs	r3, #0
 8007f12:	9306      	str	r3, [sp, #24]
 8007f14:	6933      	ldr	r3, [r6, #16]
 8007f16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f1a:	6918      	ldr	r0, [r3, #16]
 8007f1c:	f000 fab2 	bl	8008484 <__hi0bits>
 8007f20:	f1c0 0020 	rsb	r0, r0, #32
 8007f24:	9b04      	ldr	r3, [sp, #16]
 8007f26:	4418      	add	r0, r3
 8007f28:	f010 001f 	ands.w	r0, r0, #31
 8007f2c:	f000 8086 	beq.w	800803c <_dtoa_r+0x91c>
 8007f30:	f1c0 0320 	rsb	r3, r0, #32
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	dd7f      	ble.n	8008038 <_dtoa_r+0x918>
 8007f38:	f1c0 001c 	rsb	r0, r0, #28
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	4403      	add	r3, r0
 8007f40:	4480      	add	r8, r0
 8007f42:	4405      	add	r5, r0
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	f1b8 0f00 	cmp.w	r8, #0
 8007f4a:	dd05      	ble.n	8007f58 <_dtoa_r+0x838>
 8007f4c:	4659      	mov	r1, fp
 8007f4e:	4642      	mov	r2, r8
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fbfd 	bl	8008750 <__lshift>
 8007f56:	4683      	mov	fp, r0
 8007f58:	9b04      	ldr	r3, [sp, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dd05      	ble.n	8007f6a <_dtoa_r+0x84a>
 8007f5e:	4631      	mov	r1, r6
 8007f60:	461a      	mov	r2, r3
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 fbf4 	bl	8008750 <__lshift>
 8007f68:	4606      	mov	r6, r0
 8007f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d069      	beq.n	8008044 <_dtoa_r+0x924>
 8007f70:	4631      	mov	r1, r6
 8007f72:	4658      	mov	r0, fp
 8007f74:	f000 fc58 	bl	8008828 <__mcmp>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	da63      	bge.n	8008044 <_dtoa_r+0x924>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4659      	mov	r1, fp
 8007f80:	220a      	movs	r2, #10
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 fa34 	bl	80083f0 <__multadd>
 8007f88:	9b08      	ldr	r3, [sp, #32]
 8007f8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f8e:	4683      	mov	fp, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 818f 	beq.w	80082b4 <_dtoa_r+0xb94>
 8007f96:	4639      	mov	r1, r7
 8007f98:	2300      	movs	r3, #0
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 fa27 	bl	80083f0 <__multadd>
 8007fa2:	f1b9 0f00 	cmp.w	r9, #0
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	f300 808e 	bgt.w	80080c8 <_dtoa_r+0x9a8>
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	dc50      	bgt.n	8008054 <_dtoa_r+0x934>
 8007fb2:	e089      	b.n	80080c8 <_dtoa_r+0x9a8>
 8007fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fba:	e75d      	b.n	8007e78 <_dtoa_r+0x758>
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	1e5e      	subs	r6, r3, #1
 8007fc0:	9b06      	ldr	r3, [sp, #24]
 8007fc2:	42b3      	cmp	r3, r6
 8007fc4:	bfbf      	itttt	lt
 8007fc6:	9b06      	ldrlt	r3, [sp, #24]
 8007fc8:	9606      	strlt	r6, [sp, #24]
 8007fca:	1af2      	sublt	r2, r6, r3
 8007fcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007fce:	bfb6      	itet	lt
 8007fd0:	189b      	addlt	r3, r3, r2
 8007fd2:	1b9e      	subge	r6, r3, r6
 8007fd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	bfb8      	it	lt
 8007fda:	2600      	movlt	r6, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bfb5      	itete	lt
 8007fe0:	eba8 0503 	sublt.w	r5, r8, r3
 8007fe4:	9b01      	ldrge	r3, [sp, #4]
 8007fe6:	2300      	movlt	r3, #0
 8007fe8:	4645      	movge	r5, r8
 8007fea:	e747      	b.n	8007e7c <_dtoa_r+0x75c>
 8007fec:	9e06      	ldr	r6, [sp, #24]
 8007fee:	9f08      	ldr	r7, [sp, #32]
 8007ff0:	4645      	mov	r5, r8
 8007ff2:	e74c      	b.n	8007e8e <_dtoa_r+0x76e>
 8007ff4:	9a06      	ldr	r2, [sp, #24]
 8007ff6:	e775      	b.n	8007ee4 <_dtoa_r+0x7c4>
 8007ff8:	9b05      	ldr	r3, [sp, #20]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	dc18      	bgt.n	8008030 <_dtoa_r+0x910>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	b9b3      	cbnz	r3, 8008030 <_dtoa_r+0x910>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008008:	b9a3      	cbnz	r3, 8008034 <_dtoa_r+0x914>
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008010:	0d1b      	lsrs	r3, r3, #20
 8008012:	051b      	lsls	r3, r3, #20
 8008014:	b12b      	cbz	r3, 8008022 <_dtoa_r+0x902>
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	3301      	adds	r3, #1
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	f108 0801 	add.w	r8, r8, #1
 8008020:	2301      	movs	r3, #1
 8008022:	9306      	str	r3, [sp, #24]
 8008024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008026:	2b00      	cmp	r3, #0
 8008028:	f47f af74 	bne.w	8007f14 <_dtoa_r+0x7f4>
 800802c:	2001      	movs	r0, #1
 800802e:	e779      	b.n	8007f24 <_dtoa_r+0x804>
 8008030:	2300      	movs	r3, #0
 8008032:	e7f6      	b.n	8008022 <_dtoa_r+0x902>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	e7f4      	b.n	8008022 <_dtoa_r+0x902>
 8008038:	d085      	beq.n	8007f46 <_dtoa_r+0x826>
 800803a:	4618      	mov	r0, r3
 800803c:	301c      	adds	r0, #28
 800803e:	e77d      	b.n	8007f3c <_dtoa_r+0x81c>
 8008040:	40240000 	.word	0x40240000
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dc38      	bgt.n	80080bc <_dtoa_r+0x99c>
 800804a:	9b05      	ldr	r3, [sp, #20]
 800804c:	2b02      	cmp	r3, #2
 800804e:	dd35      	ble.n	80080bc <_dtoa_r+0x99c>
 8008050:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008054:	f1b9 0f00 	cmp.w	r9, #0
 8008058:	d10d      	bne.n	8008076 <_dtoa_r+0x956>
 800805a:	4631      	mov	r1, r6
 800805c:	464b      	mov	r3, r9
 800805e:	2205      	movs	r2, #5
 8008060:	4620      	mov	r0, r4
 8008062:	f000 f9c5 	bl	80083f0 <__multadd>
 8008066:	4601      	mov	r1, r0
 8008068:	4606      	mov	r6, r0
 800806a:	4658      	mov	r0, fp
 800806c:	f000 fbdc 	bl	8008828 <__mcmp>
 8008070:	2800      	cmp	r0, #0
 8008072:	f73f adbd 	bgt.w	8007bf0 <_dtoa_r+0x4d0>
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	9d00      	ldr	r5, [sp, #0]
 800807a:	ea6f 0a03 	mvn.w	sl, r3
 800807e:	f04f 0800 	mov.w	r8, #0
 8008082:	4631      	mov	r1, r6
 8008084:	4620      	mov	r0, r4
 8008086:	f000 f991 	bl	80083ac <_Bfree>
 800808a:	2f00      	cmp	r7, #0
 800808c:	f43f aeb4 	beq.w	8007df8 <_dtoa_r+0x6d8>
 8008090:	f1b8 0f00 	cmp.w	r8, #0
 8008094:	d005      	beq.n	80080a2 <_dtoa_r+0x982>
 8008096:	45b8      	cmp	r8, r7
 8008098:	d003      	beq.n	80080a2 <_dtoa_r+0x982>
 800809a:	4641      	mov	r1, r8
 800809c:	4620      	mov	r0, r4
 800809e:	f000 f985 	bl	80083ac <_Bfree>
 80080a2:	4639      	mov	r1, r7
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 f981 	bl	80083ac <_Bfree>
 80080aa:	e6a5      	b.n	8007df8 <_dtoa_r+0x6d8>
 80080ac:	2600      	movs	r6, #0
 80080ae:	4637      	mov	r7, r6
 80080b0:	e7e1      	b.n	8008076 <_dtoa_r+0x956>
 80080b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80080b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080b8:	4637      	mov	r7, r6
 80080ba:	e599      	b.n	8007bf0 <_dtoa_r+0x4d0>
 80080bc:	9b08      	ldr	r3, [sp, #32]
 80080be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 80fd 	beq.w	80082c2 <_dtoa_r+0xba2>
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	dd05      	ble.n	80080d8 <_dtoa_r+0x9b8>
 80080cc:	4639      	mov	r1, r7
 80080ce:	462a      	mov	r2, r5
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fb3d 	bl	8008750 <__lshift>
 80080d6:	4607      	mov	r7, r0
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d05c      	beq.n	8008198 <_dtoa_r+0xa78>
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f923 	bl	800832c <_Balloc>
 80080e6:	4605      	mov	r5, r0
 80080e8:	b928      	cbnz	r0, 80080f6 <_dtoa_r+0x9d6>
 80080ea:	4b80      	ldr	r3, [pc, #512]	; (80082ec <_dtoa_r+0xbcc>)
 80080ec:	4602      	mov	r2, r0
 80080ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080f2:	f7ff bb2e 	b.w	8007752 <_dtoa_r+0x32>
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	3202      	adds	r2, #2
 80080fa:	0092      	lsls	r2, r2, #2
 80080fc:	f107 010c 	add.w	r1, r7, #12
 8008100:	300c      	adds	r0, #12
 8008102:	f000 f905 	bl	8008310 <memcpy>
 8008106:	2201      	movs	r2, #1
 8008108:	4629      	mov	r1, r5
 800810a:	4620      	mov	r0, r4
 800810c:	f000 fb20 	bl	8008750 <__lshift>
 8008110:	9b00      	ldr	r3, [sp, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	9b00      	ldr	r3, [sp, #0]
 8008118:	444b      	add	r3, r9
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	46b8      	mov	r8, r7
 8008124:	9306      	str	r3, [sp, #24]
 8008126:	4607      	mov	r7, r0
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	4631      	mov	r1, r6
 800812c:	3b01      	subs	r3, #1
 800812e:	4658      	mov	r0, fp
 8008130:	9302      	str	r3, [sp, #8]
 8008132:	f7ff fa67 	bl	8007604 <quorem>
 8008136:	4603      	mov	r3, r0
 8008138:	3330      	adds	r3, #48	; 0x30
 800813a:	9004      	str	r0, [sp, #16]
 800813c:	4641      	mov	r1, r8
 800813e:	4658      	mov	r0, fp
 8008140:	9308      	str	r3, [sp, #32]
 8008142:	f000 fb71 	bl	8008828 <__mcmp>
 8008146:	463a      	mov	r2, r7
 8008148:	4681      	mov	r9, r0
 800814a:	4631      	mov	r1, r6
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fb87 	bl	8008860 <__mdiff>
 8008152:	68c2      	ldr	r2, [r0, #12]
 8008154:	9b08      	ldr	r3, [sp, #32]
 8008156:	4605      	mov	r5, r0
 8008158:	bb02      	cbnz	r2, 800819c <_dtoa_r+0xa7c>
 800815a:	4601      	mov	r1, r0
 800815c:	4658      	mov	r0, fp
 800815e:	f000 fb63 	bl	8008828 <__mcmp>
 8008162:	9b08      	ldr	r3, [sp, #32]
 8008164:	4602      	mov	r2, r0
 8008166:	4629      	mov	r1, r5
 8008168:	4620      	mov	r0, r4
 800816a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800816e:	f000 f91d 	bl	80083ac <_Bfree>
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008176:	9d01      	ldr	r5, [sp, #4]
 8008178:	ea43 0102 	orr.w	r1, r3, r2
 800817c:	9b06      	ldr	r3, [sp, #24]
 800817e:	430b      	orrs	r3, r1
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	d10d      	bne.n	80081a0 <_dtoa_r+0xa80>
 8008184:	2b39      	cmp	r3, #57	; 0x39
 8008186:	d029      	beq.n	80081dc <_dtoa_r+0xabc>
 8008188:	f1b9 0f00 	cmp.w	r9, #0
 800818c:	dd01      	ble.n	8008192 <_dtoa_r+0xa72>
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	3331      	adds	r3, #49	; 0x31
 8008192:	9a02      	ldr	r2, [sp, #8]
 8008194:	7013      	strb	r3, [r2, #0]
 8008196:	e774      	b.n	8008082 <_dtoa_r+0x962>
 8008198:	4638      	mov	r0, r7
 800819a:	e7b9      	b.n	8008110 <_dtoa_r+0x9f0>
 800819c:	2201      	movs	r2, #1
 800819e:	e7e2      	b.n	8008166 <_dtoa_r+0xa46>
 80081a0:	f1b9 0f00 	cmp.w	r9, #0
 80081a4:	db06      	blt.n	80081b4 <_dtoa_r+0xa94>
 80081a6:	9905      	ldr	r1, [sp, #20]
 80081a8:	ea41 0909 	orr.w	r9, r1, r9
 80081ac:	9906      	ldr	r1, [sp, #24]
 80081ae:	ea59 0101 	orrs.w	r1, r9, r1
 80081b2:	d120      	bne.n	80081f6 <_dtoa_r+0xad6>
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	ddec      	ble.n	8008192 <_dtoa_r+0xa72>
 80081b8:	4659      	mov	r1, fp
 80081ba:	2201      	movs	r2, #1
 80081bc:	4620      	mov	r0, r4
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	f000 fac6 	bl	8008750 <__lshift>
 80081c4:	4631      	mov	r1, r6
 80081c6:	4683      	mov	fp, r0
 80081c8:	f000 fb2e 	bl	8008828 <__mcmp>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	9b01      	ldr	r3, [sp, #4]
 80081d0:	dc02      	bgt.n	80081d8 <_dtoa_r+0xab8>
 80081d2:	d1de      	bne.n	8008192 <_dtoa_r+0xa72>
 80081d4:	07da      	lsls	r2, r3, #31
 80081d6:	d5dc      	bpl.n	8008192 <_dtoa_r+0xa72>
 80081d8:	2b39      	cmp	r3, #57	; 0x39
 80081da:	d1d8      	bne.n	800818e <_dtoa_r+0xa6e>
 80081dc:	9a02      	ldr	r2, [sp, #8]
 80081de:	2339      	movs	r3, #57	; 0x39
 80081e0:	7013      	strb	r3, [r2, #0]
 80081e2:	462b      	mov	r3, r5
 80081e4:	461d      	mov	r5, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081ec:	2a39      	cmp	r2, #57	; 0x39
 80081ee:	d050      	beq.n	8008292 <_dtoa_r+0xb72>
 80081f0:	3201      	adds	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	e745      	b.n	8008082 <_dtoa_r+0x962>
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	dd03      	ble.n	8008202 <_dtoa_r+0xae2>
 80081fa:	2b39      	cmp	r3, #57	; 0x39
 80081fc:	d0ee      	beq.n	80081dc <_dtoa_r+0xabc>
 80081fe:	3301      	adds	r3, #1
 8008200:	e7c7      	b.n	8008192 <_dtoa_r+0xa72>
 8008202:	9a01      	ldr	r2, [sp, #4]
 8008204:	9907      	ldr	r1, [sp, #28]
 8008206:	f802 3c01 	strb.w	r3, [r2, #-1]
 800820a:	428a      	cmp	r2, r1
 800820c:	d02a      	beq.n	8008264 <_dtoa_r+0xb44>
 800820e:	4659      	mov	r1, fp
 8008210:	2300      	movs	r3, #0
 8008212:	220a      	movs	r2, #10
 8008214:	4620      	mov	r0, r4
 8008216:	f000 f8eb 	bl	80083f0 <__multadd>
 800821a:	45b8      	cmp	r8, r7
 800821c:	4683      	mov	fp, r0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	f04f 020a 	mov.w	r2, #10
 8008226:	4641      	mov	r1, r8
 8008228:	4620      	mov	r0, r4
 800822a:	d107      	bne.n	800823c <_dtoa_r+0xb1c>
 800822c:	f000 f8e0 	bl	80083f0 <__multadd>
 8008230:	4680      	mov	r8, r0
 8008232:	4607      	mov	r7, r0
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	3301      	adds	r3, #1
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	e775      	b.n	8008128 <_dtoa_r+0xa08>
 800823c:	f000 f8d8 	bl	80083f0 <__multadd>
 8008240:	4639      	mov	r1, r7
 8008242:	4680      	mov	r8, r0
 8008244:	2300      	movs	r3, #0
 8008246:	220a      	movs	r2, #10
 8008248:	4620      	mov	r0, r4
 800824a:	f000 f8d1 	bl	80083f0 <__multadd>
 800824e:	4607      	mov	r7, r0
 8008250:	e7f0      	b.n	8008234 <_dtoa_r+0xb14>
 8008252:	f1b9 0f00 	cmp.w	r9, #0
 8008256:	9a00      	ldr	r2, [sp, #0]
 8008258:	bfcc      	ite	gt
 800825a:	464d      	movgt	r5, r9
 800825c:	2501      	movle	r5, #1
 800825e:	4415      	add	r5, r2
 8008260:	f04f 0800 	mov.w	r8, #0
 8008264:	4659      	mov	r1, fp
 8008266:	2201      	movs	r2, #1
 8008268:	4620      	mov	r0, r4
 800826a:	9301      	str	r3, [sp, #4]
 800826c:	f000 fa70 	bl	8008750 <__lshift>
 8008270:	4631      	mov	r1, r6
 8008272:	4683      	mov	fp, r0
 8008274:	f000 fad8 	bl	8008828 <__mcmp>
 8008278:	2800      	cmp	r0, #0
 800827a:	dcb2      	bgt.n	80081e2 <_dtoa_r+0xac2>
 800827c:	d102      	bne.n	8008284 <_dtoa_r+0xb64>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	07db      	lsls	r3, r3, #31
 8008282:	d4ae      	bmi.n	80081e2 <_dtoa_r+0xac2>
 8008284:	462b      	mov	r3, r5
 8008286:	461d      	mov	r5, r3
 8008288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800828c:	2a30      	cmp	r2, #48	; 0x30
 800828e:	d0fa      	beq.n	8008286 <_dtoa_r+0xb66>
 8008290:	e6f7      	b.n	8008082 <_dtoa_r+0x962>
 8008292:	9a00      	ldr	r2, [sp, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d1a5      	bne.n	80081e4 <_dtoa_r+0xac4>
 8008298:	f10a 0a01 	add.w	sl, sl, #1
 800829c:	2331      	movs	r3, #49	; 0x31
 800829e:	e779      	b.n	8008194 <_dtoa_r+0xa74>
 80082a0:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <_dtoa_r+0xbd0>)
 80082a2:	f7ff baaf 	b.w	8007804 <_dtoa_r+0xe4>
 80082a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f aa86 	bne.w	80077ba <_dtoa_r+0x9a>
 80082ae:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <_dtoa_r+0xbd4>)
 80082b0:	f7ff baa8 	b.w	8007804 <_dtoa_r+0xe4>
 80082b4:	f1b9 0f00 	cmp.w	r9, #0
 80082b8:	dc03      	bgt.n	80082c2 <_dtoa_r+0xba2>
 80082ba:	9b05      	ldr	r3, [sp, #20]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	f73f aec9 	bgt.w	8008054 <_dtoa_r+0x934>
 80082c2:	9d00      	ldr	r5, [sp, #0]
 80082c4:	4631      	mov	r1, r6
 80082c6:	4658      	mov	r0, fp
 80082c8:	f7ff f99c 	bl	8007604 <quorem>
 80082cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80082d0:	f805 3b01 	strb.w	r3, [r5], #1
 80082d4:	9a00      	ldr	r2, [sp, #0]
 80082d6:	1aaa      	subs	r2, r5, r2
 80082d8:	4591      	cmp	r9, r2
 80082da:	ddba      	ble.n	8008252 <_dtoa_r+0xb32>
 80082dc:	4659      	mov	r1, fp
 80082de:	2300      	movs	r3, #0
 80082e0:	220a      	movs	r2, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f884 	bl	80083f0 <__multadd>
 80082e8:	4683      	mov	fp, r0
 80082ea:	e7eb      	b.n	80082c4 <_dtoa_r+0xba4>
 80082ec:	08009b8f 	.word	0x08009b8f
 80082f0:	08009ae8 	.word	0x08009ae8
 80082f4:	08009b0c 	.word	0x08009b0c

080082f8 <_localeconv_r>:
 80082f8:	4800      	ldr	r0, [pc, #0]	; (80082fc <_localeconv_r+0x4>)
 80082fa:	4770      	bx	lr
 80082fc:	20000170 	.word	0x20000170

08008300 <malloc>:
 8008300:	4b02      	ldr	r3, [pc, #8]	; (800830c <malloc+0xc>)
 8008302:	4601      	mov	r1, r0
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	f000 bbef 	b.w	8008ae8 <_malloc_r>
 800830a:	bf00      	nop
 800830c:	2000001c 	.word	0x2000001c

08008310 <memcpy>:
 8008310:	440a      	add	r2, r1
 8008312:	4291      	cmp	r1, r2
 8008314:	f100 33ff 	add.w	r3, r0, #4294967295
 8008318:	d100      	bne.n	800831c <memcpy+0xc>
 800831a:	4770      	bx	lr
 800831c:	b510      	push	{r4, lr}
 800831e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008326:	4291      	cmp	r1, r2
 8008328:	d1f9      	bne.n	800831e <memcpy+0xe>
 800832a:	bd10      	pop	{r4, pc}

0800832c <_Balloc>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008330:	4604      	mov	r4, r0
 8008332:	460d      	mov	r5, r1
 8008334:	b976      	cbnz	r6, 8008354 <_Balloc+0x28>
 8008336:	2010      	movs	r0, #16
 8008338:	f7ff ffe2 	bl	8008300 <malloc>
 800833c:	4602      	mov	r2, r0
 800833e:	6260      	str	r0, [r4, #36]	; 0x24
 8008340:	b920      	cbnz	r0, 800834c <_Balloc+0x20>
 8008342:	4b18      	ldr	r3, [pc, #96]	; (80083a4 <_Balloc+0x78>)
 8008344:	4818      	ldr	r0, [pc, #96]	; (80083a8 <_Balloc+0x7c>)
 8008346:	2166      	movs	r1, #102	; 0x66
 8008348:	f000 fd94 	bl	8008e74 <__assert_func>
 800834c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008350:	6006      	str	r6, [r0, #0]
 8008352:	60c6      	str	r6, [r0, #12]
 8008354:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008356:	68f3      	ldr	r3, [r6, #12]
 8008358:	b183      	cbz	r3, 800837c <_Balloc+0x50>
 800835a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008362:	b9b8      	cbnz	r0, 8008394 <_Balloc+0x68>
 8008364:	2101      	movs	r1, #1
 8008366:	fa01 f605 	lsl.w	r6, r1, r5
 800836a:	1d72      	adds	r2, r6, #5
 800836c:	0092      	lsls	r2, r2, #2
 800836e:	4620      	mov	r0, r4
 8008370:	f000 fb5a 	bl	8008a28 <_calloc_r>
 8008374:	b160      	cbz	r0, 8008390 <_Balloc+0x64>
 8008376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800837a:	e00e      	b.n	800839a <_Balloc+0x6e>
 800837c:	2221      	movs	r2, #33	; 0x21
 800837e:	2104      	movs	r1, #4
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fb51 	bl	8008a28 <_calloc_r>
 8008386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008388:	60f0      	str	r0, [r6, #12]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e4      	bne.n	800835a <_Balloc+0x2e>
 8008390:	2000      	movs	r0, #0
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	6802      	ldr	r2, [r0, #0]
 8008396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800839a:	2300      	movs	r3, #0
 800839c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083a0:	e7f7      	b.n	8008392 <_Balloc+0x66>
 80083a2:	bf00      	nop
 80083a4:	08009b19 	.word	0x08009b19
 80083a8:	08009ba0 	.word	0x08009ba0

080083ac <_Bfree>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083b0:	4605      	mov	r5, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	b976      	cbnz	r6, 80083d4 <_Bfree+0x28>
 80083b6:	2010      	movs	r0, #16
 80083b8:	f7ff ffa2 	bl	8008300 <malloc>
 80083bc:	4602      	mov	r2, r0
 80083be:	6268      	str	r0, [r5, #36]	; 0x24
 80083c0:	b920      	cbnz	r0, 80083cc <_Bfree+0x20>
 80083c2:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <_Bfree+0x3c>)
 80083c4:	4809      	ldr	r0, [pc, #36]	; (80083ec <_Bfree+0x40>)
 80083c6:	218a      	movs	r1, #138	; 0x8a
 80083c8:	f000 fd54 	bl	8008e74 <__assert_func>
 80083cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d0:	6006      	str	r6, [r0, #0]
 80083d2:	60c6      	str	r6, [r0, #12]
 80083d4:	b13c      	cbz	r4, 80083e6 <_Bfree+0x3a>
 80083d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083d8:	6862      	ldr	r2, [r4, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083e0:	6021      	str	r1, [r4, #0]
 80083e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	08009b19 	.word	0x08009b19
 80083ec:	08009ba0 	.word	0x08009ba0

080083f0 <__multadd>:
 80083f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f4:	690e      	ldr	r6, [r1, #16]
 80083f6:	4607      	mov	r7, r0
 80083f8:	4698      	mov	r8, r3
 80083fa:	460c      	mov	r4, r1
 80083fc:	f101 0014 	add.w	r0, r1, #20
 8008400:	2300      	movs	r3, #0
 8008402:	6805      	ldr	r5, [r0, #0]
 8008404:	b2a9      	uxth	r1, r5
 8008406:	fb02 8101 	mla	r1, r2, r1, r8
 800840a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800840e:	0c2d      	lsrs	r5, r5, #16
 8008410:	fb02 c505 	mla	r5, r2, r5, ip
 8008414:	b289      	uxth	r1, r1
 8008416:	3301      	adds	r3, #1
 8008418:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800841c:	429e      	cmp	r6, r3
 800841e:	f840 1b04 	str.w	r1, [r0], #4
 8008422:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008426:	dcec      	bgt.n	8008402 <__multadd+0x12>
 8008428:	f1b8 0f00 	cmp.w	r8, #0
 800842c:	d022      	beq.n	8008474 <__multadd+0x84>
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	42b3      	cmp	r3, r6
 8008432:	dc19      	bgt.n	8008468 <__multadd+0x78>
 8008434:	6861      	ldr	r1, [r4, #4]
 8008436:	4638      	mov	r0, r7
 8008438:	3101      	adds	r1, #1
 800843a:	f7ff ff77 	bl	800832c <_Balloc>
 800843e:	4605      	mov	r5, r0
 8008440:	b928      	cbnz	r0, 800844e <__multadd+0x5e>
 8008442:	4602      	mov	r2, r0
 8008444:	4b0d      	ldr	r3, [pc, #52]	; (800847c <__multadd+0x8c>)
 8008446:	480e      	ldr	r0, [pc, #56]	; (8008480 <__multadd+0x90>)
 8008448:	21b5      	movs	r1, #181	; 0xb5
 800844a:	f000 fd13 	bl	8008e74 <__assert_func>
 800844e:	6922      	ldr	r2, [r4, #16]
 8008450:	3202      	adds	r2, #2
 8008452:	f104 010c 	add.w	r1, r4, #12
 8008456:	0092      	lsls	r2, r2, #2
 8008458:	300c      	adds	r0, #12
 800845a:	f7ff ff59 	bl	8008310 <memcpy>
 800845e:	4621      	mov	r1, r4
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff ffa3 	bl	80083ac <_Bfree>
 8008466:	462c      	mov	r4, r5
 8008468:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800846c:	3601      	adds	r6, #1
 800846e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008472:	6126      	str	r6, [r4, #16]
 8008474:	4620      	mov	r0, r4
 8008476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847a:	bf00      	nop
 800847c:	08009b8f 	.word	0x08009b8f
 8008480:	08009ba0 	.word	0x08009ba0

08008484 <__hi0bits>:
 8008484:	0c03      	lsrs	r3, r0, #16
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	b9d3      	cbnz	r3, 80084c0 <__hi0bits+0x3c>
 800848a:	0400      	lsls	r0, r0, #16
 800848c:	2310      	movs	r3, #16
 800848e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008492:	bf04      	itt	eq
 8008494:	0200      	lsleq	r0, r0, #8
 8008496:	3308      	addeq	r3, #8
 8008498:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800849c:	bf04      	itt	eq
 800849e:	0100      	lsleq	r0, r0, #4
 80084a0:	3304      	addeq	r3, #4
 80084a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084a6:	bf04      	itt	eq
 80084a8:	0080      	lsleq	r0, r0, #2
 80084aa:	3302      	addeq	r3, #2
 80084ac:	2800      	cmp	r0, #0
 80084ae:	db05      	blt.n	80084bc <__hi0bits+0x38>
 80084b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084b4:	f103 0301 	add.w	r3, r3, #1
 80084b8:	bf08      	it	eq
 80084ba:	2320      	moveq	r3, #32
 80084bc:	4618      	mov	r0, r3
 80084be:	4770      	bx	lr
 80084c0:	2300      	movs	r3, #0
 80084c2:	e7e4      	b.n	800848e <__hi0bits+0xa>

080084c4 <__lo0bits>:
 80084c4:	6803      	ldr	r3, [r0, #0]
 80084c6:	f013 0207 	ands.w	r2, r3, #7
 80084ca:	4601      	mov	r1, r0
 80084cc:	d00b      	beq.n	80084e6 <__lo0bits+0x22>
 80084ce:	07da      	lsls	r2, r3, #31
 80084d0:	d424      	bmi.n	800851c <__lo0bits+0x58>
 80084d2:	0798      	lsls	r0, r3, #30
 80084d4:	bf49      	itett	mi
 80084d6:	085b      	lsrmi	r3, r3, #1
 80084d8:	089b      	lsrpl	r3, r3, #2
 80084da:	2001      	movmi	r0, #1
 80084dc:	600b      	strmi	r3, [r1, #0]
 80084de:	bf5c      	itt	pl
 80084e0:	600b      	strpl	r3, [r1, #0]
 80084e2:	2002      	movpl	r0, #2
 80084e4:	4770      	bx	lr
 80084e6:	b298      	uxth	r0, r3
 80084e8:	b9b0      	cbnz	r0, 8008518 <__lo0bits+0x54>
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	2010      	movs	r0, #16
 80084ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80084f2:	bf04      	itt	eq
 80084f4:	0a1b      	lsreq	r3, r3, #8
 80084f6:	3008      	addeq	r0, #8
 80084f8:	071a      	lsls	r2, r3, #28
 80084fa:	bf04      	itt	eq
 80084fc:	091b      	lsreq	r3, r3, #4
 80084fe:	3004      	addeq	r0, #4
 8008500:	079a      	lsls	r2, r3, #30
 8008502:	bf04      	itt	eq
 8008504:	089b      	lsreq	r3, r3, #2
 8008506:	3002      	addeq	r0, #2
 8008508:	07da      	lsls	r2, r3, #31
 800850a:	d403      	bmi.n	8008514 <__lo0bits+0x50>
 800850c:	085b      	lsrs	r3, r3, #1
 800850e:	f100 0001 	add.w	r0, r0, #1
 8008512:	d005      	beq.n	8008520 <__lo0bits+0x5c>
 8008514:	600b      	str	r3, [r1, #0]
 8008516:	4770      	bx	lr
 8008518:	4610      	mov	r0, r2
 800851a:	e7e8      	b.n	80084ee <__lo0bits+0x2a>
 800851c:	2000      	movs	r0, #0
 800851e:	4770      	bx	lr
 8008520:	2020      	movs	r0, #32
 8008522:	4770      	bx	lr

08008524 <__i2b>:
 8008524:	b510      	push	{r4, lr}
 8008526:	460c      	mov	r4, r1
 8008528:	2101      	movs	r1, #1
 800852a:	f7ff feff 	bl	800832c <_Balloc>
 800852e:	4602      	mov	r2, r0
 8008530:	b928      	cbnz	r0, 800853e <__i2b+0x1a>
 8008532:	4b05      	ldr	r3, [pc, #20]	; (8008548 <__i2b+0x24>)
 8008534:	4805      	ldr	r0, [pc, #20]	; (800854c <__i2b+0x28>)
 8008536:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800853a:	f000 fc9b 	bl	8008e74 <__assert_func>
 800853e:	2301      	movs	r3, #1
 8008540:	6144      	str	r4, [r0, #20]
 8008542:	6103      	str	r3, [r0, #16]
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	08009b8f 	.word	0x08009b8f
 800854c:	08009ba0 	.word	0x08009ba0

08008550 <__multiply>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	4614      	mov	r4, r2
 8008556:	690a      	ldr	r2, [r1, #16]
 8008558:	6923      	ldr	r3, [r4, #16]
 800855a:	429a      	cmp	r2, r3
 800855c:	bfb8      	it	lt
 800855e:	460b      	movlt	r3, r1
 8008560:	460d      	mov	r5, r1
 8008562:	bfbc      	itt	lt
 8008564:	4625      	movlt	r5, r4
 8008566:	461c      	movlt	r4, r3
 8008568:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800856c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008570:	68ab      	ldr	r3, [r5, #8]
 8008572:	6869      	ldr	r1, [r5, #4]
 8008574:	eb0a 0709 	add.w	r7, sl, r9
 8008578:	42bb      	cmp	r3, r7
 800857a:	b085      	sub	sp, #20
 800857c:	bfb8      	it	lt
 800857e:	3101      	addlt	r1, #1
 8008580:	f7ff fed4 	bl	800832c <_Balloc>
 8008584:	b930      	cbnz	r0, 8008594 <__multiply+0x44>
 8008586:	4602      	mov	r2, r0
 8008588:	4b42      	ldr	r3, [pc, #264]	; (8008694 <__multiply+0x144>)
 800858a:	4843      	ldr	r0, [pc, #268]	; (8008698 <__multiply+0x148>)
 800858c:	f240 115d 	movw	r1, #349	; 0x15d
 8008590:	f000 fc70 	bl	8008e74 <__assert_func>
 8008594:	f100 0614 	add.w	r6, r0, #20
 8008598:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800859c:	4633      	mov	r3, r6
 800859e:	2200      	movs	r2, #0
 80085a0:	4543      	cmp	r3, r8
 80085a2:	d31e      	bcc.n	80085e2 <__multiply+0x92>
 80085a4:	f105 0c14 	add.w	ip, r5, #20
 80085a8:	f104 0314 	add.w	r3, r4, #20
 80085ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80085b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80085b4:	9202      	str	r2, [sp, #8]
 80085b6:	ebac 0205 	sub.w	r2, ip, r5
 80085ba:	3a15      	subs	r2, #21
 80085bc:	f022 0203 	bic.w	r2, r2, #3
 80085c0:	3204      	adds	r2, #4
 80085c2:	f105 0115 	add.w	r1, r5, #21
 80085c6:	458c      	cmp	ip, r1
 80085c8:	bf38      	it	cc
 80085ca:	2204      	movcc	r2, #4
 80085cc:	9201      	str	r2, [sp, #4]
 80085ce:	9a02      	ldr	r2, [sp, #8]
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d808      	bhi.n	80085e8 <__multiply+0x98>
 80085d6:	2f00      	cmp	r7, #0
 80085d8:	dc55      	bgt.n	8008686 <__multiply+0x136>
 80085da:	6107      	str	r7, [r0, #16]
 80085dc:	b005      	add	sp, #20
 80085de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e2:	f843 2b04 	str.w	r2, [r3], #4
 80085e6:	e7db      	b.n	80085a0 <__multiply+0x50>
 80085e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80085ec:	f1ba 0f00 	cmp.w	sl, #0
 80085f0:	d020      	beq.n	8008634 <__multiply+0xe4>
 80085f2:	f105 0e14 	add.w	lr, r5, #20
 80085f6:	46b1      	mov	r9, r6
 80085f8:	2200      	movs	r2, #0
 80085fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80085fe:	f8d9 b000 	ldr.w	fp, [r9]
 8008602:	b2a1      	uxth	r1, r4
 8008604:	fa1f fb8b 	uxth.w	fp, fp
 8008608:	fb0a b101 	mla	r1, sl, r1, fp
 800860c:	4411      	add	r1, r2
 800860e:	f8d9 2000 	ldr.w	r2, [r9]
 8008612:	0c24      	lsrs	r4, r4, #16
 8008614:	0c12      	lsrs	r2, r2, #16
 8008616:	fb0a 2404 	mla	r4, sl, r4, r2
 800861a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800861e:	b289      	uxth	r1, r1
 8008620:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008624:	45f4      	cmp	ip, lr
 8008626:	f849 1b04 	str.w	r1, [r9], #4
 800862a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800862e:	d8e4      	bhi.n	80085fa <__multiply+0xaa>
 8008630:	9901      	ldr	r1, [sp, #4]
 8008632:	5072      	str	r2, [r6, r1]
 8008634:	9a03      	ldr	r2, [sp, #12]
 8008636:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800863a:	3304      	adds	r3, #4
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	d01f      	beq.n	8008682 <__multiply+0x132>
 8008642:	6834      	ldr	r4, [r6, #0]
 8008644:	f105 0114 	add.w	r1, r5, #20
 8008648:	46b6      	mov	lr, r6
 800864a:	f04f 0a00 	mov.w	sl, #0
 800864e:	880a      	ldrh	r2, [r1, #0]
 8008650:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008654:	fb09 b202 	mla	r2, r9, r2, fp
 8008658:	4492      	add	sl, r2
 800865a:	b2a4      	uxth	r4, r4
 800865c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008660:	f84e 4b04 	str.w	r4, [lr], #4
 8008664:	f851 4b04 	ldr.w	r4, [r1], #4
 8008668:	f8be 2000 	ldrh.w	r2, [lr]
 800866c:	0c24      	lsrs	r4, r4, #16
 800866e:	fb09 2404 	mla	r4, r9, r4, r2
 8008672:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008676:	458c      	cmp	ip, r1
 8008678:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800867c:	d8e7      	bhi.n	800864e <__multiply+0xfe>
 800867e:	9a01      	ldr	r2, [sp, #4]
 8008680:	50b4      	str	r4, [r6, r2]
 8008682:	3604      	adds	r6, #4
 8008684:	e7a3      	b.n	80085ce <__multiply+0x7e>
 8008686:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1a5      	bne.n	80085da <__multiply+0x8a>
 800868e:	3f01      	subs	r7, #1
 8008690:	e7a1      	b.n	80085d6 <__multiply+0x86>
 8008692:	bf00      	nop
 8008694:	08009b8f 	.word	0x08009b8f
 8008698:	08009ba0 	.word	0x08009ba0

0800869c <__pow5mult>:
 800869c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a0:	4615      	mov	r5, r2
 80086a2:	f012 0203 	ands.w	r2, r2, #3
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	d007      	beq.n	80086bc <__pow5mult+0x20>
 80086ac:	4c25      	ldr	r4, [pc, #148]	; (8008744 <__pow5mult+0xa8>)
 80086ae:	3a01      	subs	r2, #1
 80086b0:	2300      	movs	r3, #0
 80086b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086b6:	f7ff fe9b 	bl	80083f0 <__multadd>
 80086ba:	4607      	mov	r7, r0
 80086bc:	10ad      	asrs	r5, r5, #2
 80086be:	d03d      	beq.n	800873c <__pow5mult+0xa0>
 80086c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086c2:	b97c      	cbnz	r4, 80086e4 <__pow5mult+0x48>
 80086c4:	2010      	movs	r0, #16
 80086c6:	f7ff fe1b 	bl	8008300 <malloc>
 80086ca:	4602      	mov	r2, r0
 80086cc:	6270      	str	r0, [r6, #36]	; 0x24
 80086ce:	b928      	cbnz	r0, 80086dc <__pow5mult+0x40>
 80086d0:	4b1d      	ldr	r3, [pc, #116]	; (8008748 <__pow5mult+0xac>)
 80086d2:	481e      	ldr	r0, [pc, #120]	; (800874c <__pow5mult+0xb0>)
 80086d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086d8:	f000 fbcc 	bl	8008e74 <__assert_func>
 80086dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086e0:	6004      	str	r4, [r0, #0]
 80086e2:	60c4      	str	r4, [r0, #12]
 80086e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086ec:	b94c      	cbnz	r4, 8008702 <__pow5mult+0x66>
 80086ee:	f240 2171 	movw	r1, #625	; 0x271
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7ff ff16 	bl	8008524 <__i2b>
 80086f8:	2300      	movs	r3, #0
 80086fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80086fe:	4604      	mov	r4, r0
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	f04f 0900 	mov.w	r9, #0
 8008706:	07eb      	lsls	r3, r5, #31
 8008708:	d50a      	bpl.n	8008720 <__pow5mult+0x84>
 800870a:	4639      	mov	r1, r7
 800870c:	4622      	mov	r2, r4
 800870e:	4630      	mov	r0, r6
 8008710:	f7ff ff1e 	bl	8008550 <__multiply>
 8008714:	4639      	mov	r1, r7
 8008716:	4680      	mov	r8, r0
 8008718:	4630      	mov	r0, r6
 800871a:	f7ff fe47 	bl	80083ac <_Bfree>
 800871e:	4647      	mov	r7, r8
 8008720:	106d      	asrs	r5, r5, #1
 8008722:	d00b      	beq.n	800873c <__pow5mult+0xa0>
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	b938      	cbnz	r0, 8008738 <__pow5mult+0x9c>
 8008728:	4622      	mov	r2, r4
 800872a:	4621      	mov	r1, r4
 800872c:	4630      	mov	r0, r6
 800872e:	f7ff ff0f 	bl	8008550 <__multiply>
 8008732:	6020      	str	r0, [r4, #0]
 8008734:	f8c0 9000 	str.w	r9, [r0]
 8008738:	4604      	mov	r4, r0
 800873a:	e7e4      	b.n	8008706 <__pow5mult+0x6a>
 800873c:	4638      	mov	r0, r7
 800873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008742:	bf00      	nop
 8008744:	08009cf0 	.word	0x08009cf0
 8008748:	08009b19 	.word	0x08009b19
 800874c:	08009ba0 	.word	0x08009ba0

08008750 <__lshift>:
 8008750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	460c      	mov	r4, r1
 8008756:	6849      	ldr	r1, [r1, #4]
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	4607      	mov	r7, r0
 8008762:	4691      	mov	r9, r2
 8008764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008768:	f108 0601 	add.w	r6, r8, #1
 800876c:	42b3      	cmp	r3, r6
 800876e:	db0b      	blt.n	8008788 <__lshift+0x38>
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff fddb 	bl	800832c <_Balloc>
 8008776:	4605      	mov	r5, r0
 8008778:	b948      	cbnz	r0, 800878e <__lshift+0x3e>
 800877a:	4602      	mov	r2, r0
 800877c:	4b28      	ldr	r3, [pc, #160]	; (8008820 <__lshift+0xd0>)
 800877e:	4829      	ldr	r0, [pc, #164]	; (8008824 <__lshift+0xd4>)
 8008780:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008784:	f000 fb76 	bl	8008e74 <__assert_func>
 8008788:	3101      	adds	r1, #1
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	e7ee      	b.n	800876c <__lshift+0x1c>
 800878e:	2300      	movs	r3, #0
 8008790:	f100 0114 	add.w	r1, r0, #20
 8008794:	f100 0210 	add.w	r2, r0, #16
 8008798:	4618      	mov	r0, r3
 800879a:	4553      	cmp	r3, sl
 800879c:	db33      	blt.n	8008806 <__lshift+0xb6>
 800879e:	6920      	ldr	r0, [r4, #16]
 80087a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087a4:	f104 0314 	add.w	r3, r4, #20
 80087a8:	f019 091f 	ands.w	r9, r9, #31
 80087ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087b4:	d02b      	beq.n	800880e <__lshift+0xbe>
 80087b6:	f1c9 0e20 	rsb	lr, r9, #32
 80087ba:	468a      	mov	sl, r1
 80087bc:	2200      	movs	r2, #0
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	fa00 f009 	lsl.w	r0, r0, r9
 80087c4:	4302      	orrs	r2, r0
 80087c6:	f84a 2b04 	str.w	r2, [sl], #4
 80087ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ce:	459c      	cmp	ip, r3
 80087d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80087d4:	d8f3      	bhi.n	80087be <__lshift+0x6e>
 80087d6:	ebac 0304 	sub.w	r3, ip, r4
 80087da:	3b15      	subs	r3, #21
 80087dc:	f023 0303 	bic.w	r3, r3, #3
 80087e0:	3304      	adds	r3, #4
 80087e2:	f104 0015 	add.w	r0, r4, #21
 80087e6:	4584      	cmp	ip, r0
 80087e8:	bf38      	it	cc
 80087ea:	2304      	movcc	r3, #4
 80087ec:	50ca      	str	r2, [r1, r3]
 80087ee:	b10a      	cbz	r2, 80087f4 <__lshift+0xa4>
 80087f0:	f108 0602 	add.w	r6, r8, #2
 80087f4:	3e01      	subs	r6, #1
 80087f6:	4638      	mov	r0, r7
 80087f8:	612e      	str	r6, [r5, #16]
 80087fa:	4621      	mov	r1, r4
 80087fc:	f7ff fdd6 	bl	80083ac <_Bfree>
 8008800:	4628      	mov	r0, r5
 8008802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008806:	f842 0f04 	str.w	r0, [r2, #4]!
 800880a:	3301      	adds	r3, #1
 800880c:	e7c5      	b.n	800879a <__lshift+0x4a>
 800880e:	3904      	subs	r1, #4
 8008810:	f853 2b04 	ldr.w	r2, [r3], #4
 8008814:	f841 2f04 	str.w	r2, [r1, #4]!
 8008818:	459c      	cmp	ip, r3
 800881a:	d8f9      	bhi.n	8008810 <__lshift+0xc0>
 800881c:	e7ea      	b.n	80087f4 <__lshift+0xa4>
 800881e:	bf00      	nop
 8008820:	08009b8f 	.word	0x08009b8f
 8008824:	08009ba0 	.word	0x08009ba0

08008828 <__mcmp>:
 8008828:	b530      	push	{r4, r5, lr}
 800882a:	6902      	ldr	r2, [r0, #16]
 800882c:	690c      	ldr	r4, [r1, #16]
 800882e:	1b12      	subs	r2, r2, r4
 8008830:	d10e      	bne.n	8008850 <__mcmp+0x28>
 8008832:	f100 0314 	add.w	r3, r0, #20
 8008836:	3114      	adds	r1, #20
 8008838:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800883c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008840:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008844:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008848:	42a5      	cmp	r5, r4
 800884a:	d003      	beq.n	8008854 <__mcmp+0x2c>
 800884c:	d305      	bcc.n	800885a <__mcmp+0x32>
 800884e:	2201      	movs	r2, #1
 8008850:	4610      	mov	r0, r2
 8008852:	bd30      	pop	{r4, r5, pc}
 8008854:	4283      	cmp	r3, r0
 8008856:	d3f3      	bcc.n	8008840 <__mcmp+0x18>
 8008858:	e7fa      	b.n	8008850 <__mcmp+0x28>
 800885a:	f04f 32ff 	mov.w	r2, #4294967295
 800885e:	e7f7      	b.n	8008850 <__mcmp+0x28>

08008860 <__mdiff>:
 8008860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	460c      	mov	r4, r1
 8008866:	4606      	mov	r6, r0
 8008868:	4611      	mov	r1, r2
 800886a:	4620      	mov	r0, r4
 800886c:	4617      	mov	r7, r2
 800886e:	f7ff ffdb 	bl	8008828 <__mcmp>
 8008872:	1e05      	subs	r5, r0, #0
 8008874:	d110      	bne.n	8008898 <__mdiff+0x38>
 8008876:	4629      	mov	r1, r5
 8008878:	4630      	mov	r0, r6
 800887a:	f7ff fd57 	bl	800832c <_Balloc>
 800887e:	b930      	cbnz	r0, 800888e <__mdiff+0x2e>
 8008880:	4b39      	ldr	r3, [pc, #228]	; (8008968 <__mdiff+0x108>)
 8008882:	4602      	mov	r2, r0
 8008884:	f240 2132 	movw	r1, #562	; 0x232
 8008888:	4838      	ldr	r0, [pc, #224]	; (800896c <__mdiff+0x10c>)
 800888a:	f000 faf3 	bl	8008e74 <__assert_func>
 800888e:	2301      	movs	r3, #1
 8008890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008898:	bfa4      	itt	ge
 800889a:	463b      	movge	r3, r7
 800889c:	4627      	movge	r7, r4
 800889e:	4630      	mov	r0, r6
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	bfa6      	itte	ge
 80088a4:	461c      	movge	r4, r3
 80088a6:	2500      	movge	r5, #0
 80088a8:	2501      	movlt	r5, #1
 80088aa:	f7ff fd3f 	bl	800832c <_Balloc>
 80088ae:	b920      	cbnz	r0, 80088ba <__mdiff+0x5a>
 80088b0:	4b2d      	ldr	r3, [pc, #180]	; (8008968 <__mdiff+0x108>)
 80088b2:	4602      	mov	r2, r0
 80088b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088b8:	e7e6      	b.n	8008888 <__mdiff+0x28>
 80088ba:	693e      	ldr	r6, [r7, #16]
 80088bc:	60c5      	str	r5, [r0, #12]
 80088be:	6925      	ldr	r5, [r4, #16]
 80088c0:	f107 0114 	add.w	r1, r7, #20
 80088c4:	f104 0914 	add.w	r9, r4, #20
 80088c8:	f100 0e14 	add.w	lr, r0, #20
 80088cc:	f107 0210 	add.w	r2, r7, #16
 80088d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80088d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80088d8:	46f2      	mov	sl, lr
 80088da:	2700      	movs	r7, #0
 80088dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80088e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088e4:	fa1f f883 	uxth.w	r8, r3
 80088e8:	fa17 f78b 	uxtah	r7, r7, fp
 80088ec:	0c1b      	lsrs	r3, r3, #16
 80088ee:	eba7 0808 	sub.w	r8, r7, r8
 80088f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088fa:	fa1f f888 	uxth.w	r8, r8
 80088fe:	141f      	asrs	r7, r3, #16
 8008900:	454d      	cmp	r5, r9
 8008902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008906:	f84a 3b04 	str.w	r3, [sl], #4
 800890a:	d8e7      	bhi.n	80088dc <__mdiff+0x7c>
 800890c:	1b2b      	subs	r3, r5, r4
 800890e:	3b15      	subs	r3, #21
 8008910:	f023 0303 	bic.w	r3, r3, #3
 8008914:	3304      	adds	r3, #4
 8008916:	3415      	adds	r4, #21
 8008918:	42a5      	cmp	r5, r4
 800891a:	bf38      	it	cc
 800891c:	2304      	movcc	r3, #4
 800891e:	4419      	add	r1, r3
 8008920:	4473      	add	r3, lr
 8008922:	469e      	mov	lr, r3
 8008924:	460d      	mov	r5, r1
 8008926:	4565      	cmp	r5, ip
 8008928:	d30e      	bcc.n	8008948 <__mdiff+0xe8>
 800892a:	f10c 0203 	add.w	r2, ip, #3
 800892e:	1a52      	subs	r2, r2, r1
 8008930:	f022 0203 	bic.w	r2, r2, #3
 8008934:	3903      	subs	r1, #3
 8008936:	458c      	cmp	ip, r1
 8008938:	bf38      	it	cc
 800893a:	2200      	movcc	r2, #0
 800893c:	441a      	add	r2, r3
 800893e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008942:	b17b      	cbz	r3, 8008964 <__mdiff+0x104>
 8008944:	6106      	str	r6, [r0, #16]
 8008946:	e7a5      	b.n	8008894 <__mdiff+0x34>
 8008948:	f855 8b04 	ldr.w	r8, [r5], #4
 800894c:	fa17 f488 	uxtah	r4, r7, r8
 8008950:	1422      	asrs	r2, r4, #16
 8008952:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008956:	b2a4      	uxth	r4, r4
 8008958:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800895c:	f84e 4b04 	str.w	r4, [lr], #4
 8008960:	1417      	asrs	r7, r2, #16
 8008962:	e7e0      	b.n	8008926 <__mdiff+0xc6>
 8008964:	3e01      	subs	r6, #1
 8008966:	e7ea      	b.n	800893e <__mdiff+0xde>
 8008968:	08009b8f 	.word	0x08009b8f
 800896c:	08009ba0 	.word	0x08009ba0

08008970 <__d2b>:
 8008970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008974:	4689      	mov	r9, r1
 8008976:	2101      	movs	r1, #1
 8008978:	ec57 6b10 	vmov	r6, r7, d0
 800897c:	4690      	mov	r8, r2
 800897e:	f7ff fcd5 	bl	800832c <_Balloc>
 8008982:	4604      	mov	r4, r0
 8008984:	b930      	cbnz	r0, 8008994 <__d2b+0x24>
 8008986:	4602      	mov	r2, r0
 8008988:	4b25      	ldr	r3, [pc, #148]	; (8008a20 <__d2b+0xb0>)
 800898a:	4826      	ldr	r0, [pc, #152]	; (8008a24 <__d2b+0xb4>)
 800898c:	f240 310a 	movw	r1, #778	; 0x30a
 8008990:	f000 fa70 	bl	8008e74 <__assert_func>
 8008994:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008998:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800899c:	bb35      	cbnz	r5, 80089ec <__d2b+0x7c>
 800899e:	2e00      	cmp	r6, #0
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	d028      	beq.n	80089f6 <__d2b+0x86>
 80089a4:	4668      	mov	r0, sp
 80089a6:	9600      	str	r6, [sp, #0]
 80089a8:	f7ff fd8c 	bl	80084c4 <__lo0bits>
 80089ac:	9900      	ldr	r1, [sp, #0]
 80089ae:	b300      	cbz	r0, 80089f2 <__d2b+0x82>
 80089b0:	9a01      	ldr	r2, [sp, #4]
 80089b2:	f1c0 0320 	rsb	r3, r0, #32
 80089b6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ba:	430b      	orrs	r3, r1
 80089bc:	40c2      	lsrs	r2, r0
 80089be:	6163      	str	r3, [r4, #20]
 80089c0:	9201      	str	r2, [sp, #4]
 80089c2:	9b01      	ldr	r3, [sp, #4]
 80089c4:	61a3      	str	r3, [r4, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bf14      	ite	ne
 80089ca:	2202      	movne	r2, #2
 80089cc:	2201      	moveq	r2, #1
 80089ce:	6122      	str	r2, [r4, #16]
 80089d0:	b1d5      	cbz	r5, 8008a08 <__d2b+0x98>
 80089d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089d6:	4405      	add	r5, r0
 80089d8:	f8c9 5000 	str.w	r5, [r9]
 80089dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089e0:	f8c8 0000 	str.w	r0, [r8]
 80089e4:	4620      	mov	r0, r4
 80089e6:	b003      	add	sp, #12
 80089e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089f0:	e7d5      	b.n	800899e <__d2b+0x2e>
 80089f2:	6161      	str	r1, [r4, #20]
 80089f4:	e7e5      	b.n	80089c2 <__d2b+0x52>
 80089f6:	a801      	add	r0, sp, #4
 80089f8:	f7ff fd64 	bl	80084c4 <__lo0bits>
 80089fc:	9b01      	ldr	r3, [sp, #4]
 80089fe:	6163      	str	r3, [r4, #20]
 8008a00:	2201      	movs	r2, #1
 8008a02:	6122      	str	r2, [r4, #16]
 8008a04:	3020      	adds	r0, #32
 8008a06:	e7e3      	b.n	80089d0 <__d2b+0x60>
 8008a08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a10:	f8c9 0000 	str.w	r0, [r9]
 8008a14:	6918      	ldr	r0, [r3, #16]
 8008a16:	f7ff fd35 	bl	8008484 <__hi0bits>
 8008a1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a1e:	e7df      	b.n	80089e0 <__d2b+0x70>
 8008a20:	08009b8f 	.word	0x08009b8f
 8008a24:	08009ba0 	.word	0x08009ba0

08008a28 <_calloc_r>:
 8008a28:	b513      	push	{r0, r1, r4, lr}
 8008a2a:	434a      	muls	r2, r1
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	9201      	str	r2, [sp, #4]
 8008a30:	f000 f85a 	bl	8008ae8 <_malloc_r>
 8008a34:	4604      	mov	r4, r0
 8008a36:	b118      	cbz	r0, 8008a40 <_calloc_r+0x18>
 8008a38:	9a01      	ldr	r2, [sp, #4]
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f7fe f950 	bl	8006ce0 <memset>
 8008a40:	4620      	mov	r0, r4
 8008a42:	b002      	add	sp, #8
 8008a44:	bd10      	pop	{r4, pc}
	...

08008a48 <_free_r>:
 8008a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a4a:	2900      	cmp	r1, #0
 8008a4c:	d048      	beq.n	8008ae0 <_free_r+0x98>
 8008a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a52:	9001      	str	r0, [sp, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f1a1 0404 	sub.w	r4, r1, #4
 8008a5a:	bfb8      	it	lt
 8008a5c:	18e4      	addlt	r4, r4, r3
 8008a5e:	f000 fa65 	bl	8008f2c <__malloc_lock>
 8008a62:	4a20      	ldr	r2, [pc, #128]	; (8008ae4 <_free_r+0x9c>)
 8008a64:	9801      	ldr	r0, [sp, #4]
 8008a66:	6813      	ldr	r3, [r2, #0]
 8008a68:	4615      	mov	r5, r2
 8008a6a:	b933      	cbnz	r3, 8008a7a <_free_r+0x32>
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	6014      	str	r4, [r2, #0]
 8008a70:	b003      	add	sp, #12
 8008a72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a76:	f000 ba5f 	b.w	8008f38 <__malloc_unlock>
 8008a7a:	42a3      	cmp	r3, r4
 8008a7c:	d90b      	bls.n	8008a96 <_free_r+0x4e>
 8008a7e:	6821      	ldr	r1, [r4, #0]
 8008a80:	1862      	adds	r2, r4, r1
 8008a82:	4293      	cmp	r3, r2
 8008a84:	bf04      	itt	eq
 8008a86:	681a      	ldreq	r2, [r3, #0]
 8008a88:	685b      	ldreq	r3, [r3, #4]
 8008a8a:	6063      	str	r3, [r4, #4]
 8008a8c:	bf04      	itt	eq
 8008a8e:	1852      	addeq	r2, r2, r1
 8008a90:	6022      	streq	r2, [r4, #0]
 8008a92:	602c      	str	r4, [r5, #0]
 8008a94:	e7ec      	b.n	8008a70 <_free_r+0x28>
 8008a96:	461a      	mov	r2, r3
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	b10b      	cbz	r3, 8008aa0 <_free_r+0x58>
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d9fa      	bls.n	8008a96 <_free_r+0x4e>
 8008aa0:	6811      	ldr	r1, [r2, #0]
 8008aa2:	1855      	adds	r5, r2, r1
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d10b      	bne.n	8008ac0 <_free_r+0x78>
 8008aa8:	6824      	ldr	r4, [r4, #0]
 8008aaa:	4421      	add	r1, r4
 8008aac:	1854      	adds	r4, r2, r1
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	6011      	str	r1, [r2, #0]
 8008ab2:	d1dd      	bne.n	8008a70 <_free_r+0x28>
 8008ab4:	681c      	ldr	r4, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	6053      	str	r3, [r2, #4]
 8008aba:	4421      	add	r1, r4
 8008abc:	6011      	str	r1, [r2, #0]
 8008abe:	e7d7      	b.n	8008a70 <_free_r+0x28>
 8008ac0:	d902      	bls.n	8008ac8 <_free_r+0x80>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	6003      	str	r3, [r0, #0]
 8008ac6:	e7d3      	b.n	8008a70 <_free_r+0x28>
 8008ac8:	6825      	ldr	r5, [r4, #0]
 8008aca:	1961      	adds	r1, r4, r5
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf04      	itt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	6063      	str	r3, [r4, #4]
 8008ad6:	bf04      	itt	eq
 8008ad8:	1949      	addeq	r1, r1, r5
 8008ada:	6021      	streq	r1, [r4, #0]
 8008adc:	6054      	str	r4, [r2, #4]
 8008ade:	e7c7      	b.n	8008a70 <_free_r+0x28>
 8008ae0:	b003      	add	sp, #12
 8008ae2:	bd30      	pop	{r4, r5, pc}
 8008ae4:	2000020c 	.word	0x2000020c

08008ae8 <_malloc_r>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	1ccd      	adds	r5, r1, #3
 8008aec:	f025 0503 	bic.w	r5, r5, #3
 8008af0:	3508      	adds	r5, #8
 8008af2:	2d0c      	cmp	r5, #12
 8008af4:	bf38      	it	cc
 8008af6:	250c      	movcc	r5, #12
 8008af8:	2d00      	cmp	r5, #0
 8008afa:	4606      	mov	r6, r0
 8008afc:	db01      	blt.n	8008b02 <_malloc_r+0x1a>
 8008afe:	42a9      	cmp	r1, r5
 8008b00:	d903      	bls.n	8008b0a <_malloc_r+0x22>
 8008b02:	230c      	movs	r3, #12
 8008b04:	6033      	str	r3, [r6, #0]
 8008b06:	2000      	movs	r0, #0
 8008b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b0a:	f000 fa0f 	bl	8008f2c <__malloc_lock>
 8008b0e:	4921      	ldr	r1, [pc, #132]	; (8008b94 <_malloc_r+0xac>)
 8008b10:	680a      	ldr	r2, [r1, #0]
 8008b12:	4614      	mov	r4, r2
 8008b14:	b99c      	cbnz	r4, 8008b3e <_malloc_r+0x56>
 8008b16:	4f20      	ldr	r7, [pc, #128]	; (8008b98 <_malloc_r+0xb0>)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	b923      	cbnz	r3, 8008b26 <_malloc_r+0x3e>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4630      	mov	r0, r6
 8008b20:	f000 f998 	bl	8008e54 <_sbrk_r>
 8008b24:	6038      	str	r0, [r7, #0]
 8008b26:	4629      	mov	r1, r5
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f000 f993 	bl	8008e54 <_sbrk_r>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d123      	bne.n	8008b7a <_malloc_r+0x92>
 8008b32:	230c      	movs	r3, #12
 8008b34:	6033      	str	r3, [r6, #0]
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 f9fe 	bl	8008f38 <__malloc_unlock>
 8008b3c:	e7e3      	b.n	8008b06 <_malloc_r+0x1e>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	1b5b      	subs	r3, r3, r5
 8008b42:	d417      	bmi.n	8008b74 <_malloc_r+0x8c>
 8008b44:	2b0b      	cmp	r3, #11
 8008b46:	d903      	bls.n	8008b50 <_malloc_r+0x68>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	441c      	add	r4, r3
 8008b4c:	6025      	str	r5, [r4, #0]
 8008b4e:	e004      	b.n	8008b5a <_malloc_r+0x72>
 8008b50:	6863      	ldr	r3, [r4, #4]
 8008b52:	42a2      	cmp	r2, r4
 8008b54:	bf0c      	ite	eq
 8008b56:	600b      	streq	r3, [r1, #0]
 8008b58:	6053      	strne	r3, [r2, #4]
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 f9ec 	bl	8008f38 <__malloc_unlock>
 8008b60:	f104 000b 	add.w	r0, r4, #11
 8008b64:	1d23      	adds	r3, r4, #4
 8008b66:	f020 0007 	bic.w	r0, r0, #7
 8008b6a:	1ac2      	subs	r2, r0, r3
 8008b6c:	d0cc      	beq.n	8008b08 <_malloc_r+0x20>
 8008b6e:	1a1b      	subs	r3, r3, r0
 8008b70:	50a3      	str	r3, [r4, r2]
 8008b72:	e7c9      	b.n	8008b08 <_malloc_r+0x20>
 8008b74:	4622      	mov	r2, r4
 8008b76:	6864      	ldr	r4, [r4, #4]
 8008b78:	e7cc      	b.n	8008b14 <_malloc_r+0x2c>
 8008b7a:	1cc4      	adds	r4, r0, #3
 8008b7c:	f024 0403 	bic.w	r4, r4, #3
 8008b80:	42a0      	cmp	r0, r4
 8008b82:	d0e3      	beq.n	8008b4c <_malloc_r+0x64>
 8008b84:	1a21      	subs	r1, r4, r0
 8008b86:	4630      	mov	r0, r6
 8008b88:	f000 f964 	bl	8008e54 <_sbrk_r>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d1dd      	bne.n	8008b4c <_malloc_r+0x64>
 8008b90:	e7cf      	b.n	8008b32 <_malloc_r+0x4a>
 8008b92:	bf00      	nop
 8008b94:	2000020c 	.word	0x2000020c
 8008b98:	20000210 	.word	0x20000210

08008b9c <__ssputs_r>:
 8008b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba0:	688e      	ldr	r6, [r1, #8]
 8008ba2:	429e      	cmp	r6, r3
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	4690      	mov	r8, r2
 8008baa:	461f      	mov	r7, r3
 8008bac:	d838      	bhi.n	8008c20 <__ssputs_r+0x84>
 8008bae:	898a      	ldrh	r2, [r1, #12]
 8008bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bb4:	d032      	beq.n	8008c1c <__ssputs_r+0x80>
 8008bb6:	6825      	ldr	r5, [r4, #0]
 8008bb8:	6909      	ldr	r1, [r1, #16]
 8008bba:	eba5 0901 	sub.w	r9, r5, r1
 8008bbe:	6965      	ldr	r5, [r4, #20]
 8008bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bc8:	3301      	adds	r3, #1
 8008bca:	444b      	add	r3, r9
 8008bcc:	106d      	asrs	r5, r5, #1
 8008bce:	429d      	cmp	r5, r3
 8008bd0:	bf38      	it	cc
 8008bd2:	461d      	movcc	r5, r3
 8008bd4:	0553      	lsls	r3, r2, #21
 8008bd6:	d531      	bpl.n	8008c3c <__ssputs_r+0xa0>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	f7ff ff85 	bl	8008ae8 <_malloc_r>
 8008bde:	4606      	mov	r6, r0
 8008be0:	b950      	cbnz	r0, 8008bf8 <__ssputs_r+0x5c>
 8008be2:	230c      	movs	r3, #12
 8008be4:	f8ca 3000 	str.w	r3, [sl]
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf8:	6921      	ldr	r1, [r4, #16]
 8008bfa:	464a      	mov	r2, r9
 8008bfc:	f7ff fb88 	bl	8008310 <memcpy>
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	6126      	str	r6, [r4, #16]
 8008c0e:	6165      	str	r5, [r4, #20]
 8008c10:	444e      	add	r6, r9
 8008c12:	eba5 0509 	sub.w	r5, r5, r9
 8008c16:	6026      	str	r6, [r4, #0]
 8008c18:	60a5      	str	r5, [r4, #8]
 8008c1a:	463e      	mov	r6, r7
 8008c1c:	42be      	cmp	r6, r7
 8008c1e:	d900      	bls.n	8008c22 <__ssputs_r+0x86>
 8008c20:	463e      	mov	r6, r7
 8008c22:	4632      	mov	r2, r6
 8008c24:	6820      	ldr	r0, [r4, #0]
 8008c26:	4641      	mov	r1, r8
 8008c28:	f000 f966 	bl	8008ef8 <memmove>
 8008c2c:	68a3      	ldr	r3, [r4, #8]
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	1b9b      	subs	r3, r3, r6
 8008c32:	4432      	add	r2, r6
 8008c34:	60a3      	str	r3, [r4, #8]
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	2000      	movs	r0, #0
 8008c3a:	e7db      	b.n	8008bf4 <__ssputs_r+0x58>
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	f000 f981 	bl	8008f44 <_realloc_r>
 8008c42:	4606      	mov	r6, r0
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d1e1      	bne.n	8008c0c <__ssputs_r+0x70>
 8008c48:	6921      	ldr	r1, [r4, #16]
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	f7ff fefc 	bl	8008a48 <_free_r>
 8008c50:	e7c7      	b.n	8008be2 <__ssputs_r+0x46>
	...

08008c54 <_svfiprintf_r>:
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	4698      	mov	r8, r3
 8008c5a:	898b      	ldrh	r3, [r1, #12]
 8008c5c:	061b      	lsls	r3, r3, #24
 8008c5e:	b09d      	sub	sp, #116	; 0x74
 8008c60:	4607      	mov	r7, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	4614      	mov	r4, r2
 8008c66:	d50e      	bpl.n	8008c86 <_svfiprintf_r+0x32>
 8008c68:	690b      	ldr	r3, [r1, #16]
 8008c6a:	b963      	cbnz	r3, 8008c86 <_svfiprintf_r+0x32>
 8008c6c:	2140      	movs	r1, #64	; 0x40
 8008c6e:	f7ff ff3b 	bl	8008ae8 <_malloc_r>
 8008c72:	6028      	str	r0, [r5, #0]
 8008c74:	6128      	str	r0, [r5, #16]
 8008c76:	b920      	cbnz	r0, 8008c82 <_svfiprintf_r+0x2e>
 8008c78:	230c      	movs	r3, #12
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	e0d1      	b.n	8008e26 <_svfiprintf_r+0x1d2>
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	616b      	str	r3, [r5, #20]
 8008c86:	2300      	movs	r3, #0
 8008c88:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8a:	2320      	movs	r3, #32
 8008c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c94:	2330      	movs	r3, #48	; 0x30
 8008c96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e40 <_svfiprintf_r+0x1ec>
 8008c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c9e:	f04f 0901 	mov.w	r9, #1
 8008ca2:	4623      	mov	r3, r4
 8008ca4:	469a      	mov	sl, r3
 8008ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008caa:	b10a      	cbz	r2, 8008cb0 <_svfiprintf_r+0x5c>
 8008cac:	2a25      	cmp	r2, #37	; 0x25
 8008cae:	d1f9      	bne.n	8008ca4 <_svfiprintf_r+0x50>
 8008cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb4:	d00b      	beq.n	8008cce <_svfiprintf_r+0x7a>
 8008cb6:	465b      	mov	r3, fp
 8008cb8:	4622      	mov	r2, r4
 8008cba:	4629      	mov	r1, r5
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f7ff ff6d 	bl	8008b9c <__ssputs_r>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f000 80aa 	beq.w	8008e1c <_svfiprintf_r+0x1c8>
 8008cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cca:	445a      	add	r2, fp
 8008ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8008cce:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80a2 	beq.w	8008e1c <_svfiprintf_r+0x1c8>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce2:	f10a 0a01 	add.w	sl, sl, #1
 8008ce6:	9304      	str	r3, [sp, #16]
 8008ce8:	9307      	str	r3, [sp, #28]
 8008cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cee:	931a      	str	r3, [sp, #104]	; 0x68
 8008cf0:	4654      	mov	r4, sl
 8008cf2:	2205      	movs	r2, #5
 8008cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf8:	4851      	ldr	r0, [pc, #324]	; (8008e40 <_svfiprintf_r+0x1ec>)
 8008cfa:	f7f7 fa79 	bl	80001f0 <memchr>
 8008cfe:	9a04      	ldr	r2, [sp, #16]
 8008d00:	b9d8      	cbnz	r0, 8008d3a <_svfiprintf_r+0xe6>
 8008d02:	06d0      	lsls	r0, r2, #27
 8008d04:	bf44      	itt	mi
 8008d06:	2320      	movmi	r3, #32
 8008d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d0c:	0711      	lsls	r1, r2, #28
 8008d0e:	bf44      	itt	mi
 8008d10:	232b      	movmi	r3, #43	; 0x2b
 8008d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d16:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d1c:	d015      	beq.n	8008d4a <_svfiprintf_r+0xf6>
 8008d1e:	9a07      	ldr	r2, [sp, #28]
 8008d20:	4654      	mov	r4, sl
 8008d22:	2000      	movs	r0, #0
 8008d24:	f04f 0c0a 	mov.w	ip, #10
 8008d28:	4621      	mov	r1, r4
 8008d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d2e:	3b30      	subs	r3, #48	; 0x30
 8008d30:	2b09      	cmp	r3, #9
 8008d32:	d94e      	bls.n	8008dd2 <_svfiprintf_r+0x17e>
 8008d34:	b1b0      	cbz	r0, 8008d64 <_svfiprintf_r+0x110>
 8008d36:	9207      	str	r2, [sp, #28]
 8008d38:	e014      	b.n	8008d64 <_svfiprintf_r+0x110>
 8008d3a:	eba0 0308 	sub.w	r3, r0, r8
 8008d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d42:	4313      	orrs	r3, r2
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	46a2      	mov	sl, r4
 8008d48:	e7d2      	b.n	8008cf0 <_svfiprintf_r+0x9c>
 8008d4a:	9b03      	ldr	r3, [sp, #12]
 8008d4c:	1d19      	adds	r1, r3, #4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	9103      	str	r1, [sp, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	bfbb      	ittet	lt
 8008d56:	425b      	neglt	r3, r3
 8008d58:	f042 0202 	orrlt.w	r2, r2, #2
 8008d5c:	9307      	strge	r3, [sp, #28]
 8008d5e:	9307      	strlt	r3, [sp, #28]
 8008d60:	bfb8      	it	lt
 8008d62:	9204      	strlt	r2, [sp, #16]
 8008d64:	7823      	ldrb	r3, [r4, #0]
 8008d66:	2b2e      	cmp	r3, #46	; 0x2e
 8008d68:	d10c      	bne.n	8008d84 <_svfiprintf_r+0x130>
 8008d6a:	7863      	ldrb	r3, [r4, #1]
 8008d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d6e:	d135      	bne.n	8008ddc <_svfiprintf_r+0x188>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1d1a      	adds	r2, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9203      	str	r2, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfb8      	it	lt
 8008d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d80:	3402      	adds	r4, #2
 8008d82:	9305      	str	r3, [sp, #20]
 8008d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e50 <_svfiprintf_r+0x1fc>
 8008d88:	7821      	ldrb	r1, [r4, #0]
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	4650      	mov	r0, sl
 8008d8e:	f7f7 fa2f 	bl	80001f0 <memchr>
 8008d92:	b140      	cbz	r0, 8008da6 <_svfiprintf_r+0x152>
 8008d94:	2340      	movs	r3, #64	; 0x40
 8008d96:	eba0 000a 	sub.w	r0, r0, sl
 8008d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008d9e:	9b04      	ldr	r3, [sp, #16]
 8008da0:	4303      	orrs	r3, r0
 8008da2:	3401      	adds	r4, #1
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008daa:	4826      	ldr	r0, [pc, #152]	; (8008e44 <_svfiprintf_r+0x1f0>)
 8008dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008db0:	2206      	movs	r2, #6
 8008db2:	f7f7 fa1d 	bl	80001f0 <memchr>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d038      	beq.n	8008e2c <_svfiprintf_r+0x1d8>
 8008dba:	4b23      	ldr	r3, [pc, #140]	; (8008e48 <_svfiprintf_r+0x1f4>)
 8008dbc:	bb1b      	cbnz	r3, 8008e06 <_svfiprintf_r+0x1b2>
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	3307      	adds	r3, #7
 8008dc2:	f023 0307 	bic.w	r3, r3, #7
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	9303      	str	r3, [sp, #12]
 8008dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dcc:	4433      	add	r3, r6
 8008dce:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd0:	e767      	b.n	8008ca2 <_svfiprintf_r+0x4e>
 8008dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	2001      	movs	r0, #1
 8008dda:	e7a5      	b.n	8008d28 <_svfiprintf_r+0xd4>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	3401      	adds	r4, #1
 8008de0:	9305      	str	r3, [sp, #20]
 8008de2:	4619      	mov	r1, r3
 8008de4:	f04f 0c0a 	mov.w	ip, #10
 8008de8:	4620      	mov	r0, r4
 8008dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dee:	3a30      	subs	r2, #48	; 0x30
 8008df0:	2a09      	cmp	r2, #9
 8008df2:	d903      	bls.n	8008dfc <_svfiprintf_r+0x1a8>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0c5      	beq.n	8008d84 <_svfiprintf_r+0x130>
 8008df8:	9105      	str	r1, [sp, #20]
 8008dfa:	e7c3      	b.n	8008d84 <_svfiprintf_r+0x130>
 8008dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e00:	4604      	mov	r4, r0
 8008e02:	2301      	movs	r3, #1
 8008e04:	e7f0      	b.n	8008de8 <_svfiprintf_r+0x194>
 8008e06:	ab03      	add	r3, sp, #12
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <_svfiprintf_r+0x1f8>)
 8008e0e:	a904      	add	r1, sp, #16
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7fe f80d 	bl	8006e30 <_printf_float>
 8008e16:	1c42      	adds	r2, r0, #1
 8008e18:	4606      	mov	r6, r0
 8008e1a:	d1d6      	bne.n	8008dca <_svfiprintf_r+0x176>
 8008e1c:	89ab      	ldrh	r3, [r5, #12]
 8008e1e:	065b      	lsls	r3, r3, #25
 8008e20:	f53f af2c 	bmi.w	8008c7c <_svfiprintf_r+0x28>
 8008e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e26:	b01d      	add	sp, #116	; 0x74
 8008e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2c:	ab03      	add	r3, sp, #12
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	462a      	mov	r2, r5
 8008e32:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <_svfiprintf_r+0x1f8>)
 8008e34:	a904      	add	r1, sp, #16
 8008e36:	4638      	mov	r0, r7
 8008e38:	f7fe fa9e 	bl	8007378 <_printf_i>
 8008e3c:	e7eb      	b.n	8008e16 <_svfiprintf_r+0x1c2>
 8008e3e:	bf00      	nop
 8008e40:	08009cfc 	.word	0x08009cfc
 8008e44:	08009d06 	.word	0x08009d06
 8008e48:	08006e31 	.word	0x08006e31
 8008e4c:	08008b9d 	.word	0x08008b9d
 8008e50:	08009d02 	.word	0x08009d02

08008e54 <_sbrk_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d06      	ldr	r5, [pc, #24]	; (8008e70 <_sbrk_r+0x1c>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7f8 fd7e 	bl	8001960 <_sbrk>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_sbrk_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_sbrk_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	2000040c 	.word	0x2000040c

08008e74 <__assert_func>:
 8008e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e76:	4614      	mov	r4, r2
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <__assert_func+0x2c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4605      	mov	r5, r0
 8008e80:	68d8      	ldr	r0, [r3, #12]
 8008e82:	b14c      	cbz	r4, 8008e98 <__assert_func+0x24>
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <__assert_func+0x30>)
 8008e86:	9100      	str	r1, [sp, #0]
 8008e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e8c:	4906      	ldr	r1, [pc, #24]	; (8008ea8 <__assert_func+0x34>)
 8008e8e:	462b      	mov	r3, r5
 8008e90:	f000 f80e 	bl	8008eb0 <fiprintf>
 8008e94:	f000 faa4 	bl	80093e0 <abort>
 8008e98:	4b04      	ldr	r3, [pc, #16]	; (8008eac <__assert_func+0x38>)
 8008e9a:	461c      	mov	r4, r3
 8008e9c:	e7f3      	b.n	8008e86 <__assert_func+0x12>
 8008e9e:	bf00      	nop
 8008ea0:	2000001c 	.word	0x2000001c
 8008ea4:	08009d0d 	.word	0x08009d0d
 8008ea8:	08009d1a 	.word	0x08009d1a
 8008eac:	08009d48 	.word	0x08009d48

08008eb0 <fiprintf>:
 8008eb0:	b40e      	push	{r1, r2, r3}
 8008eb2:	b503      	push	{r0, r1, lr}
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <fiprintf+0x20>)
 8008eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ebe:	6800      	ldr	r0, [r0, #0]
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	f000 f88f 	bl	8008fe4 <_vfiprintf_r>
 8008ec6:	b002      	add	sp, #8
 8008ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ecc:	b003      	add	sp, #12
 8008ece:	4770      	bx	lr
 8008ed0:	2000001c 	.word	0x2000001c

08008ed4 <__ascii_mbtowc>:
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	b901      	cbnz	r1, 8008eda <__ascii_mbtowc+0x6>
 8008ed8:	a901      	add	r1, sp, #4
 8008eda:	b142      	cbz	r2, 8008eee <__ascii_mbtowc+0x1a>
 8008edc:	b14b      	cbz	r3, 8008ef2 <__ascii_mbtowc+0x1e>
 8008ede:	7813      	ldrb	r3, [r2, #0]
 8008ee0:	600b      	str	r3, [r1, #0]
 8008ee2:	7812      	ldrb	r2, [r2, #0]
 8008ee4:	1e10      	subs	r0, r2, #0
 8008ee6:	bf18      	it	ne
 8008ee8:	2001      	movne	r0, #1
 8008eea:	b002      	add	sp, #8
 8008eec:	4770      	bx	lr
 8008eee:	4610      	mov	r0, r2
 8008ef0:	e7fb      	b.n	8008eea <__ascii_mbtowc+0x16>
 8008ef2:	f06f 0001 	mvn.w	r0, #1
 8008ef6:	e7f8      	b.n	8008eea <__ascii_mbtowc+0x16>

08008ef8 <memmove>:
 8008ef8:	4288      	cmp	r0, r1
 8008efa:	b510      	push	{r4, lr}
 8008efc:	eb01 0402 	add.w	r4, r1, r2
 8008f00:	d902      	bls.n	8008f08 <memmove+0x10>
 8008f02:	4284      	cmp	r4, r0
 8008f04:	4623      	mov	r3, r4
 8008f06:	d807      	bhi.n	8008f18 <memmove+0x20>
 8008f08:	1e43      	subs	r3, r0, #1
 8008f0a:	42a1      	cmp	r1, r4
 8008f0c:	d008      	beq.n	8008f20 <memmove+0x28>
 8008f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f16:	e7f8      	b.n	8008f0a <memmove+0x12>
 8008f18:	4402      	add	r2, r0
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	428a      	cmp	r2, r1
 8008f1e:	d100      	bne.n	8008f22 <memmove+0x2a>
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f2a:	e7f7      	b.n	8008f1c <memmove+0x24>

08008f2c <__malloc_lock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__malloc_lock+0x8>)
 8008f2e:	f000 bc17 	b.w	8009760 <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	20000414 	.word	0x20000414

08008f38 <__malloc_unlock>:
 8008f38:	4801      	ldr	r0, [pc, #4]	; (8008f40 <__malloc_unlock+0x8>)
 8008f3a:	f000 bc12 	b.w	8009762 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	20000414 	.word	0x20000414

08008f44 <_realloc_r>:
 8008f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f46:	4607      	mov	r7, r0
 8008f48:	4614      	mov	r4, r2
 8008f4a:	460e      	mov	r6, r1
 8008f4c:	b921      	cbnz	r1, 8008f58 <_realloc_r+0x14>
 8008f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f52:	4611      	mov	r1, r2
 8008f54:	f7ff bdc8 	b.w	8008ae8 <_malloc_r>
 8008f58:	b922      	cbnz	r2, 8008f64 <_realloc_r+0x20>
 8008f5a:	f7ff fd75 	bl	8008a48 <_free_r>
 8008f5e:	4625      	mov	r5, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f64:	f000 fc62 	bl	800982c <_malloc_usable_size_r>
 8008f68:	42a0      	cmp	r0, r4
 8008f6a:	d20f      	bcs.n	8008f8c <_realloc_r+0x48>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4638      	mov	r0, r7
 8008f70:	f7ff fdba 	bl	8008ae8 <_malloc_r>
 8008f74:	4605      	mov	r5, r0
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0f2      	beq.n	8008f60 <_realloc_r+0x1c>
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	f7ff f9c7 	bl	8008310 <memcpy>
 8008f82:	4631      	mov	r1, r6
 8008f84:	4638      	mov	r0, r7
 8008f86:	f7ff fd5f 	bl	8008a48 <_free_r>
 8008f8a:	e7e9      	b.n	8008f60 <_realloc_r+0x1c>
 8008f8c:	4635      	mov	r5, r6
 8008f8e:	e7e7      	b.n	8008f60 <_realloc_r+0x1c>

08008f90 <__sfputc_r>:
 8008f90:	6893      	ldr	r3, [r2, #8]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	b410      	push	{r4}
 8008f98:	6093      	str	r3, [r2, #8]
 8008f9a:	da08      	bge.n	8008fae <__sfputc_r+0x1e>
 8008f9c:	6994      	ldr	r4, [r2, #24]
 8008f9e:	42a3      	cmp	r3, r4
 8008fa0:	db01      	blt.n	8008fa6 <__sfputc_r+0x16>
 8008fa2:	290a      	cmp	r1, #10
 8008fa4:	d103      	bne.n	8008fae <__sfputc_r+0x1e>
 8008fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008faa:	f000 b94b 	b.w	8009244 <__swbuf_r>
 8008fae:	6813      	ldr	r3, [r2, #0]
 8008fb0:	1c58      	adds	r0, r3, #1
 8008fb2:	6010      	str	r0, [r2, #0]
 8008fb4:	7019      	strb	r1, [r3, #0]
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <__sfputs_r>:
 8008fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	460f      	mov	r7, r1
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	18d5      	adds	r5, r2, r3
 8008fc8:	42ac      	cmp	r4, r5
 8008fca:	d101      	bne.n	8008fd0 <__sfputs_r+0x12>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e007      	b.n	8008fe0 <__sfputs_r+0x22>
 8008fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd4:	463a      	mov	r2, r7
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f7ff ffda 	bl	8008f90 <__sfputc_r>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d1f3      	bne.n	8008fc8 <__sfputs_r+0xa>
 8008fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fe4 <_vfiprintf_r>:
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	460d      	mov	r5, r1
 8008fea:	b09d      	sub	sp, #116	; 0x74
 8008fec:	4614      	mov	r4, r2
 8008fee:	4698      	mov	r8, r3
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	b118      	cbz	r0, 8008ffc <_vfiprintf_r+0x18>
 8008ff4:	6983      	ldr	r3, [r0, #24]
 8008ff6:	b90b      	cbnz	r3, 8008ffc <_vfiprintf_r+0x18>
 8008ff8:	f000 fb14 	bl	8009624 <__sinit>
 8008ffc:	4b89      	ldr	r3, [pc, #548]	; (8009224 <_vfiprintf_r+0x240>)
 8008ffe:	429d      	cmp	r5, r3
 8009000:	d11b      	bne.n	800903a <_vfiprintf_r+0x56>
 8009002:	6875      	ldr	r5, [r6, #4]
 8009004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	d405      	bmi.n	8009016 <_vfiprintf_r+0x32>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	059a      	lsls	r2, r3, #22
 800900e:	d402      	bmi.n	8009016 <_vfiprintf_r+0x32>
 8009010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009012:	f000 fba5 	bl	8009760 <__retarget_lock_acquire_recursive>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	071b      	lsls	r3, r3, #28
 800901a:	d501      	bpl.n	8009020 <_vfiprintf_r+0x3c>
 800901c:	692b      	ldr	r3, [r5, #16]
 800901e:	b9eb      	cbnz	r3, 800905c <_vfiprintf_r+0x78>
 8009020:	4629      	mov	r1, r5
 8009022:	4630      	mov	r0, r6
 8009024:	f000 f96e 	bl	8009304 <__swsetup_r>
 8009028:	b1c0      	cbz	r0, 800905c <_vfiprintf_r+0x78>
 800902a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800902c:	07dc      	lsls	r4, r3, #31
 800902e:	d50e      	bpl.n	800904e <_vfiprintf_r+0x6a>
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	b01d      	add	sp, #116	; 0x74
 8009036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903a:	4b7b      	ldr	r3, [pc, #492]	; (8009228 <_vfiprintf_r+0x244>)
 800903c:	429d      	cmp	r5, r3
 800903e:	d101      	bne.n	8009044 <_vfiprintf_r+0x60>
 8009040:	68b5      	ldr	r5, [r6, #8]
 8009042:	e7df      	b.n	8009004 <_vfiprintf_r+0x20>
 8009044:	4b79      	ldr	r3, [pc, #484]	; (800922c <_vfiprintf_r+0x248>)
 8009046:	429d      	cmp	r5, r3
 8009048:	bf08      	it	eq
 800904a:	68f5      	ldreq	r5, [r6, #12]
 800904c:	e7da      	b.n	8009004 <_vfiprintf_r+0x20>
 800904e:	89ab      	ldrh	r3, [r5, #12]
 8009050:	0598      	lsls	r0, r3, #22
 8009052:	d4ed      	bmi.n	8009030 <_vfiprintf_r+0x4c>
 8009054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009056:	f000 fb84 	bl	8009762 <__retarget_lock_release_recursive>
 800905a:	e7e9      	b.n	8009030 <_vfiprintf_r+0x4c>
 800905c:	2300      	movs	r3, #0
 800905e:	9309      	str	r3, [sp, #36]	; 0x24
 8009060:	2320      	movs	r3, #32
 8009062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009066:	f8cd 800c 	str.w	r8, [sp, #12]
 800906a:	2330      	movs	r3, #48	; 0x30
 800906c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009230 <_vfiprintf_r+0x24c>
 8009070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009074:	f04f 0901 	mov.w	r9, #1
 8009078:	4623      	mov	r3, r4
 800907a:	469a      	mov	sl, r3
 800907c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009080:	b10a      	cbz	r2, 8009086 <_vfiprintf_r+0xa2>
 8009082:	2a25      	cmp	r2, #37	; 0x25
 8009084:	d1f9      	bne.n	800907a <_vfiprintf_r+0x96>
 8009086:	ebba 0b04 	subs.w	fp, sl, r4
 800908a:	d00b      	beq.n	80090a4 <_vfiprintf_r+0xc0>
 800908c:	465b      	mov	r3, fp
 800908e:	4622      	mov	r2, r4
 8009090:	4629      	mov	r1, r5
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ff93 	bl	8008fbe <__sfputs_r>
 8009098:	3001      	adds	r0, #1
 800909a:	f000 80aa 	beq.w	80091f2 <_vfiprintf_r+0x20e>
 800909e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a0:	445a      	add	r2, fp
 80090a2:	9209      	str	r2, [sp, #36]	; 0x24
 80090a4:	f89a 3000 	ldrb.w	r3, [sl]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 80a2 	beq.w	80091f2 <_vfiprintf_r+0x20e>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f04f 32ff 	mov.w	r2, #4294967295
 80090b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b8:	f10a 0a01 	add.w	sl, sl, #1
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	9307      	str	r3, [sp, #28]
 80090c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c4:	931a      	str	r3, [sp, #104]	; 0x68
 80090c6:	4654      	mov	r4, sl
 80090c8:	2205      	movs	r2, #5
 80090ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ce:	4858      	ldr	r0, [pc, #352]	; (8009230 <_vfiprintf_r+0x24c>)
 80090d0:	f7f7 f88e 	bl	80001f0 <memchr>
 80090d4:	9a04      	ldr	r2, [sp, #16]
 80090d6:	b9d8      	cbnz	r0, 8009110 <_vfiprintf_r+0x12c>
 80090d8:	06d1      	lsls	r1, r2, #27
 80090da:	bf44      	itt	mi
 80090dc:	2320      	movmi	r3, #32
 80090de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e2:	0713      	lsls	r3, r2, #28
 80090e4:	bf44      	itt	mi
 80090e6:	232b      	movmi	r3, #43	; 0x2b
 80090e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ec:	f89a 3000 	ldrb.w	r3, [sl]
 80090f0:	2b2a      	cmp	r3, #42	; 0x2a
 80090f2:	d015      	beq.n	8009120 <_vfiprintf_r+0x13c>
 80090f4:	9a07      	ldr	r2, [sp, #28]
 80090f6:	4654      	mov	r4, sl
 80090f8:	2000      	movs	r0, #0
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4621      	mov	r1, r4
 8009100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009104:	3b30      	subs	r3, #48	; 0x30
 8009106:	2b09      	cmp	r3, #9
 8009108:	d94e      	bls.n	80091a8 <_vfiprintf_r+0x1c4>
 800910a:	b1b0      	cbz	r0, 800913a <_vfiprintf_r+0x156>
 800910c:	9207      	str	r2, [sp, #28]
 800910e:	e014      	b.n	800913a <_vfiprintf_r+0x156>
 8009110:	eba0 0308 	sub.w	r3, r0, r8
 8009114:	fa09 f303 	lsl.w	r3, r9, r3
 8009118:	4313      	orrs	r3, r2
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	46a2      	mov	sl, r4
 800911e:	e7d2      	b.n	80090c6 <_vfiprintf_r+0xe2>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	1d19      	adds	r1, r3, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	9103      	str	r1, [sp, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfbb      	ittet	lt
 800912c:	425b      	neglt	r3, r3
 800912e:	f042 0202 	orrlt.w	r2, r2, #2
 8009132:	9307      	strge	r3, [sp, #28]
 8009134:	9307      	strlt	r3, [sp, #28]
 8009136:	bfb8      	it	lt
 8009138:	9204      	strlt	r2, [sp, #16]
 800913a:	7823      	ldrb	r3, [r4, #0]
 800913c:	2b2e      	cmp	r3, #46	; 0x2e
 800913e:	d10c      	bne.n	800915a <_vfiprintf_r+0x176>
 8009140:	7863      	ldrb	r3, [r4, #1]
 8009142:	2b2a      	cmp	r3, #42	; 0x2a
 8009144:	d135      	bne.n	80091b2 <_vfiprintf_r+0x1ce>
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	1d1a      	adds	r2, r3, #4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	9203      	str	r2, [sp, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfb8      	it	lt
 8009152:	f04f 33ff 	movlt.w	r3, #4294967295
 8009156:	3402      	adds	r4, #2
 8009158:	9305      	str	r3, [sp, #20]
 800915a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009240 <_vfiprintf_r+0x25c>
 800915e:	7821      	ldrb	r1, [r4, #0]
 8009160:	2203      	movs	r2, #3
 8009162:	4650      	mov	r0, sl
 8009164:	f7f7 f844 	bl	80001f0 <memchr>
 8009168:	b140      	cbz	r0, 800917c <_vfiprintf_r+0x198>
 800916a:	2340      	movs	r3, #64	; 0x40
 800916c:	eba0 000a 	sub.w	r0, r0, sl
 8009170:	fa03 f000 	lsl.w	r0, r3, r0
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	4303      	orrs	r3, r0
 8009178:	3401      	adds	r4, #1
 800917a:	9304      	str	r3, [sp, #16]
 800917c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009180:	482c      	ldr	r0, [pc, #176]	; (8009234 <_vfiprintf_r+0x250>)
 8009182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009186:	2206      	movs	r2, #6
 8009188:	f7f7 f832 	bl	80001f0 <memchr>
 800918c:	2800      	cmp	r0, #0
 800918e:	d03f      	beq.n	8009210 <_vfiprintf_r+0x22c>
 8009190:	4b29      	ldr	r3, [pc, #164]	; (8009238 <_vfiprintf_r+0x254>)
 8009192:	bb1b      	cbnz	r3, 80091dc <_vfiprintf_r+0x1f8>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	3307      	adds	r3, #7
 8009198:	f023 0307 	bic.w	r3, r3, #7
 800919c:	3308      	adds	r3, #8
 800919e:	9303      	str	r3, [sp, #12]
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	443b      	add	r3, r7
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	e767      	b.n	8009078 <_vfiprintf_r+0x94>
 80091a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ac:	460c      	mov	r4, r1
 80091ae:	2001      	movs	r0, #1
 80091b0:	e7a5      	b.n	80090fe <_vfiprintf_r+0x11a>
 80091b2:	2300      	movs	r3, #0
 80091b4:	3401      	adds	r4, #1
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	4619      	mov	r1, r3
 80091ba:	f04f 0c0a 	mov.w	ip, #10
 80091be:	4620      	mov	r0, r4
 80091c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c4:	3a30      	subs	r2, #48	; 0x30
 80091c6:	2a09      	cmp	r2, #9
 80091c8:	d903      	bls.n	80091d2 <_vfiprintf_r+0x1ee>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0c5      	beq.n	800915a <_vfiprintf_r+0x176>
 80091ce:	9105      	str	r1, [sp, #20]
 80091d0:	e7c3      	b.n	800915a <_vfiprintf_r+0x176>
 80091d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d6:	4604      	mov	r4, r0
 80091d8:	2301      	movs	r3, #1
 80091da:	e7f0      	b.n	80091be <_vfiprintf_r+0x1da>
 80091dc:	ab03      	add	r3, sp, #12
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	462a      	mov	r2, r5
 80091e2:	4b16      	ldr	r3, [pc, #88]	; (800923c <_vfiprintf_r+0x258>)
 80091e4:	a904      	add	r1, sp, #16
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7fd fe22 	bl	8006e30 <_printf_float>
 80091ec:	4607      	mov	r7, r0
 80091ee:	1c78      	adds	r0, r7, #1
 80091f0:	d1d6      	bne.n	80091a0 <_vfiprintf_r+0x1bc>
 80091f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f4:	07d9      	lsls	r1, r3, #31
 80091f6:	d405      	bmi.n	8009204 <_vfiprintf_r+0x220>
 80091f8:	89ab      	ldrh	r3, [r5, #12]
 80091fa:	059a      	lsls	r2, r3, #22
 80091fc:	d402      	bmi.n	8009204 <_vfiprintf_r+0x220>
 80091fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009200:	f000 faaf 	bl	8009762 <__retarget_lock_release_recursive>
 8009204:	89ab      	ldrh	r3, [r5, #12]
 8009206:	065b      	lsls	r3, r3, #25
 8009208:	f53f af12 	bmi.w	8009030 <_vfiprintf_r+0x4c>
 800920c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800920e:	e711      	b.n	8009034 <_vfiprintf_r+0x50>
 8009210:	ab03      	add	r3, sp, #12
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	462a      	mov	r2, r5
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <_vfiprintf_r+0x258>)
 8009218:	a904      	add	r1, sp, #16
 800921a:	4630      	mov	r0, r6
 800921c:	f7fe f8ac 	bl	8007378 <_printf_i>
 8009220:	e7e4      	b.n	80091ec <_vfiprintf_r+0x208>
 8009222:	bf00      	nop
 8009224:	08009e74 	.word	0x08009e74
 8009228:	08009e94 	.word	0x08009e94
 800922c:	08009e54 	.word	0x08009e54
 8009230:	08009cfc 	.word	0x08009cfc
 8009234:	08009d06 	.word	0x08009d06
 8009238:	08006e31 	.word	0x08006e31
 800923c:	08008fbf 	.word	0x08008fbf
 8009240:	08009d02 	.word	0x08009d02

08009244 <__swbuf_r>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	460e      	mov	r6, r1
 8009248:	4614      	mov	r4, r2
 800924a:	4605      	mov	r5, r0
 800924c:	b118      	cbz	r0, 8009256 <__swbuf_r+0x12>
 800924e:	6983      	ldr	r3, [r0, #24]
 8009250:	b90b      	cbnz	r3, 8009256 <__swbuf_r+0x12>
 8009252:	f000 f9e7 	bl	8009624 <__sinit>
 8009256:	4b21      	ldr	r3, [pc, #132]	; (80092dc <__swbuf_r+0x98>)
 8009258:	429c      	cmp	r4, r3
 800925a:	d12b      	bne.n	80092b4 <__swbuf_r+0x70>
 800925c:	686c      	ldr	r4, [r5, #4]
 800925e:	69a3      	ldr	r3, [r4, #24]
 8009260:	60a3      	str	r3, [r4, #8]
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	071a      	lsls	r2, r3, #28
 8009266:	d52f      	bpl.n	80092c8 <__swbuf_r+0x84>
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	b36b      	cbz	r3, 80092c8 <__swbuf_r+0x84>
 800926c:	6923      	ldr	r3, [r4, #16]
 800926e:	6820      	ldr	r0, [r4, #0]
 8009270:	1ac0      	subs	r0, r0, r3
 8009272:	6963      	ldr	r3, [r4, #20]
 8009274:	b2f6      	uxtb	r6, r6
 8009276:	4283      	cmp	r3, r0
 8009278:	4637      	mov	r7, r6
 800927a:	dc04      	bgt.n	8009286 <__swbuf_r+0x42>
 800927c:	4621      	mov	r1, r4
 800927e:	4628      	mov	r0, r5
 8009280:	f000 f93c 	bl	80094fc <_fflush_r>
 8009284:	bb30      	cbnz	r0, 80092d4 <__swbuf_r+0x90>
 8009286:	68a3      	ldr	r3, [r4, #8]
 8009288:	3b01      	subs	r3, #1
 800928a:	60a3      	str	r3, [r4, #8]
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	6022      	str	r2, [r4, #0]
 8009292:	701e      	strb	r6, [r3, #0]
 8009294:	6963      	ldr	r3, [r4, #20]
 8009296:	3001      	adds	r0, #1
 8009298:	4283      	cmp	r3, r0
 800929a:	d004      	beq.n	80092a6 <__swbuf_r+0x62>
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	07db      	lsls	r3, r3, #31
 80092a0:	d506      	bpl.n	80092b0 <__swbuf_r+0x6c>
 80092a2:	2e0a      	cmp	r6, #10
 80092a4:	d104      	bne.n	80092b0 <__swbuf_r+0x6c>
 80092a6:	4621      	mov	r1, r4
 80092a8:	4628      	mov	r0, r5
 80092aa:	f000 f927 	bl	80094fc <_fflush_r>
 80092ae:	b988      	cbnz	r0, 80092d4 <__swbuf_r+0x90>
 80092b0:	4638      	mov	r0, r7
 80092b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <__swbuf_r+0x9c>)
 80092b6:	429c      	cmp	r4, r3
 80092b8:	d101      	bne.n	80092be <__swbuf_r+0x7a>
 80092ba:	68ac      	ldr	r4, [r5, #8]
 80092bc:	e7cf      	b.n	800925e <__swbuf_r+0x1a>
 80092be:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <__swbuf_r+0xa0>)
 80092c0:	429c      	cmp	r4, r3
 80092c2:	bf08      	it	eq
 80092c4:	68ec      	ldreq	r4, [r5, #12]
 80092c6:	e7ca      	b.n	800925e <__swbuf_r+0x1a>
 80092c8:	4621      	mov	r1, r4
 80092ca:	4628      	mov	r0, r5
 80092cc:	f000 f81a 	bl	8009304 <__swsetup_r>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d0cb      	beq.n	800926c <__swbuf_r+0x28>
 80092d4:	f04f 37ff 	mov.w	r7, #4294967295
 80092d8:	e7ea      	b.n	80092b0 <__swbuf_r+0x6c>
 80092da:	bf00      	nop
 80092dc:	08009e74 	.word	0x08009e74
 80092e0:	08009e94 	.word	0x08009e94
 80092e4:	08009e54 	.word	0x08009e54

080092e8 <__ascii_wctomb>:
 80092e8:	b149      	cbz	r1, 80092fe <__ascii_wctomb+0x16>
 80092ea:	2aff      	cmp	r2, #255	; 0xff
 80092ec:	bf85      	ittet	hi
 80092ee:	238a      	movhi	r3, #138	; 0x8a
 80092f0:	6003      	strhi	r3, [r0, #0]
 80092f2:	700a      	strbls	r2, [r1, #0]
 80092f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80092f8:	bf98      	it	ls
 80092fa:	2001      	movls	r0, #1
 80092fc:	4770      	bx	lr
 80092fe:	4608      	mov	r0, r1
 8009300:	4770      	bx	lr
	...

08009304 <__swsetup_r>:
 8009304:	4b32      	ldr	r3, [pc, #200]	; (80093d0 <__swsetup_r+0xcc>)
 8009306:	b570      	push	{r4, r5, r6, lr}
 8009308:	681d      	ldr	r5, [r3, #0]
 800930a:	4606      	mov	r6, r0
 800930c:	460c      	mov	r4, r1
 800930e:	b125      	cbz	r5, 800931a <__swsetup_r+0x16>
 8009310:	69ab      	ldr	r3, [r5, #24]
 8009312:	b913      	cbnz	r3, 800931a <__swsetup_r+0x16>
 8009314:	4628      	mov	r0, r5
 8009316:	f000 f985 	bl	8009624 <__sinit>
 800931a:	4b2e      	ldr	r3, [pc, #184]	; (80093d4 <__swsetup_r+0xd0>)
 800931c:	429c      	cmp	r4, r3
 800931e:	d10f      	bne.n	8009340 <__swsetup_r+0x3c>
 8009320:	686c      	ldr	r4, [r5, #4]
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009328:	0719      	lsls	r1, r3, #28
 800932a:	d42c      	bmi.n	8009386 <__swsetup_r+0x82>
 800932c:	06dd      	lsls	r5, r3, #27
 800932e:	d411      	bmi.n	8009354 <__swsetup_r+0x50>
 8009330:	2309      	movs	r3, #9
 8009332:	6033      	str	r3, [r6, #0]
 8009334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	f04f 30ff 	mov.w	r0, #4294967295
 800933e:	e03e      	b.n	80093be <__swsetup_r+0xba>
 8009340:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <__swsetup_r+0xd4>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d101      	bne.n	800934a <__swsetup_r+0x46>
 8009346:	68ac      	ldr	r4, [r5, #8]
 8009348:	e7eb      	b.n	8009322 <__swsetup_r+0x1e>
 800934a:	4b24      	ldr	r3, [pc, #144]	; (80093dc <__swsetup_r+0xd8>)
 800934c:	429c      	cmp	r4, r3
 800934e:	bf08      	it	eq
 8009350:	68ec      	ldreq	r4, [r5, #12]
 8009352:	e7e6      	b.n	8009322 <__swsetup_r+0x1e>
 8009354:	0758      	lsls	r0, r3, #29
 8009356:	d512      	bpl.n	800937e <__swsetup_r+0x7a>
 8009358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800935a:	b141      	cbz	r1, 800936e <__swsetup_r+0x6a>
 800935c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009360:	4299      	cmp	r1, r3
 8009362:	d002      	beq.n	800936a <__swsetup_r+0x66>
 8009364:	4630      	mov	r0, r6
 8009366:	f7ff fb6f 	bl	8008a48 <_free_r>
 800936a:	2300      	movs	r3, #0
 800936c:	6363      	str	r3, [r4, #52]	; 0x34
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	2300      	movs	r3, #0
 8009378:	6063      	str	r3, [r4, #4]
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	f043 0308 	orr.w	r3, r3, #8
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	b94b      	cbnz	r3, 800939e <__swsetup_r+0x9a>
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009394:	d003      	beq.n	800939e <__swsetup_r+0x9a>
 8009396:	4621      	mov	r1, r4
 8009398:	4630      	mov	r0, r6
 800939a:	f000 fa07 	bl	80097ac <__smakebuf_r>
 800939e:	89a0      	ldrh	r0, [r4, #12]
 80093a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093a4:	f010 0301 	ands.w	r3, r0, #1
 80093a8:	d00a      	beq.n	80093c0 <__swsetup_r+0xbc>
 80093aa:	2300      	movs	r3, #0
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	6963      	ldr	r3, [r4, #20]
 80093b0:	425b      	negs	r3, r3
 80093b2:	61a3      	str	r3, [r4, #24]
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	b943      	cbnz	r3, 80093ca <__swsetup_r+0xc6>
 80093b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093bc:	d1ba      	bne.n	8009334 <__swsetup_r+0x30>
 80093be:	bd70      	pop	{r4, r5, r6, pc}
 80093c0:	0781      	lsls	r1, r0, #30
 80093c2:	bf58      	it	pl
 80093c4:	6963      	ldrpl	r3, [r4, #20]
 80093c6:	60a3      	str	r3, [r4, #8]
 80093c8:	e7f4      	b.n	80093b4 <__swsetup_r+0xb0>
 80093ca:	2000      	movs	r0, #0
 80093cc:	e7f7      	b.n	80093be <__swsetup_r+0xba>
 80093ce:	bf00      	nop
 80093d0:	2000001c 	.word	0x2000001c
 80093d4:	08009e74 	.word	0x08009e74
 80093d8:	08009e94 	.word	0x08009e94
 80093dc:	08009e54 	.word	0x08009e54

080093e0 <abort>:
 80093e0:	b508      	push	{r3, lr}
 80093e2:	2006      	movs	r0, #6
 80093e4:	f000 fa52 	bl	800988c <raise>
 80093e8:	2001      	movs	r0, #1
 80093ea:	f7f8 fa41 	bl	8001870 <_exit>
	...

080093f0 <__sflush_r>:
 80093f0:	898a      	ldrh	r2, [r1, #12]
 80093f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f6:	4605      	mov	r5, r0
 80093f8:	0710      	lsls	r0, r2, #28
 80093fa:	460c      	mov	r4, r1
 80093fc:	d458      	bmi.n	80094b0 <__sflush_r+0xc0>
 80093fe:	684b      	ldr	r3, [r1, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	dc05      	bgt.n	8009410 <__sflush_r+0x20>
 8009404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	dc02      	bgt.n	8009410 <__sflush_r+0x20>
 800940a:	2000      	movs	r0, #0
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009412:	2e00      	cmp	r6, #0
 8009414:	d0f9      	beq.n	800940a <__sflush_r+0x1a>
 8009416:	2300      	movs	r3, #0
 8009418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800941c:	682f      	ldr	r7, [r5, #0]
 800941e:	602b      	str	r3, [r5, #0]
 8009420:	d032      	beq.n	8009488 <__sflush_r+0x98>
 8009422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	075a      	lsls	r2, r3, #29
 8009428:	d505      	bpl.n	8009436 <__sflush_r+0x46>
 800942a:	6863      	ldr	r3, [r4, #4]
 800942c:	1ac0      	subs	r0, r0, r3
 800942e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009430:	b10b      	cbz	r3, 8009436 <__sflush_r+0x46>
 8009432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009434:	1ac0      	subs	r0, r0, r3
 8009436:	2300      	movs	r3, #0
 8009438:	4602      	mov	r2, r0
 800943a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800943c:	6a21      	ldr	r1, [r4, #32]
 800943e:	4628      	mov	r0, r5
 8009440:	47b0      	blx	r6
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	d106      	bne.n	8009456 <__sflush_r+0x66>
 8009448:	6829      	ldr	r1, [r5, #0]
 800944a:	291d      	cmp	r1, #29
 800944c:	d82c      	bhi.n	80094a8 <__sflush_r+0xb8>
 800944e:	4a2a      	ldr	r2, [pc, #168]	; (80094f8 <__sflush_r+0x108>)
 8009450:	40ca      	lsrs	r2, r1
 8009452:	07d6      	lsls	r6, r2, #31
 8009454:	d528      	bpl.n	80094a8 <__sflush_r+0xb8>
 8009456:	2200      	movs	r2, #0
 8009458:	6062      	str	r2, [r4, #4]
 800945a:	04d9      	lsls	r1, r3, #19
 800945c:	6922      	ldr	r2, [r4, #16]
 800945e:	6022      	str	r2, [r4, #0]
 8009460:	d504      	bpl.n	800946c <__sflush_r+0x7c>
 8009462:	1c42      	adds	r2, r0, #1
 8009464:	d101      	bne.n	800946a <__sflush_r+0x7a>
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	b903      	cbnz	r3, 800946c <__sflush_r+0x7c>
 800946a:	6560      	str	r0, [r4, #84]	; 0x54
 800946c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800946e:	602f      	str	r7, [r5, #0]
 8009470:	2900      	cmp	r1, #0
 8009472:	d0ca      	beq.n	800940a <__sflush_r+0x1a>
 8009474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009478:	4299      	cmp	r1, r3
 800947a:	d002      	beq.n	8009482 <__sflush_r+0x92>
 800947c:	4628      	mov	r0, r5
 800947e:	f7ff fae3 	bl	8008a48 <_free_r>
 8009482:	2000      	movs	r0, #0
 8009484:	6360      	str	r0, [r4, #52]	; 0x34
 8009486:	e7c1      	b.n	800940c <__sflush_r+0x1c>
 8009488:	6a21      	ldr	r1, [r4, #32]
 800948a:	2301      	movs	r3, #1
 800948c:	4628      	mov	r0, r5
 800948e:	47b0      	blx	r6
 8009490:	1c41      	adds	r1, r0, #1
 8009492:	d1c7      	bne.n	8009424 <__sflush_r+0x34>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0c4      	beq.n	8009424 <__sflush_r+0x34>
 800949a:	2b1d      	cmp	r3, #29
 800949c:	d001      	beq.n	80094a2 <__sflush_r+0xb2>
 800949e:	2b16      	cmp	r3, #22
 80094a0:	d101      	bne.n	80094a6 <__sflush_r+0xb6>
 80094a2:	602f      	str	r7, [r5, #0]
 80094a4:	e7b1      	b.n	800940a <__sflush_r+0x1a>
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	e7ad      	b.n	800940c <__sflush_r+0x1c>
 80094b0:	690f      	ldr	r7, [r1, #16]
 80094b2:	2f00      	cmp	r7, #0
 80094b4:	d0a9      	beq.n	800940a <__sflush_r+0x1a>
 80094b6:	0793      	lsls	r3, r2, #30
 80094b8:	680e      	ldr	r6, [r1, #0]
 80094ba:	bf08      	it	eq
 80094bc:	694b      	ldreq	r3, [r1, #20]
 80094be:	600f      	str	r7, [r1, #0]
 80094c0:	bf18      	it	ne
 80094c2:	2300      	movne	r3, #0
 80094c4:	eba6 0807 	sub.w	r8, r6, r7
 80094c8:	608b      	str	r3, [r1, #8]
 80094ca:	f1b8 0f00 	cmp.w	r8, #0
 80094ce:	dd9c      	ble.n	800940a <__sflush_r+0x1a>
 80094d0:	6a21      	ldr	r1, [r4, #32]
 80094d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094d4:	4643      	mov	r3, r8
 80094d6:	463a      	mov	r2, r7
 80094d8:	4628      	mov	r0, r5
 80094da:	47b0      	blx	r6
 80094dc:	2800      	cmp	r0, #0
 80094de:	dc06      	bgt.n	80094ee <__sflush_r+0xfe>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	e78e      	b.n	800940c <__sflush_r+0x1c>
 80094ee:	4407      	add	r7, r0
 80094f0:	eba8 0800 	sub.w	r8, r8, r0
 80094f4:	e7e9      	b.n	80094ca <__sflush_r+0xda>
 80094f6:	bf00      	nop
 80094f8:	20400001 	.word	0x20400001

080094fc <_fflush_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	690b      	ldr	r3, [r1, #16]
 8009500:	4605      	mov	r5, r0
 8009502:	460c      	mov	r4, r1
 8009504:	b913      	cbnz	r3, 800950c <_fflush_r+0x10>
 8009506:	2500      	movs	r5, #0
 8009508:	4628      	mov	r0, r5
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	b118      	cbz	r0, 8009516 <_fflush_r+0x1a>
 800950e:	6983      	ldr	r3, [r0, #24]
 8009510:	b90b      	cbnz	r3, 8009516 <_fflush_r+0x1a>
 8009512:	f000 f887 	bl	8009624 <__sinit>
 8009516:	4b14      	ldr	r3, [pc, #80]	; (8009568 <_fflush_r+0x6c>)
 8009518:	429c      	cmp	r4, r3
 800951a:	d11b      	bne.n	8009554 <_fflush_r+0x58>
 800951c:	686c      	ldr	r4, [r5, #4]
 800951e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0ef      	beq.n	8009506 <_fflush_r+0xa>
 8009526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009528:	07d0      	lsls	r0, r2, #31
 800952a:	d404      	bmi.n	8009536 <_fflush_r+0x3a>
 800952c:	0599      	lsls	r1, r3, #22
 800952e:	d402      	bmi.n	8009536 <_fflush_r+0x3a>
 8009530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009532:	f000 f915 	bl	8009760 <__retarget_lock_acquire_recursive>
 8009536:	4628      	mov	r0, r5
 8009538:	4621      	mov	r1, r4
 800953a:	f7ff ff59 	bl	80093f0 <__sflush_r>
 800953e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009540:	07da      	lsls	r2, r3, #31
 8009542:	4605      	mov	r5, r0
 8009544:	d4e0      	bmi.n	8009508 <_fflush_r+0xc>
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	059b      	lsls	r3, r3, #22
 800954a:	d4dd      	bmi.n	8009508 <_fflush_r+0xc>
 800954c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800954e:	f000 f908 	bl	8009762 <__retarget_lock_release_recursive>
 8009552:	e7d9      	b.n	8009508 <_fflush_r+0xc>
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <_fflush_r+0x70>)
 8009556:	429c      	cmp	r4, r3
 8009558:	d101      	bne.n	800955e <_fflush_r+0x62>
 800955a:	68ac      	ldr	r4, [r5, #8]
 800955c:	e7df      	b.n	800951e <_fflush_r+0x22>
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <_fflush_r+0x74>)
 8009560:	429c      	cmp	r4, r3
 8009562:	bf08      	it	eq
 8009564:	68ec      	ldreq	r4, [r5, #12]
 8009566:	e7da      	b.n	800951e <_fflush_r+0x22>
 8009568:	08009e74 	.word	0x08009e74
 800956c:	08009e94 	.word	0x08009e94
 8009570:	08009e54 	.word	0x08009e54

08009574 <std>:
 8009574:	2300      	movs	r3, #0
 8009576:	b510      	push	{r4, lr}
 8009578:	4604      	mov	r4, r0
 800957a:	e9c0 3300 	strd	r3, r3, [r0]
 800957e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009582:	6083      	str	r3, [r0, #8]
 8009584:	8181      	strh	r1, [r0, #12]
 8009586:	6643      	str	r3, [r0, #100]	; 0x64
 8009588:	81c2      	strh	r2, [r0, #14]
 800958a:	6183      	str	r3, [r0, #24]
 800958c:	4619      	mov	r1, r3
 800958e:	2208      	movs	r2, #8
 8009590:	305c      	adds	r0, #92	; 0x5c
 8009592:	f7fd fba5 	bl	8006ce0 <memset>
 8009596:	4b05      	ldr	r3, [pc, #20]	; (80095ac <std+0x38>)
 8009598:	6263      	str	r3, [r4, #36]	; 0x24
 800959a:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <std+0x3c>)
 800959c:	62a3      	str	r3, [r4, #40]	; 0x28
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <std+0x40>)
 80095a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <std+0x44>)
 80095a4:	6224      	str	r4, [r4, #32]
 80095a6:	6323      	str	r3, [r4, #48]	; 0x30
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	bf00      	nop
 80095ac:	080098c5 	.word	0x080098c5
 80095b0:	080098e7 	.word	0x080098e7
 80095b4:	0800991f 	.word	0x0800991f
 80095b8:	08009943 	.word	0x08009943

080095bc <_cleanup_r>:
 80095bc:	4901      	ldr	r1, [pc, #4]	; (80095c4 <_cleanup_r+0x8>)
 80095be:	f000 b8af 	b.w	8009720 <_fwalk_reent>
 80095c2:	bf00      	nop
 80095c4:	080094fd 	.word	0x080094fd

080095c8 <__sfmoreglue>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	1e4a      	subs	r2, r1, #1
 80095cc:	2568      	movs	r5, #104	; 0x68
 80095ce:	4355      	muls	r5, r2
 80095d0:	460e      	mov	r6, r1
 80095d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095d6:	f7ff fa87 	bl	8008ae8 <_malloc_r>
 80095da:	4604      	mov	r4, r0
 80095dc:	b140      	cbz	r0, 80095f0 <__sfmoreglue+0x28>
 80095de:	2100      	movs	r1, #0
 80095e0:	e9c0 1600 	strd	r1, r6, [r0]
 80095e4:	300c      	adds	r0, #12
 80095e6:	60a0      	str	r0, [r4, #8]
 80095e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095ec:	f7fd fb78 	bl	8006ce0 <memset>
 80095f0:	4620      	mov	r0, r4
 80095f2:	bd70      	pop	{r4, r5, r6, pc}

080095f4 <__sfp_lock_acquire>:
 80095f4:	4801      	ldr	r0, [pc, #4]	; (80095fc <__sfp_lock_acquire+0x8>)
 80095f6:	f000 b8b3 	b.w	8009760 <__retarget_lock_acquire_recursive>
 80095fa:	bf00      	nop
 80095fc:	20000418 	.word	0x20000418

08009600 <__sfp_lock_release>:
 8009600:	4801      	ldr	r0, [pc, #4]	; (8009608 <__sfp_lock_release+0x8>)
 8009602:	f000 b8ae 	b.w	8009762 <__retarget_lock_release_recursive>
 8009606:	bf00      	nop
 8009608:	20000418 	.word	0x20000418

0800960c <__sinit_lock_acquire>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__sinit_lock_acquire+0x8>)
 800960e:	f000 b8a7 	b.w	8009760 <__retarget_lock_acquire_recursive>
 8009612:	bf00      	nop
 8009614:	20000413 	.word	0x20000413

08009618 <__sinit_lock_release>:
 8009618:	4801      	ldr	r0, [pc, #4]	; (8009620 <__sinit_lock_release+0x8>)
 800961a:	f000 b8a2 	b.w	8009762 <__retarget_lock_release_recursive>
 800961e:	bf00      	nop
 8009620:	20000413 	.word	0x20000413

08009624 <__sinit>:
 8009624:	b510      	push	{r4, lr}
 8009626:	4604      	mov	r4, r0
 8009628:	f7ff fff0 	bl	800960c <__sinit_lock_acquire>
 800962c:	69a3      	ldr	r3, [r4, #24]
 800962e:	b11b      	cbz	r3, 8009638 <__sinit+0x14>
 8009630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009634:	f7ff bff0 	b.w	8009618 <__sinit_lock_release>
 8009638:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800963c:	6523      	str	r3, [r4, #80]	; 0x50
 800963e:	4b13      	ldr	r3, [pc, #76]	; (800968c <__sinit+0x68>)
 8009640:	4a13      	ldr	r2, [pc, #76]	; (8009690 <__sinit+0x6c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	62a2      	str	r2, [r4, #40]	; 0x28
 8009646:	42a3      	cmp	r3, r4
 8009648:	bf04      	itt	eq
 800964a:	2301      	moveq	r3, #1
 800964c:	61a3      	streq	r3, [r4, #24]
 800964e:	4620      	mov	r0, r4
 8009650:	f000 f820 	bl	8009694 <__sfp>
 8009654:	6060      	str	r0, [r4, #4]
 8009656:	4620      	mov	r0, r4
 8009658:	f000 f81c 	bl	8009694 <__sfp>
 800965c:	60a0      	str	r0, [r4, #8]
 800965e:	4620      	mov	r0, r4
 8009660:	f000 f818 	bl	8009694 <__sfp>
 8009664:	2200      	movs	r2, #0
 8009666:	60e0      	str	r0, [r4, #12]
 8009668:	2104      	movs	r1, #4
 800966a:	6860      	ldr	r0, [r4, #4]
 800966c:	f7ff ff82 	bl	8009574 <std>
 8009670:	68a0      	ldr	r0, [r4, #8]
 8009672:	2201      	movs	r2, #1
 8009674:	2109      	movs	r1, #9
 8009676:	f7ff ff7d 	bl	8009574 <std>
 800967a:	68e0      	ldr	r0, [r4, #12]
 800967c:	2202      	movs	r2, #2
 800967e:	2112      	movs	r1, #18
 8009680:	f7ff ff78 	bl	8009574 <std>
 8009684:	2301      	movs	r3, #1
 8009686:	61a3      	str	r3, [r4, #24]
 8009688:	e7d2      	b.n	8009630 <__sinit+0xc>
 800968a:	bf00      	nop
 800968c:	08009ad4 	.word	0x08009ad4
 8009690:	080095bd 	.word	0x080095bd

08009694 <__sfp>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	4607      	mov	r7, r0
 8009698:	f7ff ffac 	bl	80095f4 <__sfp_lock_acquire>
 800969c:	4b1e      	ldr	r3, [pc, #120]	; (8009718 <__sfp+0x84>)
 800969e:	681e      	ldr	r6, [r3, #0]
 80096a0:	69b3      	ldr	r3, [r6, #24]
 80096a2:	b913      	cbnz	r3, 80096aa <__sfp+0x16>
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff ffbd 	bl	8009624 <__sinit>
 80096aa:	3648      	adds	r6, #72	; 0x48
 80096ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	d503      	bpl.n	80096bc <__sfp+0x28>
 80096b4:	6833      	ldr	r3, [r6, #0]
 80096b6:	b30b      	cbz	r3, 80096fc <__sfp+0x68>
 80096b8:	6836      	ldr	r6, [r6, #0]
 80096ba:	e7f7      	b.n	80096ac <__sfp+0x18>
 80096bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096c0:	b9d5      	cbnz	r5, 80096f8 <__sfp+0x64>
 80096c2:	4b16      	ldr	r3, [pc, #88]	; (800971c <__sfp+0x88>)
 80096c4:	60e3      	str	r3, [r4, #12]
 80096c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096ca:	6665      	str	r5, [r4, #100]	; 0x64
 80096cc:	f000 f847 	bl	800975e <__retarget_lock_init_recursive>
 80096d0:	f7ff ff96 	bl	8009600 <__sfp_lock_release>
 80096d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096dc:	6025      	str	r5, [r4, #0]
 80096de:	61a5      	str	r5, [r4, #24]
 80096e0:	2208      	movs	r2, #8
 80096e2:	4629      	mov	r1, r5
 80096e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096e8:	f7fd fafa 	bl	8006ce0 <memset>
 80096ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096f4:	4620      	mov	r0, r4
 80096f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f8:	3468      	adds	r4, #104	; 0x68
 80096fa:	e7d9      	b.n	80096b0 <__sfp+0x1c>
 80096fc:	2104      	movs	r1, #4
 80096fe:	4638      	mov	r0, r7
 8009700:	f7ff ff62 	bl	80095c8 <__sfmoreglue>
 8009704:	4604      	mov	r4, r0
 8009706:	6030      	str	r0, [r6, #0]
 8009708:	2800      	cmp	r0, #0
 800970a:	d1d5      	bne.n	80096b8 <__sfp+0x24>
 800970c:	f7ff ff78 	bl	8009600 <__sfp_lock_release>
 8009710:	230c      	movs	r3, #12
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	e7ee      	b.n	80096f4 <__sfp+0x60>
 8009716:	bf00      	nop
 8009718:	08009ad4 	.word	0x08009ad4
 800971c:	ffff0001 	.word	0xffff0001

08009720 <_fwalk_reent>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	4606      	mov	r6, r0
 8009726:	4688      	mov	r8, r1
 8009728:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800972c:	2700      	movs	r7, #0
 800972e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009732:	f1b9 0901 	subs.w	r9, r9, #1
 8009736:	d505      	bpl.n	8009744 <_fwalk_reent+0x24>
 8009738:	6824      	ldr	r4, [r4, #0]
 800973a:	2c00      	cmp	r4, #0
 800973c:	d1f7      	bne.n	800972e <_fwalk_reent+0xe>
 800973e:	4638      	mov	r0, r7
 8009740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009744:	89ab      	ldrh	r3, [r5, #12]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d907      	bls.n	800975a <_fwalk_reent+0x3a>
 800974a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800974e:	3301      	adds	r3, #1
 8009750:	d003      	beq.n	800975a <_fwalk_reent+0x3a>
 8009752:	4629      	mov	r1, r5
 8009754:	4630      	mov	r0, r6
 8009756:	47c0      	blx	r8
 8009758:	4307      	orrs	r7, r0
 800975a:	3568      	adds	r5, #104	; 0x68
 800975c:	e7e9      	b.n	8009732 <_fwalk_reent+0x12>

0800975e <__retarget_lock_init_recursive>:
 800975e:	4770      	bx	lr

08009760 <__retarget_lock_acquire_recursive>:
 8009760:	4770      	bx	lr

08009762 <__retarget_lock_release_recursive>:
 8009762:	4770      	bx	lr

08009764 <__swhatbuf_r>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	460e      	mov	r6, r1
 8009768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976c:	2900      	cmp	r1, #0
 800976e:	b096      	sub	sp, #88	; 0x58
 8009770:	4614      	mov	r4, r2
 8009772:	461d      	mov	r5, r3
 8009774:	da07      	bge.n	8009786 <__swhatbuf_r+0x22>
 8009776:	2300      	movs	r3, #0
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	89b3      	ldrh	r3, [r6, #12]
 800977c:	061a      	lsls	r2, r3, #24
 800977e:	d410      	bmi.n	80097a2 <__swhatbuf_r+0x3e>
 8009780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009784:	e00e      	b.n	80097a4 <__swhatbuf_r+0x40>
 8009786:	466a      	mov	r2, sp
 8009788:	f000 f902 	bl	8009990 <_fstat_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	dbf2      	blt.n	8009776 <__swhatbuf_r+0x12>
 8009790:	9a01      	ldr	r2, [sp, #4]
 8009792:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009796:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800979a:	425a      	negs	r2, r3
 800979c:	415a      	adcs	r2, r3
 800979e:	602a      	str	r2, [r5, #0]
 80097a0:	e7ee      	b.n	8009780 <__swhatbuf_r+0x1c>
 80097a2:	2340      	movs	r3, #64	; 0x40
 80097a4:	2000      	movs	r0, #0
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	b016      	add	sp, #88	; 0x58
 80097aa:	bd70      	pop	{r4, r5, r6, pc}

080097ac <__smakebuf_r>:
 80097ac:	898b      	ldrh	r3, [r1, #12]
 80097ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097b0:	079d      	lsls	r5, r3, #30
 80097b2:	4606      	mov	r6, r0
 80097b4:	460c      	mov	r4, r1
 80097b6:	d507      	bpl.n	80097c8 <__smakebuf_r+0x1c>
 80097b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	6123      	str	r3, [r4, #16]
 80097c0:	2301      	movs	r3, #1
 80097c2:	6163      	str	r3, [r4, #20]
 80097c4:	b002      	add	sp, #8
 80097c6:	bd70      	pop	{r4, r5, r6, pc}
 80097c8:	ab01      	add	r3, sp, #4
 80097ca:	466a      	mov	r2, sp
 80097cc:	f7ff ffca 	bl	8009764 <__swhatbuf_r>
 80097d0:	9900      	ldr	r1, [sp, #0]
 80097d2:	4605      	mov	r5, r0
 80097d4:	4630      	mov	r0, r6
 80097d6:	f7ff f987 	bl	8008ae8 <_malloc_r>
 80097da:	b948      	cbnz	r0, 80097f0 <__smakebuf_r+0x44>
 80097dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e0:	059a      	lsls	r2, r3, #22
 80097e2:	d4ef      	bmi.n	80097c4 <__smakebuf_r+0x18>
 80097e4:	f023 0303 	bic.w	r3, r3, #3
 80097e8:	f043 0302 	orr.w	r3, r3, #2
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	e7e3      	b.n	80097b8 <__smakebuf_r+0xc>
 80097f0:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <__smakebuf_r+0x7c>)
 80097f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	6020      	str	r0, [r4, #0]
 80097f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	9b00      	ldr	r3, [sp, #0]
 8009800:	6163      	str	r3, [r4, #20]
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	6120      	str	r0, [r4, #16]
 8009806:	b15b      	cbz	r3, 8009820 <__smakebuf_r+0x74>
 8009808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800980c:	4630      	mov	r0, r6
 800980e:	f000 f8d1 	bl	80099b4 <_isatty_r>
 8009812:	b128      	cbz	r0, 8009820 <__smakebuf_r+0x74>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	f023 0303 	bic.w	r3, r3, #3
 800981a:	f043 0301 	orr.w	r3, r3, #1
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	89a0      	ldrh	r0, [r4, #12]
 8009822:	4305      	orrs	r5, r0
 8009824:	81a5      	strh	r5, [r4, #12]
 8009826:	e7cd      	b.n	80097c4 <__smakebuf_r+0x18>
 8009828:	080095bd 	.word	0x080095bd

0800982c <_malloc_usable_size_r>:
 800982c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009830:	1f18      	subs	r0, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfbc      	itt	lt
 8009836:	580b      	ldrlt	r3, [r1, r0]
 8009838:	18c0      	addlt	r0, r0, r3
 800983a:	4770      	bx	lr

0800983c <_raise_r>:
 800983c:	291f      	cmp	r1, #31
 800983e:	b538      	push	{r3, r4, r5, lr}
 8009840:	4604      	mov	r4, r0
 8009842:	460d      	mov	r5, r1
 8009844:	d904      	bls.n	8009850 <_raise_r+0x14>
 8009846:	2316      	movs	r3, #22
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	f04f 30ff 	mov.w	r0, #4294967295
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009852:	b112      	cbz	r2, 800985a <_raise_r+0x1e>
 8009854:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009858:	b94b      	cbnz	r3, 800986e <_raise_r+0x32>
 800985a:	4620      	mov	r0, r4
 800985c:	f000 f830 	bl	80098c0 <_getpid_r>
 8009860:	462a      	mov	r2, r5
 8009862:	4601      	mov	r1, r0
 8009864:	4620      	mov	r0, r4
 8009866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986a:	f000 b817 	b.w	800989c <_kill_r>
 800986e:	2b01      	cmp	r3, #1
 8009870:	d00a      	beq.n	8009888 <_raise_r+0x4c>
 8009872:	1c59      	adds	r1, r3, #1
 8009874:	d103      	bne.n	800987e <_raise_r+0x42>
 8009876:	2316      	movs	r3, #22
 8009878:	6003      	str	r3, [r0, #0]
 800987a:	2001      	movs	r0, #1
 800987c:	e7e7      	b.n	800984e <_raise_r+0x12>
 800987e:	2400      	movs	r4, #0
 8009880:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009884:	4628      	mov	r0, r5
 8009886:	4798      	blx	r3
 8009888:	2000      	movs	r0, #0
 800988a:	e7e0      	b.n	800984e <_raise_r+0x12>

0800988c <raise>:
 800988c:	4b02      	ldr	r3, [pc, #8]	; (8009898 <raise+0xc>)
 800988e:	4601      	mov	r1, r0
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f7ff bfd3 	b.w	800983c <_raise_r>
 8009896:	bf00      	nop
 8009898:	2000001c 	.word	0x2000001c

0800989c <_kill_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d07      	ldr	r5, [pc, #28]	; (80098bc <_kill_r+0x20>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	4611      	mov	r1, r2
 80098a8:	602b      	str	r3, [r5, #0]
 80098aa:	f7f7 ffd1 	bl	8001850 <_kill>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d102      	bne.n	80098b8 <_kill_r+0x1c>
 80098b2:	682b      	ldr	r3, [r5, #0]
 80098b4:	b103      	cbz	r3, 80098b8 <_kill_r+0x1c>
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	bf00      	nop
 80098bc:	2000040c 	.word	0x2000040c

080098c0 <_getpid_r>:
 80098c0:	f7f7 bfbe 	b.w	8001840 <_getpid>

080098c4 <__sread>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	460c      	mov	r4, r1
 80098c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098cc:	f000 f894 	bl	80099f8 <_read_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	bfab      	itete	ge
 80098d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098d6:	89a3      	ldrhlt	r3, [r4, #12]
 80098d8:	181b      	addge	r3, r3, r0
 80098da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098de:	bfac      	ite	ge
 80098e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80098e2:	81a3      	strhlt	r3, [r4, #12]
 80098e4:	bd10      	pop	{r4, pc}

080098e6 <__swrite>:
 80098e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ea:	461f      	mov	r7, r3
 80098ec:	898b      	ldrh	r3, [r1, #12]
 80098ee:	05db      	lsls	r3, r3, #23
 80098f0:	4605      	mov	r5, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	4616      	mov	r6, r2
 80098f6:	d505      	bpl.n	8009904 <__swrite+0x1e>
 80098f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fc:	2302      	movs	r3, #2
 80098fe:	2200      	movs	r2, #0
 8009900:	f000 f868 	bl	80099d4 <_lseek_r>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	4632      	mov	r2, r6
 8009912:	463b      	mov	r3, r7
 8009914:	4628      	mov	r0, r5
 8009916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800991a:	f000 b817 	b.w	800994c <_write_r>

0800991e <__sseek>:
 800991e:	b510      	push	{r4, lr}
 8009920:	460c      	mov	r4, r1
 8009922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009926:	f000 f855 	bl	80099d4 <_lseek_r>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	bf15      	itete	ne
 8009930:	6560      	strne	r0, [r4, #84]	; 0x54
 8009932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800993a:	81a3      	strheq	r3, [r4, #12]
 800993c:	bf18      	it	ne
 800993e:	81a3      	strhne	r3, [r4, #12]
 8009940:	bd10      	pop	{r4, pc}

08009942 <__sclose>:
 8009942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009946:	f000 b813 	b.w	8009970 <_close_r>
	...

0800994c <_write_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_write_r+0x20>)
 8009950:	4604      	mov	r4, r0
 8009952:	4608      	mov	r0, r1
 8009954:	4611      	mov	r1, r2
 8009956:	2200      	movs	r2, #0
 8009958:	602a      	str	r2, [r5, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f7f7 ffaf 	bl	80018be <_write>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_write_r+0x1e>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_write_r+0x1e>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	2000040c 	.word	0x2000040c

08009970 <_close_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d06      	ldr	r5, [pc, #24]	; (800998c <_close_r+0x1c>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7f7 ffbb 	bl	80018f6 <_close>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_close_r+0x1a>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_close_r+0x1a>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	2000040c 	.word	0x2000040c

08009990 <_fstat_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_fstat_r+0x20>)
 8009994:	2300      	movs	r3, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	f7f7 ffb6 	bl	800190e <_fstat>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	d102      	bne.n	80099ac <_fstat_r+0x1c>
 80099a6:	682b      	ldr	r3, [r5, #0]
 80099a8:	b103      	cbz	r3, 80099ac <_fstat_r+0x1c>
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	bd38      	pop	{r3, r4, r5, pc}
 80099ae:	bf00      	nop
 80099b0:	2000040c 	.word	0x2000040c

080099b4 <_isatty_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d06      	ldr	r5, [pc, #24]	; (80099d0 <_isatty_r+0x1c>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	f7f7 ffb5 	bl	800192e <_isatty>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_isatty_r+0x1a>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_isatty_r+0x1a>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	2000040c 	.word	0x2000040c

080099d4 <_lseek_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	; (80099f4 <_lseek_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7f7 ffae 	bl	8001944 <_lseek>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_lseek_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_lseek_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	2000040c 	.word	0x2000040c

080099f8 <_read_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	; (8009a18 <_read_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f7 ff3c 	bl	8001884 <_read>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_read_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_read_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	2000040c 	.word	0x2000040c

08009a1c <_init>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	bf00      	nop
 8009a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a22:	bc08      	pop	{r3}
 8009a24:	469e      	mov	lr, r3
 8009a26:	4770      	bx	lr

08009a28 <_fini>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	bf00      	nop
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr
