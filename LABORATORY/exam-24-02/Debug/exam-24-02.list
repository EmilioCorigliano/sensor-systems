
exam-24-02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800a7a0  0800a7a0  0001a7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abdc  0800abdc  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800abdc  0800abdc  0001abdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abe4  0800abe4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abe4  0800abe4  0001abe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800abec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000020c  0800adf8  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800adf8  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013eb2  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002572  00000000  00000000  000340ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00036660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00037700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e91  00000000  00000000  000386f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013894  00000000  00000000  00050581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918c2  00000000  00000000  00063e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f56d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005844  00000000  00000000  000f572c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a784 	.word	0x0800a784

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	0800a784 	.word	0x0800a784

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <lcd_enable>:
#define LCD_D7 GPIOB,GPIO_PIN_15
#define LCD_BL_ON GPIOA,GPIO_PIN_4


//  LCD code
void lcd_enable(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <lcd_enable+0x38>)
 8000eba:	f001 fffd 	bl	8002eb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f001 f9b6 	bl	8002230 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <lcd_enable+0x38>)
 8000eca:	f001 fff5 	bl	8002eb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f001 f9ae 	bl	8002230 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <lcd_enable+0x38>)
 8000eda:	f001 ffed 	bl	8002eb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f001 f9a6 	bl	8002230 <HAL_Delay>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40020400 	.word	0x40020400

08000eec <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f04:	4816      	ldr	r0, [pc, #88]	; (8000f60 <lcd_write4+0x74>)
 8000f06:	f001 ffd7 	bl	8002eb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	105b      	asrs	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1c:	4810      	ldr	r0, [pc, #64]	; (8000f60 <lcd_write4+0x74>)
 8000f1e:	f001 ffcb 	bl	8002eb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	109b      	asrs	r3, r3, #2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <lcd_write4+0x74>)
 8000f36:	f001 ffbf 	bl	8002eb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	10db      	asrs	r3, r3, #3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <lcd_write4+0x74>)
 8000f4e:	f001 ffb3 	bl	8002eb8 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8000f52:	f7ff ffad 	bl	8000eb0 <lcd_enable>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40020400 	.word	0x40020400

08000f64 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ffb9 	bl	8000eec <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffb5 	bl	8000eec <lcd_write4>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8000f96:	2200      	movs	r2, #0
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <lcd_command+0x24>)
 8000f9c:	f001 ff8c 	bl	8002eb8 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ffde 	bl	8000f64 <lcd_write>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <lcd_data>:
void lcd_clear(){
	lcd_command(LCD_CLEAR_COMMAND);
}

//  send data to the LCD
void lcd_data(uint8_t byte){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <lcd_data+0x24>)
 8000fc4:	f001 ff78 	bl	8002eb8 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffca 	bl	8000f64 <lcd_write>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40020400 	.word	0x40020400

08000fdc <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	79ba      	ldrb	r2, [r7, #6]
 8000ff2:	3201      	adds	r2, #1
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	2b4f      	cmp	r3, #79	; 0x4f
 8000ffa:	dc10      	bgt.n	800101e <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	461a      	mov	r2, r3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	b2da      	uxtb	r2, r3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4413      	add	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	b25b      	sxtb	r3, r3
 8001010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001014:	b25b      	sxtb	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffb7 	bl	8000f8c <lcd_command>
	}
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff f8d6 	bl	80001e0 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8001038:	e006      	b.n	8001048 <lcd_print+0x22>
		lcd_data(*string++);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffb6 	bl	8000fb4 <lcd_data>
	while (size--){
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	60fa      	str	r2, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f3      	bne.n	800103a <lcd_print+0x14>
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <lcd_println>:

void lcd_println(char string[], uint8_t row){
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <lcd_println+0x6c>)
 800106a:	f107 0408 	add.w	r4, r7, #8
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f8b1 	bl	80001e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	2b10      	cmp	r3, #16
 8001086:	dd0c      	ble.n	80010a2 <lcd_println+0x46>
		size = 16;
 8001088:	2310      	movs	r3, #16
 800108a:	61fb      	str	r3, [r7, #28]

	while (size--){
 800108c:	e009      	b.n	80010a2 <lcd_println+0x46>
		line[size] = string[size];
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	7819      	ldrb	r1, [r3, #0]
 8001096:	f107 0208 	add.w	r2, r7, #8
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	while (size--){
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	61fa      	str	r2, [r7, #28]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f0      	bne.n	800108e <lcd_println+0x32>
	}
	setCursor(0, row);
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	4619      	mov	r1, r3
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ff93 	bl	8000fdc <setCursor>
	lcd_print(line);
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ffb3 	bl	8001026 <lcd_print>
}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdb0      	pop	{r4, r5, r7, pc}
 80010c8:	0800a7a0 	.word	0x0800a7a0

080010cc <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff4c 	bl	8000f8c <lcd_command>
	for (int i = 0; i<8; i++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e009      	b.n	800110e <writeCustomChar+0x42>
		lcd_data(map[i]);	
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff56 	bl	8000fb4 <lcd_data>
	for (int i = 0; i<8; i++){
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b07      	cmp	r3, #7
 8001112:	ddf2      	ble.n	80010fa <writeCustomChar+0x2e>
	}
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8001124:	490a      	ldr	r1, [pc, #40]	; (8001150 <loadCustomChars+0x30>)
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff ffd0 	bl	80010cc <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 800112c:	4909      	ldr	r1, [pc, #36]	; (8001154 <loadCustomChars+0x34>)
 800112e:	2002      	movs	r0, #2
 8001130:	f7ff ffcc 	bl	80010cc <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8001134:	4908      	ldr	r1, [pc, #32]	; (8001158 <loadCustomChars+0x38>)
 8001136:	2003      	movs	r0, #3
 8001138:	f7ff ffc8 	bl	80010cc <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <loadCustomChars+0x3c>)
 800113e:	2004      	movs	r0, #4
 8001140:	f7ff ffc4 	bl	80010cc <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8001144:	4906      	ldr	r1, [pc, #24]	; (8001160 <loadCustomChars+0x40>)
 8001146:	2005      	movs	r0, #5
 8001148:	f7ff ffc0 	bl	80010cc <writeCustomChar>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000010 	.word	0x20000010
 800115c:	20000018 	.word	0x20000018
 8001160:	20000020 	.word	0x20000020

08001164 <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8001168:	2032      	movs	r0, #50	; 0x32
 800116a:	f001 f861 	bl	8002230 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2104      	movs	r1, #4
 8001172:	481f      	ldr	r0, [pc, #124]	; (80011f0 <lcd_initialize+0x8c>)
 8001174:	f001 fea0 	bl	8002eb8 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic

	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8001178:	2003      	movs	r0, #3
 800117a:	f7ff feb7 	bl	8000eec <lcd_write4>
	HAL_Delay(5);
 800117e:	2005      	movs	r0, #5
 8001180:	f001 f856 	bl	8002230 <HAL_Delay>
	lcd_write4(0x03);
 8001184:	2003      	movs	r0, #3
 8001186:	f7ff feb1 	bl	8000eec <lcd_write4>
	HAL_Delay(5);
 800118a:	2005      	movs	r0, #5
 800118c:	f001 f850 	bl	8002230 <HAL_Delay>
	lcd_write4(0x03);
 8001190:	2003      	movs	r0, #3
 8001192:	f7ff feab 	bl	8000eec <lcd_write4>
	HAL_Delay(5);
 8001196:	2005      	movs	r0, #5
 8001198:	f001 f84a 	bl	8002230 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff fea5 	bl	8000eec <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 80011a2:	2028      	movs	r0, #40	; 0x28
 80011a4:	f7ff fede 	bl	8000f64 <lcd_write>
	HAL_Delay(5);
 80011a8:	2005      	movs	r0, #5
 80011aa:	f001 f841 	bl	8002230 <HAL_Delay>
	lcd_write(0x08); //display off;
 80011ae:	2008      	movs	r0, #8
 80011b0:	f7ff fed8 	bl	8000f64 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fed5 	bl	8000f64 <lcd_write>
	lcd_write(0x06); //entry mode set: increment
 80011ba:	2006      	movs	r0, #6
 80011bc:	f7ff fed2 	bl	8000f64 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 80011c0:	2201      	movs	r2, #1
 80011c2:	2110      	movs	r1, #16
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <lcd_initialize+0x90>)
 80011c6:	f001 fe77 	bl	8002eb8 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <lcd_initialize+0x94>)
 80011cc:	220c      	movs	r2, #12
 80011ce:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <lcd_initialize+0x94>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fec5 	bl	8000f64 <lcd_write>
	lcd_write(0x02); //go home
 80011da:	2002      	movs	r0, #2
 80011dc:	f7ff fec2 	bl	8000f64 <lcd_write>
	HAL_Delay(2);
 80011e0:	2002      	movs	r0, #2
 80011e2:	f001 f825 	bl	8002230 <HAL_Delay>
	loadCustomChars();
 80011e6:	f7ff ff9b 	bl	8001120 <loadCustomChars>

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020000 	.word	0x40020000
 80011f8:	20000228 	.word	0x20000228

080011fc <lcd_backlight_ON>:

void lcd_backlight_ON(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2110      	movs	r1, #16
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <lcd_backlight_ON+0x14>)
 8001206:	f001 fe57 	bl	8002eb8 <HAL_GPIO_WritePin>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020000 	.word	0x40020000

08001214 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001218:	f000 ff98 	bl	800214c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800121c:	f000 f83c 	bl	8001298 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_DMA_Init();
 8001220:	f000 fa12 	bl	8001648 <MX_DMA_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001224:	f000 fa38 	bl	8001698 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001228:	f000 f9e4 	bl	80015f4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800122c:	f000 f920 	bl	8001470 <MX_TIM2_Init>
	MX_TIM11_Init();
 8001230:	f000 f992 	bl	8001558 <MX_TIM11_Init>
	MX_USART1_UART_Init();
 8001234:	f000 f9b4 	bl	80015a0 <MX_USART1_UART_Init>
	MX_DMA_Init();
 8001238:	f000 fa06 	bl	8001648 <MX_DMA_Init>
	MX_I2C1_Init();
 800123c:	f000 f898 	bl	8001370 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001240:	f000 f8c4 	bl	80013cc <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// Tx: Starting the timer in order to send the data at the given baudrate
	HAL_TIM_Base_Start_IT(&htim11);
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <main+0x6c>)
 8001246:	f004 fc35 	bl	8005ab4 <HAL_TIM_Base_Start_IT>

	//// Accelerometer: start timer to sample sensor
	HAL_TIM_Base_Start_IT(&htim1);
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <main+0x70>)
 800124c:	f004 fc32 	bl	8005ab4 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart1, &tempRecv, sizeof(float));
 8001250:	2204      	movs	r2, #4
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <main+0x74>)
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <main+0x78>)
 8001256:	f005 fce4 	bl	8006c22 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	// LCD
	lcd_initialize();
 800125a:	f7ff ff83 	bl	8001164 <lcd_initialize>
	lcd_backlight_ON();
 800125e:	f7ff ffcd 	bl	80011fc <lcd_backlight_ON>

	while (1) {
		// scans all the keyboard
		//scanKeyboard();
		if (dataToBeSent) {
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <main+0x7c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0fb      	beq.n	8001262 <main+0x4e>
			sendSampleDMA(tempSampled);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <main+0x80>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	f000 fb8c 	bl	8001990 <sendSampleDMA>
			dataToBeSent = 0;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <main+0x7c>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
		if (dataToBeSent) {
 800127e:	e7f0      	b.n	8001262 <main+0x4e>
 8001280:	20000380 	.word	0x20000380
 8001284:	200003cc 	.word	0x200003cc
 8001288:	20000240 	.word	0x20000240
 800128c:	200002fc 	.word	0x200002fc
 8001290:	2000022c 	.word	0x2000022c
 8001294:	20000244 	.word	0x20000244

08001298 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	2230      	movs	r2, #48	; 0x30
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f006 fbce 	bl	8007a48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <SystemClock_Config+0xd0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a28      	ldr	r2, [pc, #160]	; (8001368 <SystemClock_Config+0xd0>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <SystemClock_Config+0xd0>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <SystemClock_Config+0xd4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <SystemClock_Config+0xd4>)
 80012e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <SystemClock_Config+0xd4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001300:	2310      	movs	r3, #16
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001308:	2300      	movs	r3, #0
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800130c:	2310      	movs	r3, #16
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001310:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001314:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001316:	2304      	movs	r3, #4
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800131a:	2307      	movs	r3, #7
 800131c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4618      	mov	r0, r3
 8001324:	f003 ff02 	bl	800512c <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x9a>
		Error_Handler();
 800132e:	f000 fb6b 	bl	8001a08 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2302      	movs	r3, #2
 8001338:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2102      	movs	r1, #2
 800134e:	4618      	mov	r0, r3
 8001350:	f004 f964 	bl	800561c <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0xc6>
		Error_Handler();
 800135a:	f000 fb55 	bl	8001a08 <Error_Handler>
	}
}
 800135e:	bf00      	nop
 8001360:	3750      	adds	r7, #80	; 0x50
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <MX_I2C1_Init+0x54>)
 8001378:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C1_Init+0x50>)
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_I2C1_Init+0x58>)
 800137e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_I2C1_Init+0x50>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013ae:	f001 fd9d 	bl	8002eec <HAL_I2C_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80013b8:	f000 fb26 	bl	8001a08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000248 	.word	0x20000248
 80013c4:	40005400 	.word	0x40005400
 80013c8:	000186a0 	.word	0x000186a0

080013cc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_TIM1_Init+0x9c>)
 80013ea:	4a20      	ldr	r2, [pc, #128]	; (800146c <MX_TIM1_Init+0xa0>)
 80013ec:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1000;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_TIM1_Init+0x9c>)
 80013f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_TIM1_Init+0x9c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 42000;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_TIM1_Init+0x9c>)
 80013fe:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001402:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_TIM1_Init+0x9c>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_TIM1_Init+0x9c>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_TIM1_Init+0x9c>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <MX_TIM1_Init+0x9c>)
 8001418:	f004 fafc 	bl	8005a14 <HAL_TIM_Base_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8001422:	f000 faf1 	bl	8001a08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_TIM1_Init+0x9c>)
 8001434:	f004 fed8 	bl	80061e8 <HAL_TIM_ConfigClockSource>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x76>
		Error_Handler();
 800143e:	f000 fae3 	bl	8001a08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800144a:	463b      	mov	r3, r7
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <MX_TIM1_Init+0x9c>)
 8001450:	f005 fa86 	bl	8006960 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800145a:	f000 fad5 	bl	8001a08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200003cc 	.word	0x200003cc
 800146c:	40010000 	.word	0x40010000

08001470 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80014a0:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10 - 1;
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014aa:	2209      	movs	r2, #9
 80014ac:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 220 - 1;
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014b6:	22db      	movs	r2, #219	; 0xdb
 80014b8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80014c6:	4823      	ldr	r0, [pc, #140]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014c8:	f004 faa4 	bl	8005a14 <HAL_TIM_Base_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x66>
		Error_Handler();
 80014d2:	f000 fa99 	bl	8001a08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80014dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e0:	4619      	mov	r1, r3
 80014e2:	481c      	ldr	r0, [pc, #112]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014e4:	f004 fe80 	bl	80061e8 <HAL_TIM_ConfigClockSource>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x82>
		Error_Handler();
 80014ee:	f000 fa8b 	bl	8001a08 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80014f2:	4818      	ldr	r0, [pc, #96]	; (8001554 <MX_TIM2_Init+0xe4>)
 80014f4:	f004 fb40 	bl	8005b78 <HAL_TIM_PWM_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM2_Init+0x92>
		Error_Handler();
 80014fe:	f000 fa83 	bl	8001a08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	4619      	mov	r1, r3
 8001510:	4810      	ldr	r0, [pc, #64]	; (8001554 <MX_TIM2_Init+0xe4>)
 8001512:	f005 fa25 	bl	8006960 <HAL_TIMEx_MasterConfigSynchronization>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800151c:	f000 fa74 	bl	8001a08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001520:	2360      	movs	r3, #96	; 0x60
 8001522:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 110;
 8001524:	236e      	movs	r3, #110	; 0x6e
 8001526:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2208      	movs	r2, #8
 8001534:	4619      	mov	r1, r3
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <MX_TIM2_Init+0xe4>)
 8001538:	f004 fd94 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8001542:	f000 fa61 	bl	8001a08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <MX_TIM2_Init+0xe4>)
 8001548:	f000 fb80 	bl	8001c4c <HAL_TIM_MspPostInit>

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	; 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000474 	.word	0x20000474

08001558 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_TIM11_Init+0x40>)
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <MX_TIM11_Init+0x44>)
 8001560:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 35 - 1;
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <MX_TIM11_Init+0x40>)
 8001564:	2222      	movs	r2, #34	; 0x22
 8001566:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_TIM11_Init+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 1000 - 1;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_TIM11_Init+0x40>)
 8001570:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001574:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_TIM11_Init+0x40>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_TIM11_Init+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_TIM11_Init+0x40>)
 8001584:	f004 fa46 	bl	8005a14 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM11_Init+0x3a>
		Error_Handler();
 800158e:	f000 fa3b 	bl	8001a08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000380 	.word	0x20000380
 800159c:	40014800 	.word	0x40014800

080015a0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_USART1_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 2400;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015ac:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80015b0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART1_UART_Init+0x4c>)
 80015d8:	f005 fa44 	bl	8006a64 <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80015e2:	f000 fa11 	bl	8001a08 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002fc 	.word	0x200002fc
 80015f0:	40011000 	.word	0x40011000

080015f4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_USART2_UART_Init+0x50>)
 80015fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800162c:	f005 fa1a 	bl	8006a64 <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001636:	f000 f9e7 	bl	8001a08 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200004bc 	.word	0x200004bc
 8001644:	40004400 	.word	0x40004400

08001648 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_DMA_Init+0x4c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <MX_DMA_Init+0x4c>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_DMA_Init+0x4c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	200b      	movs	r0, #11
 8001670:	f000 fedd 	bl	800242e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001674:	200b      	movs	r0, #11
 8001676:	f000 fef6 	bl	8002466 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2011      	movs	r0, #17
 8001680:	f000 fed5 	bl	800242e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001684:	2011      	movs	r0, #17
 8001686:	f000 feee 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <MX_GPIO_Init+0x124>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a41      	ldr	r2, [pc, #260]	; (80017bc <MX_GPIO_Init+0x124>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <MX_GPIO_Init+0x124>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <MX_GPIO_Init+0x124>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a3a      	ldr	r2, [pc, #232]	; (80017bc <MX_GPIO_Init+0x124>)
 80016d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b38      	ldr	r3, [pc, #224]	; (80017bc <MX_GPIO_Init+0x124>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <MX_GPIO_Init+0x124>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a33      	ldr	r2, [pc, #204]	; (80017bc <MX_GPIO_Init+0x124>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <MX_GPIO_Init+0x124>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <MX_GPIO_Init+0x124>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <MX_GPIO_Init+0x124>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <MX_GPIO_Init+0x124>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2110      	movs	r1, #16
 8001722:	4827      	ldr	r0, [pc, #156]	; (80017c0 <MX_GPIO_Init+0x128>)
 8001724:	f001 fbc8 	bl	8002eb8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001728:	2200      	movs	r2, #0
 800172a:	f24f 0106 	movw	r1, #61446	; 0xf006
 800172e:	4825      	ldr	r0, [pc, #148]	; (80017c4 <MX_GPIO_Init+0x12c>)
 8001730:	f001 fbc2 	bl	8002eb8 <HAL_GPIO_WritePin>
			GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
					| GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800173a:	4823      	ldr	r0, [pc, #140]	; (80017c8 <MX_GPIO_Init+0x130>)
 800173c:	f001 fbbc 	bl	8002eb8 <HAL_GPIO_WritePin>
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC2 PC3 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_12;
 8001740:	f243 030c 	movw	r3, #12300	; 0x300c
 8001744:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <MX_GPIO_Init+0x130>)
 8001756:	f001 fa2b 	bl	8002bb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800175a:	2310      	movs	r3, #16
 800175c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_GPIO_Init+0x128>)
 8001772:	f001 fa1d 	bl	8002bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB1 PB2 PB12 PB13
	 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13
 8001776:	f24f 0306 	movw	r3, #61446	; 0xf006
 800177a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <MX_GPIO_Init+0x12c>)
 8001790:	f001 fa0e 	bl	8002bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC8 PC9 PC10 PC11 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8001794:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001798:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4806      	ldr	r0, [pc, #24]	; (80017c8 <MX_GPIO_Init+0x130>)
 80017ae:	f001 f9ff 	bl	8002bb0 <HAL_GPIO_Init>

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800

080017cc <sendByte>:
/**
 * @brief Tx: waits until the previous byte is sent;
 * then sets the new byte to send, resets the index to read the bit and
 * sets the flag "sending" to true
 */
void sendByte(uint8_t byte) {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
	// wait to finish the sending of the previous byte (in callback of TIM11)
	while (sending)
 80017d6:	bf00      	nop
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <sendByte+0x34>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1fb      	bne.n	80017d8 <sendByte+0xc>
		;

	// set next byte to send and "start" the sending
	byteToSend = byte;
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <sendByte+0x38>)
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	7013      	strb	r3, [r2, #0]
	iBit = -1;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <sendByte+0x3c>)
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	601a      	str	r2, [r3, #0]
	sending = 1;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <sendByte+0x34>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000230 	.word	0x20000230
 8001804:	20000502 	.word	0x20000502
 8001808:	2000002c 	.word	0x2000002c

0800180c <HAL_TIM_PeriodElapsedCallback>:
 * - sends the start bit (modulates);
 * - for each bit, if it is low modulates, otherwise led stays down;
 * - sends the stop bit (led stays down);
 * - at the next cycle resets the "sending" flag;
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b096      	sub	sp, #88	; 0x58
 8001810:	af02      	add	r7, sp, #8
 8001812:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3c      	ldr	r2, [pc, #240]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d135      	bne.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x7c>
		// Implementing the UART protocol
		if (iBit == -1) {
 800181c:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d104      	bne.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x24>
			// START BIT
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001826:	2108      	movs	r1, #8
 8001828:	4839      	ldr	r0, [pc, #228]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800182a:	f004 f9ff 	bl	8005c2c <HAL_TIM_PWM_Start>
 800182e:	e025      	b.n	800187c <HAL_TIM_PeriodElapsedCallback+0x70>
		} else if (iBit < 8) {
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b07      	cmp	r3, #7
 8001836:	dc14      	bgt.n	8001862 <HAL_TIM_PeriodElapsedCallback+0x56>
			// SENDING BYTE
			if (byteToSend & (1 << iBit)) {
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa42 f303 	asr.w	r3, r2, r3
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x4c>
				// if bit is 1, do not modulate [stay on zero]
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800184e:	2108      	movs	r1, #8
 8001850:	482f      	ldr	r0, [pc, #188]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001852:	f004 fa9b 	bl	8005d8c <HAL_TIM_PWM_Stop>
 8001856:	e011      	b.n	800187c <HAL_TIM_PeriodElapsedCallback+0x70>
			} else {
				// if bit is 0, modulate
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001858:	2108      	movs	r1, #8
 800185a:	482d      	ldr	r0, [pc, #180]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800185c:	f004 f9e6 	bl	8005c2c <HAL_TIM_PWM_Start>
 8001860:	e00c      	b.n	800187c <HAL_TIM_PeriodElapsedCallback+0x70>
			}
		} else if (iBit == 8) {
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b08      	cmp	r3, #8
 8001868:	d104      	bne.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x68>
			// STOP BIT
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800186a:	2108      	movs	r1, #8
 800186c:	4828      	ldr	r0, [pc, #160]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800186e:	f004 fa8d 	bl	8005d8c <HAL_TIM_PWM_Stop>
 8001872:	e003      	b.n	800187c <HAL_TIM_PeriodElapsedCallback+0x70>
		} else {
			sending = 0;
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
			return;
 800187a:	e041      	b.n	8001900 <HAL_TIM_PeriodElapsedCallback+0xf4>
		}

		iBit++;
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	4a22      	ldr	r2, [pc, #136]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e03b      	b.n	8001900 <HAL_TIM_PeriodElapsedCallback+0xf4>
	} else if (htim == &htim1) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a24      	ldr	r2, [pc, #144]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d137      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0xf4>
		// temperature sampling
		if (HAL_I2C_Master_Receive(&hi2c1, tempAddr | 1, dataBuff, 2, 1000)
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	b299      	uxth	r1, r3
 800189c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2302      	movs	r3, #2
 80018a4:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018a6:	4820      	ldr	r0, [pc, #128]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018a8:	f001 fc64 	bl	8003174 <HAL_I2C_Master_Receive>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d126      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0xf4>
				== HAL_OK) {

			// converting the data received into a temperature
			tempSampled = convertToFloat(dataBuff[0], dataBuff[1]);
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018ba:	7852      	ldrb	r2, [r2, #1]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f882 	bl	80019c8 <convertToFloat>
 80018c4:	eef0 7a40 	vmov.f32	s15, s0
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80018ca:	edc3 7a00 	vstr	s15, [r3]

			// forging string to send
			unsigned char string[64];
			int len = sprintf(string, "Temp: %.3f Celsius\r\n", tempSampled);
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe40 	bl	8000558 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	f107 000c 	add.w	r0, r7, #12
 80018e0:	4913      	ldr	r1, [pc, #76]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80018e2:	f006 fd23 	bl	800832c <siprintf>
 80018e6:	64f8      	str	r0, [r7, #76]	; 0x4c

			// transmitting the forged string with our data back on the serial
			HAL_UART_Transmit(&huart2, string, len, 1000);
 80018e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f107 010c 	add.w	r1, r7, #12
 80018f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80018f6:	f005 f902 	bl	8006afe <HAL_UART_Transmit>
			dataToBeSent = 1;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001900:	3750      	adds	r7, #80	; 0x50
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000380 	.word	0x20000380
 800190c:	2000002c 	.word	0x2000002c
 8001910:	20000474 	.word	0x20000474
 8001914:	20000502 	.word	0x20000502
 8001918:	20000230 	.word	0x20000230
 800191c:	200003cc 	.word	0x200003cc
 8001920:	20000028 	.word	0x20000028
 8001924:	20000500 	.word	0x20000500
 8001928:	20000248 	.word	0x20000248
 800192c:	20000244 	.word	0x20000244
 8001930:	0800a7b4 	.word	0x0800a7b4
 8001934:	200004bc 	.word	0x200004bc
 8001938:	2000022c 	.word	0x2000022c

0800193c <HAL_UART_RxCpltCallback>:

//// RECEIVER PART
/**
 * @brief transmit the received char to the UART connected to the PC
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_UART_RxCpltCallback+0x48>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d116      	bne.n	800197a <HAL_UART_RxCpltCallback+0x3e>
		// CODE WE WANT TO EXECUTE WHEN WE RECEIVE
		char tempstr[16];

		sprintf(tempstr, "Temp: %+.2f", tempRecv);
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_UART_RxCpltCallback+0x4c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe01 	bl	8000558 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	f107 0008 	add.w	r0, r7, #8
 800195e:	490b      	ldr	r1, [pc, #44]	; (800198c <HAL_UART_RxCpltCallback+0x50>)
 8001960:	f006 fce4 	bl	800832c <siprintf>
		lcd_println(tempstr, 0);
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fb76 	bl	800105c <lcd_println>

		/*sprintf(rcvd_str, "rcvd: X: %+.3f\tY: %+.3f\tZ: %+.3f\r\n",
		 accel_rcv.acc_x, accel_rcv.acc_y, accel_rcv.acc_z);
		 HAL_UART_Transmit_DMA(&huart2, rcvd_str, strlen(rcvd_str));*/
		HAL_UART_Receive_IT(&huart1, &tempRecv, sizeof(float));
 8001970:	2204      	movs	r2, #4
 8001972:	4905      	ldr	r1, [pc, #20]	; (8001988 <HAL_UART_RxCpltCallback+0x4c>)
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <HAL_UART_RxCpltCallback+0x48>)
 8001976:	f005 f954 	bl	8006c22 <HAL_UART_Receive_IT>
	}
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002fc 	.word	0x200002fc
 8001988:	20000240 	.word	0x20000240
 800198c:	0800a7cc 	.word	0x0800a7cc

08001990 <sendSampleDMA>:

/**
 * @brief prints over the serial communication the sample passed in DMA mode
 * @param accelData the structure to print
 */
void sendSampleDMA(float temperature) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	ed87 0a01 	vstr	s0, [r7, #4]
	// send it over IR communication
	uint8_t *x = (uint8_t*) &temperature;
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < sizeof(float); i++) {
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e009      	b.n	80019b8 <sendSampleDMA+0x28>
		sendByte(x[i]);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff0d 	bl	80017cc <sendByte>
	for (int i = 0; i < sizeof(float); i++) {
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d9f2      	bls.n	80019a4 <sendSampleDMA+0x14>
	}
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <convertToFloat>:
/**
 * @brief function that converts two bytes in a float value
 * @param msb most significant bit of the temperature value
 * @param lsb least significant bit of the temperature value
 */
float convertToFloat(int8_t msb, uint8_t lsb) {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
	// "concatenates" the two bytes and then divides them by 2^(decimal places), that is 256
	return ((float) (((int16_t) (msb) << 8) | lsb)) / 256.0;
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	021a      	lsls	r2, r3, #8
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a04 <convertToFloat+0x3c>
 80019ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019f2:	eef0 7a66 	vmov.f32	s15, s13
}
 80019f6:	eeb0 0a67 	vmov.f32	s0, s15
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	43800000 	.word	0x43800000

08001a08 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a10:	e7fe      	b.n	8001a10 <Error_Handler+0x8>
	...

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001a52:	2006      	movs	r0, #6
 8001a54:	f000 fce0 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_I2C_MspInit+0xf0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d162      	bne.n	8001b4c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <HAL_I2C_MspInit+0xf4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a32      	ldr	r2, [pc, #200]	; (8001b58 <HAL_I2C_MspInit+0xf4>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_I2C_MspInit+0xf4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa8:	2312      	movs	r3, #18
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4827      	ldr	r0, [pc, #156]	; (8001b5c <HAL_I2C_MspInit+0xf8>)
 8001ac0:	f001 f876 	bl	8002bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_I2C_MspInit+0xf4>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_I2C_MspInit+0xf4>)
 8001ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_I2C_MspInit+0xf4>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001ae2:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_I2C_MspInit+0x100>)
 8001ae4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b00:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001b20:	480f      	ldr	r0, [pc, #60]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001b22:	f000 fcbb 	bl	800249c <HAL_DMA_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001b2c:	f7ff ff6c 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_I2C_MspInit+0xfc>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	201f      	movs	r0, #31
 8001b42:	f000 fc74 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b46:	201f      	movs	r0, #31
 8001b48:	f000 fc8d 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40005400 	.word	0x40005400
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	20000414 	.word	0x20000414
 8001b64:	40026010 	.word	0x40026010

08001b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a32      	ldr	r2, [pc, #200]	; (8001c40 <HAL_TIM_Base_MspInit+0xd8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d126      	bne.n	8001bc8 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a30      	ldr	r2, [pc, #192]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2018      	movs	r0, #24
 8001b9c:	f000 fc47 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ba0:	2018      	movs	r0, #24
 8001ba2:	f000 fc60 	bl	8002466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2019      	movs	r0, #25
 8001bac:	f000 fc3f 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bb0:	2019      	movs	r0, #25
 8001bb2:	f000 fc58 	bl	8002466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	201a      	movs	r0, #26
 8001bbc:	f000 fc37 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001bc0:	201a      	movs	r0, #26
 8001bc2:	f000 fc50 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001bc6:	e036      	b.n	8001c36 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d116      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	201c      	movs	r0, #28
 8001bf4:	f000 fc1b 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf8:	201c      	movs	r0, #28
 8001bfa:	f000 fc34 	bl	8002466 <HAL_NVIC_EnableIRQ>
}
 8001bfe:	e01a      	b.n	8001c36 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM11)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_TIM_Base_MspInit+0xe0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d115      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_TIM_Base_MspInit+0xdc>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	201a      	movs	r0, #26
 8001c2c:	f000 fbff 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c30:	201a      	movs	r0, #26
 8001c32:	f000 fc18 	bl	8002466 <HAL_NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40014800 	.word	0x40014800

08001c4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6c:	d11e      	bne.n	8001cac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001ca8:	f000 ff82 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020400 	.word	0x40020400

08001cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <HAL_UART_MspInit+0x164>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d135      	bne.n	8001d4a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001ce8:	f043 0310 	orr.w	r3, r3, #16
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d28:	2307      	movs	r3, #7
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	483d      	ldr	r0, [pc, #244]	; (8001e28 <HAL_UART_MspInit+0x16c>)
 8001d34:	f000 ff3c 	bl	8002bb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	2025      	movs	r0, #37	; 0x25
 8001d3e:	f000 fb76 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d42:	2025      	movs	r0, #37	; 0x25
 8001d44:	f000 fb8f 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d48:	e066      	b.n	8001e18 <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a37      	ldr	r2, [pc, #220]	; (8001e2c <HAL_UART_MspInit+0x170>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d161      	bne.n	8001e18 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d62:	6413      	str	r3, [r2, #64]	; 0x40
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_UART_MspInit+0x168>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	4820      	ldr	r0, [pc, #128]	; (8001e28 <HAL_UART_MspInit+0x16c>)
 8001da8:	f000 ff02 	bl	8002bb0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001dae:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_UART_MspInit+0x178>)
 8001db0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001db4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dcc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001dec:	4810      	ldr	r0, [pc, #64]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001dee:	f000 fb55 	bl	800249c <HAL_DMA_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001df8:	f7ff fe06 	bl	8001a08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_UART_MspInit+0x174>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2026      	movs	r0, #38	; 0x26
 8001e0e:	f000 fb0e 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e12:	2026      	movs	r0, #38	; 0x26
 8001e14:	f000 fb27 	bl	8002466 <HAL_NVIC_EnableIRQ>
}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	; 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40004400 	.word	0x40004400
 8001e30:	2000029c 	.word	0x2000029c
 8001e34:	400260a0 	.word	0x400260a0

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler+0x4>

08001e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e84:	f000 f9b4 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <DMA1_Stream0_IRQHandler+0x10>)
 8001e92:	f000 fc43 	bl	800271c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000414 	.word	0x20000414

08001ea0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA1_Stream6_IRQHandler+0x10>)
 8001ea6:	f000 fc39 	bl	800271c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000029c 	.word	0x2000029c

08001eb4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001eba:	f003 ffcb 	bl	8005e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200003cc 	.word	0x200003cc

08001ec8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ece:	f003 ffc1 	bl	8005e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200003cc 	.word	0x200003cc

08001edc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001ee2:	f003 ffb7 	bl	8005e54 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001ee6:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001ee8:	f003 ffb4 	bl	8005e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200003cc 	.word	0x200003cc
 8001ef4:	20000380 	.word	0x20000380

08001ef8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <TIM2_IRQHandler+0x10>)
 8001efe:	f003 ffa9 	bl	8005e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000474 	.word	0x20000474

08001f0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <I2C1_EV_IRQHandler+0x10>)
 8001f12:	f001 fb55 	bl	80035c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000248 	.word	0x20000248

08001f20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <USART1_IRQHandler+0x10>)
 8001f26:	f004 fead 	bl	8006c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200002fc 	.word	0x200002fc

08001f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <USART2_IRQHandler+0x10>)
 8001f3a:	f004 fea3 	bl	8006c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200004bc 	.word	0x200004bc

08001f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_kill>:

int _kill(int pid, int sig)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f62:	f005 fd47 	bl	80079f4 <__errno>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2216      	movs	r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_exit>:

void _exit (int status)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffe7 	bl	8001f58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f8a:	e7fe      	b.n	8001f8a <_exit+0x12>

08001f8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e00a      	b.n	8001fb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f9e:	f3af 8000 	nop.w
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	60ba      	str	r2, [r7, #8]
 8001faa:	b2ca      	uxtb	r2, r1
 8001fac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbf0      	blt.n	8001f9e <_read+0x12>
	}

return len;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e009      	b.n	8001fec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	60ba      	str	r2, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf1      	blt.n	8001fd8 <_write+0x12>
	}
	return len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_close>:

int _close(int file)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
	return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002026:	605a      	str	r2, [r3, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_isatty>:

int _isatty(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	return 1;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f005 fcac 	bl	80079f4 <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <_sbrk+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20018000 	.word	0x20018000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	20000234 	.word	0x20000234
 80020d0:	20000518 	.word	0x20000518

080020d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <SystemInit+0x20>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <SystemInit+0x20>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002130 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020fc:	480d      	ldr	r0, [pc, #52]	; (8002134 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002100:	4a0e      	ldr	r2, [pc, #56]	; (800213c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002114:	4c0b      	ldr	r4, [pc, #44]	; (8002144 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002122:	f7ff ffd7 	bl	80020d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002126:	f005 fc6b 	bl	8007a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212a:	f7ff f873 	bl	8001214 <main>
  bx  lr    
 800212e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002130:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800213c:	0800abec 	.word	0x0800abec
  ldr r2, =_sbss
 8002140:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002144:	20000518 	.word	0x20000518

08002148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_Init+0x40>)
 8002156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_Init+0x40>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_Init+0x40>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f94f 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	2000      	movs	r0, #0
 800217c:	f000 f808 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fc48 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_InitTick+0x54>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x58>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f967 	bl	8002482 <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00e      	b.n	80021dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d80a      	bhi.n	80021da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f000 f92f 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d0:	4a06      	ldr	r2, [pc, #24]	; (80021ec <HAL_InitTick+0x5c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000030 	.word	0x20000030
 80021e8:	20000038 	.word	0x20000038
 80021ec:	20000034 	.word	0x20000034

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000038 	.word	0x20000038
 8002214:	20000504 	.word	0x20000504

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000504 	.word	0x20000504

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000038 	.word	0x20000038

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff29 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff3e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff31 	bl	80022dc <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff feb6 	bl	8002218 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e099      	b.n	80025ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d8:	e00f      	b.n	80024fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024da:	f7ff fe9d 	bl	8002218 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d908      	bls.n	80024fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e078      	b.n	80025ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e8      	bne.n	80024da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_DMA_Init+0x158>)
 8002514:	4013      	ands	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2b04      	cmp	r3, #4
 8002552:	d107      	bne.n	8002564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4313      	orrs	r3, r2
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 0307 	bic.w	r3, r3, #7
 800257a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2b04      	cmp	r3, #4
 800258c:	d117      	bne.n	80025be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fa89 	bl	8002ab8 <DMA_CheckFifoParam>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ba:	2301      	movs	r3, #1
 80025bc:	e016      	b.n	80025ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa40 	bl	8002a4c <DMA_CalcBaseAndBitshift>
 80025cc:	4603      	mov	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	223f      	movs	r2, #63	; 0x3f
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	f010803f 	.word	0xf010803f

080025f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002606:	f7ff fe07 	bl	8002218 <HAL_GetTick>
 800260a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d008      	beq.n	800262a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e052      	b.n	80026d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0216 	bic.w	r2, r2, #22
 8002638:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002648:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d103      	bne.n	800265a <HAL_DMA_Abort+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0208 	bic.w	r2, r2, #8
 8002668:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267a:	e013      	b.n	80026a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267c:	f7ff fdcc 	bl	8002218 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b05      	cmp	r3, #5
 8002688:	d90c      	bls.n	80026a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e015      	b.n	80026d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1e4      	bne.n	800267c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	223f      	movs	r2, #63	; 0x3f
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d004      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00c      	b.n	8002710 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2205      	movs	r2, #5
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002728:	4b92      	ldr	r3, [pc, #584]	; (8002974 <HAL_DMA_IRQHandler+0x258>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a92      	ldr	r2, [pc, #584]	; (8002978 <HAL_DMA_IRQHandler+0x25c>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0a9b      	lsrs	r3, r3, #10
 8002734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	2208      	movs	r2, #8
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01a      	beq.n	8002788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0204 	bic.w	r2, r2, #4
 800276e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	2208      	movs	r2, #8
 8002776:	409a      	lsls	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	2201      	movs	r2, #1
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2201      	movs	r2, #1
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	2204      	movs	r2, #4
 80027c4:	409a      	lsls	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2204      	movs	r2, #4
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2210      	movs	r2, #16
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d043      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03c      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2210      	movs	r2, #16
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d018      	beq.n	800285e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d024      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
 800284a:	e01f      	b.n	800288c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
 800285c:	e016      	b.n	800288c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0208 	bic.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	2220      	movs	r2, #32
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 808e 	beq.w	80029ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8086 	beq.w	80029ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2220      	movs	r2, #32
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d136      	bne.n	8002934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0216 	bic.w	r2, r2, #22
 80028d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_DMA_IRQHandler+0x1da>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0208 	bic.w	r2, r2, #8
 8002904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	223f      	movs	r2, #63	; 0x3f
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002926:	2b00      	cmp	r3, #0
 8002928:	d07d      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
        }
        return;
 8002932:	e078      	b.n	8002a26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01c      	beq.n	800297c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d108      	bne.n	8002962 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	2b00      	cmp	r3, #0
 8002956:	d030      	beq.n	80029ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
 8002960:	e02b      	b.n	80029ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d027      	beq.n	80029ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
 8002972:	e022      	b.n	80029ba <HAL_DMA_IRQHandler+0x29e>
 8002974:	20000030 	.word	0x20000030
 8002978:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0210 	bic.w	r2, r2, #16
 8002998:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d032      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d022      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2205      	movs	r2, #5
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3301      	adds	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d307      	bcc.n	8002a02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f2      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x2ca>
 8002a00:	e000      	b.n	8002a04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a02:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
 8002a24:	e000      	b.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a26:	bf00      	nop
    }
  }
}
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop

08002a30 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3e:	b2db      	uxtb	r3, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	3b10      	subs	r3, #16
 8002a5c:	4a14      	ldr	r2, [pc, #80]	; (8002ab0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a66:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d909      	bls.n	8002a8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	1d1a      	adds	r2, r3, #4
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a8c:	e007      	b.n	8002a9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a96:	f023 0303 	bic.w	r3, r3, #3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	aaaaaaab 	.word	0xaaaaaaab
 8002ab4:	0800a7f0 	.word	0x0800a7f0

08002ab8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11f      	bne.n	8002b12 <DMA_CheckFifoParam+0x5a>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d856      	bhi.n	8002b86 <DMA_CheckFifoParam+0xce>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <DMA_CheckFifoParam+0x28>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002b03 	.word	0x08002b03
 8002ae8:	08002af1 	.word	0x08002af1
 8002aec:	08002b87 	.word	0x08002b87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d046      	beq.n	8002b8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e043      	b.n	8002b8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b0a:	d140      	bne.n	8002b8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e03d      	b.n	8002b8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	d121      	bne.n	8002b60 <DMA_CheckFifoParam+0xa8>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d837      	bhi.n	8002b92 <DMA_CheckFifoParam+0xda>
 8002b22:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <DMA_CheckFifoParam+0x70>)
 8002b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b3f 	.word	0x08002b3f
 8002b30:	08002b39 	.word	0x08002b39
 8002b34:	08002b51 	.word	0x08002b51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e030      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d025      	beq.n	8002b96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4e:	e022      	b.n	8002b96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b58:	d11f      	bne.n	8002b9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b5e:	e01c      	b.n	8002b9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d903      	bls.n	8002b6e <DMA_CheckFifoParam+0xb6>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d003      	beq.n	8002b74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b6c:	e018      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      break;
 8002b72:	e015      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00e      	beq.n	8002b9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      break;
 8002b84:	e00b      	b.n	8002b9e <DMA_CheckFifoParam+0xe6>
      break;
 8002b86:	bf00      	nop
 8002b88:	e00a      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e008      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e006      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b92:	bf00      	nop
 8002b94:	e004      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
    }
  } 
  
  return status; 
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	e159      	b.n	8002e80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	f040 8148 	bne.w	8002e7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d005      	beq.n	8002c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d130      	bne.n	8002c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 0201 	and.w	r2, r3, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d017      	beq.n	8002ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d123      	bne.n	8002cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	69b9      	ldr	r1, [r7, #24]
 8002cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a2 	beq.w	8002e7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <HAL_GPIO_Init+0x2e8>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a56      	ldr	r2, [pc, #344]	; (8002e98 <HAL_GPIO_Init+0x2e8>)
 8002d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <HAL_GPIO_Init+0x2e8>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d52:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_GPIO_Init+0x2ec>)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a49      	ldr	r2, [pc, #292]	; (8002ea0 <HAL_GPIO_Init+0x2f0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x202>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a48      	ldr	r2, [pc, #288]	; (8002ea4 <HAL_GPIO_Init+0x2f4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x1fe>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <HAL_GPIO_Init+0x2f8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x1fa>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a46      	ldr	r2, [pc, #280]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x1f6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a45      	ldr	r2, [pc, #276]	; (8002eb0 <HAL_GPIO_Init+0x300>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x1f2>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	e008      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002da2:	2307      	movs	r3, #7
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002da6:	2303      	movs	r3, #3
 8002da8:	e004      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002db2:	2300      	movs	r3, #0
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f002 0203 	and.w	r2, r2, #3
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc4:	4935      	ldr	r1, [pc, #212]	; (8002e9c <HAL_GPIO_Init+0x2ec>)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df6:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e20:	4a24      	ldr	r2, [pc, #144]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e74:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	f67f aea2 	bls.w	8002bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec8:	787b      	ldrb	r3, [r7, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed4:	e003      	b.n	8002ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	041a      	lsls	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	619a      	str	r2, [r3, #24]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e12b      	b.n	8003156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe fda6 	bl	8001a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f50:	f002 fd38 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 8002f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a81      	ldr	r2, [pc, #516]	; (8003160 <HAL_I2C_Init+0x274>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d807      	bhi.n	8002f70 <HAL_I2C_Init+0x84>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a80      	ldr	r2, [pc, #512]	; (8003164 <HAL_I2C_Init+0x278>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bf94      	ite	ls
 8002f68:	2301      	movls	r3, #1
 8002f6a:	2300      	movhi	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e006      	b.n	8002f7e <HAL_I2C_Init+0x92>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a7d      	ldr	r2, [pc, #500]	; (8003168 <HAL_I2C_Init+0x27c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0e7      	b.n	8003156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a78      	ldr	r2, [pc, #480]	; (800316c <HAL_I2C_Init+0x280>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0c9b      	lsrs	r3, r3, #18
 8002f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a6a      	ldr	r2, [pc, #424]	; (8003160 <HAL_I2C_Init+0x274>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d802      	bhi.n	8002fc0 <HAL_I2C_Init+0xd4>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	e009      	b.n	8002fd4 <HAL_I2C_Init+0xe8>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a69      	ldr	r2, [pc, #420]	; (8003170 <HAL_I2C_Init+0x284>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	495c      	ldr	r1, [pc, #368]	; (8003160 <HAL_I2C_Init+0x274>)
 8002ff0:	428b      	cmp	r3, r1
 8002ff2:	d819      	bhi.n	8003028 <HAL_I2C_Init+0x13c>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e59      	subs	r1, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003002:	1c59      	adds	r1, r3, #1
 8003004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003008:	400b      	ands	r3, r1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_I2C_Init+0x138>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1e59      	subs	r1, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fbb1 f3f3 	udiv	r3, r1, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	e051      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003024:	2304      	movs	r3, #4
 8003026:	e04f      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d111      	bne.n	8003054 <HAL_I2C_Init+0x168>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	440b      	add	r3, r1
 800303e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e012      	b.n	800307a <HAL_I2C_Init+0x18e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Init+0x196>
 800307e:	2301      	movs	r3, #1
 8003080:	e022      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10e      	bne.n	80030a8 <HAL_I2C_Init+0x1bc>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e58      	subs	r0, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	440b      	add	r3, r1
 8003098:	fbb0 f3f3 	udiv	r3, r0, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a6:	e00f      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	0099      	lsls	r1, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	6809      	ldr	r1, [r1, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6911      	ldr	r1, [r2, #16]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68d2      	ldr	r2, [r2, #12]
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	430b      	orrs	r3, r1
 800310a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	000186a0 	.word	0x000186a0
 8003164:	001e847f 	.word	0x001e847f
 8003168:	003d08ff 	.word	0x003d08ff
 800316c:	431bde83 	.word	0x431bde83
 8003170:	10624dd3 	.word	0x10624dd3

08003174 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	460b      	mov	r3, r1
 8003182:	817b      	strh	r3, [r7, #10]
 8003184:	4613      	mov	r3, r2
 8003186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff f846 	bl	8002218 <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b20      	cmp	r3, #32
 8003198:	f040 820b 	bne.w	80035b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2319      	movs	r3, #25
 80031a2:	2201      	movs	r2, #1
 80031a4:	497c      	ldr	r1, [pc, #496]	; (8003398 <HAL_I2C_Master_Receive+0x224>)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f001 fe46 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
 80031b4:	e1fe      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_I2C_Master_Receive+0x50>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e1f7      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d007      	beq.n	80031ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2222      	movs	r2, #34	; 0x22
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2210      	movs	r2, #16
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a5c      	ldr	r2, [pc, #368]	; (800339c <HAL_I2C_Master_Receive+0x228>)
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800322c:	8979      	ldrh	r1, [r7, #10]
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f001 fc8a 	bl	8004b4c <I2C_MasterRequestRead>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1b8      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d113      	bne.n	8003272 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	623b      	str	r3, [r7, #32]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	623b      	str	r3, [r7, #32]
 800325e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e18c      	b.n	800358c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	2b01      	cmp	r3, #1
 8003278:	d11b      	bne.n	80032b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003288:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e16c      	b.n	800358c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d11b      	bne.n	80032f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	e14c      	b.n	800358c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003300:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003318:	e138      	b.n	800358c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	2b03      	cmp	r3, #3
 8003320:	f200 80f1 	bhi.w	8003506 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	2b01      	cmp	r3, #1
 800332a:	d123      	bne.n	8003374 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f001 fe89 	bl	8005048 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e139      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003372:	e10b      	b.n	800358c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	2b02      	cmp	r3, #2
 800337a:	d14e      	bne.n	800341a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	2200      	movs	r2, #0
 8003384:	4906      	ldr	r1, [pc, #24]	; (80033a0 <HAL_I2C_Master_Receive+0x22c>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f001 fd56 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e10e      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
 8003396:	bf00      	nop
 8003398:	00100002 	.word	0x00100002
 800339c:	ffff0000 	.word	0xffff0000
 80033a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003418:	e0b8      	b.n	800358c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	2200      	movs	r2, #0
 8003422:	4966      	ldr	r1, [pc, #408]	; (80035bc <HAL_I2C_Master_Receive+0x448>)
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f001 fd07 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0bf      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	2200      	movs	r2, #0
 800347e:	494f      	ldr	r1, [pc, #316]	; (80035bc <HAL_I2C_Master_Receive+0x448>)
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f001 fcd9 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e091      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003504:	e042      	b.n	800358c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f001 fd9c 	bl	8005048 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e04c      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b04      	cmp	r3, #4
 8003558:	d118      	bne.n	800358c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	f47f aec2 	bne.w	800331a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3728      	adds	r7, #40	; 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	00010004 	.word	0x00010004

080035c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d003      	beq.n	80035f8 <HAL_I2C_EV_IRQHandler+0x38>
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	f040 80c1 	bne.w	800377a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10d      	bne.n	800362e <HAL_I2C_EV_IRQHandler+0x6e>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003618:	d003      	beq.n	8003622 <HAL_I2C_EV_IRQHandler+0x62>
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003620:	d101      	bne.n	8003626 <HAL_I2C_EV_IRQHandler+0x66>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_I2C_EV_IRQHandler+0x68>
 8003626:	2300      	movs	r3, #0
 8003628:	2b01      	cmp	r3, #1
 800362a:	f000 8132 	beq.w	8003892 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00c      	beq.n	8003652 <HAL_I2C_EV_IRQHandler+0x92>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	0a5b      	lsrs	r3, r3, #9
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f001 fd55 	bl	80050f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fcd2 	bl	8003ff4 <I2C_Master_SB>
 8003650:	e092      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_I2C_EV_IRQHandler+0xb2>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	0a5b      	lsrs	r3, r3, #9
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fd48 	bl	8004100 <I2C_Master_ADD10>
 8003670:	e082      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_I2C_EV_IRQHandler+0xd2>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fd62 	bl	8004154 <I2C_Master_ADDR>
 8003690:	e072      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03b      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ac:	f000 80f3 	beq.w	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	09db      	lsrs	r3, r3, #7
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00f      	beq.n	80036dc <HAL_I2C_EV_IRQHandler+0x11c>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	0a9b      	lsrs	r3, r3, #10
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_I2C_EV_IRQHandler+0x11c>
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f94c 	bl	8003972 <I2C_MasterTransmit_TXE>
 80036da:	e04d      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80d6 	beq.w	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	0a5b      	lsrs	r3, r3, #9
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80cf 	beq.w	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036f8:	7bbb      	ldrb	r3, [r7, #14]
 80036fa:	2b21      	cmp	r3, #33	; 0x21
 80036fc:	d103      	bne.n	8003706 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9d3 	bl	8003aaa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003704:	e0c7      	b.n	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	f040 80c4 	bne.w	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fa41 	bl	8003b96 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003714:	e0bf      	b.n	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003724:	f000 80b7 	beq.w	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00f      	beq.n	8003754 <HAL_I2C_EV_IRQHandler+0x194>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	0a9b      	lsrs	r3, r3, #10
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <HAL_I2C_EV_IRQHandler+0x194>
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fab6 	bl	8003cbe <I2C_MasterReceive_RXNE>
 8003752:	e011      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 809a 	beq.w	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	0a5b      	lsrs	r3, r3, #9
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8093 	beq.w	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fb55 	bl	8003e20 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003776:	e08e      	b.n	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003778:	e08d      	b.n	8003896 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	e007      	b.n	800379c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <HAL_I2C_EV_IRQHandler+0x20e>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	0a5b      	lsrs	r3, r3, #9
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80037c4:	69b9      	ldr	r1, [r7, #24]
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 ff13 	bl	80045f2 <I2C_Slave_ADDR>
 80037cc:	e066      	b.n	800389c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_I2C_EV_IRQHandler+0x22e>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	0a5b      	lsrs	r3, r3, #9
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 ff4e 	bl	8004688 <I2C_Slave_STOPF>
 80037ec:	e056      	b.n	800389c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037ee:	7bbb      	ldrb	r3, [r7, #14]
 80037f0:	2b21      	cmp	r3, #33	; 0x21
 80037f2:	d002      	beq.n	80037fa <HAL_I2C_EV_IRQHandler+0x23a>
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	2b29      	cmp	r3, #41	; 0x29
 80037f8:	d125      	bne.n	8003846 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	09db      	lsrs	r3, r3, #7
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00f      	beq.n	8003826 <HAL_I2C_EV_IRQHandler+0x266>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	0a9b      	lsrs	r3, r3, #10
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_I2C_EV_IRQHandler+0x266>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fe29 	bl	8004476 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003824:	e039      	b.n	800389a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d033      	beq.n	800389a <HAL_I2C_EV_IRQHandler+0x2da>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	0a5b      	lsrs	r3, r3, #9
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02d      	beq.n	800389a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fe56 	bl	80044f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003844:	e029      	b.n	800389a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00f      	beq.n	8003872 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	0a9b      	lsrs	r3, r3, #10
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_I2C_EV_IRQHandler+0x2b2>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fe61 	bl	8004532 <I2C_SlaveReceive_RXNE>
 8003870:	e014      	b.n	800389c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00e      	beq.n	800389c <HAL_I2C_EV_IRQHandler+0x2dc>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	0a5b      	lsrs	r3, r3, #9
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fe8f 	bl	80045ae <I2C_SlaveReceive_BTF>
 8003890:	e004      	b.n	800389c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003892:	bf00      	nop
 8003894:	e002      	b.n	800389c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800389a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
 80038fe:	4613      	mov	r3, r2
 8003900:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003988:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d150      	bne.n	8003a3a <I2C_MasterTransmit_TXE+0xc8>
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b21      	cmp	r3, #33	; 0x21
 800399c:	d14d      	bne.n	8003a3a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d01d      	beq.n	80039e0 <I2C_MasterTransmit_TXE+0x6e>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d01a      	beq.n	80039e0 <I2C_MasterTransmit_TXE+0x6e>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039b0:	d016      	beq.n	80039e0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039c0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2211      	movs	r2, #17
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff62 	bl	80038a2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039de:	e060      	b.n	8003aa2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ee:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d107      	bne.n	8003a2a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ff7d 	bl	8003922 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a28:	e03b      	b.n	8003aa2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ff35 	bl	80038a2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a38:	e033      	b.n	8003aa2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b21      	cmp	r3, #33	; 0x21
 8003a3e:	d005      	beq.n	8003a4c <I2C_MasterTransmit_TXE+0xda>
 8003a40:	7bbb      	ldrb	r3, [r7, #14]
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d12d      	bne.n	8003aa2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	2b22      	cmp	r3, #34	; 0x22
 8003a4a:	d12a      	bne.n	8003aa2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a66:	e01c      	b.n	8003aa2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d103      	bne.n	8003a7c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f88e 	bl	8003b96 <I2C_MemoryTransmit_TXE_BTF>
}
 8003a7a:	e012      	b.n	8003aa2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003aa0:	e7ff      	b.n	8003aa2 <I2C_MasterTransmit_TXE+0x130>
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b21      	cmp	r3, #33	; 0x21
 8003ac2:	d164      	bne.n	8003b8e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d012      	beq.n	8003af4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003af2:	e04c      	b.n	8003b8e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d01d      	beq.n	8003b36 <I2C_MasterTransmit_BTF+0x8c>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d01a      	beq.n	8003b36 <I2C_MasterTransmit_BTF+0x8c>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b06:	d016      	beq.n	8003b36 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b16:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2211      	movs	r2, #17
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff feb7 	bl	80038a2 <HAL_I2C_MasterTxCpltCallback>
}
 8003b34:	e02b      	b.n	8003b8e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b44:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b54:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d107      	bne.n	8003b80 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fed2 	bl	8003922 <HAL_I2C_MemTxCpltCallback>
}
 8003b7e:	e006      	b.n	8003b8e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fe8a 	bl	80038a2 <HAL_I2C_MasterTxCpltCallback>
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d11d      	bne.n	8003bea <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d10b      	bne.n	8003bce <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc6:	1c9a      	adds	r2, r3, #2
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003bcc:	e073      	b.n	8003cb6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	121b      	asrs	r3, r3, #8
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003be8:	e065      	b.n	8003cb6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10b      	bne.n	8003c0a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c08:	e055      	b.n	8003cb6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d151      	bne.n	8003cb6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b22      	cmp	r3, #34	; 0x22
 8003c16:	d10d      	bne.n	8003c34 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c26:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c32:	e040      	b.n	8003cb6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b21      	cmp	r3, #33	; 0x21
 8003c42:	d112      	bne.n	8003c6a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c68:	e025      	b.n	8003cb6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d120      	bne.n	8003cb6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b21      	cmp	r3, #33	; 0x21
 8003c78:	d11d      	bne.n	8003cb6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c88:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c98:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fe36 	bl	8003922 <HAL_I2C_MemTxCpltCallback>
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b22      	cmp	r3, #34	; 0x22
 8003cd0:	f040 80a2 	bne.w	8003e18 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d921      	bls.n	8003d26 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	f040 8082 	bne.w	8003e18 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d22:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003d24:	e078      	b.n	8003e18 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d074      	beq.n	8003e18 <I2C_MasterReceive_RXNE+0x15a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d002      	beq.n	8003d3a <I2C_MasterReceive_RXNE+0x7c>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d16e      	bne.n	8003e18 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 f952 	bl	8004fe4 <I2C_WaitOnSTOPRequestThroughIT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d142      	bne.n	8003dcc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d54:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d64:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d10a      	bne.n	8003db6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fdc1 	bl	8003936 <HAL_I2C_MemRxCpltCallback>
}
 8003db4:	e030      	b.n	8003e18 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2212      	movs	r2, #18
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fd76 	bl	80038b6 <HAL_I2C_MasterRxCpltCallback>
}
 8003dca:	e025      	b.n	8003e18 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dda:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fd99 	bl	800394a <HAL_I2C_ErrorCallback>
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e46:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e6e:	e0bd      	b.n	8003fec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d129      	bne.n	8003ece <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d00a      	beq.n	8003ea6 <I2C_MasterReceive_BTF+0x86>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d007      	beq.n	8003ea6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ecc:	e08e      	b.n	8003fec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d176      	bne.n	8003fc6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d002      	beq.n	8003ee4 <I2C_MasterReceive_BTF+0xc4>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d108      	bne.n	8003ef6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e019      	b.n	8003f2a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d002      	beq.n	8003f02 <I2C_MasterReceive_BTF+0xe2>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d108      	bne.n	8003f14 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e00a      	b.n	8003f2a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d007      	beq.n	8003f2a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f84:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d10a      	bne.n	8003fb0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fcc4 	bl	8003936 <HAL_I2C_MemRxCpltCallback>
}
 8003fae:	e01d      	b.n	8003fec <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2212      	movs	r2, #18
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fc79 	bl	80038b6 <HAL_I2C_MasterRxCpltCallback>
}
 8003fc4:	e012      	b.n	8003fec <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d117      	bne.n	8004038 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004020:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004022:	e067      	b.n	80040f4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	b2da      	uxtb	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	611a      	str	r2, [r3, #16]
}
 8004036:	e05d      	b.n	80040f4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004040:	d133      	bne.n	80040aa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b21      	cmp	r3, #33	; 0x21
 800404c:	d109      	bne.n	8004062 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800405e:	611a      	str	r2, [r3, #16]
 8004060:	e008      	b.n	8004074 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	b2da      	uxtb	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <I2C_Master_SB+0x92>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	2b00      	cmp	r3, #0
 800408c:	d032      	beq.n	80040f4 <I2C_Master_SB+0x100>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d02d      	beq.n	80040f4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a6:	605a      	str	r2, [r3, #4]
}
 80040a8:	e024      	b.n	80040f4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10e      	bne.n	80040d0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	11db      	asrs	r3, r3, #7
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 0306 	and.w	r3, r3, #6
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f063 030f 	orn	r3, r3, #15
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]
}
 80040ce:	e011      	b.n	80040f4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10d      	bne.n	80040f4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	b29b      	uxth	r3, r3
 80040de:	11db      	asrs	r3, r3, #7
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0306 	and.w	r3, r3, #6
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f063 030e 	orn	r3, r3, #14
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	611a      	str	r2, [r3, #16]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	b2da      	uxtb	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <I2C_Master_ADD10+0x26>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d108      	bne.n	8004138 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <I2C_Master_ADD10+0x48>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004146:	605a      	str	r2, [r3, #4]
  }
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004154:	b480      	push	{r7}
 8004156:	b091      	sub	sp, #68	; 0x44
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004162:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b22      	cmp	r3, #34	; 0x22
 800417c:	f040 8169 	bne.w	8004452 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10f      	bne.n	80041a8 <I2C_Master_ADDR+0x54>
 8004188:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d10b      	bne.n	80041a8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004190:	2300      	movs	r3, #0
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	633b      	str	r3, [r7, #48]	; 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	e160      	b.n	800446a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11d      	bne.n	80041ec <I2C_Master_ADDR+0x98>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041b8:	d118      	bne.n	80041ec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ba:	2300      	movs	r3, #0
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041de:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	651a      	str	r2, [r3, #80]	; 0x50
 80041ea:	e13e      	b.n	800446a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d113      	bne.n	800421e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f6:	2300      	movs	r3, #0
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	e115      	b.n	800444a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	f040 808a 	bne.w	800433e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004230:	d137      	bne.n	80042a2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004240:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004250:	d113      	bne.n	800427a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004260:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	e0e7      	b.n	800444a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	623b      	str	r3, [r7, #32]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e0d3      	b.n	800444a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d02e      	beq.n	8004306 <I2C_Master_ADDR+0x1b2>
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d02b      	beq.n	8004306 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	2b12      	cmp	r3, #18
 80042b2:	d102      	bne.n	80042ba <I2C_Master_ADDR+0x166>
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d125      	bne.n	8004306 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d00e      	beq.n	80042de <I2C_Master_ADDR+0x18a>
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d00b      	beq.n	80042de <I2C_Master_ADDR+0x18a>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d008      	beq.n	80042de <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e007      	b.n	80042ee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	e0a1      	b.n	800444a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004314:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e085      	b.n	800444a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d14d      	bne.n	80043e4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	2b04      	cmp	r3, #4
 800434c:	d016      	beq.n	800437c <I2C_Master_ADDR+0x228>
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	2b02      	cmp	r3, #2
 8004352:	d013      	beq.n	800437c <I2C_Master_ADDR+0x228>
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	2b10      	cmp	r3, #16
 8004358:	d010      	beq.n	800437c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004368:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	e007      	b.n	800438c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800438a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	d117      	bne.n	80043cc <I2C_Master_ADDR+0x278>
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a2:	d00b      	beq.n	80043bc <I2C_Master_ADDR+0x268>
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d008      	beq.n	80043bc <I2C_Master_ADDR+0x268>
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d005      	beq.n	80043bc <I2C_Master_ADDR+0x268>
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d002      	beq.n	80043bc <I2C_Master_ADDR+0x268>
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d107      	bne.n	80043cc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	e032      	b.n	800444a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043f2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004402:	d117      	bne.n	8004434 <I2C_Master_ADDR+0x2e0>
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800440a:	d00b      	beq.n	8004424 <I2C_Master_ADDR+0x2d0>
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	2b01      	cmp	r3, #1
 8004410:	d008      	beq.n	8004424 <I2C_Master_ADDR+0x2d0>
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2b08      	cmp	r3, #8
 8004416:	d005      	beq.n	8004424 <I2C_Master_ADDR+0x2d0>
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	2b10      	cmp	r3, #16
 800441c:	d002      	beq.n	8004424 <I2C_Master_ADDR+0x2d0>
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	2b20      	cmp	r3, #32
 8004422:	d107      	bne.n	8004434 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004432:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004450:	e00b      	b.n	800446a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	e7ff      	b.n	800446a <I2C_Master_ADDR+0x316>
 800446a:	bf00      	nop
 800446c:	3744      	adds	r7, #68	; 0x44
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d02b      	beq.n	80044e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	781a      	ldrb	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d114      	bne.n	80044e8 <I2C_SlaveTransmit_TXE+0x72>
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b29      	cmp	r3, #41	; 0x29
 80044c2:	d111      	bne.n	80044e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2221      	movs	r2, #33	; 0x21
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2228      	movs	r2, #40	; 0x28
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff f9f1 	bl	80038ca <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d011      	beq.n	8004526 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	781a      	ldrb	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02c      	beq.n	80045a6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d114      	bne.n	80045a6 <I2C_SlaveReceive_RXNE+0x74>
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b2a      	cmp	r3, #42	; 0x2a
 8004580:	d111      	bne.n	80045a6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004590:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2222      	movs	r2, #34	; 0x22
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2228      	movs	r2, #40	; 0x28
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff f99c 	bl	80038de <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d012      	beq.n	80045e6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800460c:	2b28      	cmp	r3, #40	; 0x28
 800460e:	d127      	bne.n	8004660 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	089b      	lsrs	r3, r3, #2
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	09db      	lsrs	r3, r3, #7
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	81bb      	strh	r3, [r7, #12]
 8004642:	e002      	b.n	800464a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004652:	89ba      	ldrh	r2, [r7, #12]
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff f94a 	bl	80038f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800465e:	e00e      	b.n	800467e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004696:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046a8:	2300      	movs	r3, #0
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e4:	d172      	bne.n	80047cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b22      	cmp	r3, #34	; 0x22
 80046ea:	d002      	beq.n	80046f2 <I2C_Slave_STOPF+0x6a>
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b2a      	cmp	r3, #42	; 0x2a
 80046f0:	d135      	bne.n	800475e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f043 0204 	orr.w	r2, r3, #4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004724:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe f980 	bl	8002a30 <HAL_DMA_GetState>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d049      	beq.n	80047ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	4a69      	ldr	r2, [pc, #420]	; (80048e0 <I2C_Slave_STOPF+0x258>)
 800473c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	4618      	mov	r0, r3
 8004744:	f7fd ffc8 	bl	80026d8 <HAL_DMA_Abort_IT>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d03d      	beq.n	80047ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004758:	4610      	mov	r0, r2
 800475a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800475c:	e035      	b.n	80047ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f043 0204 	orr.w	r2, r3, #4
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004790:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe f94a 	bl	8002a30 <HAL_DMA_GetState>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d014      	beq.n	80047cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	4a4e      	ldr	r2, [pc, #312]	; (80048e0 <I2C_Slave_STOPF+0x258>)
 80047a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd ff92 	bl	80026d8 <HAL_DMA_Abort_IT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c4:	4610      	mov	r0, r2
 80047c6:	4798      	blx	r3
 80047c8:	e000      	b.n	80047cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d03e      	beq.n	8004854 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d112      	bne.n	800480a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d112      	bne.n	800483e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f843 	bl	80048e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004862:	e039      	b.n	80048d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b2a      	cmp	r3, #42	; 0x2a
 8004868:	d109      	bne.n	800487e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2228      	movs	r2, #40	; 0x28
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff f830 	bl	80038de <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b28      	cmp	r3, #40	; 0x28
 8004888:	d111      	bne.n	80048ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <I2C_Slave_STOPF+0x25c>)
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff f831 	bl	800390e <HAL_I2C_ListenCpltCallback>
}
 80048ac:	e014      	b.n	80048d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	2b22      	cmp	r3, #34	; 0x22
 80048b4:	d002      	beq.n	80048bc <I2C_Slave_STOPF+0x234>
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b22      	cmp	r3, #34	; 0x22
 80048ba:	d10d      	bne.n	80048d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff f803 	bl	80038de <HAL_I2C_SlaveRxCpltCallback>
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	08004ce9 	.word	0x08004ce9
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	2b10      	cmp	r3, #16
 8004904:	d002      	beq.n	800490c <I2C_ITError+0x24>
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d10a      	bne.n	8004922 <I2C_ITError+0x3a>
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b22      	cmp	r3, #34	; 0x22
 8004910:	d107      	bne.n	8004922 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004920:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004928:	2b28      	cmp	r3, #40	; 0x28
 800492a:	d107      	bne.n	800493c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2228      	movs	r2, #40	; 0x28
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800493a:	e015      	b.n	8004968 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494a:	d00a      	beq.n	8004962 <I2C_ITError+0x7a>
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b60      	cmp	r3, #96	; 0x60
 8004950:	d007      	beq.n	8004962 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004976:	d162      	bne.n	8004a3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004986:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d020      	beq.n	80049d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	4a6a      	ldr	r2, [pc, #424]	; (8004b44 <I2C_ITError+0x25c>)
 800499c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd fe98 	bl	80026d8 <HAL_DMA_Abort_IT>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8089 	beq.w	8004ac2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049d2:	4610      	mov	r0, r2
 80049d4:	4798      	blx	r3
 80049d6:	e074      	b.n	8004ac2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	4a59      	ldr	r2, [pc, #356]	; (8004b44 <I2C_ITError+0x25c>)
 80049de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fd fe77 	bl	80026d8 <HAL_DMA_Abort_IT>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d068      	beq.n	8004ac2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d10b      	bne.n	8004a16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
 8004a3c:	e041      	b.n	8004ac2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b60      	cmp	r3, #96	; 0x60
 8004a48:	d125      	bne.n	8004a96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d10b      	bne.n	8004a7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fe ff65 	bl	800395e <HAL_I2C_AbortCpltCallback>
 8004a94:	e015      	b.n	8004ac2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d10b      	bne.n	8004abc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fe ff44 	bl	800394a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10e      	bne.n	8004af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004afe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d113      	bne.n	8004b3c <I2C_ITError+0x254>
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b28      	cmp	r3, #40	; 0x28
 8004b18:	d110      	bne.n	8004b3c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <I2C_ITError+0x260>)
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fe fee9 	bl	800390e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	08004ce9 	.word	0x08004ce9
 8004b48:	ffff0000 	.word	0xffff0000

08004b4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d006      	beq.n	8004b86 <I2C_MasterRequestRead+0x3a>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d003      	beq.n	8004b86 <I2C_MasterRequestRead+0x3a>
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b84:	d108      	bne.n	8004b98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e00b      	b.n	8004bb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	2b11      	cmp	r3, #17
 8004b9e:	d107      	bne.n	8004bb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f93b 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00d      	beq.n	8004be4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd6:	d103      	bne.n	8004be0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e079      	b.n	8004cd8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bec:	d108      	bne.n	8004c00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bee:	897b      	ldrh	r3, [r7, #10]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	611a      	str	r2, [r3, #16]
 8004bfe:	e05f      	b.n	8004cc0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c00:	897b      	ldrh	r3, [r7, #10]
 8004c02:	11db      	asrs	r3, r3, #7
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 0306 	and.w	r3, r3, #6
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f063 030f 	orn	r3, r3, #15
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	4930      	ldr	r1, [pc, #192]	; (8004ce0 <I2C_MasterRequestRead+0x194>)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f961 	bl	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e054      	b.n	8004cd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c2e:	897b      	ldrh	r3, [r7, #10]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	4929      	ldr	r1, [pc, #164]	; (8004ce4 <I2C_MasterRequestRead+0x198>)
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f951 	bl	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e044      	b.n	8004cd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f8d9 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00d      	beq.n	8004ca8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9a:	d103      	bne.n	8004ca4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e017      	b.n	8004cd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ca8:	897b      	ldrh	r3, [r7, #10]
 8004caa:	11db      	asrs	r3, r3, #7
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f003 0306 	and.w	r3, r3, #6
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f063 030e 	orn	r3, r3, #14
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4907      	ldr	r1, [pc, #28]	; (8004ce4 <I2C_MasterRequestRead+0x198>)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f90d 	bl	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	00010008 	.word	0x00010008
 8004ce4:	00010002 	.word	0x00010002

08004ce8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d02:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <I2C_DMAAbort+0x148>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	08db      	lsrs	r3, r3, #3
 8004d08:	4a4a      	ldr	r2, [pc, #296]	; (8004e34 <I2C_DMAAbort+0x14c>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0a1a      	lsrs	r2, r3, #8
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00da      	lsls	r2, r3, #3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d2e:	e00a      	b.n	8004d46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d44:	d0ea      	beq.n	8004d1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	2200      	movs	r2, #0
 8004d54:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	2200      	movs	r2, #0
 8004d64:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	2200      	movs	r2, #0
 8004d8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	2200      	movs	r2, #0
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b60      	cmp	r3, #96	; 0x60
 8004db6:	d10e      	bne.n	8004dd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dce:	6978      	ldr	r0, [r7, #20]
 8004dd0:	f7fe fdc5 	bl	800395e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dd4:	e027      	b.n	8004e26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dd6:	7cfb      	ldrb	r3, [r7, #19]
 8004dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ddc:	2b28      	cmp	r3, #40	; 0x28
 8004dde:	d117      	bne.n	8004e10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2228      	movs	r2, #40	; 0x28
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e0e:	e007      	b.n	8004e20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e20:	6978      	ldr	r0, [r7, #20]
 8004e22:	f7fe fd92 	bl	800394a <HAL_I2C_ErrorCallback>
}
 8004e26:	bf00      	nop
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000030 	.word	0x20000030
 8004e34:	14f8b589 	.word	0x14f8b589

08004e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e48:	e025      	b.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d021      	beq.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fd f9e1 	bl	8002218 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d116      	bne.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e023      	b.n	8004ede <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	0c1b      	lsrs	r3, r3, #16
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10d      	bne.n	8004ebc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	43da      	mvns	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bf0c      	ite	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	2300      	movne	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	e00c      	b.n	8004ed6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d0b6      	beq.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ef4:	e051      	b.n	8004f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f04:	d123      	bne.n	8004f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f043 0204 	orr.w	r2, r3, #4
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e046      	b.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d021      	beq.n	8004f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f56:	f7fd f95f 	bl	8002218 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d116      	bne.n	8004f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f043 0220 	orr.w	r2, r3, #32
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e020      	b.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10c      	bne.n	8004fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	43da      	mvns	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bf14      	ite	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	2300      	moveq	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	e00b      	b.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	43da      	mvns	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf14      	ite	ne
 8004fd0:	2301      	movne	r3, #1
 8004fd2:	2300      	moveq	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d18d      	bne.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ff0:	4b13      	ldr	r3, [pc, #76]	; (8005040 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	08db      	lsrs	r3, r3, #3
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	0a1a      	lsrs	r2, r3, #8
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3b01      	subs	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d107      	bne.n	8005022 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e008      	b.n	8005034 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005030:	d0e9      	beq.n	8005006 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000030 	.word	0x20000030
 8005044:	14f8b589 	.word	0x14f8b589

08005048 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005054:	e042      	b.n	80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	d119      	bne.n	8005098 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0210 	mvn.w	r2, #16
 800506c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e029      	b.n	80050ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005098:	f7fd f8be 	bl	8002218 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d116      	bne.n	80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e007      	b.n	80050ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d1b5      	bne.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005104:	d103      	bne.n	800510e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800510c:	e007      	b.n	800511e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005116:	d102      	bne.n	800511e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2208      	movs	r2, #8
 800511c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e264      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d075      	beq.n	8005236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800514a:	4ba3      	ldr	r3, [pc, #652]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b04      	cmp	r3, #4
 8005154:	d00c      	beq.n	8005170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005156:	4ba0      	ldr	r3, [pc, #640]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800515e:	2b08      	cmp	r3, #8
 8005160:	d112      	bne.n	8005188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005162:	4b9d      	ldr	r3, [pc, #628]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516e:	d10b      	bne.n	8005188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005170:	4b99      	ldr	r3, [pc, #612]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05b      	beq.n	8005234 <HAL_RCC_OscConfig+0x108>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d157      	bne.n	8005234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e23f      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d106      	bne.n	80051a0 <HAL_RCC_OscConfig+0x74>
 8005192:	4b91      	ldr	r3, [pc, #580]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a90      	ldr	r2, [pc, #576]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e01d      	b.n	80051dc <HAL_RCC_OscConfig+0xb0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x98>
 80051aa:	4b8b      	ldr	r3, [pc, #556]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a8a      	ldr	r2, [pc, #552]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	4b88      	ldr	r3, [pc, #544]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a87      	ldr	r2, [pc, #540]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e00b      	b.n	80051dc <HAL_RCC_OscConfig+0xb0>
 80051c4:	4b84      	ldr	r3, [pc, #528]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a83      	ldr	r2, [pc, #524]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b81      	ldr	r3, [pc, #516]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a80      	ldr	r2, [pc, #512]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d013      	beq.n	800520c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7fd f818 	bl	8002218 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ec:	f7fd f814 	bl	8002218 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e204      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fe:	4b76      	ldr	r3, [pc, #472]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0xc0>
 800520a:	e014      	b.n	8005236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fd f804 	bl	8002218 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005214:	f7fd f800 	bl	8002218 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1f0      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005226:	4b6c      	ldr	r3, [pc, #432]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0xe8>
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d063      	beq.n	800530a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005242:	4b65      	ldr	r3, [pc, #404]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800524e:	4b62      	ldr	r3, [pc, #392]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005256:	2b08      	cmp	r3, #8
 8005258:	d11c      	bne.n	8005294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800525a:	4b5f      	ldr	r3, [pc, #380]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d116      	bne.n	8005294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005266:	4b5c      	ldr	r3, [pc, #368]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_RCC_OscConfig+0x152>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d001      	beq.n	800527e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e1c4      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527e:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4952      	ldr	r1, [pc, #328]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005292:	e03a      	b.n	800530a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800529c:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <HAL_RCC_OscConfig+0x2b0>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fc ffb9 	bl	8002218 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052aa:	f7fc ffb5 	bl	8002218 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e1a5      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052bc:	4b46      	ldr	r3, [pc, #280]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c8:	4b43      	ldr	r3, [pc, #268]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4940      	ldr	r1, [pc, #256]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]
 80052dc:	e015      	b.n	800530a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052de:	4b3f      	ldr	r3, [pc, #252]	; (80053dc <HAL_RCC_OscConfig+0x2b0>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fc ff98 	bl	8002218 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ec:	f7fc ff94 	bl	8002218 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e184      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052fe:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d030      	beq.n	8005378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d016      	beq.n	800534c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800531e:	4b30      	ldr	r3, [pc, #192]	; (80053e0 <HAL_RCC_OscConfig+0x2b4>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fc ff78 	bl	8002218 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800532c:	f7fc ff74 	bl	8002218 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e164      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800533e:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x200>
 800534a:	e015      	b.n	8005378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534c:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCC_OscConfig+0x2b4>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fc ff61 	bl	8002218 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535a:	f7fc ff5d 	bl	8002218 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e14d      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800536e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f0      	bne.n	800535a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a0 	beq.w	80054c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b6:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <HAL_RCC_OscConfig+0x2b8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d121      	bne.n	8005406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <HAL_RCC_OscConfig+0x2b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <HAL_RCC_OscConfig+0x2b8>)
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ce:	f7fc ff23 	bl	8002218 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d4:	e011      	b.n	80053fa <HAL_RCC_OscConfig+0x2ce>
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	42470000 	.word	0x42470000
 80053e0:	42470e80 	.word	0x42470e80
 80053e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e8:	f7fc ff16 	bl	8002218 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e106      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fa:	4b85      	ldr	r3, [pc, #532]	; (8005610 <HAL_RCC_OscConfig+0x4e4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d106      	bne.n	800541c <HAL_RCC_OscConfig+0x2f0>
 800540e:	4b81      	ldr	r3, [pc, #516]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a80      	ldr	r2, [pc, #512]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	e01c      	b.n	8005456 <HAL_RCC_OscConfig+0x32a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b05      	cmp	r3, #5
 8005422:	d10c      	bne.n	800543e <HAL_RCC_OscConfig+0x312>
 8005424:	4b7b      	ldr	r3, [pc, #492]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	4a7a      	ldr	r2, [pc, #488]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800542a:	f043 0304 	orr.w	r3, r3, #4
 800542e:	6713      	str	r3, [r2, #112]	; 0x70
 8005430:	4b78      	ldr	r3, [pc, #480]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	4a77      	ldr	r2, [pc, #476]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6713      	str	r3, [r2, #112]	; 0x70
 800543c:	e00b      	b.n	8005456 <HAL_RCC_OscConfig+0x32a>
 800543e:	4b75      	ldr	r3, [pc, #468]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	4a74      	ldr	r2, [pc, #464]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6713      	str	r3, [r2, #112]	; 0x70
 800544a:	4b72      	ldr	r3, [pc, #456]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	4a71      	ldr	r2, [pc, #452]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005450:	f023 0304 	bic.w	r3, r3, #4
 8005454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d015      	beq.n	800548a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fc fedb 	bl	8002218 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005464:	e00a      	b.n	800547c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fc fed7 	bl	8002218 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f241 3288 	movw	r2, #5000	; 0x1388
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e0c5      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547c:	4b65      	ldr	r3, [pc, #404]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0ee      	beq.n	8005466 <HAL_RCC_OscConfig+0x33a>
 8005488:	e014      	b.n	80054b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548a:	f7fc fec5 	bl	8002218 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005490:	e00a      	b.n	80054a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005492:	f7fc fec1 	bl	8002218 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0af      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a8:	4b5a      	ldr	r3, [pc, #360]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ee      	bne.n	8005492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d105      	bne.n	80054c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ba:	4b56      	ldr	r3, [pc, #344]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a55      	ldr	r2, [pc, #340]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80054c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 809b 	beq.w	8005606 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054d0:	4b50      	ldr	r3, [pc, #320]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 030c 	and.w	r3, r3, #12
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d05c      	beq.n	8005596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d141      	bne.n	8005568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e4:	4b4c      	ldr	r3, [pc, #304]	; (8005618 <HAL_RCC_OscConfig+0x4ec>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ea:	f7fc fe95 	bl	8002218 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f2:	f7fc fe91 	bl	8002218 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e081      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005504:	4b43      	ldr	r3, [pc, #268]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	019b      	lsls	r3, r3, #6
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	3b01      	subs	r3, #1
 800552a:	041b      	lsls	r3, r3, #16
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	061b      	lsls	r3, r3, #24
 8005534:	4937      	ldr	r1, [pc, #220]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005536:	4313      	orrs	r3, r2
 8005538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <HAL_RCC_OscConfig+0x4ec>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005540:	f7fc fe6a 	bl	8002218 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005548:	f7fc fe66 	bl	8002218 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e056      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x41c>
 8005566:	e04e      	b.n	8005606 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005568:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <HAL_RCC_OscConfig+0x4ec>)
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556e:	f7fc fe53 	bl	8002218 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005576:	f7fc fe4f 	bl	8002218 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e03f      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005588:	4b22      	ldr	r3, [pc, #136]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f0      	bne.n	8005576 <HAL_RCC_OscConfig+0x44a>
 8005594:	e037      	b.n	8005606 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e032      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055a2:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d028      	beq.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d121      	bne.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d11a      	bne.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055d2:	4013      	ands	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055da:	4293      	cmp	r3, r2
 80055dc:	d111      	bne.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	3b01      	subs	r3, #1
 80055ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d001      	beq.n	8005606 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40007000 	.word	0x40007000
 8005614:	40023800 	.word	0x40023800
 8005618:	42470060 	.word	0x42470060

0800561c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0cc      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b68      	ldr	r3, [pc, #416]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d90c      	bls.n	8005658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b63      	ldr	r3, [pc, #396]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0b8      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005670:	4b59      	ldr	r3, [pc, #356]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a58      	ldr	r2, [pc, #352]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800567a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005688:	4b53      	ldr	r3, [pc, #332]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4a52      	ldr	r2, [pc, #328]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005694:	4b50      	ldr	r3, [pc, #320]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	494d      	ldr	r1, [pc, #308]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d044      	beq.n	800573c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d107      	bne.n	80056ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ba:	4b47      	ldr	r3, [pc, #284]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d119      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e07f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d003      	beq.n	80056da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056da:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e06f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ea:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e067      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056fa:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 0203 	bic.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4934      	ldr	r1, [pc, #208]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005708:	4313      	orrs	r3, r2
 800570a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800570c:	f7fc fd84 	bl	8002218 <HAL_GetTick>
 8005710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005712:	e00a      	b.n	800572a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005714:	f7fc fd80 	bl	8002218 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e04f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572a:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 020c 	and.w	r2, r3, #12
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	429a      	cmp	r2, r3
 800573a:	d1eb      	bne.n	8005714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d20c      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e032      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4916      	ldr	r1, [pc, #88]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	490e      	ldr	r1, [pc, #56]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057a2:	f000 f821 	bl	80057e8 <HAL_RCC_GetSysClockFreq>
 80057a6:	4602      	mov	r2, r0
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	490a      	ldr	r1, [pc, #40]	; (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 80057b4:	5ccb      	ldrb	r3, [r1, r3]
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80057bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fc fce4 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40023c00 	.word	0x40023c00
 80057d8:	40023800 	.word	0x40023800
 80057dc:	0800a7d8 	.word	0x0800a7d8
 80057e0:	20000030 	.word	0x20000030
 80057e4:	20000034 	.word	0x20000034

080057e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	607b      	str	r3, [r7, #4]
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	2300      	movs	r3, #0
 80057fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005800:	4b67      	ldr	r3, [pc, #412]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 030c 	and.w	r3, r3, #12
 8005808:	2b08      	cmp	r3, #8
 800580a:	d00d      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0x40>
 800580c:	2b08      	cmp	r3, #8
 800580e:	f200 80bd 	bhi.w	800598c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x34>
 8005816:	2b04      	cmp	r3, #4
 8005818:	d003      	beq.n	8005822 <HAL_RCC_GetSysClockFreq+0x3a>
 800581a:	e0b7      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800581c:	4b61      	ldr	r3, [pc, #388]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800581e:	60bb      	str	r3, [r7, #8]
       break;
 8005820:	e0b7      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005822:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005824:	60bb      	str	r3, [r7, #8]
      break;
 8005826:	e0b4      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005828:	4b5d      	ldr	r3, [pc, #372]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005830:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005832:	4b5b      	ldr	r3, [pc, #364]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d04d      	beq.n	80058da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800583e:	4b58      	ldr	r3, [pc, #352]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	099b      	lsrs	r3, r3, #6
 8005844:	461a      	mov	r2, r3
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800584e:	f04f 0100 	mov.w	r1, #0
 8005852:	ea02 0800 	and.w	r8, r2, r0
 8005856:	ea03 0901 	and.w	r9, r3, r1
 800585a:	4640      	mov	r0, r8
 800585c:	4649      	mov	r1, r9
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	014b      	lsls	r3, r1, #5
 8005868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800586c:	0142      	lsls	r2, r0, #5
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	ebb0 0008 	subs.w	r0, r0, r8
 8005876:	eb61 0109 	sbc.w	r1, r1, r9
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	018b      	lsls	r3, r1, #6
 8005884:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005888:	0182      	lsls	r2, r0, #6
 800588a:	1a12      	subs	r2, r2, r0
 800588c:	eb63 0301 	sbc.w	r3, r3, r1
 8005890:	f04f 0000 	mov.w	r0, #0
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	00d9      	lsls	r1, r3, #3
 800589a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800589e:	00d0      	lsls	r0, r2, #3
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	eb12 0208 	adds.w	r2, r2, r8
 80058a8:	eb43 0309 	adc.w	r3, r3, r9
 80058ac:	f04f 0000 	mov.w	r0, #0
 80058b0:	f04f 0100 	mov.w	r1, #0
 80058b4:	0259      	lsls	r1, r3, #9
 80058b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80058ba:	0250      	lsls	r0, r2, #9
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	f7fb f974 	bl	8000bb8 <__aeabi_uldivmod>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4613      	mov	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e04a      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058da:	4b31      	ldr	r3, [pc, #196]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	099b      	lsrs	r3, r3, #6
 80058e0:	461a      	mov	r2, r3
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058ea:	f04f 0100 	mov.w	r1, #0
 80058ee:	ea02 0400 	and.w	r4, r2, r0
 80058f2:	ea03 0501 	and.w	r5, r3, r1
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	014b      	lsls	r3, r1, #5
 8005904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005908:	0142      	lsls	r2, r0, #5
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	1b00      	subs	r0, r0, r4
 8005910:	eb61 0105 	sbc.w	r1, r1, r5
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	018b      	lsls	r3, r1, #6
 800591e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005922:	0182      	lsls	r2, r0, #6
 8005924:	1a12      	subs	r2, r2, r0
 8005926:	eb63 0301 	sbc.w	r3, r3, r1
 800592a:	f04f 0000 	mov.w	r0, #0
 800592e:	f04f 0100 	mov.w	r1, #0
 8005932:	00d9      	lsls	r1, r3, #3
 8005934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005938:	00d0      	lsls	r0, r2, #3
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	1912      	adds	r2, r2, r4
 8005940:	eb45 0303 	adc.w	r3, r5, r3
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	f04f 0100 	mov.w	r1, #0
 800594c:	0299      	lsls	r1, r3, #10
 800594e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005952:	0290      	lsls	r0, r2, #10
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	461a      	mov	r2, r3
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	f7fb f928 	bl	8000bb8 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4613      	mov	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	3301      	adds	r3, #1
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	60bb      	str	r3, [r7, #8]
      break;
 800598a:	e002      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800598e:	60bb      	str	r3, [r7, #8]
      break;
 8005990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005992:	68bb      	ldr	r3, [r7, #8]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800599e:	bf00      	nop
 80059a0:	40023800 	.word	0x40023800
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	007a1200 	.word	0x007a1200

080059ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b2:	681b      	ldr	r3, [r3, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000030 	.word	0x20000030

080059c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059c8:	f7ff fff0 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0a9b      	lsrs	r3, r3, #10
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4903      	ldr	r1, [pc, #12]	; (80059e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	0800a7e8 	.word	0x0800a7e8

080059ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059f0:	f7ff ffdc 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059f4:	4602      	mov	r2, r0
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	0b5b      	lsrs	r3, r3, #13
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	4903      	ldr	r1, [pc, #12]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a02:	5ccb      	ldrb	r3, [r1, r3]
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	0800a7e8 	.word	0x0800a7e8

08005a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e041      	b.n	8005aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fc f894 	bl	8001b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f000 fcb8 	bl	80063c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d001      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e044      	b.n	8005b56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <HAL_TIM_Base_Start_IT+0xb0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d018      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x6c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d013      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x6c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <HAL_TIM_Base_Start_IT+0xb4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00e      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x6c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <HAL_TIM_Base_Start_IT+0xb8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x6c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a17      	ldr	r2, [pc, #92]	; (8005b70 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x6c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a16      	ldr	r2, [pc, #88]	; (8005b74 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d111      	bne.n	8005b44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b06      	cmp	r3, #6
 8005b30:	d010      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b42:	e007      	b.n	8005b54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40014000 	.word	0x40014000

08005b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e041      	b.n	8005c0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f839 	bl	8005c16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f000 fc06 	bl	80063c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <HAL_TIM_PWM_Start+0x24>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	e022      	b.n	8005c96 <HAL_TIM_PWM_Start+0x6a>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d109      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x3e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	bf14      	ite	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	2300      	moveq	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	e015      	b.n	8005c96 <HAL_TIM_PWM_Start+0x6a>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d109      	bne.n	8005c84 <HAL_TIM_PWM_Start+0x58>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	bf14      	ite	ne
 8005c7c:	2301      	movne	r3, #1
 8005c7e:	2300      	moveq	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	e008      	b.n	8005c96 <HAL_TIM_PWM_Start+0x6a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	bf14      	ite	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	2300      	moveq	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e068      	b.n	8005d70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start+0x82>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cac:	e013      	b.n	8005cd6 <HAL_TIM_PWM_Start+0xaa>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Start+0x92>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbc:	e00b      	b.n	8005cd6 <HAL_TIM_PWM_Start+0xaa>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Start+0xa2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ccc:	e003      	b.n	8005cd6 <HAL_TIM_PWM_Start+0xaa>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fe18 	bl	8006914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a23      	ldr	r2, [pc, #140]	; (8005d78 <HAL_TIM_PWM_Start+0x14c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d107      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <HAL_TIM_PWM_Start+0x14c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d018      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x10e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d013      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x10e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a19      	ldr	r2, [pc, #100]	; (8005d7c <HAL_TIM_PWM_Start+0x150>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x10e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <HAL_TIM_PWM_Start+0x154>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x10e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <HAL_TIM_PWM_Start+0x158>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x10e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <HAL_TIM_PWM_Start+0x15c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d111      	bne.n	8005d5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b06      	cmp	r3, #6
 8005d4a:	d010      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5c:	e007      	b.n	8005d6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40014000 	.word	0x40014000

08005d8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fdb8 	bl	8006914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a29      	ldr	r2, [pc, #164]	; (8005e50 <HAL_TIM_PWM_Stop+0xc4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d117      	bne.n	8005dde <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10f      	bne.n	8005dde <HAL_TIM_PWM_Stop+0x52>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	f240 4344 	movw	r3, #1092	; 0x444
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d107      	bne.n	8005dde <HAL_TIM_PWM_Stop+0x52>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <HAL_TIM_PWM_Stop+0x82>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	f240 4344 	movw	r3, #1092	; 0x444
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d107      	bne.n	8005e0e <HAL_TIM_PWM_Stop+0x82>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Stop+0x92>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e1c:	e013      	b.n	8005e46 <HAL_TIM_PWM_Stop+0xba>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Stop+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e2c:	e00b      	b.n	8005e46 <HAL_TIM_PWM_Stop+0xba>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_PWM_Stop+0xb2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3c:	e003      	b.n	8005e46 <HAL_TIM_PWM_Stop+0xba>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40010000 	.word	0x40010000

08005e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d122      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d11b      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0202 	mvn.w	r2, #2
 8005e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa77 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa69 	bl	8006376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa7a 	bl	800639e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d122      	bne.n	8005f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d11b      	bne.n	8005f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0204 	mvn.w	r2, #4
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa4d 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa3f 	bl	8006376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa50 	bl	800639e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d122      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d11b      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0208 	mvn.w	r2, #8
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa23 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa15 	bl	8006376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fa26 	bl	800639e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	d122      	bne.n	8005fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d11b      	bne.n	8005fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0210 	mvn.w	r2, #16
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2208      	movs	r2, #8
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9f9 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9eb 	bl	8006376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f9fc 	bl	800639e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d107      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0201 	mvn.w	r2, #1
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fb fc1a 	bl	800180c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d10e      	bne.n	8006004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d107      	bne.n	8006004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fd26 	bl	8006a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d10e      	bne.n	8006030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d107      	bne.n	8006030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f9c1 	bl	80063b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b20      	cmp	r3, #32
 800603c:	d10e      	bne.n	800605c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b20      	cmp	r3, #32
 800604a:	d107      	bne.n	800605c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0220 	mvn.w	r2, #32
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fcf0 	bl	8006a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800607e:	2302      	movs	r3, #2
 8006080:	e0ae      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b0c      	cmp	r3, #12
 800608e:	f200 809f 	bhi.w	80061d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080061d1 	.word	0x080061d1
 80060a0:	080061d1 	.word	0x080061d1
 80060a4:	080061d1 	.word	0x080061d1
 80060a8:	0800610d 	.word	0x0800610d
 80060ac:	080061d1 	.word	0x080061d1
 80060b0:	080061d1 	.word	0x080061d1
 80060b4:	080061d1 	.word	0x080061d1
 80060b8:	0800614f 	.word	0x0800614f
 80060bc:	080061d1 	.word	0x080061d1
 80060c0:	080061d1 	.word	0x080061d1
 80060c4:	080061d1 	.word	0x080061d1
 80060c8:	0800618f 	.word	0x0800618f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f9f8 	bl	80064c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0208 	orr.w	r2, r2, #8
 80060e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0204 	bic.w	r2, r2, #4
 80060f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6999      	ldr	r1, [r3, #24]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	619a      	str	r2, [r3, #24]
      break;
 800610a:	e064      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa3e 	bl	8006594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6999      	ldr	r1, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	619a      	str	r2, [r3, #24]
      break;
 800614c:	e043      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fa89 	bl	800666c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0208 	orr.w	r2, r2, #8
 8006168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0204 	bic.w	r2, r2, #4
 8006178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69d9      	ldr	r1, [r3, #28]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	61da      	str	r2, [r3, #28]
      break;
 800618c:	e023      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fad3 	bl	8006740 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69d9      	ldr	r1, [r3, #28]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	021a      	lsls	r2, r3, #8
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	61da      	str	r2, [r3, #28]
      break;
 80061ce:	e002      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
      break;
 80061d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_TIM_ConfigClockSource+0x1c>
 8006200:	2302      	movs	r3, #2
 8006202:	e0b4      	b.n	800636e <HAL_TIM_ConfigClockSource+0x186>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800622a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623c:	d03e      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0xd4>
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006242:	f200 8087 	bhi.w	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624a:	f000 8086 	beq.w	800635a <HAL_TIM_ConfigClockSource+0x172>
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006252:	d87f      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 8006254:	2b70      	cmp	r3, #112	; 0x70
 8006256:	d01a      	beq.n	800628e <HAL_TIM_ConfigClockSource+0xa6>
 8006258:	2b70      	cmp	r3, #112	; 0x70
 800625a:	d87b      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 800625c:	2b60      	cmp	r3, #96	; 0x60
 800625e:	d050      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0x11a>
 8006260:	2b60      	cmp	r3, #96	; 0x60
 8006262:	d877      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 8006264:	2b50      	cmp	r3, #80	; 0x50
 8006266:	d03c      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006268:	2b50      	cmp	r3, #80	; 0x50
 800626a:	d873      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	d058      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x13a>
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d86f      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 8006274:	2b30      	cmp	r3, #48	; 0x30
 8006276:	d064      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x15a>
 8006278:	2b30      	cmp	r3, #48	; 0x30
 800627a:	d86b      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b20      	cmp	r3, #32
 800627e:	d060      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x15a>
 8006280:	2b20      	cmp	r3, #32
 8006282:	d867      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d05c      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x15a>
 8006288:	2b10      	cmp	r3, #16
 800628a:	d05a      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x15a>
 800628c:	e062      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6899      	ldr	r1, [r3, #8]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f000 fb19 	bl	80068d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	609a      	str	r2, [r3, #8]
      break;
 80062ba:	e04f      	b.n	800635c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	6899      	ldr	r1, [r3, #8]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f000 fb02 	bl	80068d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062de:	609a      	str	r2, [r3, #8]
      break;
 80062e0:	e03c      	b.n	800635c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f000 fa76 	bl	80067e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2150      	movs	r1, #80	; 0x50
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 facf 	bl	800689e <TIM_ITRx_SetConfig>
      break;
 8006300:	e02c      	b.n	800635c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6859      	ldr	r1, [r3, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	461a      	mov	r2, r3
 8006310:	f000 fa95 	bl	800683e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2160      	movs	r1, #96	; 0x60
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fabf 	bl	800689e <TIM_ITRx_SetConfig>
      break;
 8006320:	e01c      	b.n	800635c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6859      	ldr	r1, [r3, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	461a      	mov	r2, r3
 8006330:	f000 fa56 	bl	80067e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2140      	movs	r1, #64	; 0x40
 800633a:	4618      	mov	r0, r3
 800633c:	f000 faaf 	bl	800689e <TIM_ITRx_SetConfig>
      break;
 8006340:	e00c      	b.n	800635c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f000 faa6 	bl	800689e <TIM_ITRx_SetConfig>
      break;
 8006352:	e003      	b.n	800635c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
      break;
 8006358:	e000      	b.n	800635c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800635a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a34      	ldr	r2, [pc, #208]	; (80064ac <TIM_Base_SetConfig+0xe4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a31      	ldr	r2, [pc, #196]	; (80064b0 <TIM_Base_SetConfig+0xe8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a30      	ldr	r2, [pc, #192]	; (80064b4 <TIM_Base_SetConfig+0xec>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a2f      	ldr	r2, [pc, #188]	; (80064b8 <TIM_Base_SetConfig+0xf0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d108      	bne.n	8006412 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a25      	ldr	r2, [pc, #148]	; (80064ac <TIM_Base_SetConfig+0xe4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01b      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006420:	d017      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <TIM_Base_SetConfig+0xe8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <TIM_Base_SetConfig+0xec>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00f      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a20      	ldr	r2, [pc, #128]	; (80064b8 <TIM_Base_SetConfig+0xf0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00b      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <TIM_Base_SetConfig+0xf4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <TIM_Base_SetConfig+0xf8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <TIM_Base_SetConfig+0xfc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d108      	bne.n	8006464 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a08      	ldr	r2, [pc, #32]	; (80064ac <TIM_Base_SetConfig+0xe4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d103      	bne.n	8006498 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	615a      	str	r2, [r3, #20]
}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40010000 	.word	0x40010000
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800
 80064b8:	40000c00 	.word	0x40000c00
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800

080064c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f023 0201 	bic.w	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f023 0302 	bic.w	r3, r3, #2
 8006510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <TIM_OC1_SetConfig+0xc8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d10c      	bne.n	800653e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f023 0308 	bic.w	r3, r3, #8
 800652a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 0304 	bic.w	r3, r3, #4
 800653c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a13      	ldr	r2, [pc, #76]	; (8006590 <TIM_OC1_SetConfig+0xc8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d111      	bne.n	800656a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	621a      	str	r2, [r3, #32]
}
 8006584:	bf00      	nop
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40010000 	.word	0x40010000

08006594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0210 	bic.w	r2, r3, #16
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0320 	bic.w	r3, r3, #32
 80065de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a1e      	ldr	r2, [pc, #120]	; (8006668 <TIM_OC2_SetConfig+0xd4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d10d      	bne.n	8006610 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a15      	ldr	r2, [pc, #84]	; (8006668 <TIM_OC2_SetConfig+0xd4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d113      	bne.n	8006640 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800661e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000

0800666c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0303 	bic.w	r3, r3, #3
 80066a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1d      	ldr	r2, [pc, #116]	; (800673c <TIM_OC3_SetConfig+0xd0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d10d      	bne.n	80066e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	021b      	lsls	r3, r3, #8
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a14      	ldr	r2, [pc, #80]	; (800673c <TIM_OC3_SetConfig+0xd0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d113      	bne.n	8006716 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	621a      	str	r2, [r3, #32]
}
 8006730:	bf00      	nop
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	40010000 	.word	0x40010000

08006740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800678a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	031b      	lsls	r3, r3, #12
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a10      	ldr	r2, [pc, #64]	; (80067dc <TIM_OC4_SetConfig+0x9c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d109      	bne.n	80067b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	019b      	lsls	r3, r3, #6
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000

080067e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0201 	bic.w	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800680a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 030a 	bic.w	r3, r3, #10
 800681c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683e:	b480      	push	{r7}
 8006840:	b087      	sub	sp, #28
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0210 	bic.w	r2, r3, #16
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	031b      	lsls	r3, r3, #12
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800687a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f043 0307 	orr.w	r3, r3, #7
 80068c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	609a      	str	r2, [r3, #8]
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	021a      	lsls	r2, r3, #8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	609a      	str	r2, [r3, #8]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	2201      	movs	r2, #1
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	43db      	mvns	r3, r3
 8006936:	401a      	ands	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a1a      	ldr	r2, [r3, #32]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	fa01 f303 	lsl.w	r3, r1, r3
 800694c:	431a      	orrs	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006974:	2302      	movs	r3, #2
 8006976:	e050      	b.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d018      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c4:	d013      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a18      	ldr	r2, [pc, #96]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00e      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d009      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a15      	ldr	r2, [pc, #84]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d004      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d10c      	bne.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	40000800 	.word	0x40000800
 8006a34:	40000c00 	.word	0x40000c00
 8006a38:	40014000 	.word	0x40014000

08006a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e03f      	b.n	8006af6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fb f916 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2224      	movs	r2, #36	; 0x24
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fddb 	bl	8007664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695a      	ldr	r2, [r3, #20]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b08a      	sub	sp, #40	; 0x28
 8006b02:	af02      	add	r7, sp, #8
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	603b      	str	r3, [r7, #0]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d17c      	bne.n	8006c18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <HAL_UART_Transmit+0x2c>
 8006b24:	88fb      	ldrh	r3, [r7, #6]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e075      	b.n	8006c1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_UART_Transmit+0x3e>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e06e      	b.n	8006c1a <HAL_UART_Transmit+0x11c>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2221      	movs	r2, #33	; 0x21
 8006b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b52:	f7fb fb61 	bl	8002218 <HAL_GetTick>
 8006b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6c:	d108      	bne.n	8006b80 <HAL_UART_Transmit+0x82>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d104      	bne.n	8006b80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	e003      	b.n	8006b88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b90:	e02a      	b.n	8006be8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2180      	movs	r1, #128	; 0x80
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 fb1f 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e036      	b.n	8006c1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10b      	bne.n	8006bca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e007      	b.n	8006bda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1cf      	bne.n	8006b92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2140      	movs	r1, #64	; 0x40
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 faef 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e006      	b.n	8006c1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e000      	b.n	8006c1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c18:	2302      	movs	r3, #2
  }
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d11d      	bne.n	8006c78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_UART_Receive_IT+0x26>
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e016      	b.n	8006c7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Receive_IT+0x38>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e00f      	b.n	8006c7a <HAL_UART_Receive_IT+0x58>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 fb24 	bl	80072bc <UART_Start_Receive_IT>
 8006c74:	4603      	mov	r3, r0
 8006c76:	e000      	b.n	8006c7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
  }
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b0ba      	sub	sp, #232	; 0xe8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d009      	beq.n	8006cea <HAL_UART_IRQHandler+0x66>
 8006cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fc03 	bl	80074ee <UART_Receive_IT>
      return;
 8006ce8:	e256      	b.n	8007198 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80de 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x22c>
 8006cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80d1 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <HAL_UART_IRQHandler+0xae>
 8006d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f043 0201 	orr.w	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <HAL_UART_IRQHandler+0xd2>
 8006d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f043 0202 	orr.w	r2, r3, #2
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HAL_UART_IRQHandler+0xf6>
 8006d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f043 0204 	orr.w	r2, r3, #4
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d011      	beq.n	8006daa <HAL_UART_IRQHandler+0x126>
 8006d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d105      	bne.n	8006d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f043 0208 	orr.w	r2, r3, #8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 81ed 	beq.w	800718e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d008      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x14e>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb8e 	bl	80074ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	bf0c      	ite	eq
 8006de0:	2301      	moveq	r3, #1
 8006de2:	2300      	movne	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <HAL_UART_IRQHandler+0x17a>
 8006df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d04f      	beq.n	8006e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa96 	bl	8007330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d141      	bne.n	8006e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3314      	adds	r3, #20
 8006e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1d9      	bne.n	8006e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d013      	beq.n	8006e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	4a7d      	ldr	r2, [pc, #500]	; (8007060 <HAL_UART_IRQHandler+0x3dc>)
 8006e6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fb fc30 	bl	80026d8 <HAL_DMA_Abort_IT>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d016      	beq.n	8006eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8c:	e00e      	b.n	8006eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f990 	bl	80071b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	e00a      	b.n	8006eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f98c 	bl	80071b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9c:	e006      	b.n	8006eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f988 	bl	80071b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006eaa:	e170      	b.n	800718e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eac:	bf00      	nop
    return;
 8006eae:	e16e      	b.n	800718e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 814a 	bne.w	800714e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebe:	f003 0310 	and.w	r3, r3, #16
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8143 	beq.w	800714e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 813c 	beq.w	800714e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60bb      	str	r3, [r7, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	60bb      	str	r3, [r7, #8]
 8006eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	f040 80b4 	bne.w	8007064 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8140 	beq.w	8007192 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	f080 8139 	bcs.w	8007192 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f32:	f000 8088 	beq.w	8007046 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	330c      	adds	r3, #12
 8006f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1d9      	bne.n	8006f36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3314      	adds	r3, #20
 8006f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3314      	adds	r3, #20
 8006fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006faa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e1      	bne.n	8006f82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3314      	adds	r3, #20
 8006fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3314      	adds	r3, #20
 8006fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e3      	bne.n	8006fbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007028:	65ba      	str	r2, [r7, #88]	; 0x58
 800702a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800702e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e3      	bne.n	8007004 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	4618      	mov	r0, r3
 8007042:	f7fb fad9 	bl	80025f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800704e:	b29b      	uxth	r3, r3
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	b29b      	uxth	r3, r3
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f8b6 	bl	80071c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800705c:	e099      	b.n	8007192 <HAL_UART_IRQHandler+0x50e>
 800705e:	bf00      	nop
 8007060:	080073f7 	.word	0x080073f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800706c:	b29b      	uxth	r3, r3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 808b 	beq.w	8007196 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8086 	beq.w	8007196 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	330c      	adds	r3, #12
 80070aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070ae:	647a      	str	r2, [r7, #68]	; 0x44
 80070b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e3      	bne.n	800708a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3314      	adds	r3, #20
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	623b      	str	r3, [r7, #32]
   return(result);
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3314      	adds	r3, #20
 80070e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070e6:	633a      	str	r2, [r7, #48]	; 0x30
 80070e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e3      	bne.n	80070c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	60fb      	str	r3, [r7, #12]
   return(result);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0310 	bic.w	r3, r3, #16
 800711e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	330c      	adds	r3, #12
 8007128:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800712c:	61fa      	str	r2, [r7, #28]
 800712e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	69b9      	ldr	r1, [r7, #24]
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	617b      	str	r3, [r7, #20]
   return(result);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e3      	bne.n	8007108 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f83e 	bl	80071c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800714c:	e023      	b.n	8007196 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <HAL_UART_IRQHandler+0x4ea>
 800715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f959 	bl	800741e <UART_Transmit_IT>
    return;
 800716c:	e014      	b.n	8007198 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00e      	beq.n	8007198 <HAL_UART_IRQHandler+0x514>
 800717a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f999 	bl	80074be <UART_EndTransmit_IT>
    return;
 800718c:	e004      	b.n	8007198 <HAL_UART_IRQHandler+0x514>
    return;
 800718e:	bf00      	nop
 8007190:	e002      	b.n	8007198 <HAL_UART_IRQHandler+0x514>
      return;
 8007192:	bf00      	nop
 8007194:	e000      	b.n	8007198 <HAL_UART_IRQHandler+0x514>
      return;
 8007196:	bf00      	nop
  }
}
 8007198:	37e8      	adds	r7, #232	; 0xe8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop

080071a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b090      	sub	sp, #64	; 0x40
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f0:	e050      	b.n	8007294 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d04c      	beq.n	8007294 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <UART_WaitOnFlagUntilTimeout+0x30>
 8007200:	f7fb f80a 	bl	8002218 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720c:	429a      	cmp	r2, r3
 800720e:	d241      	bcs.n	8007294 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	330c      	adds	r3, #12
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007230:	637a      	str	r2, [r7, #52]	; 0x34
 8007232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3314      	adds	r3, #20
 800724a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	613b      	str	r3, [r7, #16]
   return(result);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	63bb      	str	r3, [r7, #56]	; 0x38
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3314      	adds	r3, #20
 8007262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007264:	623a      	str	r2, [r7, #32]
 8007266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	69f9      	ldr	r1, [r7, #28]
 800726a:	6a3a      	ldr	r2, [r7, #32]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	61bb      	str	r3, [r7, #24]
   return(result);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e00f      	b.n	80072b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4013      	ands	r3, r2
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	bf0c      	ite	eq
 80072a4:	2301      	moveq	r3, #1
 80072a6:	2300      	movne	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d09f      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3740      	adds	r7, #64	; 0x40
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	88fa      	ldrh	r2, [r7, #6]
 80072d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	88fa      	ldrh	r2, [r7, #6]
 80072da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2222      	movs	r2, #34	; 0x22
 80072e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007300:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	695a      	ldr	r2, [r3, #20]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0220 	orr.w	r2, r2, #32
 8007320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b095      	sub	sp, #84	; 0x54
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800734e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007358:	643a      	str	r2, [r7, #64]	; 0x40
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800735e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	61fb      	str	r3, [r7, #28]
   return(result);
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	64bb      	str	r3, [r7, #72]	; 0x48
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3314      	adds	r3, #20
 800738a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800738c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e5      	bne.n	800736c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d119      	bne.n	80073dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	330c      	adds	r3, #12
 80073ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f023 0310 	bic.w	r3, r3, #16
 80073be:	647b      	str	r3, [r7, #68]	; 0x44
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073c8:	61ba      	str	r2, [r7, #24]
 80073ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6979      	ldr	r1, [r7, #20]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	613b      	str	r3, [r7, #16]
   return(result);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e5      	bne.n	80073a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073ea:	bf00      	nop
 80073ec:	3754      	adds	r7, #84	; 0x54
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7ff fecf 	bl	80071b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b21      	cmp	r3, #33	; 0x21
 8007430:	d13e      	bne.n	80074b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743a:	d114      	bne.n	8007466 <UART_Transmit_IT+0x48>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d110      	bne.n	8007466 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	1c9a      	adds	r2, r3, #2
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	621a      	str	r2, [r3, #32]
 8007464:	e008      	b.n	8007478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	1c59      	adds	r1, r3, #1
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6211      	str	r1, [r2, #32]
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29b      	uxth	r3, r3
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	4619      	mov	r1, r3
 8007486:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10f      	bne.n	80074ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800749a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e000      	b.n	80074b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074b0:	2302      	movs	r3, #2
  }
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff fe5e 	bl	80071a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b08c      	sub	sp, #48	; 0x30
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b22      	cmp	r3, #34	; 0x22
 8007500:	f040 80ab 	bne.w	800765a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750c:	d117      	bne.n	800753e <UART_Receive_IT+0x50>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d113      	bne.n	800753e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752c:	b29a      	uxth	r2, r3
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	1c9a      	adds	r2, r3, #2
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	629a      	str	r2, [r3, #40]	; 0x28
 800753c:	e026      	b.n	800758c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007544:	2300      	movs	r3, #0
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007550:	d007      	beq.n	8007562 <UART_Receive_IT+0x74>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <UART_Receive_IT+0x82>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	b2da      	uxtb	r2, r3
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e008      	b.n	8007582 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757c:	b2da      	uxtb	r2, r3
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29b      	uxth	r3, r3
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4619      	mov	r1, r3
 800759a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800759c:	2b00      	cmp	r3, #0
 800759e:	d15a      	bne.n	8007656 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0220 	bic.w	r2, r2, #32
 80075ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d135      	bne.n	800764c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	330c      	adds	r3, #12
 80075ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	613b      	str	r3, [r7, #16]
   return(result);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f023 0310 	bic.w	r3, r3, #16
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	330c      	adds	r3, #12
 8007604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007606:	623a      	str	r2, [r7, #32]
 8007608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	69f9      	ldr	r1, [r7, #28]
 800760c:	6a3a      	ldr	r2, [r7, #32]
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	61bb      	str	r3, [r7, #24]
   return(result);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b10      	cmp	r3, #16
 8007626:	d10a      	bne.n	800763e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff fdbf 	bl	80071c8 <HAL_UARTEx_RxEventCallback>
 800764a:	e002      	b.n	8007652 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7fa f975 	bl	800193c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	e002      	b.n	800765c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	e000      	b.n	800765c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800765a:	2302      	movs	r3, #2
  }
}
 800765c:	4618      	mov	r0, r3
 800765e:	3730      	adds	r7, #48	; 0x30
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	b09f      	sub	sp, #124	; 0x7c
 800766a:	af00      	add	r7, sp, #0
 800766c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800766e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767a:	68d9      	ldr	r1, [r3, #12]
 800767c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	ea40 0301 	orr.w	r3, r0, r1
 8007684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	431a      	orrs	r2, r3
 8007690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	431a      	orrs	r2, r3
 8007696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	4313      	orrs	r3, r2
 800769c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800769e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076a8:	f021 010c 	bic.w	r1, r1, #12
 80076ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076b2:	430b      	orrs	r3, r1
 80076b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c2:	6999      	ldr	r1, [r3, #24]
 80076c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	ea40 0301 	orr.w	r3, r0, r1
 80076cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4bc5      	ldr	r3, [pc, #788]	; (80079e8 <UART_SetConfig+0x384>)
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d004      	beq.n	80076e2 <UART_SetConfig+0x7e>
 80076d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	4bc3      	ldr	r3, [pc, #780]	; (80079ec <UART_SetConfig+0x388>)
 80076de:	429a      	cmp	r2, r3
 80076e0:	d103      	bne.n	80076ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076e2:	f7fe f983 	bl	80059ec <HAL_RCC_GetPCLK2Freq>
 80076e6:	6778      	str	r0, [r7, #116]	; 0x74
 80076e8:	e002      	b.n	80076f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076ea:	f7fe f96b 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 80076ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f8:	f040 80b6 	bne.w	8007868 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076fe:	461c      	mov	r4, r3
 8007700:	f04f 0500 	mov.w	r5, #0
 8007704:	4622      	mov	r2, r4
 8007706:	462b      	mov	r3, r5
 8007708:	1891      	adds	r1, r2, r2
 800770a:	6439      	str	r1, [r7, #64]	; 0x40
 800770c:	415b      	adcs	r3, r3
 800770e:	647b      	str	r3, [r7, #68]	; 0x44
 8007710:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007714:	1912      	adds	r2, r2, r4
 8007716:	eb45 0303 	adc.w	r3, r5, r3
 800771a:	f04f 0000 	mov.w	r0, #0
 800771e:	f04f 0100 	mov.w	r1, #0
 8007722:	00d9      	lsls	r1, r3, #3
 8007724:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007728:	00d0      	lsls	r0, r2, #3
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	1911      	adds	r1, r2, r4
 8007730:	6639      	str	r1, [r7, #96]	; 0x60
 8007732:	416b      	adcs	r3, r5
 8007734:	667b      	str	r3, [r7, #100]	; 0x64
 8007736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	461a      	mov	r2, r3
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	1891      	adds	r1, r2, r2
 8007742:	63b9      	str	r1, [r7, #56]	; 0x38
 8007744:	415b      	adcs	r3, r3
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800774c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007750:	f7f9 fa32 	bl	8000bb8 <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4ba5      	ldr	r3, [pc, #660]	; (80079f0 <UART_SetConfig+0x38c>)
 800775a:	fba3 2302 	umull	r2, r3, r3, r2
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	011e      	lsls	r6, r3, #4
 8007762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007764:	461c      	mov	r4, r3
 8007766:	f04f 0500 	mov.w	r5, #0
 800776a:	4622      	mov	r2, r4
 800776c:	462b      	mov	r3, r5
 800776e:	1891      	adds	r1, r2, r2
 8007770:	6339      	str	r1, [r7, #48]	; 0x30
 8007772:	415b      	adcs	r3, r3
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
 8007776:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800777a:	1912      	adds	r2, r2, r4
 800777c:	eb45 0303 	adc.w	r3, r5, r3
 8007780:	f04f 0000 	mov.w	r0, #0
 8007784:	f04f 0100 	mov.w	r1, #0
 8007788:	00d9      	lsls	r1, r3, #3
 800778a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800778e:	00d0      	lsls	r0, r2, #3
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	1911      	adds	r1, r2, r4
 8007796:	65b9      	str	r1, [r7, #88]	; 0x58
 8007798:	416b      	adcs	r3, r5
 800779a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800779c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	461a      	mov	r2, r3
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	1891      	adds	r1, r2, r2
 80077a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80077aa:	415b      	adcs	r3, r3
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80077b6:	f7f9 f9ff 	bl	8000bb8 <__aeabi_uldivmod>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4b8c      	ldr	r3, [pc, #560]	; (80079f0 <UART_SetConfig+0x38c>)
 80077c0:	fba3 1302 	umull	r1, r3, r3, r2
 80077c4:	095b      	lsrs	r3, r3, #5
 80077c6:	2164      	movs	r1, #100	; 0x64
 80077c8:	fb01 f303 	mul.w	r3, r1, r3
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	3332      	adds	r3, #50	; 0x32
 80077d2:	4a87      	ldr	r2, [pc, #540]	; (80079f0 <UART_SetConfig+0x38c>)
 80077d4:	fba2 2303 	umull	r2, r3, r2, r3
 80077d8:	095b      	lsrs	r3, r3, #5
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077e0:	441e      	add	r6, r3
 80077e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e4:	4618      	mov	r0, r3
 80077e6:	f04f 0100 	mov.w	r1, #0
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	1894      	adds	r4, r2, r2
 80077f0:	623c      	str	r4, [r7, #32]
 80077f2:	415b      	adcs	r3, r3
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
 80077f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077fa:	1812      	adds	r2, r2, r0
 80077fc:	eb41 0303 	adc.w	r3, r1, r3
 8007800:	f04f 0400 	mov.w	r4, #0
 8007804:	f04f 0500 	mov.w	r5, #0
 8007808:	00dd      	lsls	r5, r3, #3
 800780a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800780e:	00d4      	lsls	r4, r2, #3
 8007810:	4622      	mov	r2, r4
 8007812:	462b      	mov	r3, r5
 8007814:	1814      	adds	r4, r2, r0
 8007816:	653c      	str	r4, [r7, #80]	; 0x50
 8007818:	414b      	adcs	r3, r1
 800781a:	657b      	str	r3, [r7, #84]	; 0x54
 800781c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	461a      	mov	r2, r3
 8007822:	f04f 0300 	mov.w	r3, #0
 8007826:	1891      	adds	r1, r2, r2
 8007828:	61b9      	str	r1, [r7, #24]
 800782a:	415b      	adcs	r3, r3
 800782c:	61fb      	str	r3, [r7, #28]
 800782e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007832:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007836:	f7f9 f9bf 	bl	8000bb8 <__aeabi_uldivmod>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4b6c      	ldr	r3, [pc, #432]	; (80079f0 <UART_SetConfig+0x38c>)
 8007840:	fba3 1302 	umull	r1, r3, r3, r2
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	2164      	movs	r1, #100	; 0x64
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	3332      	adds	r3, #50	; 0x32
 8007852:	4a67      	ldr	r2, [pc, #412]	; (80079f0 <UART_SetConfig+0x38c>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	f003 0207 	and.w	r2, r3, #7
 800785e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4432      	add	r2, r6
 8007864:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007866:	e0b9      	b.n	80079dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786a:	461c      	mov	r4, r3
 800786c:	f04f 0500 	mov.w	r5, #0
 8007870:	4622      	mov	r2, r4
 8007872:	462b      	mov	r3, r5
 8007874:	1891      	adds	r1, r2, r2
 8007876:	6139      	str	r1, [r7, #16]
 8007878:	415b      	adcs	r3, r3
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007880:	1912      	adds	r2, r2, r4
 8007882:	eb45 0303 	adc.w	r3, r5, r3
 8007886:	f04f 0000 	mov.w	r0, #0
 800788a:	f04f 0100 	mov.w	r1, #0
 800788e:	00d9      	lsls	r1, r3, #3
 8007890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007894:	00d0      	lsls	r0, r2, #3
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	eb12 0804 	adds.w	r8, r2, r4
 800789e:	eb43 0905 	adc.w	r9, r3, r5
 80078a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	008b      	lsls	r3, r1, #2
 80078b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078ba:	0082      	lsls	r2, r0, #2
 80078bc:	4640      	mov	r0, r8
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f9 f97a 	bl	8000bb8 <__aeabi_uldivmod>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4b49      	ldr	r3, [pc, #292]	; (80079f0 <UART_SetConfig+0x38c>)
 80078ca:	fba3 2302 	umull	r2, r3, r3, r2
 80078ce:	095b      	lsrs	r3, r3, #5
 80078d0:	011e      	lsls	r6, r3, #4
 80078d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d4:	4618      	mov	r0, r3
 80078d6:	f04f 0100 	mov.w	r1, #0
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	1894      	adds	r4, r2, r2
 80078e0:	60bc      	str	r4, [r7, #8]
 80078e2:	415b      	adcs	r3, r3
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ea:	1812      	adds	r2, r2, r0
 80078ec:	eb41 0303 	adc.w	r3, r1, r3
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	f04f 0500 	mov.w	r5, #0
 80078f8:	00dd      	lsls	r5, r3, #3
 80078fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078fe:	00d4      	lsls	r4, r2, #3
 8007900:	4622      	mov	r2, r4
 8007902:	462b      	mov	r3, r5
 8007904:	1814      	adds	r4, r2, r0
 8007906:	64bc      	str	r4, [r7, #72]	; 0x48
 8007908:	414b      	adcs	r3, r1
 800790a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800790c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	4618      	mov	r0, r3
 8007912:	f04f 0100 	mov.w	r1, #0
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	008b      	lsls	r3, r1, #2
 8007920:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007924:	0082      	lsls	r2, r0, #2
 8007926:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800792a:	f7f9 f945 	bl	8000bb8 <__aeabi_uldivmod>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <UART_SetConfig+0x38c>)
 8007934:	fba3 1302 	umull	r1, r3, r3, r2
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	2164      	movs	r1, #100	; 0x64
 800793c:	fb01 f303 	mul.w	r3, r1, r3
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	3332      	adds	r3, #50	; 0x32
 8007946:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <UART_SetConfig+0x38c>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	095b      	lsrs	r3, r3, #5
 800794e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007952:	441e      	add	r6, r3
 8007954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007956:	4618      	mov	r0, r3
 8007958:	f04f 0100 	mov.w	r1, #0
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	1894      	adds	r4, r2, r2
 8007962:	603c      	str	r4, [r7, #0]
 8007964:	415b      	adcs	r3, r3
 8007966:	607b      	str	r3, [r7, #4]
 8007968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800796c:	1812      	adds	r2, r2, r0
 800796e:	eb41 0303 	adc.w	r3, r1, r3
 8007972:	f04f 0400 	mov.w	r4, #0
 8007976:	f04f 0500 	mov.w	r5, #0
 800797a:	00dd      	lsls	r5, r3, #3
 800797c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007980:	00d4      	lsls	r4, r2, #3
 8007982:	4622      	mov	r2, r4
 8007984:	462b      	mov	r3, r5
 8007986:	eb12 0a00 	adds.w	sl, r2, r0
 800798a:	eb43 0b01 	adc.w	fp, r3, r1
 800798e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	4618      	mov	r0, r3
 8007994:	f04f 0100 	mov.w	r1, #0
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	008b      	lsls	r3, r1, #2
 80079a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079a6:	0082      	lsls	r2, r0, #2
 80079a8:	4650      	mov	r0, sl
 80079aa:	4659      	mov	r1, fp
 80079ac:	f7f9 f904 	bl	8000bb8 <__aeabi_uldivmod>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <UART_SetConfig+0x38c>)
 80079b6:	fba3 1302 	umull	r1, r3, r3, r2
 80079ba:	095b      	lsrs	r3, r3, #5
 80079bc:	2164      	movs	r1, #100	; 0x64
 80079be:	fb01 f303 	mul.w	r3, r1, r3
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	3332      	adds	r3, #50	; 0x32
 80079c8:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <UART_SetConfig+0x38c>)
 80079ca:	fba2 2303 	umull	r2, r3, r2, r3
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	f003 020f 	and.w	r2, r3, #15
 80079d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4432      	add	r2, r6
 80079da:	609a      	str	r2, [r3, #8]
}
 80079dc:	bf00      	nop
 80079de:	377c      	adds	r7, #124	; 0x7c
 80079e0:	46bd      	mov	sp, r7
 80079e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e6:	bf00      	nop
 80079e8:	40011000 	.word	0x40011000
 80079ec:	40011400 	.word	0x40011400
 80079f0:	51eb851f 	.word	0x51eb851f

080079f4 <__errno>:
 80079f4:	4b01      	ldr	r3, [pc, #4]	; (80079fc <__errno+0x8>)
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	2000003c 	.word	0x2000003c

08007a00 <__libc_init_array>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	4d0d      	ldr	r5, [pc, #52]	; (8007a38 <__libc_init_array+0x38>)
 8007a04:	4c0d      	ldr	r4, [pc, #52]	; (8007a3c <__libc_init_array+0x3c>)
 8007a06:	1b64      	subs	r4, r4, r5
 8007a08:	10a4      	asrs	r4, r4, #2
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	42a6      	cmp	r6, r4
 8007a0e:	d109      	bne.n	8007a24 <__libc_init_array+0x24>
 8007a10:	4d0b      	ldr	r5, [pc, #44]	; (8007a40 <__libc_init_array+0x40>)
 8007a12:	4c0c      	ldr	r4, [pc, #48]	; (8007a44 <__libc_init_array+0x44>)
 8007a14:	f002 feb6 	bl	800a784 <_init>
 8007a18:	1b64      	subs	r4, r4, r5
 8007a1a:	10a4      	asrs	r4, r4, #2
 8007a1c:	2600      	movs	r6, #0
 8007a1e:	42a6      	cmp	r6, r4
 8007a20:	d105      	bne.n	8007a2e <__libc_init_array+0x2e>
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a28:	4798      	blx	r3
 8007a2a:	3601      	adds	r6, #1
 8007a2c:	e7ee      	b.n	8007a0c <__libc_init_array+0xc>
 8007a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a32:	4798      	blx	r3
 8007a34:	3601      	adds	r6, #1
 8007a36:	e7f2      	b.n	8007a1e <__libc_init_array+0x1e>
 8007a38:	0800abe4 	.word	0x0800abe4
 8007a3c:	0800abe4 	.word	0x0800abe4
 8007a40:	0800abe4 	.word	0x0800abe4
 8007a44:	0800abe8 	.word	0x0800abe8

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <__cvt>:
 8007a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	ec55 4b10 	vmov	r4, r5, d0
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	460e      	mov	r6, r1
 8007a64:	4619      	mov	r1, r3
 8007a66:	462b      	mov	r3, r5
 8007a68:	bfbb      	ittet	lt
 8007a6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a6e:	461d      	movlt	r5, r3
 8007a70:	2300      	movge	r3, #0
 8007a72:	232d      	movlt	r3, #45	; 0x2d
 8007a74:	700b      	strb	r3, [r1, #0]
 8007a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a7c:	4691      	mov	r9, r2
 8007a7e:	f023 0820 	bic.w	r8, r3, #32
 8007a82:	bfbc      	itt	lt
 8007a84:	4622      	movlt	r2, r4
 8007a86:	4614      	movlt	r4, r2
 8007a88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a8c:	d005      	beq.n	8007a9a <__cvt+0x42>
 8007a8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a92:	d100      	bne.n	8007a96 <__cvt+0x3e>
 8007a94:	3601      	adds	r6, #1
 8007a96:	2102      	movs	r1, #2
 8007a98:	e000      	b.n	8007a9c <__cvt+0x44>
 8007a9a:	2103      	movs	r1, #3
 8007a9c:	ab03      	add	r3, sp, #12
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	ab02      	add	r3, sp, #8
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	ec45 4b10 	vmov	d0, r4, r5
 8007aa8:	4653      	mov	r3, sl
 8007aaa:	4632      	mov	r2, r6
 8007aac:	f000 fcec 	bl	8008488 <_dtoa_r>
 8007ab0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	d102      	bne.n	8007abe <__cvt+0x66>
 8007ab8:	f019 0f01 	tst.w	r9, #1
 8007abc:	d022      	beq.n	8007b04 <__cvt+0xac>
 8007abe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ac2:	eb07 0906 	add.w	r9, r7, r6
 8007ac6:	d110      	bne.n	8007aea <__cvt+0x92>
 8007ac8:	783b      	ldrb	r3, [r7, #0]
 8007aca:	2b30      	cmp	r3, #48	; 0x30
 8007acc:	d10a      	bne.n	8007ae4 <__cvt+0x8c>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	f7f8 ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ada:	b918      	cbnz	r0, 8007ae4 <__cvt+0x8c>
 8007adc:	f1c6 0601 	rsb	r6, r6, #1
 8007ae0:	f8ca 6000 	str.w	r6, [sl]
 8007ae4:	f8da 3000 	ldr.w	r3, [sl]
 8007ae8:	4499      	add	r9, r3
 8007aea:	2200      	movs	r2, #0
 8007aec:	2300      	movs	r3, #0
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fff1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007af6:	b108      	cbz	r0, 8007afc <__cvt+0xa4>
 8007af8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007afc:	2230      	movs	r2, #48	; 0x30
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	454b      	cmp	r3, r9
 8007b02:	d307      	bcc.n	8007b14 <__cvt+0xbc>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b08:	1bdb      	subs	r3, r3, r7
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	b004      	add	sp, #16
 8007b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b14:	1c59      	adds	r1, r3, #1
 8007b16:	9103      	str	r1, [sp, #12]
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e7f0      	b.n	8007afe <__cvt+0xa6>

08007b1c <__exponent>:
 8007b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2900      	cmp	r1, #0
 8007b22:	bfb8      	it	lt
 8007b24:	4249      	neglt	r1, r1
 8007b26:	f803 2b02 	strb.w	r2, [r3], #2
 8007b2a:	bfb4      	ite	lt
 8007b2c:	222d      	movlt	r2, #45	; 0x2d
 8007b2e:	222b      	movge	r2, #43	; 0x2b
 8007b30:	2909      	cmp	r1, #9
 8007b32:	7042      	strb	r2, [r0, #1]
 8007b34:	dd2a      	ble.n	8007b8c <__exponent+0x70>
 8007b36:	f10d 0407 	add.w	r4, sp, #7
 8007b3a:	46a4      	mov	ip, r4
 8007b3c:	270a      	movs	r7, #10
 8007b3e:	46a6      	mov	lr, r4
 8007b40:	460a      	mov	r2, r1
 8007b42:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b46:	fb07 1516 	mls	r5, r7, r6, r1
 8007b4a:	3530      	adds	r5, #48	; 0x30
 8007b4c:	2a63      	cmp	r2, #99	; 0x63
 8007b4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b56:	4631      	mov	r1, r6
 8007b58:	dcf1      	bgt.n	8007b3e <__exponent+0x22>
 8007b5a:	3130      	adds	r1, #48	; 0x30
 8007b5c:	f1ae 0502 	sub.w	r5, lr, #2
 8007b60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b64:	1c44      	adds	r4, r0, #1
 8007b66:	4629      	mov	r1, r5
 8007b68:	4561      	cmp	r1, ip
 8007b6a:	d30a      	bcc.n	8007b82 <__exponent+0x66>
 8007b6c:	f10d 0209 	add.w	r2, sp, #9
 8007b70:	eba2 020e 	sub.w	r2, r2, lr
 8007b74:	4565      	cmp	r5, ip
 8007b76:	bf88      	it	hi
 8007b78:	2200      	movhi	r2, #0
 8007b7a:	4413      	add	r3, r2
 8007b7c:	1a18      	subs	r0, r3, r0
 8007b7e:	b003      	add	sp, #12
 8007b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b8a:	e7ed      	b.n	8007b68 <__exponent+0x4c>
 8007b8c:	2330      	movs	r3, #48	; 0x30
 8007b8e:	3130      	adds	r1, #48	; 0x30
 8007b90:	7083      	strb	r3, [r0, #2]
 8007b92:	70c1      	strb	r1, [r0, #3]
 8007b94:	1d03      	adds	r3, r0, #4
 8007b96:	e7f1      	b.n	8007b7c <__exponent+0x60>

08007b98 <_printf_float>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	ed2d 8b02 	vpush	{d8}
 8007ba0:	b08d      	sub	sp, #52	; 0x34
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ba8:	4616      	mov	r6, r2
 8007baa:	461f      	mov	r7, r3
 8007bac:	4605      	mov	r5, r0
 8007bae:	f001 fa57 	bl	8009060 <_localeconv_r>
 8007bb2:	f8d0 a000 	ldr.w	sl, [r0]
 8007bb6:	4650      	mov	r0, sl
 8007bb8:	f7f8 fb12 	bl	80001e0 <strlen>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	9305      	str	r3, [sp, #20]
 8007bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bcc:	3307      	adds	r3, #7
 8007bce:	f023 0307 	bic.w	r3, r3, #7
 8007bd2:	f103 0208 	add.w	r2, r3, #8
 8007bd6:	f8c8 2000 	str.w	r2, [r8]
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007be2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007be6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bea:	9307      	str	r3, [sp, #28]
 8007bec:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bf0:	ee08 0a10 	vmov	s16, r0
 8007bf4:	4b9f      	ldr	r3, [pc, #636]	; (8007e74 <_printf_float+0x2dc>)
 8007bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	f7f8 ff9d 	bl	8000b3c <__aeabi_dcmpun>
 8007c02:	bb88      	cbnz	r0, 8007c68 <_printf_float+0xd0>
 8007c04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c08:	4b9a      	ldr	r3, [pc, #616]	; (8007e74 <_printf_float+0x2dc>)
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	f7f8 ff77 	bl	8000b00 <__aeabi_dcmple>
 8007c12:	bb48      	cbnz	r0, 8007c68 <_printf_float+0xd0>
 8007c14:	2200      	movs	r2, #0
 8007c16:	2300      	movs	r3, #0
 8007c18:	4640      	mov	r0, r8
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	f7f8 ff66 	bl	8000aec <__aeabi_dcmplt>
 8007c20:	b110      	cbz	r0, 8007c28 <_printf_float+0x90>
 8007c22:	232d      	movs	r3, #45	; 0x2d
 8007c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c28:	4b93      	ldr	r3, [pc, #588]	; (8007e78 <_printf_float+0x2e0>)
 8007c2a:	4894      	ldr	r0, [pc, #592]	; (8007e7c <_printf_float+0x2e4>)
 8007c2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c30:	bf94      	ite	ls
 8007c32:	4698      	movls	r8, r3
 8007c34:	4680      	movhi	r8, r0
 8007c36:	2303      	movs	r3, #3
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	9b05      	ldr	r3, [sp, #20]
 8007c3c:	f023 0204 	bic.w	r2, r3, #4
 8007c40:	6022      	str	r2, [r4, #0]
 8007c42:	f04f 0900 	mov.w	r9, #0
 8007c46:	9700      	str	r7, [sp, #0]
 8007c48:	4633      	mov	r3, r6
 8007c4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 f9d8 	bl	8008004 <_printf_common>
 8007c54:	3001      	adds	r0, #1
 8007c56:	f040 8090 	bne.w	8007d7a <_printf_float+0x1e2>
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5e:	b00d      	add	sp, #52	; 0x34
 8007c60:	ecbd 8b02 	vpop	{d8}
 8007c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c68:	4642      	mov	r2, r8
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	f7f8 ff64 	bl	8000b3c <__aeabi_dcmpun>
 8007c74:	b140      	cbz	r0, 8007c88 <_printf_float+0xf0>
 8007c76:	464b      	mov	r3, r9
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bfbc      	itt	lt
 8007c7c:	232d      	movlt	r3, #45	; 0x2d
 8007c7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c82:	487f      	ldr	r0, [pc, #508]	; (8007e80 <_printf_float+0x2e8>)
 8007c84:	4b7f      	ldr	r3, [pc, #508]	; (8007e84 <_printf_float+0x2ec>)
 8007c86:	e7d1      	b.n	8007c2c <_printf_float+0x94>
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c8e:	9206      	str	r2, [sp, #24]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	d13f      	bne.n	8007d14 <_printf_float+0x17c>
 8007c94:	2306      	movs	r3, #6
 8007c96:	6063      	str	r3, [r4, #4]
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	6861      	ldr	r1, [r4, #4]
 8007c9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9303      	str	r3, [sp, #12]
 8007ca4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ca6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007caa:	ab09      	add	r3, sp, #36	; 0x24
 8007cac:	ec49 8b10 	vmov	d0, r8, r9
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	6022      	str	r2, [r4, #0]
 8007cb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f7ff fecd 	bl	8007a58 <__cvt>
 8007cbe:	9b06      	ldr	r3, [sp, #24]
 8007cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc2:	2b47      	cmp	r3, #71	; 0x47
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	d108      	bne.n	8007cda <_printf_float+0x142>
 8007cc8:	1cc8      	adds	r0, r1, #3
 8007cca:	db02      	blt.n	8007cd2 <_printf_float+0x13a>
 8007ccc:	6863      	ldr	r3, [r4, #4]
 8007cce:	4299      	cmp	r1, r3
 8007cd0:	dd41      	ble.n	8007d56 <_printf_float+0x1be>
 8007cd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8007cd6:	fa5f fb8b 	uxtb.w	fp, fp
 8007cda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cde:	d820      	bhi.n	8007d22 <_printf_float+0x18a>
 8007ce0:	3901      	subs	r1, #1
 8007ce2:	465a      	mov	r2, fp
 8007ce4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ce8:	9109      	str	r1, [sp, #36]	; 0x24
 8007cea:	f7ff ff17 	bl	8007b1c <__exponent>
 8007cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cf0:	1813      	adds	r3, r2, r0
 8007cf2:	2a01      	cmp	r2, #1
 8007cf4:	4681      	mov	r9, r0
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	dc02      	bgt.n	8007d00 <_printf_float+0x168>
 8007cfa:	6822      	ldr	r2, [r4, #0]
 8007cfc:	07d2      	lsls	r2, r2, #31
 8007cfe:	d501      	bpl.n	8007d04 <_printf_float+0x16c>
 8007d00:	3301      	adds	r3, #1
 8007d02:	6123      	str	r3, [r4, #16]
 8007d04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d09c      	beq.n	8007c46 <_printf_float+0xae>
 8007d0c:	232d      	movs	r3, #45	; 0x2d
 8007d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d12:	e798      	b.n	8007c46 <_printf_float+0xae>
 8007d14:	9a06      	ldr	r2, [sp, #24]
 8007d16:	2a47      	cmp	r2, #71	; 0x47
 8007d18:	d1be      	bne.n	8007c98 <_printf_float+0x100>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1bc      	bne.n	8007c98 <_printf_float+0x100>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e7b9      	b.n	8007c96 <_printf_float+0xfe>
 8007d22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d26:	d118      	bne.n	8007d5a <_printf_float+0x1c2>
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	6863      	ldr	r3, [r4, #4]
 8007d2c:	dd0b      	ble.n	8007d46 <_printf_float+0x1ae>
 8007d2e:	6121      	str	r1, [r4, #16]
 8007d30:	b913      	cbnz	r3, 8007d38 <_printf_float+0x1a0>
 8007d32:	6822      	ldr	r2, [r4, #0]
 8007d34:	07d0      	lsls	r0, r2, #31
 8007d36:	d502      	bpl.n	8007d3e <_printf_float+0x1a6>
 8007d38:	3301      	adds	r3, #1
 8007d3a:	440b      	add	r3, r1
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d40:	f04f 0900 	mov.w	r9, #0
 8007d44:	e7de      	b.n	8007d04 <_printf_float+0x16c>
 8007d46:	b913      	cbnz	r3, 8007d4e <_printf_float+0x1b6>
 8007d48:	6822      	ldr	r2, [r4, #0]
 8007d4a:	07d2      	lsls	r2, r2, #31
 8007d4c:	d501      	bpl.n	8007d52 <_printf_float+0x1ba>
 8007d4e:	3302      	adds	r3, #2
 8007d50:	e7f4      	b.n	8007d3c <_printf_float+0x1a4>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e7f2      	b.n	8007d3c <_printf_float+0x1a4>
 8007d56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d5c:	4299      	cmp	r1, r3
 8007d5e:	db05      	blt.n	8007d6c <_printf_float+0x1d4>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	6121      	str	r1, [r4, #16]
 8007d64:	07d8      	lsls	r0, r3, #31
 8007d66:	d5ea      	bpl.n	8007d3e <_printf_float+0x1a6>
 8007d68:	1c4b      	adds	r3, r1, #1
 8007d6a:	e7e7      	b.n	8007d3c <_printf_float+0x1a4>
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	bfd4      	ite	le
 8007d70:	f1c1 0202 	rsble	r2, r1, #2
 8007d74:	2201      	movgt	r2, #1
 8007d76:	4413      	add	r3, r2
 8007d78:	e7e0      	b.n	8007d3c <_printf_float+0x1a4>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	055a      	lsls	r2, r3, #21
 8007d7e:	d407      	bmi.n	8007d90 <_printf_float+0x1f8>
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	4642      	mov	r2, r8
 8007d84:	4631      	mov	r1, r6
 8007d86:	4628      	mov	r0, r5
 8007d88:	47b8      	blx	r7
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d12c      	bne.n	8007de8 <_printf_float+0x250>
 8007d8e:	e764      	b.n	8007c5a <_printf_float+0xc2>
 8007d90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d94:	f240 80e0 	bls.w	8007f58 <_printf_float+0x3c0>
 8007d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f7f8 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d034      	beq.n	8007e12 <_printf_float+0x27a>
 8007da8:	4a37      	ldr	r2, [pc, #220]	; (8007e88 <_printf_float+0x2f0>)
 8007daa:	2301      	movs	r3, #1
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	f43f af51 	beq.w	8007c5a <_printf_float+0xc2>
 8007db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	db02      	blt.n	8007dc6 <_printf_float+0x22e>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	07d8      	lsls	r0, r3, #31
 8007dc4:	d510      	bpl.n	8007de8 <_printf_float+0x250>
 8007dc6:	ee18 3a10 	vmov	r3, s16
 8007dca:	4652      	mov	r2, sl
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	f43f af41 	beq.w	8007c5a <_printf_float+0xc2>
 8007dd8:	f04f 0800 	mov.w	r8, #0
 8007ddc:	f104 091a 	add.w	r9, r4, #26
 8007de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de2:	3b01      	subs	r3, #1
 8007de4:	4543      	cmp	r3, r8
 8007de6:	dc09      	bgt.n	8007dfc <_printf_float+0x264>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	079b      	lsls	r3, r3, #30
 8007dec:	f100 8105 	bmi.w	8007ffa <_printf_float+0x462>
 8007df0:	68e0      	ldr	r0, [r4, #12]
 8007df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df4:	4298      	cmp	r0, r3
 8007df6:	bfb8      	it	lt
 8007df8:	4618      	movlt	r0, r3
 8007dfa:	e730      	b.n	8007c5e <_printf_float+0xc6>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	464a      	mov	r2, r9
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f af27 	beq.w	8007c5a <_printf_float+0xc2>
 8007e0c:	f108 0801 	add.w	r8, r8, #1
 8007e10:	e7e6      	b.n	8007de0 <_printf_float+0x248>
 8007e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dc39      	bgt.n	8007e8c <_printf_float+0x2f4>
 8007e18:	4a1b      	ldr	r2, [pc, #108]	; (8007e88 <_printf_float+0x2f0>)
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b8      	blx	r7
 8007e22:	3001      	adds	r0, #1
 8007e24:	f43f af19 	beq.w	8007c5a <_printf_float+0xc2>
 8007e28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	d102      	bne.n	8007e36 <_printf_float+0x29e>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	07d9      	lsls	r1, r3, #31
 8007e34:	d5d8      	bpl.n	8007de8 <_printf_float+0x250>
 8007e36:	ee18 3a10 	vmov	r3, s16
 8007e3a:	4652      	mov	r2, sl
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	4628      	mov	r0, r5
 8007e40:	47b8      	blx	r7
 8007e42:	3001      	adds	r0, #1
 8007e44:	f43f af09 	beq.w	8007c5a <_printf_float+0xc2>
 8007e48:	f04f 0900 	mov.w	r9, #0
 8007e4c:	f104 0a1a 	add.w	sl, r4, #26
 8007e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e52:	425b      	negs	r3, r3
 8007e54:	454b      	cmp	r3, r9
 8007e56:	dc01      	bgt.n	8007e5c <_printf_float+0x2c4>
 8007e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e5a:	e792      	b.n	8007d82 <_printf_float+0x1ea>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4652      	mov	r2, sl
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	47b8      	blx	r7
 8007e66:	3001      	adds	r0, #1
 8007e68:	f43f aef7 	beq.w	8007c5a <_printf_float+0xc2>
 8007e6c:	f109 0901 	add.w	r9, r9, #1
 8007e70:	e7ee      	b.n	8007e50 <_printf_float+0x2b8>
 8007e72:	bf00      	nop
 8007e74:	7fefffff 	.word	0x7fefffff
 8007e78:	0800a7fc 	.word	0x0800a7fc
 8007e7c:	0800a800 	.word	0x0800a800
 8007e80:	0800a808 	.word	0x0800a808
 8007e84:	0800a804 	.word	0x0800a804
 8007e88:	0800a80c 	.word	0x0800a80c
 8007e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e90:	429a      	cmp	r2, r3
 8007e92:	bfa8      	it	ge
 8007e94:	461a      	movge	r2, r3
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	4691      	mov	r9, r2
 8007e9a:	dc37      	bgt.n	8007f0c <_printf_float+0x374>
 8007e9c:	f04f 0b00 	mov.w	fp, #0
 8007ea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ea4:	f104 021a 	add.w	r2, r4, #26
 8007ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007eaa:	9305      	str	r3, [sp, #20]
 8007eac:	eba3 0309 	sub.w	r3, r3, r9
 8007eb0:	455b      	cmp	r3, fp
 8007eb2:	dc33      	bgt.n	8007f1c <_printf_float+0x384>
 8007eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	db3b      	blt.n	8007f34 <_printf_float+0x39c>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	07da      	lsls	r2, r3, #31
 8007ec0:	d438      	bmi.n	8007f34 <_printf_float+0x39c>
 8007ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec4:	9b05      	ldr	r3, [sp, #20]
 8007ec6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	eba2 0901 	sub.w	r9, r2, r1
 8007ece:	4599      	cmp	r9, r3
 8007ed0:	bfa8      	it	ge
 8007ed2:	4699      	movge	r9, r3
 8007ed4:	f1b9 0f00 	cmp.w	r9, #0
 8007ed8:	dc35      	bgt.n	8007f46 <_printf_float+0x3ae>
 8007eda:	f04f 0800 	mov.w	r8, #0
 8007ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ee2:	f104 0a1a 	add.w	sl, r4, #26
 8007ee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	eba3 0309 	sub.w	r3, r3, r9
 8007ef0:	4543      	cmp	r3, r8
 8007ef2:	f77f af79 	ble.w	8007de8 <_printf_float+0x250>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4652      	mov	r2, sl
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	f43f aeaa 	beq.w	8007c5a <_printf_float+0xc2>
 8007f06:	f108 0801 	add.w	r8, r8, #1
 8007f0a:	e7ec      	b.n	8007ee6 <_printf_float+0x34e>
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4642      	mov	r2, r8
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	d1c0      	bne.n	8007e9c <_printf_float+0x304>
 8007f1a:	e69e      	b.n	8007c5a <_printf_float+0xc2>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
 8007f22:	9205      	str	r2, [sp, #20]
 8007f24:	47b8      	blx	r7
 8007f26:	3001      	adds	r0, #1
 8007f28:	f43f ae97 	beq.w	8007c5a <_printf_float+0xc2>
 8007f2c:	9a05      	ldr	r2, [sp, #20]
 8007f2e:	f10b 0b01 	add.w	fp, fp, #1
 8007f32:	e7b9      	b.n	8007ea8 <_printf_float+0x310>
 8007f34:	ee18 3a10 	vmov	r3, s16
 8007f38:	4652      	mov	r2, sl
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	d1be      	bne.n	8007ec2 <_printf_float+0x32a>
 8007f44:	e689      	b.n	8007c5a <_printf_float+0xc2>
 8007f46:	9a05      	ldr	r2, [sp, #20]
 8007f48:	464b      	mov	r3, r9
 8007f4a:	4442      	add	r2, r8
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4628      	mov	r0, r5
 8007f50:	47b8      	blx	r7
 8007f52:	3001      	adds	r0, #1
 8007f54:	d1c1      	bne.n	8007eda <_printf_float+0x342>
 8007f56:	e680      	b.n	8007c5a <_printf_float+0xc2>
 8007f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f5a:	2a01      	cmp	r2, #1
 8007f5c:	dc01      	bgt.n	8007f62 <_printf_float+0x3ca>
 8007f5e:	07db      	lsls	r3, r3, #31
 8007f60:	d538      	bpl.n	8007fd4 <_printf_float+0x43c>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4642      	mov	r2, r8
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f ae74 	beq.w	8007c5a <_printf_float+0xc2>
 8007f72:	ee18 3a10 	vmov	r3, s16
 8007f76:	4652      	mov	r2, sl
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f ae6b 	beq.w	8007c5a <_printf_float+0xc2>
 8007f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f7f8 fda4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f90:	b9d8      	cbnz	r0, 8007fca <_printf_float+0x432>
 8007f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f94:	f108 0201 	add.w	r2, r8, #1
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d10e      	bne.n	8007fc2 <_printf_float+0x42a>
 8007fa4:	e659      	b.n	8007c5a <_printf_float+0xc2>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	4652      	mov	r2, sl
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b8      	blx	r7
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f43f ae52 	beq.w	8007c5a <_printf_float+0xc2>
 8007fb6:	f108 0801 	add.w	r8, r8, #1
 8007fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	4543      	cmp	r3, r8
 8007fc0:	dcf1      	bgt.n	8007fa6 <_printf_float+0x40e>
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fc8:	e6dc      	b.n	8007d84 <_printf_float+0x1ec>
 8007fca:	f04f 0800 	mov.w	r8, #0
 8007fce:	f104 0a1a 	add.w	sl, r4, #26
 8007fd2:	e7f2      	b.n	8007fba <_printf_float+0x422>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4642      	mov	r2, r8
 8007fd8:	e7df      	b.n	8007f9a <_printf_float+0x402>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	464a      	mov	r2, r9
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	f43f ae38 	beq.w	8007c5a <_printf_float+0xc2>
 8007fea:	f108 0801 	add.w	r8, r8, #1
 8007fee:	68e3      	ldr	r3, [r4, #12]
 8007ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ff2:	1a5b      	subs	r3, r3, r1
 8007ff4:	4543      	cmp	r3, r8
 8007ff6:	dcf0      	bgt.n	8007fda <_printf_float+0x442>
 8007ff8:	e6fa      	b.n	8007df0 <_printf_float+0x258>
 8007ffa:	f04f 0800 	mov.w	r8, #0
 8007ffe:	f104 0919 	add.w	r9, r4, #25
 8008002:	e7f4      	b.n	8007fee <_printf_float+0x456>

08008004 <_printf_common>:
 8008004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008008:	4616      	mov	r6, r2
 800800a:	4699      	mov	r9, r3
 800800c:	688a      	ldr	r2, [r1, #8]
 800800e:	690b      	ldr	r3, [r1, #16]
 8008010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008014:	4293      	cmp	r3, r2
 8008016:	bfb8      	it	lt
 8008018:	4613      	movlt	r3, r2
 800801a:	6033      	str	r3, [r6, #0]
 800801c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008020:	4607      	mov	r7, r0
 8008022:	460c      	mov	r4, r1
 8008024:	b10a      	cbz	r2, 800802a <_printf_common+0x26>
 8008026:	3301      	adds	r3, #1
 8008028:	6033      	str	r3, [r6, #0]
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	0699      	lsls	r1, r3, #26
 800802e:	bf42      	ittt	mi
 8008030:	6833      	ldrmi	r3, [r6, #0]
 8008032:	3302      	addmi	r3, #2
 8008034:	6033      	strmi	r3, [r6, #0]
 8008036:	6825      	ldr	r5, [r4, #0]
 8008038:	f015 0506 	ands.w	r5, r5, #6
 800803c:	d106      	bne.n	800804c <_printf_common+0x48>
 800803e:	f104 0a19 	add.w	sl, r4, #25
 8008042:	68e3      	ldr	r3, [r4, #12]
 8008044:	6832      	ldr	r2, [r6, #0]
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	42ab      	cmp	r3, r5
 800804a:	dc26      	bgt.n	800809a <_printf_common+0x96>
 800804c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008050:	1e13      	subs	r3, r2, #0
 8008052:	6822      	ldr	r2, [r4, #0]
 8008054:	bf18      	it	ne
 8008056:	2301      	movne	r3, #1
 8008058:	0692      	lsls	r2, r2, #26
 800805a:	d42b      	bmi.n	80080b4 <_printf_common+0xb0>
 800805c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008060:	4649      	mov	r1, r9
 8008062:	4638      	mov	r0, r7
 8008064:	47c0      	blx	r8
 8008066:	3001      	adds	r0, #1
 8008068:	d01e      	beq.n	80080a8 <_printf_common+0xa4>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	68e5      	ldr	r5, [r4, #12]
 800806e:	6832      	ldr	r2, [r6, #0]
 8008070:	f003 0306 	and.w	r3, r3, #6
 8008074:	2b04      	cmp	r3, #4
 8008076:	bf08      	it	eq
 8008078:	1aad      	subeq	r5, r5, r2
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	6922      	ldr	r2, [r4, #16]
 800807e:	bf0c      	ite	eq
 8008080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008084:	2500      	movne	r5, #0
 8008086:	4293      	cmp	r3, r2
 8008088:	bfc4      	itt	gt
 800808a:	1a9b      	subgt	r3, r3, r2
 800808c:	18ed      	addgt	r5, r5, r3
 800808e:	2600      	movs	r6, #0
 8008090:	341a      	adds	r4, #26
 8008092:	42b5      	cmp	r5, r6
 8008094:	d11a      	bne.n	80080cc <_printf_common+0xc8>
 8008096:	2000      	movs	r0, #0
 8008098:	e008      	b.n	80080ac <_printf_common+0xa8>
 800809a:	2301      	movs	r3, #1
 800809c:	4652      	mov	r2, sl
 800809e:	4649      	mov	r1, r9
 80080a0:	4638      	mov	r0, r7
 80080a2:	47c0      	blx	r8
 80080a4:	3001      	adds	r0, #1
 80080a6:	d103      	bne.n	80080b0 <_printf_common+0xac>
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b0:	3501      	adds	r5, #1
 80080b2:	e7c6      	b.n	8008042 <_printf_common+0x3e>
 80080b4:	18e1      	adds	r1, r4, r3
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	2030      	movs	r0, #48	; 0x30
 80080ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080be:	4422      	add	r2, r4
 80080c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080c8:	3302      	adds	r3, #2
 80080ca:	e7c7      	b.n	800805c <_printf_common+0x58>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4622      	mov	r2, r4
 80080d0:	4649      	mov	r1, r9
 80080d2:	4638      	mov	r0, r7
 80080d4:	47c0      	blx	r8
 80080d6:	3001      	adds	r0, #1
 80080d8:	d0e6      	beq.n	80080a8 <_printf_common+0xa4>
 80080da:	3601      	adds	r6, #1
 80080dc:	e7d9      	b.n	8008092 <_printf_common+0x8e>
	...

080080e0 <_printf_i>:
 80080e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080e4:	460c      	mov	r4, r1
 80080e6:	4691      	mov	r9, r2
 80080e8:	7e27      	ldrb	r7, [r4, #24]
 80080ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080ec:	2f78      	cmp	r7, #120	; 0x78
 80080ee:	4680      	mov	r8, r0
 80080f0:	469a      	mov	sl, r3
 80080f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080f6:	d807      	bhi.n	8008108 <_printf_i+0x28>
 80080f8:	2f62      	cmp	r7, #98	; 0x62
 80080fa:	d80a      	bhi.n	8008112 <_printf_i+0x32>
 80080fc:	2f00      	cmp	r7, #0
 80080fe:	f000 80d8 	beq.w	80082b2 <_printf_i+0x1d2>
 8008102:	2f58      	cmp	r7, #88	; 0x58
 8008104:	f000 80a3 	beq.w	800824e <_printf_i+0x16e>
 8008108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800810c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008110:	e03a      	b.n	8008188 <_printf_i+0xa8>
 8008112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008116:	2b15      	cmp	r3, #21
 8008118:	d8f6      	bhi.n	8008108 <_printf_i+0x28>
 800811a:	a001      	add	r0, pc, #4	; (adr r0, 8008120 <_printf_i+0x40>)
 800811c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008120:	08008179 	.word	0x08008179
 8008124:	0800818d 	.word	0x0800818d
 8008128:	08008109 	.word	0x08008109
 800812c:	08008109 	.word	0x08008109
 8008130:	08008109 	.word	0x08008109
 8008134:	08008109 	.word	0x08008109
 8008138:	0800818d 	.word	0x0800818d
 800813c:	08008109 	.word	0x08008109
 8008140:	08008109 	.word	0x08008109
 8008144:	08008109 	.word	0x08008109
 8008148:	08008109 	.word	0x08008109
 800814c:	08008299 	.word	0x08008299
 8008150:	080081bd 	.word	0x080081bd
 8008154:	0800827b 	.word	0x0800827b
 8008158:	08008109 	.word	0x08008109
 800815c:	08008109 	.word	0x08008109
 8008160:	080082bb 	.word	0x080082bb
 8008164:	08008109 	.word	0x08008109
 8008168:	080081bd 	.word	0x080081bd
 800816c:	08008109 	.word	0x08008109
 8008170:	08008109 	.word	0x08008109
 8008174:	08008283 	.word	0x08008283
 8008178:	680b      	ldr	r3, [r1, #0]
 800817a:	1d1a      	adds	r2, r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	600a      	str	r2, [r1, #0]
 8008180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008188:	2301      	movs	r3, #1
 800818a:	e0a3      	b.n	80082d4 <_printf_i+0x1f4>
 800818c:	6825      	ldr	r5, [r4, #0]
 800818e:	6808      	ldr	r0, [r1, #0]
 8008190:	062e      	lsls	r6, r5, #24
 8008192:	f100 0304 	add.w	r3, r0, #4
 8008196:	d50a      	bpl.n	80081ae <_printf_i+0xce>
 8008198:	6805      	ldr	r5, [r0, #0]
 800819a:	600b      	str	r3, [r1, #0]
 800819c:	2d00      	cmp	r5, #0
 800819e:	da03      	bge.n	80081a8 <_printf_i+0xc8>
 80081a0:	232d      	movs	r3, #45	; 0x2d
 80081a2:	426d      	negs	r5, r5
 80081a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a8:	485e      	ldr	r0, [pc, #376]	; (8008324 <_printf_i+0x244>)
 80081aa:	230a      	movs	r3, #10
 80081ac:	e019      	b.n	80081e2 <_printf_i+0x102>
 80081ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081b2:	6805      	ldr	r5, [r0, #0]
 80081b4:	600b      	str	r3, [r1, #0]
 80081b6:	bf18      	it	ne
 80081b8:	b22d      	sxthne	r5, r5
 80081ba:	e7ef      	b.n	800819c <_printf_i+0xbc>
 80081bc:	680b      	ldr	r3, [r1, #0]
 80081be:	6825      	ldr	r5, [r4, #0]
 80081c0:	1d18      	adds	r0, r3, #4
 80081c2:	6008      	str	r0, [r1, #0]
 80081c4:	0628      	lsls	r0, r5, #24
 80081c6:	d501      	bpl.n	80081cc <_printf_i+0xec>
 80081c8:	681d      	ldr	r5, [r3, #0]
 80081ca:	e002      	b.n	80081d2 <_printf_i+0xf2>
 80081cc:	0669      	lsls	r1, r5, #25
 80081ce:	d5fb      	bpl.n	80081c8 <_printf_i+0xe8>
 80081d0:	881d      	ldrh	r5, [r3, #0]
 80081d2:	4854      	ldr	r0, [pc, #336]	; (8008324 <_printf_i+0x244>)
 80081d4:	2f6f      	cmp	r7, #111	; 0x6f
 80081d6:	bf0c      	ite	eq
 80081d8:	2308      	moveq	r3, #8
 80081da:	230a      	movne	r3, #10
 80081dc:	2100      	movs	r1, #0
 80081de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081e2:	6866      	ldr	r6, [r4, #4]
 80081e4:	60a6      	str	r6, [r4, #8]
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	bfa2      	ittt	ge
 80081ea:	6821      	ldrge	r1, [r4, #0]
 80081ec:	f021 0104 	bicge.w	r1, r1, #4
 80081f0:	6021      	strge	r1, [r4, #0]
 80081f2:	b90d      	cbnz	r5, 80081f8 <_printf_i+0x118>
 80081f4:	2e00      	cmp	r6, #0
 80081f6:	d04d      	beq.n	8008294 <_printf_i+0x1b4>
 80081f8:	4616      	mov	r6, r2
 80081fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80081fe:	fb03 5711 	mls	r7, r3, r1, r5
 8008202:	5dc7      	ldrb	r7, [r0, r7]
 8008204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008208:	462f      	mov	r7, r5
 800820a:	42bb      	cmp	r3, r7
 800820c:	460d      	mov	r5, r1
 800820e:	d9f4      	bls.n	80081fa <_printf_i+0x11a>
 8008210:	2b08      	cmp	r3, #8
 8008212:	d10b      	bne.n	800822c <_printf_i+0x14c>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	07df      	lsls	r7, r3, #31
 8008218:	d508      	bpl.n	800822c <_printf_i+0x14c>
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	6861      	ldr	r1, [r4, #4]
 800821e:	4299      	cmp	r1, r3
 8008220:	bfde      	ittt	le
 8008222:	2330      	movle	r3, #48	; 0x30
 8008224:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008228:	f106 36ff 	addle.w	r6, r6, #4294967295
 800822c:	1b92      	subs	r2, r2, r6
 800822e:	6122      	str	r2, [r4, #16]
 8008230:	f8cd a000 	str.w	sl, [sp]
 8008234:	464b      	mov	r3, r9
 8008236:	aa03      	add	r2, sp, #12
 8008238:	4621      	mov	r1, r4
 800823a:	4640      	mov	r0, r8
 800823c:	f7ff fee2 	bl	8008004 <_printf_common>
 8008240:	3001      	adds	r0, #1
 8008242:	d14c      	bne.n	80082de <_printf_i+0x1fe>
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	b004      	add	sp, #16
 800824a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824e:	4835      	ldr	r0, [pc, #212]	; (8008324 <_printf_i+0x244>)
 8008250:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	680e      	ldr	r6, [r1, #0]
 8008258:	061f      	lsls	r7, r3, #24
 800825a:	f856 5b04 	ldr.w	r5, [r6], #4
 800825e:	600e      	str	r6, [r1, #0]
 8008260:	d514      	bpl.n	800828c <_printf_i+0x1ac>
 8008262:	07d9      	lsls	r1, r3, #31
 8008264:	bf44      	itt	mi
 8008266:	f043 0320 	orrmi.w	r3, r3, #32
 800826a:	6023      	strmi	r3, [r4, #0]
 800826c:	b91d      	cbnz	r5, 8008276 <_printf_i+0x196>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	f023 0320 	bic.w	r3, r3, #32
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	2310      	movs	r3, #16
 8008278:	e7b0      	b.n	80081dc <_printf_i+0xfc>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	f043 0320 	orr.w	r3, r3, #32
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	2378      	movs	r3, #120	; 0x78
 8008284:	4828      	ldr	r0, [pc, #160]	; (8008328 <_printf_i+0x248>)
 8008286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800828a:	e7e3      	b.n	8008254 <_printf_i+0x174>
 800828c:	065e      	lsls	r6, r3, #25
 800828e:	bf48      	it	mi
 8008290:	b2ad      	uxthmi	r5, r5
 8008292:	e7e6      	b.n	8008262 <_printf_i+0x182>
 8008294:	4616      	mov	r6, r2
 8008296:	e7bb      	b.n	8008210 <_printf_i+0x130>
 8008298:	680b      	ldr	r3, [r1, #0]
 800829a:	6826      	ldr	r6, [r4, #0]
 800829c:	6960      	ldr	r0, [r4, #20]
 800829e:	1d1d      	adds	r5, r3, #4
 80082a0:	600d      	str	r5, [r1, #0]
 80082a2:	0635      	lsls	r5, r6, #24
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	d501      	bpl.n	80082ac <_printf_i+0x1cc>
 80082a8:	6018      	str	r0, [r3, #0]
 80082aa:	e002      	b.n	80082b2 <_printf_i+0x1d2>
 80082ac:	0671      	lsls	r1, r6, #25
 80082ae:	d5fb      	bpl.n	80082a8 <_printf_i+0x1c8>
 80082b0:	8018      	strh	r0, [r3, #0]
 80082b2:	2300      	movs	r3, #0
 80082b4:	6123      	str	r3, [r4, #16]
 80082b6:	4616      	mov	r6, r2
 80082b8:	e7ba      	b.n	8008230 <_printf_i+0x150>
 80082ba:	680b      	ldr	r3, [r1, #0]
 80082bc:	1d1a      	adds	r2, r3, #4
 80082be:	600a      	str	r2, [r1, #0]
 80082c0:	681e      	ldr	r6, [r3, #0]
 80082c2:	6862      	ldr	r2, [r4, #4]
 80082c4:	2100      	movs	r1, #0
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7f7 ff92 	bl	80001f0 <memchr>
 80082cc:	b108      	cbz	r0, 80082d2 <_printf_i+0x1f2>
 80082ce:	1b80      	subs	r0, r0, r6
 80082d0:	6060      	str	r0, [r4, #4]
 80082d2:	6863      	ldr	r3, [r4, #4]
 80082d4:	6123      	str	r3, [r4, #16]
 80082d6:	2300      	movs	r3, #0
 80082d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082dc:	e7a8      	b.n	8008230 <_printf_i+0x150>
 80082de:	6923      	ldr	r3, [r4, #16]
 80082e0:	4632      	mov	r2, r6
 80082e2:	4649      	mov	r1, r9
 80082e4:	4640      	mov	r0, r8
 80082e6:	47d0      	blx	sl
 80082e8:	3001      	adds	r0, #1
 80082ea:	d0ab      	beq.n	8008244 <_printf_i+0x164>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	079b      	lsls	r3, r3, #30
 80082f0:	d413      	bmi.n	800831a <_printf_i+0x23a>
 80082f2:	68e0      	ldr	r0, [r4, #12]
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	4298      	cmp	r0, r3
 80082f8:	bfb8      	it	lt
 80082fa:	4618      	movlt	r0, r3
 80082fc:	e7a4      	b.n	8008248 <_printf_i+0x168>
 80082fe:	2301      	movs	r3, #1
 8008300:	4632      	mov	r2, r6
 8008302:	4649      	mov	r1, r9
 8008304:	4640      	mov	r0, r8
 8008306:	47d0      	blx	sl
 8008308:	3001      	adds	r0, #1
 800830a:	d09b      	beq.n	8008244 <_printf_i+0x164>
 800830c:	3501      	adds	r5, #1
 800830e:	68e3      	ldr	r3, [r4, #12]
 8008310:	9903      	ldr	r1, [sp, #12]
 8008312:	1a5b      	subs	r3, r3, r1
 8008314:	42ab      	cmp	r3, r5
 8008316:	dcf2      	bgt.n	80082fe <_printf_i+0x21e>
 8008318:	e7eb      	b.n	80082f2 <_printf_i+0x212>
 800831a:	2500      	movs	r5, #0
 800831c:	f104 0619 	add.w	r6, r4, #25
 8008320:	e7f5      	b.n	800830e <_printf_i+0x22e>
 8008322:	bf00      	nop
 8008324:	0800a80e 	.word	0x0800a80e
 8008328:	0800a81f 	.word	0x0800a81f

0800832c <siprintf>:
 800832c:	b40e      	push	{r1, r2, r3}
 800832e:	b500      	push	{lr}
 8008330:	b09c      	sub	sp, #112	; 0x70
 8008332:	ab1d      	add	r3, sp, #116	; 0x74
 8008334:	9002      	str	r0, [sp, #8]
 8008336:	9006      	str	r0, [sp, #24]
 8008338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800833c:	4809      	ldr	r0, [pc, #36]	; (8008364 <siprintf+0x38>)
 800833e:	9107      	str	r1, [sp, #28]
 8008340:	9104      	str	r1, [sp, #16]
 8008342:	4909      	ldr	r1, [pc, #36]	; (8008368 <siprintf+0x3c>)
 8008344:	f853 2b04 	ldr.w	r2, [r3], #4
 8008348:	9105      	str	r1, [sp, #20]
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	a902      	add	r1, sp, #8
 8008350:	f001 fb34 	bl	80099bc <_svfiprintf_r>
 8008354:	9b02      	ldr	r3, [sp, #8]
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	b01c      	add	sp, #112	; 0x70
 800835c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008360:	b003      	add	sp, #12
 8008362:	4770      	bx	lr
 8008364:	2000003c 	.word	0x2000003c
 8008368:	ffff0208 	.word	0xffff0208

0800836c <quorem>:
 800836c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	6903      	ldr	r3, [r0, #16]
 8008372:	690c      	ldr	r4, [r1, #16]
 8008374:	42a3      	cmp	r3, r4
 8008376:	4607      	mov	r7, r0
 8008378:	f2c0 8081 	blt.w	800847e <quorem+0x112>
 800837c:	3c01      	subs	r4, #1
 800837e:	f101 0814 	add.w	r8, r1, #20
 8008382:	f100 0514 	add.w	r5, r0, #20
 8008386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008394:	3301      	adds	r3, #1
 8008396:	429a      	cmp	r2, r3
 8008398:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800839c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80083a4:	d331      	bcc.n	800840a <quorem+0x9e>
 80083a6:	f04f 0e00 	mov.w	lr, #0
 80083aa:	4640      	mov	r0, r8
 80083ac:	46ac      	mov	ip, r5
 80083ae:	46f2      	mov	sl, lr
 80083b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80083b4:	b293      	uxth	r3, r2
 80083b6:	fb06 e303 	mla	r3, r6, r3, lr
 80083ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083be:	b29b      	uxth	r3, r3
 80083c0:	ebaa 0303 	sub.w	r3, sl, r3
 80083c4:	0c12      	lsrs	r2, r2, #16
 80083c6:	f8dc a000 	ldr.w	sl, [ip]
 80083ca:	fb06 e202 	mla	r2, r6, r2, lr
 80083ce:	fa13 f38a 	uxtah	r3, r3, sl
 80083d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80083d6:	fa1f fa82 	uxth.w	sl, r2
 80083da:	f8dc 2000 	ldr.w	r2, [ip]
 80083de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80083e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083ec:	4581      	cmp	r9, r0
 80083ee:	f84c 3b04 	str.w	r3, [ip], #4
 80083f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083f6:	d2db      	bcs.n	80083b0 <quorem+0x44>
 80083f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80083fc:	b92b      	cbnz	r3, 800840a <quorem+0x9e>
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	3b04      	subs	r3, #4
 8008402:	429d      	cmp	r5, r3
 8008404:	461a      	mov	r2, r3
 8008406:	d32e      	bcc.n	8008466 <quorem+0xfa>
 8008408:	613c      	str	r4, [r7, #16]
 800840a:	4638      	mov	r0, r7
 800840c:	f001 f8c0 	bl	8009590 <__mcmp>
 8008410:	2800      	cmp	r0, #0
 8008412:	db24      	blt.n	800845e <quorem+0xf2>
 8008414:	3601      	adds	r6, #1
 8008416:	4628      	mov	r0, r5
 8008418:	f04f 0c00 	mov.w	ip, #0
 800841c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008420:	f8d0 e000 	ldr.w	lr, [r0]
 8008424:	b293      	uxth	r3, r2
 8008426:	ebac 0303 	sub.w	r3, ip, r3
 800842a:	0c12      	lsrs	r2, r2, #16
 800842c:	fa13 f38e 	uxtah	r3, r3, lr
 8008430:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008438:	b29b      	uxth	r3, r3
 800843a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800843e:	45c1      	cmp	r9, r8
 8008440:	f840 3b04 	str.w	r3, [r0], #4
 8008444:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008448:	d2e8      	bcs.n	800841c <quorem+0xb0>
 800844a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800844e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008452:	b922      	cbnz	r2, 800845e <quorem+0xf2>
 8008454:	3b04      	subs	r3, #4
 8008456:	429d      	cmp	r5, r3
 8008458:	461a      	mov	r2, r3
 800845a:	d30a      	bcc.n	8008472 <quorem+0x106>
 800845c:	613c      	str	r4, [r7, #16]
 800845e:	4630      	mov	r0, r6
 8008460:	b003      	add	sp, #12
 8008462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008466:	6812      	ldr	r2, [r2, #0]
 8008468:	3b04      	subs	r3, #4
 800846a:	2a00      	cmp	r2, #0
 800846c:	d1cc      	bne.n	8008408 <quorem+0x9c>
 800846e:	3c01      	subs	r4, #1
 8008470:	e7c7      	b.n	8008402 <quorem+0x96>
 8008472:	6812      	ldr	r2, [r2, #0]
 8008474:	3b04      	subs	r3, #4
 8008476:	2a00      	cmp	r2, #0
 8008478:	d1f0      	bne.n	800845c <quorem+0xf0>
 800847a:	3c01      	subs	r4, #1
 800847c:	e7eb      	b.n	8008456 <quorem+0xea>
 800847e:	2000      	movs	r0, #0
 8008480:	e7ee      	b.n	8008460 <quorem+0xf4>
 8008482:	0000      	movs	r0, r0
 8008484:	0000      	movs	r0, r0
	...

08008488 <_dtoa_r>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	ed2d 8b02 	vpush	{d8}
 8008490:	ec57 6b10 	vmov	r6, r7, d0
 8008494:	b095      	sub	sp, #84	; 0x54
 8008496:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008498:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800849c:	9105      	str	r1, [sp, #20]
 800849e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80084a2:	4604      	mov	r4, r0
 80084a4:	9209      	str	r2, [sp, #36]	; 0x24
 80084a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a8:	b975      	cbnz	r5, 80084c8 <_dtoa_r+0x40>
 80084aa:	2010      	movs	r0, #16
 80084ac:	f000 fddc 	bl	8009068 <malloc>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6260      	str	r0, [r4, #36]	; 0x24
 80084b4:	b920      	cbnz	r0, 80084c0 <_dtoa_r+0x38>
 80084b6:	4bb2      	ldr	r3, [pc, #712]	; (8008780 <_dtoa_r+0x2f8>)
 80084b8:	21ea      	movs	r1, #234	; 0xea
 80084ba:	48b2      	ldr	r0, [pc, #712]	; (8008784 <_dtoa_r+0x2fc>)
 80084bc:	f001 fb8e 	bl	8009bdc <__assert_func>
 80084c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084c4:	6005      	str	r5, [r0, #0]
 80084c6:	60c5      	str	r5, [r0, #12]
 80084c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ca:	6819      	ldr	r1, [r3, #0]
 80084cc:	b151      	cbz	r1, 80084e4 <_dtoa_r+0x5c>
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	604a      	str	r2, [r1, #4]
 80084d2:	2301      	movs	r3, #1
 80084d4:	4093      	lsls	r3, r2
 80084d6:	608b      	str	r3, [r1, #8]
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fe1b 	bl	8009114 <_Bfree>
 80084de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	1e3b      	subs	r3, r7, #0
 80084e6:	bfb9      	ittee	lt
 80084e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80084ec:	9303      	strlt	r3, [sp, #12]
 80084ee:	2300      	movge	r3, #0
 80084f0:	f8c8 3000 	strge.w	r3, [r8]
 80084f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80084f8:	4ba3      	ldr	r3, [pc, #652]	; (8008788 <_dtoa_r+0x300>)
 80084fa:	bfbc      	itt	lt
 80084fc:	2201      	movlt	r2, #1
 80084fe:	f8c8 2000 	strlt.w	r2, [r8]
 8008502:	ea33 0309 	bics.w	r3, r3, r9
 8008506:	d11b      	bne.n	8008540 <_dtoa_r+0xb8>
 8008508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800850a:	f242 730f 	movw	r3, #9999	; 0x270f
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008514:	4333      	orrs	r3, r6
 8008516:	f000 857a 	beq.w	800900e <_dtoa_r+0xb86>
 800851a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800851c:	b963      	cbnz	r3, 8008538 <_dtoa_r+0xb0>
 800851e:	4b9b      	ldr	r3, [pc, #620]	; (800878c <_dtoa_r+0x304>)
 8008520:	e024      	b.n	800856c <_dtoa_r+0xe4>
 8008522:	4b9b      	ldr	r3, [pc, #620]	; (8008790 <_dtoa_r+0x308>)
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	9800      	ldr	r0, [sp, #0]
 800852e:	b015      	add	sp, #84	; 0x54
 8008530:	ecbd 8b02 	vpop	{d8}
 8008534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008538:	4b94      	ldr	r3, [pc, #592]	; (800878c <_dtoa_r+0x304>)
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	3303      	adds	r3, #3
 800853e:	e7f3      	b.n	8008528 <_dtoa_r+0xa0>
 8008540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008544:	2200      	movs	r2, #0
 8008546:	ec51 0b17 	vmov	r0, r1, d7
 800854a:	2300      	movs	r3, #0
 800854c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008550:	f7f8 fac2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008554:	4680      	mov	r8, r0
 8008556:	b158      	cbz	r0, 8008570 <_dtoa_r+0xe8>
 8008558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800855a:	2301      	movs	r3, #1
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8551 	beq.w	8009008 <_dtoa_r+0xb80>
 8008566:	488b      	ldr	r0, [pc, #556]	; (8008794 <_dtoa_r+0x30c>)
 8008568:	6018      	str	r0, [r3, #0]
 800856a:	1e43      	subs	r3, r0, #1
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	e7dd      	b.n	800852c <_dtoa_r+0xa4>
 8008570:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008574:	aa12      	add	r2, sp, #72	; 0x48
 8008576:	a913      	add	r1, sp, #76	; 0x4c
 8008578:	4620      	mov	r0, r4
 800857a:	f001 f8ad 	bl	80096d8 <__d2b>
 800857e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008582:	4683      	mov	fp, r0
 8008584:	2d00      	cmp	r5, #0
 8008586:	d07c      	beq.n	8008682 <_dtoa_r+0x1fa>
 8008588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800858a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800858e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008592:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008596:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800859a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800859e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085a2:	4b7d      	ldr	r3, [pc, #500]	; (8008798 <_dtoa_r+0x310>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	4630      	mov	r0, r6
 80085a8:	4639      	mov	r1, r7
 80085aa:	f7f7 fe75 	bl	8000298 <__aeabi_dsub>
 80085ae:	a36e      	add	r3, pc, #440	; (adr r3, 8008768 <_dtoa_r+0x2e0>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f7f8 f828 	bl	8000608 <__aeabi_dmul>
 80085b8:	a36d      	add	r3, pc, #436	; (adr r3, 8008770 <_dtoa_r+0x2e8>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f7f7 fe6d 	bl	800029c <__adddf3>
 80085c2:	4606      	mov	r6, r0
 80085c4:	4628      	mov	r0, r5
 80085c6:	460f      	mov	r7, r1
 80085c8:	f7f7 ffb4 	bl	8000534 <__aeabi_i2d>
 80085cc:	a36a      	add	r3, pc, #424	; (adr r3, 8008778 <_dtoa_r+0x2f0>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f8 f819 	bl	8000608 <__aeabi_dmul>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4630      	mov	r0, r6
 80085dc:	4639      	mov	r1, r7
 80085de:	f7f7 fe5d 	bl	800029c <__adddf3>
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	f7f8 fabf 	bl	8000b68 <__aeabi_d2iz>
 80085ea:	2200      	movs	r2, #0
 80085ec:	4682      	mov	sl, r0
 80085ee:	2300      	movs	r3, #0
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f8 fa7a 	bl	8000aec <__aeabi_dcmplt>
 80085f8:	b148      	cbz	r0, 800860e <_dtoa_r+0x186>
 80085fa:	4650      	mov	r0, sl
 80085fc:	f7f7 ff9a 	bl	8000534 <__aeabi_i2d>
 8008600:	4632      	mov	r2, r6
 8008602:	463b      	mov	r3, r7
 8008604:	f7f8 fa68 	bl	8000ad8 <__aeabi_dcmpeq>
 8008608:	b908      	cbnz	r0, 800860e <_dtoa_r+0x186>
 800860a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800860e:	f1ba 0f16 	cmp.w	sl, #22
 8008612:	d854      	bhi.n	80086be <_dtoa_r+0x236>
 8008614:	4b61      	ldr	r3, [pc, #388]	; (800879c <_dtoa_r+0x314>)
 8008616:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008622:	f7f8 fa63 	bl	8000aec <__aeabi_dcmplt>
 8008626:	2800      	cmp	r0, #0
 8008628:	d04b      	beq.n	80086c2 <_dtoa_r+0x23a>
 800862a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800862e:	2300      	movs	r3, #0
 8008630:	930e      	str	r3, [sp, #56]	; 0x38
 8008632:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008634:	1b5d      	subs	r5, r3, r5
 8008636:	1e6b      	subs	r3, r5, #1
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	bf43      	ittte	mi
 800863c:	2300      	movmi	r3, #0
 800863e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008642:	9304      	strmi	r3, [sp, #16]
 8008644:	f04f 0800 	movpl.w	r8, #0
 8008648:	f1ba 0f00 	cmp.w	sl, #0
 800864c:	db3b      	blt.n	80086c6 <_dtoa_r+0x23e>
 800864e:	9b04      	ldr	r3, [sp, #16]
 8008650:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008654:	4453      	add	r3, sl
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	2300      	movs	r3, #0
 800865a:	9306      	str	r3, [sp, #24]
 800865c:	9b05      	ldr	r3, [sp, #20]
 800865e:	2b09      	cmp	r3, #9
 8008660:	d869      	bhi.n	8008736 <_dtoa_r+0x2ae>
 8008662:	2b05      	cmp	r3, #5
 8008664:	bfc4      	itt	gt
 8008666:	3b04      	subgt	r3, #4
 8008668:	9305      	strgt	r3, [sp, #20]
 800866a:	9b05      	ldr	r3, [sp, #20]
 800866c:	f1a3 0302 	sub.w	r3, r3, #2
 8008670:	bfcc      	ite	gt
 8008672:	2500      	movgt	r5, #0
 8008674:	2501      	movle	r5, #1
 8008676:	2b03      	cmp	r3, #3
 8008678:	d869      	bhi.n	800874e <_dtoa_r+0x2c6>
 800867a:	e8df f003 	tbb	[pc, r3]
 800867e:	4e2c      	.short	0x4e2c
 8008680:	5a4c      	.short	0x5a4c
 8008682:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008686:	441d      	add	r5, r3
 8008688:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800868c:	2b20      	cmp	r3, #32
 800868e:	bfc1      	itttt	gt
 8008690:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008694:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008698:	fa09 f303 	lslgt.w	r3, r9, r3
 800869c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80086a0:	bfda      	itte	le
 80086a2:	f1c3 0320 	rsble	r3, r3, #32
 80086a6:	fa06 f003 	lslle.w	r0, r6, r3
 80086aa:	4318      	orrgt	r0, r3
 80086ac:	f7f7 ff32 	bl	8000514 <__aeabi_ui2d>
 80086b0:	2301      	movs	r3, #1
 80086b2:	4606      	mov	r6, r0
 80086b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80086b8:	3d01      	subs	r5, #1
 80086ba:	9310      	str	r3, [sp, #64]	; 0x40
 80086bc:	e771      	b.n	80085a2 <_dtoa_r+0x11a>
 80086be:	2301      	movs	r3, #1
 80086c0:	e7b6      	b.n	8008630 <_dtoa_r+0x1a8>
 80086c2:	900e      	str	r0, [sp, #56]	; 0x38
 80086c4:	e7b5      	b.n	8008632 <_dtoa_r+0x1aa>
 80086c6:	f1ca 0300 	rsb	r3, sl, #0
 80086ca:	9306      	str	r3, [sp, #24]
 80086cc:	2300      	movs	r3, #0
 80086ce:	eba8 080a 	sub.w	r8, r8, sl
 80086d2:	930d      	str	r3, [sp, #52]	; 0x34
 80086d4:	e7c2      	b.n	800865c <_dtoa_r+0x1d4>
 80086d6:	2300      	movs	r3, #0
 80086d8:	9308      	str	r3, [sp, #32]
 80086da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dc39      	bgt.n	8008754 <_dtoa_r+0x2cc>
 80086e0:	f04f 0901 	mov.w	r9, #1
 80086e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80086e8:	464b      	mov	r3, r9
 80086ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80086ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086f0:	2200      	movs	r2, #0
 80086f2:	6042      	str	r2, [r0, #4]
 80086f4:	2204      	movs	r2, #4
 80086f6:	f102 0614 	add.w	r6, r2, #20
 80086fa:	429e      	cmp	r6, r3
 80086fc:	6841      	ldr	r1, [r0, #4]
 80086fe:	d92f      	bls.n	8008760 <_dtoa_r+0x2d8>
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fcc7 	bl	8009094 <_Balloc>
 8008706:	9000      	str	r0, [sp, #0]
 8008708:	2800      	cmp	r0, #0
 800870a:	d14b      	bne.n	80087a4 <_dtoa_r+0x31c>
 800870c:	4b24      	ldr	r3, [pc, #144]	; (80087a0 <_dtoa_r+0x318>)
 800870e:	4602      	mov	r2, r0
 8008710:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008714:	e6d1      	b.n	80084ba <_dtoa_r+0x32>
 8008716:	2301      	movs	r3, #1
 8008718:	e7de      	b.n	80086d8 <_dtoa_r+0x250>
 800871a:	2300      	movs	r3, #0
 800871c:	9308      	str	r3, [sp, #32]
 800871e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008720:	eb0a 0903 	add.w	r9, sl, r3
 8008724:	f109 0301 	add.w	r3, r9, #1
 8008728:	2b01      	cmp	r3, #1
 800872a:	9301      	str	r3, [sp, #4]
 800872c:	bfb8      	it	lt
 800872e:	2301      	movlt	r3, #1
 8008730:	e7dd      	b.n	80086ee <_dtoa_r+0x266>
 8008732:	2301      	movs	r3, #1
 8008734:	e7f2      	b.n	800871c <_dtoa_r+0x294>
 8008736:	2501      	movs	r5, #1
 8008738:	2300      	movs	r3, #0
 800873a:	9305      	str	r3, [sp, #20]
 800873c:	9508      	str	r5, [sp, #32]
 800873e:	f04f 39ff 	mov.w	r9, #4294967295
 8008742:	2200      	movs	r2, #0
 8008744:	f8cd 9004 	str.w	r9, [sp, #4]
 8008748:	2312      	movs	r3, #18
 800874a:	9209      	str	r2, [sp, #36]	; 0x24
 800874c:	e7cf      	b.n	80086ee <_dtoa_r+0x266>
 800874e:	2301      	movs	r3, #1
 8008750:	9308      	str	r3, [sp, #32]
 8008752:	e7f4      	b.n	800873e <_dtoa_r+0x2b6>
 8008754:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008758:	f8cd 9004 	str.w	r9, [sp, #4]
 800875c:	464b      	mov	r3, r9
 800875e:	e7c6      	b.n	80086ee <_dtoa_r+0x266>
 8008760:	3101      	adds	r1, #1
 8008762:	6041      	str	r1, [r0, #4]
 8008764:	0052      	lsls	r2, r2, #1
 8008766:	e7c6      	b.n	80086f6 <_dtoa_r+0x26e>
 8008768:	636f4361 	.word	0x636f4361
 800876c:	3fd287a7 	.word	0x3fd287a7
 8008770:	8b60c8b3 	.word	0x8b60c8b3
 8008774:	3fc68a28 	.word	0x3fc68a28
 8008778:	509f79fb 	.word	0x509f79fb
 800877c:	3fd34413 	.word	0x3fd34413
 8008780:	0800a83d 	.word	0x0800a83d
 8008784:	0800a854 	.word	0x0800a854
 8008788:	7ff00000 	.word	0x7ff00000
 800878c:	0800a839 	.word	0x0800a839
 8008790:	0800a830 	.word	0x0800a830
 8008794:	0800a80d 	.word	0x0800a80d
 8008798:	3ff80000 	.word	0x3ff80000
 800879c:	0800a950 	.word	0x0800a950
 80087a0:	0800a8b3 	.word	0x0800a8b3
 80087a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087a6:	9a00      	ldr	r2, [sp, #0]
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	2b0e      	cmp	r3, #14
 80087ae:	f200 80ad 	bhi.w	800890c <_dtoa_r+0x484>
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	f000 80aa 	beq.w	800890c <_dtoa_r+0x484>
 80087b8:	f1ba 0f00 	cmp.w	sl, #0
 80087bc:	dd36      	ble.n	800882c <_dtoa_r+0x3a4>
 80087be:	4ac3      	ldr	r2, [pc, #780]	; (8008acc <_dtoa_r+0x644>)
 80087c0:	f00a 030f 	and.w	r3, sl, #15
 80087c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087c8:	ed93 7b00 	vldr	d7, [r3]
 80087cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80087d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80087d4:	eeb0 8a47 	vmov.f32	s16, s14
 80087d8:	eef0 8a67 	vmov.f32	s17, s15
 80087dc:	d016      	beq.n	800880c <_dtoa_r+0x384>
 80087de:	4bbc      	ldr	r3, [pc, #752]	; (8008ad0 <_dtoa_r+0x648>)
 80087e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087e8:	f7f8 f838 	bl	800085c <__aeabi_ddiv>
 80087ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087f0:	f007 070f 	and.w	r7, r7, #15
 80087f4:	2503      	movs	r5, #3
 80087f6:	4eb6      	ldr	r6, [pc, #728]	; (8008ad0 <_dtoa_r+0x648>)
 80087f8:	b957      	cbnz	r7, 8008810 <_dtoa_r+0x388>
 80087fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fe:	ec53 2b18 	vmov	r2, r3, d8
 8008802:	f7f8 f82b 	bl	800085c <__aeabi_ddiv>
 8008806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800880a:	e029      	b.n	8008860 <_dtoa_r+0x3d8>
 800880c:	2502      	movs	r5, #2
 800880e:	e7f2      	b.n	80087f6 <_dtoa_r+0x36e>
 8008810:	07f9      	lsls	r1, r7, #31
 8008812:	d508      	bpl.n	8008826 <_dtoa_r+0x39e>
 8008814:	ec51 0b18 	vmov	r0, r1, d8
 8008818:	e9d6 2300 	ldrd	r2, r3, [r6]
 800881c:	f7f7 fef4 	bl	8000608 <__aeabi_dmul>
 8008820:	ec41 0b18 	vmov	d8, r0, r1
 8008824:	3501      	adds	r5, #1
 8008826:	107f      	asrs	r7, r7, #1
 8008828:	3608      	adds	r6, #8
 800882a:	e7e5      	b.n	80087f8 <_dtoa_r+0x370>
 800882c:	f000 80a6 	beq.w	800897c <_dtoa_r+0x4f4>
 8008830:	f1ca 0600 	rsb	r6, sl, #0
 8008834:	4ba5      	ldr	r3, [pc, #660]	; (8008acc <_dtoa_r+0x644>)
 8008836:	4fa6      	ldr	r7, [pc, #664]	; (8008ad0 <_dtoa_r+0x648>)
 8008838:	f006 020f 	and.w	r2, r6, #15
 800883c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008850:	1136      	asrs	r6, r6, #4
 8008852:	2300      	movs	r3, #0
 8008854:	2502      	movs	r5, #2
 8008856:	2e00      	cmp	r6, #0
 8008858:	f040 8085 	bne.w	8008966 <_dtoa_r+0x4de>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1d2      	bne.n	8008806 <_dtoa_r+0x37e>
 8008860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 808c 	beq.w	8008980 <_dtoa_r+0x4f8>
 8008868:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800886c:	4b99      	ldr	r3, [pc, #612]	; (8008ad4 <_dtoa_r+0x64c>)
 800886e:	2200      	movs	r2, #0
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f8 f93a 	bl	8000aec <__aeabi_dcmplt>
 8008878:	2800      	cmp	r0, #0
 800887a:	f000 8081 	beq.w	8008980 <_dtoa_r+0x4f8>
 800887e:	9b01      	ldr	r3, [sp, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d07d      	beq.n	8008980 <_dtoa_r+0x4f8>
 8008884:	f1b9 0f00 	cmp.w	r9, #0
 8008888:	dd3c      	ble.n	8008904 <_dtoa_r+0x47c>
 800888a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800888e:	9307      	str	r3, [sp, #28]
 8008890:	2200      	movs	r2, #0
 8008892:	4b91      	ldr	r3, [pc, #580]	; (8008ad8 <_dtoa_r+0x650>)
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f7 feb6 	bl	8000608 <__aeabi_dmul>
 800889c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088a0:	3501      	adds	r5, #1
 80088a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80088a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088aa:	4628      	mov	r0, r5
 80088ac:	f7f7 fe42 	bl	8000534 <__aeabi_i2d>
 80088b0:	4632      	mov	r2, r6
 80088b2:	463b      	mov	r3, r7
 80088b4:	f7f7 fea8 	bl	8000608 <__aeabi_dmul>
 80088b8:	4b88      	ldr	r3, [pc, #544]	; (8008adc <_dtoa_r+0x654>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	f7f7 fcee 	bl	800029c <__adddf3>
 80088c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80088c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d15c      	bne.n	800898a <_dtoa_r+0x502>
 80088d0:	4b83      	ldr	r3, [pc, #524]	; (8008ae0 <_dtoa_r+0x658>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	f7f7 fcde 	bl	8000298 <__aeabi_dsub>
 80088dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088e0:	4606      	mov	r6, r0
 80088e2:	460f      	mov	r7, r1
 80088e4:	f7f8 f920 	bl	8000b28 <__aeabi_dcmpgt>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	f040 8296 	bne.w	8008e1a <_dtoa_r+0x992>
 80088ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80088f2:	4630      	mov	r0, r6
 80088f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088f8:	4639      	mov	r1, r7
 80088fa:	f7f8 f8f7 	bl	8000aec <__aeabi_dcmplt>
 80088fe:	2800      	cmp	r0, #0
 8008900:	f040 8288 	bne.w	8008e14 <_dtoa_r+0x98c>
 8008904:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800890c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800890e:	2b00      	cmp	r3, #0
 8008910:	f2c0 8158 	blt.w	8008bc4 <_dtoa_r+0x73c>
 8008914:	f1ba 0f0e 	cmp.w	sl, #14
 8008918:	f300 8154 	bgt.w	8008bc4 <_dtoa_r+0x73c>
 800891c:	4b6b      	ldr	r3, [pc, #428]	; (8008acc <_dtoa_r+0x644>)
 800891e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008922:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	2b00      	cmp	r3, #0
 800892a:	f280 80e3 	bge.w	8008af4 <_dtoa_r+0x66c>
 800892e:	9b01      	ldr	r3, [sp, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f300 80df 	bgt.w	8008af4 <_dtoa_r+0x66c>
 8008936:	f040 826d 	bne.w	8008e14 <_dtoa_r+0x98c>
 800893a:	4b69      	ldr	r3, [pc, #420]	; (8008ae0 <_dtoa_r+0x658>)
 800893c:	2200      	movs	r2, #0
 800893e:	4640      	mov	r0, r8
 8008940:	4649      	mov	r1, r9
 8008942:	f7f7 fe61 	bl	8000608 <__aeabi_dmul>
 8008946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800894a:	f7f8 f8e3 	bl	8000b14 <__aeabi_dcmpge>
 800894e:	9e01      	ldr	r6, [sp, #4]
 8008950:	4637      	mov	r7, r6
 8008952:	2800      	cmp	r0, #0
 8008954:	f040 8243 	bne.w	8008dde <_dtoa_r+0x956>
 8008958:	9d00      	ldr	r5, [sp, #0]
 800895a:	2331      	movs	r3, #49	; 0x31
 800895c:	f805 3b01 	strb.w	r3, [r5], #1
 8008960:	f10a 0a01 	add.w	sl, sl, #1
 8008964:	e23f      	b.n	8008de6 <_dtoa_r+0x95e>
 8008966:	07f2      	lsls	r2, r6, #31
 8008968:	d505      	bpl.n	8008976 <_dtoa_r+0x4ee>
 800896a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896e:	f7f7 fe4b 	bl	8000608 <__aeabi_dmul>
 8008972:	3501      	adds	r5, #1
 8008974:	2301      	movs	r3, #1
 8008976:	1076      	asrs	r6, r6, #1
 8008978:	3708      	adds	r7, #8
 800897a:	e76c      	b.n	8008856 <_dtoa_r+0x3ce>
 800897c:	2502      	movs	r5, #2
 800897e:	e76f      	b.n	8008860 <_dtoa_r+0x3d8>
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	f8cd a01c 	str.w	sl, [sp, #28]
 8008986:	930c      	str	r3, [sp, #48]	; 0x30
 8008988:	e78d      	b.n	80088a6 <_dtoa_r+0x41e>
 800898a:	9900      	ldr	r1, [sp, #0]
 800898c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800898e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008990:	4b4e      	ldr	r3, [pc, #312]	; (8008acc <_dtoa_r+0x644>)
 8008992:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008996:	4401      	add	r1, r0
 8008998:	9102      	str	r1, [sp, #8]
 800899a:	9908      	ldr	r1, [sp, #32]
 800899c:	eeb0 8a47 	vmov.f32	s16, s14
 80089a0:	eef0 8a67 	vmov.f32	s17, s15
 80089a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089ac:	2900      	cmp	r1, #0
 80089ae:	d045      	beq.n	8008a3c <_dtoa_r+0x5b4>
 80089b0:	494c      	ldr	r1, [pc, #304]	; (8008ae4 <_dtoa_r+0x65c>)
 80089b2:	2000      	movs	r0, #0
 80089b4:	f7f7 ff52 	bl	800085c <__aeabi_ddiv>
 80089b8:	ec53 2b18 	vmov	r2, r3, d8
 80089bc:	f7f7 fc6c 	bl	8000298 <__aeabi_dsub>
 80089c0:	9d00      	ldr	r5, [sp, #0]
 80089c2:	ec41 0b18 	vmov	d8, r0, r1
 80089c6:	4639      	mov	r1, r7
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7f8 f8cd 	bl	8000b68 <__aeabi_d2iz>
 80089ce:	900c      	str	r0, [sp, #48]	; 0x30
 80089d0:	f7f7 fdb0 	bl	8000534 <__aeabi_i2d>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4630      	mov	r0, r6
 80089da:	4639      	mov	r1, r7
 80089dc:	f7f7 fc5c 	bl	8000298 <__aeabi_dsub>
 80089e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089e2:	3330      	adds	r3, #48	; 0x30
 80089e4:	f805 3b01 	strb.w	r3, [r5], #1
 80089e8:	ec53 2b18 	vmov	r2, r3, d8
 80089ec:	4606      	mov	r6, r0
 80089ee:	460f      	mov	r7, r1
 80089f0:	f7f8 f87c 	bl	8000aec <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d165      	bne.n	8008ac4 <_dtoa_r+0x63c>
 80089f8:	4632      	mov	r2, r6
 80089fa:	463b      	mov	r3, r7
 80089fc:	4935      	ldr	r1, [pc, #212]	; (8008ad4 <_dtoa_r+0x64c>)
 80089fe:	2000      	movs	r0, #0
 8008a00:	f7f7 fc4a 	bl	8000298 <__aeabi_dsub>
 8008a04:	ec53 2b18 	vmov	r2, r3, d8
 8008a08:	f7f8 f870 	bl	8000aec <__aeabi_dcmplt>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f040 80b9 	bne.w	8008b84 <_dtoa_r+0x6fc>
 8008a12:	9b02      	ldr	r3, [sp, #8]
 8008a14:	429d      	cmp	r5, r3
 8008a16:	f43f af75 	beq.w	8008904 <_dtoa_r+0x47c>
 8008a1a:	4b2f      	ldr	r3, [pc, #188]	; (8008ad8 <_dtoa_r+0x650>)
 8008a1c:	ec51 0b18 	vmov	r0, r1, d8
 8008a20:	2200      	movs	r2, #0
 8008a22:	f7f7 fdf1 	bl	8000608 <__aeabi_dmul>
 8008a26:	4b2c      	ldr	r3, [pc, #176]	; (8008ad8 <_dtoa_r+0x650>)
 8008a28:	ec41 0b18 	vmov	d8, r0, r1
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4630      	mov	r0, r6
 8008a30:	4639      	mov	r1, r7
 8008a32:	f7f7 fde9 	bl	8000608 <__aeabi_dmul>
 8008a36:	4606      	mov	r6, r0
 8008a38:	460f      	mov	r7, r1
 8008a3a:	e7c4      	b.n	80089c6 <_dtoa_r+0x53e>
 8008a3c:	ec51 0b17 	vmov	r0, r1, d7
 8008a40:	f7f7 fde2 	bl	8000608 <__aeabi_dmul>
 8008a44:	9b02      	ldr	r3, [sp, #8]
 8008a46:	9d00      	ldr	r5, [sp, #0]
 8008a48:	930c      	str	r3, [sp, #48]	; 0x30
 8008a4a:	ec41 0b18 	vmov	d8, r0, r1
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7f8 f889 	bl	8000b68 <__aeabi_d2iz>
 8008a56:	9011      	str	r0, [sp, #68]	; 0x44
 8008a58:	f7f7 fd6c 	bl	8000534 <__aeabi_i2d>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f7 fc18 	bl	8000298 <__aeabi_dsub>
 8008a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a6a:	3330      	adds	r3, #48	; 0x30
 8008a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8008a70:	9b02      	ldr	r3, [sp, #8]
 8008a72:	429d      	cmp	r5, r3
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	d134      	bne.n	8008ae8 <_dtoa_r+0x660>
 8008a7e:	4b19      	ldr	r3, [pc, #100]	; (8008ae4 <_dtoa_r+0x65c>)
 8008a80:	ec51 0b18 	vmov	r0, r1, d8
 8008a84:	f7f7 fc0a 	bl	800029c <__adddf3>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	4639      	mov	r1, r7
 8008a90:	f7f8 f84a 	bl	8000b28 <__aeabi_dcmpgt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d175      	bne.n	8008b84 <_dtoa_r+0x6fc>
 8008a98:	ec53 2b18 	vmov	r2, r3, d8
 8008a9c:	4911      	ldr	r1, [pc, #68]	; (8008ae4 <_dtoa_r+0x65c>)
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	f7f7 fbfa 	bl	8000298 <__aeabi_dsub>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f8 f81e 	bl	8000aec <__aeabi_dcmplt>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f43f af27 	beq.w	8008904 <_dtoa_r+0x47c>
 8008ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ab8:	1e6b      	subs	r3, r5, #1
 8008aba:	930c      	str	r3, [sp, #48]	; 0x30
 8008abc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ac0:	2b30      	cmp	r3, #48	; 0x30
 8008ac2:	d0f8      	beq.n	8008ab6 <_dtoa_r+0x62e>
 8008ac4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ac8:	e04a      	b.n	8008b60 <_dtoa_r+0x6d8>
 8008aca:	bf00      	nop
 8008acc:	0800a950 	.word	0x0800a950
 8008ad0:	0800a928 	.word	0x0800a928
 8008ad4:	3ff00000 	.word	0x3ff00000
 8008ad8:	40240000 	.word	0x40240000
 8008adc:	401c0000 	.word	0x401c0000
 8008ae0:	40140000 	.word	0x40140000
 8008ae4:	3fe00000 	.word	0x3fe00000
 8008ae8:	4baf      	ldr	r3, [pc, #700]	; (8008da8 <_dtoa_r+0x920>)
 8008aea:	f7f7 fd8d 	bl	8000608 <__aeabi_dmul>
 8008aee:	4606      	mov	r6, r0
 8008af0:	460f      	mov	r7, r1
 8008af2:	e7ac      	b.n	8008a4e <_dtoa_r+0x5c6>
 8008af4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008af8:	9d00      	ldr	r5, [sp, #0]
 8008afa:	4642      	mov	r2, r8
 8008afc:	464b      	mov	r3, r9
 8008afe:	4630      	mov	r0, r6
 8008b00:	4639      	mov	r1, r7
 8008b02:	f7f7 feab 	bl	800085c <__aeabi_ddiv>
 8008b06:	f7f8 f82f 	bl	8000b68 <__aeabi_d2iz>
 8008b0a:	9002      	str	r0, [sp, #8]
 8008b0c:	f7f7 fd12 	bl	8000534 <__aeabi_i2d>
 8008b10:	4642      	mov	r2, r8
 8008b12:	464b      	mov	r3, r9
 8008b14:	f7f7 fd78 	bl	8000608 <__aeabi_dmul>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	4639      	mov	r1, r7
 8008b20:	f7f7 fbba 	bl	8000298 <__aeabi_dsub>
 8008b24:	9e02      	ldr	r6, [sp, #8]
 8008b26:	9f01      	ldr	r7, [sp, #4]
 8008b28:	3630      	adds	r6, #48	; 0x30
 8008b2a:	f805 6b01 	strb.w	r6, [r5], #1
 8008b2e:	9e00      	ldr	r6, [sp, #0]
 8008b30:	1bae      	subs	r6, r5, r6
 8008b32:	42b7      	cmp	r7, r6
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	d137      	bne.n	8008baa <_dtoa_r+0x722>
 8008b3a:	f7f7 fbaf 	bl	800029c <__adddf3>
 8008b3e:	4642      	mov	r2, r8
 8008b40:	464b      	mov	r3, r9
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	f7f7 ffef 	bl	8000b28 <__aeabi_dcmpgt>
 8008b4a:	b9c8      	cbnz	r0, 8008b80 <_dtoa_r+0x6f8>
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	464b      	mov	r3, r9
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	f7f7 ffc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b58:	b110      	cbz	r0, 8008b60 <_dtoa_r+0x6d8>
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	07d9      	lsls	r1, r3, #31
 8008b5e:	d40f      	bmi.n	8008b80 <_dtoa_r+0x6f8>
 8008b60:	4620      	mov	r0, r4
 8008b62:	4659      	mov	r1, fp
 8008b64:	f000 fad6 	bl	8009114 <_Bfree>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	702b      	strb	r3, [r5, #0]
 8008b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b6e:	f10a 0001 	add.w	r0, sl, #1
 8008b72:	6018      	str	r0, [r3, #0]
 8008b74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f43f acd8 	beq.w	800852c <_dtoa_r+0xa4>
 8008b7c:	601d      	str	r5, [r3, #0]
 8008b7e:	e4d5      	b.n	800852c <_dtoa_r+0xa4>
 8008b80:	f8cd a01c 	str.w	sl, [sp, #28]
 8008b84:	462b      	mov	r3, r5
 8008b86:	461d      	mov	r5, r3
 8008b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b8c:	2a39      	cmp	r2, #57	; 0x39
 8008b8e:	d108      	bne.n	8008ba2 <_dtoa_r+0x71a>
 8008b90:	9a00      	ldr	r2, [sp, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d1f7      	bne.n	8008b86 <_dtoa_r+0x6fe>
 8008b96:	9a07      	ldr	r2, [sp, #28]
 8008b98:	9900      	ldr	r1, [sp, #0]
 8008b9a:	3201      	adds	r2, #1
 8008b9c:	9207      	str	r2, [sp, #28]
 8008b9e:	2230      	movs	r2, #48	; 0x30
 8008ba0:	700a      	strb	r2, [r1, #0]
 8008ba2:	781a      	ldrb	r2, [r3, #0]
 8008ba4:	3201      	adds	r2, #1
 8008ba6:	701a      	strb	r2, [r3, #0]
 8008ba8:	e78c      	b.n	8008ac4 <_dtoa_r+0x63c>
 8008baa:	4b7f      	ldr	r3, [pc, #508]	; (8008da8 <_dtoa_r+0x920>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	f7f7 fd2b 	bl	8000608 <__aeabi_dmul>
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460f      	mov	r7, r1
 8008bba:	f7f7 ff8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d09b      	beq.n	8008afa <_dtoa_r+0x672>
 8008bc2:	e7cd      	b.n	8008b60 <_dtoa_r+0x6d8>
 8008bc4:	9a08      	ldr	r2, [sp, #32]
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	f000 80c4 	beq.w	8008d54 <_dtoa_r+0x8cc>
 8008bcc:	9a05      	ldr	r2, [sp, #20]
 8008bce:	2a01      	cmp	r2, #1
 8008bd0:	f300 80a8 	bgt.w	8008d24 <_dtoa_r+0x89c>
 8008bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	f000 80a0 	beq.w	8008d1c <_dtoa_r+0x894>
 8008bdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008be0:	9e06      	ldr	r6, [sp, #24]
 8008be2:	4645      	mov	r5, r8
 8008be4:	9a04      	ldr	r2, [sp, #16]
 8008be6:	2101      	movs	r1, #1
 8008be8:	441a      	add	r2, r3
 8008bea:	4620      	mov	r0, r4
 8008bec:	4498      	add	r8, r3
 8008bee:	9204      	str	r2, [sp, #16]
 8008bf0:	f000 fb4c 	bl	800928c <__i2b>
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	2d00      	cmp	r5, #0
 8008bf8:	dd0b      	ble.n	8008c12 <_dtoa_r+0x78a>
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dd08      	ble.n	8008c12 <_dtoa_r+0x78a>
 8008c00:	42ab      	cmp	r3, r5
 8008c02:	9a04      	ldr	r2, [sp, #16]
 8008c04:	bfa8      	it	ge
 8008c06:	462b      	movge	r3, r5
 8008c08:	eba8 0803 	sub.w	r8, r8, r3
 8008c0c:	1aed      	subs	r5, r5, r3
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	9b06      	ldr	r3, [sp, #24]
 8008c14:	b1fb      	cbz	r3, 8008c56 <_dtoa_r+0x7ce>
 8008c16:	9b08      	ldr	r3, [sp, #32]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 809f 	beq.w	8008d5c <_dtoa_r+0x8d4>
 8008c1e:	2e00      	cmp	r6, #0
 8008c20:	dd11      	ble.n	8008c46 <_dtoa_r+0x7be>
 8008c22:	4639      	mov	r1, r7
 8008c24:	4632      	mov	r2, r6
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 fbec 	bl	8009404 <__pow5mult>
 8008c2c:	465a      	mov	r2, fp
 8008c2e:	4601      	mov	r1, r0
 8008c30:	4607      	mov	r7, r0
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 fb40 	bl	80092b8 <__multiply>
 8008c38:	4659      	mov	r1, fp
 8008c3a:	9007      	str	r0, [sp, #28]
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fa69 	bl	8009114 <_Bfree>
 8008c42:	9b07      	ldr	r3, [sp, #28]
 8008c44:	469b      	mov	fp, r3
 8008c46:	9b06      	ldr	r3, [sp, #24]
 8008c48:	1b9a      	subs	r2, r3, r6
 8008c4a:	d004      	beq.n	8008c56 <_dtoa_r+0x7ce>
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fbd8 	bl	8009404 <__pow5mult>
 8008c54:	4683      	mov	fp, r0
 8008c56:	2101      	movs	r1, #1
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 fb17 	bl	800928c <__i2b>
 8008c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	4606      	mov	r6, r0
 8008c64:	dd7c      	ble.n	8008d60 <_dtoa_r+0x8d8>
 8008c66:	461a      	mov	r2, r3
 8008c68:	4601      	mov	r1, r0
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fbca 	bl	8009404 <__pow5mult>
 8008c70:	9b05      	ldr	r3, [sp, #20]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	4606      	mov	r6, r0
 8008c76:	dd76      	ble.n	8008d66 <_dtoa_r+0x8de>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9306      	str	r3, [sp, #24]
 8008c7c:	6933      	ldr	r3, [r6, #16]
 8008c7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c82:	6918      	ldr	r0, [r3, #16]
 8008c84:	f000 fab2 	bl	80091ec <__hi0bits>
 8008c88:	f1c0 0020 	rsb	r0, r0, #32
 8008c8c:	9b04      	ldr	r3, [sp, #16]
 8008c8e:	4418      	add	r0, r3
 8008c90:	f010 001f 	ands.w	r0, r0, #31
 8008c94:	f000 8086 	beq.w	8008da4 <_dtoa_r+0x91c>
 8008c98:	f1c0 0320 	rsb	r3, r0, #32
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	dd7f      	ble.n	8008da0 <_dtoa_r+0x918>
 8008ca0:	f1c0 001c 	rsb	r0, r0, #28
 8008ca4:	9b04      	ldr	r3, [sp, #16]
 8008ca6:	4403      	add	r3, r0
 8008ca8:	4480      	add	r8, r0
 8008caa:	4405      	add	r5, r0
 8008cac:	9304      	str	r3, [sp, #16]
 8008cae:	f1b8 0f00 	cmp.w	r8, #0
 8008cb2:	dd05      	ble.n	8008cc0 <_dtoa_r+0x838>
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fbfd 	bl	80094b8 <__lshift>
 8008cbe:	4683      	mov	fp, r0
 8008cc0:	9b04      	ldr	r3, [sp, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd05      	ble.n	8008cd2 <_dtoa_r+0x84a>
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 fbf4 	bl	80094b8 <__lshift>
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d069      	beq.n	8008dac <_dtoa_r+0x924>
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f000 fc58 	bl	8009590 <__mcmp>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	da63      	bge.n	8008dac <_dtoa_r+0x924>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4659      	mov	r1, fp
 8008ce8:	220a      	movs	r2, #10
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 fa34 	bl	8009158 <__multadd>
 8008cf0:	9b08      	ldr	r3, [sp, #32]
 8008cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cf6:	4683      	mov	fp, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 818f 	beq.w	800901c <_dtoa_r+0xb94>
 8008cfe:	4639      	mov	r1, r7
 8008d00:	2300      	movs	r3, #0
 8008d02:	220a      	movs	r2, #10
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fa27 	bl	8009158 <__multadd>
 8008d0a:	f1b9 0f00 	cmp.w	r9, #0
 8008d0e:	4607      	mov	r7, r0
 8008d10:	f300 808e 	bgt.w	8008e30 <_dtoa_r+0x9a8>
 8008d14:	9b05      	ldr	r3, [sp, #20]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	dc50      	bgt.n	8008dbc <_dtoa_r+0x934>
 8008d1a:	e089      	b.n	8008e30 <_dtoa_r+0x9a8>
 8008d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d22:	e75d      	b.n	8008be0 <_dtoa_r+0x758>
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	1e5e      	subs	r6, r3, #1
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	42b3      	cmp	r3, r6
 8008d2c:	bfbf      	itttt	lt
 8008d2e:	9b06      	ldrlt	r3, [sp, #24]
 8008d30:	9606      	strlt	r6, [sp, #24]
 8008d32:	1af2      	sublt	r2, r6, r3
 8008d34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008d36:	bfb6      	itet	lt
 8008d38:	189b      	addlt	r3, r3, r2
 8008d3a:	1b9e      	subge	r6, r3, r6
 8008d3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	bfb8      	it	lt
 8008d42:	2600      	movlt	r6, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfb5      	itete	lt
 8008d48:	eba8 0503 	sublt.w	r5, r8, r3
 8008d4c:	9b01      	ldrge	r3, [sp, #4]
 8008d4e:	2300      	movlt	r3, #0
 8008d50:	4645      	movge	r5, r8
 8008d52:	e747      	b.n	8008be4 <_dtoa_r+0x75c>
 8008d54:	9e06      	ldr	r6, [sp, #24]
 8008d56:	9f08      	ldr	r7, [sp, #32]
 8008d58:	4645      	mov	r5, r8
 8008d5a:	e74c      	b.n	8008bf6 <_dtoa_r+0x76e>
 8008d5c:	9a06      	ldr	r2, [sp, #24]
 8008d5e:	e775      	b.n	8008c4c <_dtoa_r+0x7c4>
 8008d60:	9b05      	ldr	r3, [sp, #20]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	dc18      	bgt.n	8008d98 <_dtoa_r+0x910>
 8008d66:	9b02      	ldr	r3, [sp, #8]
 8008d68:	b9b3      	cbnz	r3, 8008d98 <_dtoa_r+0x910>
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d70:	b9a3      	cbnz	r3, 8008d9c <_dtoa_r+0x914>
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d78:	0d1b      	lsrs	r3, r3, #20
 8008d7a:	051b      	lsls	r3, r3, #20
 8008d7c:	b12b      	cbz	r3, 8008d8a <_dtoa_r+0x902>
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	3301      	adds	r3, #1
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	f108 0801 	add.w	r8, r8, #1
 8008d88:	2301      	movs	r3, #1
 8008d8a:	9306      	str	r3, [sp, #24]
 8008d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f47f af74 	bne.w	8008c7c <_dtoa_r+0x7f4>
 8008d94:	2001      	movs	r0, #1
 8008d96:	e779      	b.n	8008c8c <_dtoa_r+0x804>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e7f6      	b.n	8008d8a <_dtoa_r+0x902>
 8008d9c:	9b02      	ldr	r3, [sp, #8]
 8008d9e:	e7f4      	b.n	8008d8a <_dtoa_r+0x902>
 8008da0:	d085      	beq.n	8008cae <_dtoa_r+0x826>
 8008da2:	4618      	mov	r0, r3
 8008da4:	301c      	adds	r0, #28
 8008da6:	e77d      	b.n	8008ca4 <_dtoa_r+0x81c>
 8008da8:	40240000 	.word	0x40240000
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	dc38      	bgt.n	8008e24 <_dtoa_r+0x99c>
 8008db2:	9b05      	ldr	r3, [sp, #20]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	dd35      	ble.n	8008e24 <_dtoa_r+0x99c>
 8008db8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008dbc:	f1b9 0f00 	cmp.w	r9, #0
 8008dc0:	d10d      	bne.n	8008dde <_dtoa_r+0x956>
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	2205      	movs	r2, #5
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 f9c5 	bl	8009158 <__multadd>
 8008dce:	4601      	mov	r1, r0
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	4658      	mov	r0, fp
 8008dd4:	f000 fbdc 	bl	8009590 <__mcmp>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f73f adbd 	bgt.w	8008958 <_dtoa_r+0x4d0>
 8008dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de0:	9d00      	ldr	r5, [sp, #0]
 8008de2:	ea6f 0a03 	mvn.w	sl, r3
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	4631      	mov	r1, r6
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 f991 	bl	8009114 <_Bfree>
 8008df2:	2f00      	cmp	r7, #0
 8008df4:	f43f aeb4 	beq.w	8008b60 <_dtoa_r+0x6d8>
 8008df8:	f1b8 0f00 	cmp.w	r8, #0
 8008dfc:	d005      	beq.n	8008e0a <_dtoa_r+0x982>
 8008dfe:	45b8      	cmp	r8, r7
 8008e00:	d003      	beq.n	8008e0a <_dtoa_r+0x982>
 8008e02:	4641      	mov	r1, r8
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 f985 	bl	8009114 <_Bfree>
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 f981 	bl	8009114 <_Bfree>
 8008e12:	e6a5      	b.n	8008b60 <_dtoa_r+0x6d8>
 8008e14:	2600      	movs	r6, #0
 8008e16:	4637      	mov	r7, r6
 8008e18:	e7e1      	b.n	8008dde <_dtoa_r+0x956>
 8008e1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008e1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008e20:	4637      	mov	r7, r6
 8008e22:	e599      	b.n	8008958 <_dtoa_r+0x4d0>
 8008e24:	9b08      	ldr	r3, [sp, #32]
 8008e26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 80fd 	beq.w	800902a <_dtoa_r+0xba2>
 8008e30:	2d00      	cmp	r5, #0
 8008e32:	dd05      	ble.n	8008e40 <_dtoa_r+0x9b8>
 8008e34:	4639      	mov	r1, r7
 8008e36:	462a      	mov	r2, r5
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 fb3d 	bl	80094b8 <__lshift>
 8008e3e:	4607      	mov	r7, r0
 8008e40:	9b06      	ldr	r3, [sp, #24]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d05c      	beq.n	8008f00 <_dtoa_r+0xa78>
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 f923 	bl	8009094 <_Balloc>
 8008e4e:	4605      	mov	r5, r0
 8008e50:	b928      	cbnz	r0, 8008e5e <_dtoa_r+0x9d6>
 8008e52:	4b80      	ldr	r3, [pc, #512]	; (8009054 <_dtoa_r+0xbcc>)
 8008e54:	4602      	mov	r2, r0
 8008e56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e5a:	f7ff bb2e 	b.w	80084ba <_dtoa_r+0x32>
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	3202      	adds	r2, #2
 8008e62:	0092      	lsls	r2, r2, #2
 8008e64:	f107 010c 	add.w	r1, r7, #12
 8008e68:	300c      	adds	r0, #12
 8008e6a:	f000 f905 	bl	8009078 <memcpy>
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4629      	mov	r1, r5
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fb20 	bl	80094b8 <__lshift>
 8008e78:	9b00      	ldr	r3, [sp, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	444b      	add	r3, r9
 8008e82:	9307      	str	r3, [sp, #28]
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	46b8      	mov	r8, r7
 8008e8c:	9306      	str	r3, [sp, #24]
 8008e8e:	4607      	mov	r7, r0
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	4631      	mov	r1, r6
 8008e94:	3b01      	subs	r3, #1
 8008e96:	4658      	mov	r0, fp
 8008e98:	9302      	str	r3, [sp, #8]
 8008e9a:	f7ff fa67 	bl	800836c <quorem>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	3330      	adds	r3, #48	; 0x30
 8008ea2:	9004      	str	r0, [sp, #16]
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	4658      	mov	r0, fp
 8008ea8:	9308      	str	r3, [sp, #32]
 8008eaa:	f000 fb71 	bl	8009590 <__mcmp>
 8008eae:	463a      	mov	r2, r7
 8008eb0:	4681      	mov	r9, r0
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 fb87 	bl	80095c8 <__mdiff>
 8008eba:	68c2      	ldr	r2, [r0, #12]
 8008ebc:	9b08      	ldr	r3, [sp, #32]
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	bb02      	cbnz	r2, 8008f04 <_dtoa_r+0xa7c>
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	4658      	mov	r0, fp
 8008ec6:	f000 fb63 	bl	8009590 <__mcmp>
 8008eca:	9b08      	ldr	r3, [sp, #32]
 8008ecc:	4602      	mov	r2, r0
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008ed6:	f000 f91d 	bl	8009114 <_Bfree>
 8008eda:	9b05      	ldr	r3, [sp, #20]
 8008edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ede:	9d01      	ldr	r5, [sp, #4]
 8008ee0:	ea43 0102 	orr.w	r1, r3, r2
 8008ee4:	9b06      	ldr	r3, [sp, #24]
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	9b08      	ldr	r3, [sp, #32]
 8008eea:	d10d      	bne.n	8008f08 <_dtoa_r+0xa80>
 8008eec:	2b39      	cmp	r3, #57	; 0x39
 8008eee:	d029      	beq.n	8008f44 <_dtoa_r+0xabc>
 8008ef0:	f1b9 0f00 	cmp.w	r9, #0
 8008ef4:	dd01      	ble.n	8008efa <_dtoa_r+0xa72>
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	3331      	adds	r3, #49	; 0x31
 8008efa:	9a02      	ldr	r2, [sp, #8]
 8008efc:	7013      	strb	r3, [r2, #0]
 8008efe:	e774      	b.n	8008dea <_dtoa_r+0x962>
 8008f00:	4638      	mov	r0, r7
 8008f02:	e7b9      	b.n	8008e78 <_dtoa_r+0x9f0>
 8008f04:	2201      	movs	r2, #1
 8008f06:	e7e2      	b.n	8008ece <_dtoa_r+0xa46>
 8008f08:	f1b9 0f00 	cmp.w	r9, #0
 8008f0c:	db06      	blt.n	8008f1c <_dtoa_r+0xa94>
 8008f0e:	9905      	ldr	r1, [sp, #20]
 8008f10:	ea41 0909 	orr.w	r9, r1, r9
 8008f14:	9906      	ldr	r1, [sp, #24]
 8008f16:	ea59 0101 	orrs.w	r1, r9, r1
 8008f1a:	d120      	bne.n	8008f5e <_dtoa_r+0xad6>
 8008f1c:	2a00      	cmp	r2, #0
 8008f1e:	ddec      	ble.n	8008efa <_dtoa_r+0xa72>
 8008f20:	4659      	mov	r1, fp
 8008f22:	2201      	movs	r2, #1
 8008f24:	4620      	mov	r0, r4
 8008f26:	9301      	str	r3, [sp, #4]
 8008f28:	f000 fac6 	bl	80094b8 <__lshift>
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4683      	mov	fp, r0
 8008f30:	f000 fb2e 	bl	8009590 <__mcmp>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	9b01      	ldr	r3, [sp, #4]
 8008f38:	dc02      	bgt.n	8008f40 <_dtoa_r+0xab8>
 8008f3a:	d1de      	bne.n	8008efa <_dtoa_r+0xa72>
 8008f3c:	07da      	lsls	r2, r3, #31
 8008f3e:	d5dc      	bpl.n	8008efa <_dtoa_r+0xa72>
 8008f40:	2b39      	cmp	r3, #57	; 0x39
 8008f42:	d1d8      	bne.n	8008ef6 <_dtoa_r+0xa6e>
 8008f44:	9a02      	ldr	r2, [sp, #8]
 8008f46:	2339      	movs	r3, #57	; 0x39
 8008f48:	7013      	strb	r3, [r2, #0]
 8008f4a:	462b      	mov	r3, r5
 8008f4c:	461d      	mov	r5, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f54:	2a39      	cmp	r2, #57	; 0x39
 8008f56:	d050      	beq.n	8008ffa <_dtoa_r+0xb72>
 8008f58:	3201      	adds	r2, #1
 8008f5a:	701a      	strb	r2, [r3, #0]
 8008f5c:	e745      	b.n	8008dea <_dtoa_r+0x962>
 8008f5e:	2a00      	cmp	r2, #0
 8008f60:	dd03      	ble.n	8008f6a <_dtoa_r+0xae2>
 8008f62:	2b39      	cmp	r3, #57	; 0x39
 8008f64:	d0ee      	beq.n	8008f44 <_dtoa_r+0xabc>
 8008f66:	3301      	adds	r3, #1
 8008f68:	e7c7      	b.n	8008efa <_dtoa_r+0xa72>
 8008f6a:	9a01      	ldr	r2, [sp, #4]
 8008f6c:	9907      	ldr	r1, [sp, #28]
 8008f6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f72:	428a      	cmp	r2, r1
 8008f74:	d02a      	beq.n	8008fcc <_dtoa_r+0xb44>
 8008f76:	4659      	mov	r1, fp
 8008f78:	2300      	movs	r3, #0
 8008f7a:	220a      	movs	r2, #10
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 f8eb 	bl	8009158 <__multadd>
 8008f82:	45b8      	cmp	r8, r7
 8008f84:	4683      	mov	fp, r0
 8008f86:	f04f 0300 	mov.w	r3, #0
 8008f8a:	f04f 020a 	mov.w	r2, #10
 8008f8e:	4641      	mov	r1, r8
 8008f90:	4620      	mov	r0, r4
 8008f92:	d107      	bne.n	8008fa4 <_dtoa_r+0xb1c>
 8008f94:	f000 f8e0 	bl	8009158 <__multadd>
 8008f98:	4680      	mov	r8, r0
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	9b01      	ldr	r3, [sp, #4]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	e775      	b.n	8008e90 <_dtoa_r+0xa08>
 8008fa4:	f000 f8d8 	bl	8009158 <__multadd>
 8008fa8:	4639      	mov	r1, r7
 8008faa:	4680      	mov	r8, r0
 8008fac:	2300      	movs	r3, #0
 8008fae:	220a      	movs	r2, #10
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 f8d1 	bl	8009158 <__multadd>
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	e7f0      	b.n	8008f9c <_dtoa_r+0xb14>
 8008fba:	f1b9 0f00 	cmp.w	r9, #0
 8008fbe:	9a00      	ldr	r2, [sp, #0]
 8008fc0:	bfcc      	ite	gt
 8008fc2:	464d      	movgt	r5, r9
 8008fc4:	2501      	movle	r5, #1
 8008fc6:	4415      	add	r5, r2
 8008fc8:	f04f 0800 	mov.w	r8, #0
 8008fcc:	4659      	mov	r1, fp
 8008fce:	2201      	movs	r2, #1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	f000 fa70 	bl	80094b8 <__lshift>
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4683      	mov	fp, r0
 8008fdc:	f000 fad8 	bl	8009590 <__mcmp>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	dcb2      	bgt.n	8008f4a <_dtoa_r+0xac2>
 8008fe4:	d102      	bne.n	8008fec <_dtoa_r+0xb64>
 8008fe6:	9b01      	ldr	r3, [sp, #4]
 8008fe8:	07db      	lsls	r3, r3, #31
 8008fea:	d4ae      	bmi.n	8008f4a <_dtoa_r+0xac2>
 8008fec:	462b      	mov	r3, r5
 8008fee:	461d      	mov	r5, r3
 8008ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ff4:	2a30      	cmp	r2, #48	; 0x30
 8008ff6:	d0fa      	beq.n	8008fee <_dtoa_r+0xb66>
 8008ff8:	e6f7      	b.n	8008dea <_dtoa_r+0x962>
 8008ffa:	9a00      	ldr	r2, [sp, #0]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d1a5      	bne.n	8008f4c <_dtoa_r+0xac4>
 8009000:	f10a 0a01 	add.w	sl, sl, #1
 8009004:	2331      	movs	r3, #49	; 0x31
 8009006:	e779      	b.n	8008efc <_dtoa_r+0xa74>
 8009008:	4b13      	ldr	r3, [pc, #76]	; (8009058 <_dtoa_r+0xbd0>)
 800900a:	f7ff baaf 	b.w	800856c <_dtoa_r+0xe4>
 800900e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009010:	2b00      	cmp	r3, #0
 8009012:	f47f aa86 	bne.w	8008522 <_dtoa_r+0x9a>
 8009016:	4b11      	ldr	r3, [pc, #68]	; (800905c <_dtoa_r+0xbd4>)
 8009018:	f7ff baa8 	b.w	800856c <_dtoa_r+0xe4>
 800901c:	f1b9 0f00 	cmp.w	r9, #0
 8009020:	dc03      	bgt.n	800902a <_dtoa_r+0xba2>
 8009022:	9b05      	ldr	r3, [sp, #20]
 8009024:	2b02      	cmp	r3, #2
 8009026:	f73f aec9 	bgt.w	8008dbc <_dtoa_r+0x934>
 800902a:	9d00      	ldr	r5, [sp, #0]
 800902c:	4631      	mov	r1, r6
 800902e:	4658      	mov	r0, fp
 8009030:	f7ff f99c 	bl	800836c <quorem>
 8009034:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009038:	f805 3b01 	strb.w	r3, [r5], #1
 800903c:	9a00      	ldr	r2, [sp, #0]
 800903e:	1aaa      	subs	r2, r5, r2
 8009040:	4591      	cmp	r9, r2
 8009042:	ddba      	ble.n	8008fba <_dtoa_r+0xb32>
 8009044:	4659      	mov	r1, fp
 8009046:	2300      	movs	r3, #0
 8009048:	220a      	movs	r2, #10
 800904a:	4620      	mov	r0, r4
 800904c:	f000 f884 	bl	8009158 <__multadd>
 8009050:	4683      	mov	fp, r0
 8009052:	e7eb      	b.n	800902c <_dtoa_r+0xba4>
 8009054:	0800a8b3 	.word	0x0800a8b3
 8009058:	0800a80c 	.word	0x0800a80c
 800905c:	0800a830 	.word	0x0800a830

08009060 <_localeconv_r>:
 8009060:	4800      	ldr	r0, [pc, #0]	; (8009064 <_localeconv_r+0x4>)
 8009062:	4770      	bx	lr
 8009064:	20000190 	.word	0x20000190

08009068 <malloc>:
 8009068:	4b02      	ldr	r3, [pc, #8]	; (8009074 <malloc+0xc>)
 800906a:	4601      	mov	r1, r0
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	f000 bbef 	b.w	8009850 <_malloc_r>
 8009072:	bf00      	nop
 8009074:	2000003c 	.word	0x2000003c

08009078 <memcpy>:
 8009078:	440a      	add	r2, r1
 800907a:	4291      	cmp	r1, r2
 800907c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009080:	d100      	bne.n	8009084 <memcpy+0xc>
 8009082:	4770      	bx	lr
 8009084:	b510      	push	{r4, lr}
 8009086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800908a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800908e:	4291      	cmp	r1, r2
 8009090:	d1f9      	bne.n	8009086 <memcpy+0xe>
 8009092:	bd10      	pop	{r4, pc}

08009094 <_Balloc>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009098:	4604      	mov	r4, r0
 800909a:	460d      	mov	r5, r1
 800909c:	b976      	cbnz	r6, 80090bc <_Balloc+0x28>
 800909e:	2010      	movs	r0, #16
 80090a0:	f7ff ffe2 	bl	8009068 <malloc>
 80090a4:	4602      	mov	r2, r0
 80090a6:	6260      	str	r0, [r4, #36]	; 0x24
 80090a8:	b920      	cbnz	r0, 80090b4 <_Balloc+0x20>
 80090aa:	4b18      	ldr	r3, [pc, #96]	; (800910c <_Balloc+0x78>)
 80090ac:	4818      	ldr	r0, [pc, #96]	; (8009110 <_Balloc+0x7c>)
 80090ae:	2166      	movs	r1, #102	; 0x66
 80090b0:	f000 fd94 	bl	8009bdc <__assert_func>
 80090b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090b8:	6006      	str	r6, [r0, #0]
 80090ba:	60c6      	str	r6, [r0, #12]
 80090bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090be:	68f3      	ldr	r3, [r6, #12]
 80090c0:	b183      	cbz	r3, 80090e4 <_Balloc+0x50>
 80090c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090ca:	b9b8      	cbnz	r0, 80090fc <_Balloc+0x68>
 80090cc:	2101      	movs	r1, #1
 80090ce:	fa01 f605 	lsl.w	r6, r1, r5
 80090d2:	1d72      	adds	r2, r6, #5
 80090d4:	0092      	lsls	r2, r2, #2
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fb5a 	bl	8009790 <_calloc_r>
 80090dc:	b160      	cbz	r0, 80090f8 <_Balloc+0x64>
 80090de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090e2:	e00e      	b.n	8009102 <_Balloc+0x6e>
 80090e4:	2221      	movs	r2, #33	; 0x21
 80090e6:	2104      	movs	r1, #4
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fb51 	bl	8009790 <_calloc_r>
 80090ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f0:	60f0      	str	r0, [r6, #12]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e4      	bne.n	80090c2 <_Balloc+0x2e>
 80090f8:	2000      	movs	r0, #0
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	6802      	ldr	r2, [r0, #0]
 80090fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009102:	2300      	movs	r3, #0
 8009104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009108:	e7f7      	b.n	80090fa <_Balloc+0x66>
 800910a:	bf00      	nop
 800910c:	0800a83d 	.word	0x0800a83d
 8009110:	0800a8c4 	.word	0x0800a8c4

08009114 <_Bfree>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009118:	4605      	mov	r5, r0
 800911a:	460c      	mov	r4, r1
 800911c:	b976      	cbnz	r6, 800913c <_Bfree+0x28>
 800911e:	2010      	movs	r0, #16
 8009120:	f7ff ffa2 	bl	8009068 <malloc>
 8009124:	4602      	mov	r2, r0
 8009126:	6268      	str	r0, [r5, #36]	; 0x24
 8009128:	b920      	cbnz	r0, 8009134 <_Bfree+0x20>
 800912a:	4b09      	ldr	r3, [pc, #36]	; (8009150 <_Bfree+0x3c>)
 800912c:	4809      	ldr	r0, [pc, #36]	; (8009154 <_Bfree+0x40>)
 800912e:	218a      	movs	r1, #138	; 0x8a
 8009130:	f000 fd54 	bl	8009bdc <__assert_func>
 8009134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009138:	6006      	str	r6, [r0, #0]
 800913a:	60c6      	str	r6, [r0, #12]
 800913c:	b13c      	cbz	r4, 800914e <_Bfree+0x3a>
 800913e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009140:	6862      	ldr	r2, [r4, #4]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009148:	6021      	str	r1, [r4, #0]
 800914a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	0800a83d 	.word	0x0800a83d
 8009154:	0800a8c4 	.word	0x0800a8c4

08009158 <__multadd>:
 8009158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915c:	690e      	ldr	r6, [r1, #16]
 800915e:	4607      	mov	r7, r0
 8009160:	4698      	mov	r8, r3
 8009162:	460c      	mov	r4, r1
 8009164:	f101 0014 	add.w	r0, r1, #20
 8009168:	2300      	movs	r3, #0
 800916a:	6805      	ldr	r5, [r0, #0]
 800916c:	b2a9      	uxth	r1, r5
 800916e:	fb02 8101 	mla	r1, r2, r1, r8
 8009172:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009176:	0c2d      	lsrs	r5, r5, #16
 8009178:	fb02 c505 	mla	r5, r2, r5, ip
 800917c:	b289      	uxth	r1, r1
 800917e:	3301      	adds	r3, #1
 8009180:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009184:	429e      	cmp	r6, r3
 8009186:	f840 1b04 	str.w	r1, [r0], #4
 800918a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800918e:	dcec      	bgt.n	800916a <__multadd+0x12>
 8009190:	f1b8 0f00 	cmp.w	r8, #0
 8009194:	d022      	beq.n	80091dc <__multadd+0x84>
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	42b3      	cmp	r3, r6
 800919a:	dc19      	bgt.n	80091d0 <__multadd+0x78>
 800919c:	6861      	ldr	r1, [r4, #4]
 800919e:	4638      	mov	r0, r7
 80091a0:	3101      	adds	r1, #1
 80091a2:	f7ff ff77 	bl	8009094 <_Balloc>
 80091a6:	4605      	mov	r5, r0
 80091a8:	b928      	cbnz	r0, 80091b6 <__multadd+0x5e>
 80091aa:	4602      	mov	r2, r0
 80091ac:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <__multadd+0x8c>)
 80091ae:	480e      	ldr	r0, [pc, #56]	; (80091e8 <__multadd+0x90>)
 80091b0:	21b5      	movs	r1, #181	; 0xb5
 80091b2:	f000 fd13 	bl	8009bdc <__assert_func>
 80091b6:	6922      	ldr	r2, [r4, #16]
 80091b8:	3202      	adds	r2, #2
 80091ba:	f104 010c 	add.w	r1, r4, #12
 80091be:	0092      	lsls	r2, r2, #2
 80091c0:	300c      	adds	r0, #12
 80091c2:	f7ff ff59 	bl	8009078 <memcpy>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4638      	mov	r0, r7
 80091ca:	f7ff ffa3 	bl	8009114 <_Bfree>
 80091ce:	462c      	mov	r4, r5
 80091d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80091d4:	3601      	adds	r6, #1
 80091d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80091da:	6126      	str	r6, [r4, #16]
 80091dc:	4620      	mov	r0, r4
 80091de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e2:	bf00      	nop
 80091e4:	0800a8b3 	.word	0x0800a8b3
 80091e8:	0800a8c4 	.word	0x0800a8c4

080091ec <__hi0bits>:
 80091ec:	0c03      	lsrs	r3, r0, #16
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	b9d3      	cbnz	r3, 8009228 <__hi0bits+0x3c>
 80091f2:	0400      	lsls	r0, r0, #16
 80091f4:	2310      	movs	r3, #16
 80091f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091fa:	bf04      	itt	eq
 80091fc:	0200      	lsleq	r0, r0, #8
 80091fe:	3308      	addeq	r3, #8
 8009200:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009204:	bf04      	itt	eq
 8009206:	0100      	lsleq	r0, r0, #4
 8009208:	3304      	addeq	r3, #4
 800920a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800920e:	bf04      	itt	eq
 8009210:	0080      	lsleq	r0, r0, #2
 8009212:	3302      	addeq	r3, #2
 8009214:	2800      	cmp	r0, #0
 8009216:	db05      	blt.n	8009224 <__hi0bits+0x38>
 8009218:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800921c:	f103 0301 	add.w	r3, r3, #1
 8009220:	bf08      	it	eq
 8009222:	2320      	moveq	r3, #32
 8009224:	4618      	mov	r0, r3
 8009226:	4770      	bx	lr
 8009228:	2300      	movs	r3, #0
 800922a:	e7e4      	b.n	80091f6 <__hi0bits+0xa>

0800922c <__lo0bits>:
 800922c:	6803      	ldr	r3, [r0, #0]
 800922e:	f013 0207 	ands.w	r2, r3, #7
 8009232:	4601      	mov	r1, r0
 8009234:	d00b      	beq.n	800924e <__lo0bits+0x22>
 8009236:	07da      	lsls	r2, r3, #31
 8009238:	d424      	bmi.n	8009284 <__lo0bits+0x58>
 800923a:	0798      	lsls	r0, r3, #30
 800923c:	bf49      	itett	mi
 800923e:	085b      	lsrmi	r3, r3, #1
 8009240:	089b      	lsrpl	r3, r3, #2
 8009242:	2001      	movmi	r0, #1
 8009244:	600b      	strmi	r3, [r1, #0]
 8009246:	bf5c      	itt	pl
 8009248:	600b      	strpl	r3, [r1, #0]
 800924a:	2002      	movpl	r0, #2
 800924c:	4770      	bx	lr
 800924e:	b298      	uxth	r0, r3
 8009250:	b9b0      	cbnz	r0, 8009280 <__lo0bits+0x54>
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	2010      	movs	r0, #16
 8009256:	f013 0fff 	tst.w	r3, #255	; 0xff
 800925a:	bf04      	itt	eq
 800925c:	0a1b      	lsreq	r3, r3, #8
 800925e:	3008      	addeq	r0, #8
 8009260:	071a      	lsls	r2, r3, #28
 8009262:	bf04      	itt	eq
 8009264:	091b      	lsreq	r3, r3, #4
 8009266:	3004      	addeq	r0, #4
 8009268:	079a      	lsls	r2, r3, #30
 800926a:	bf04      	itt	eq
 800926c:	089b      	lsreq	r3, r3, #2
 800926e:	3002      	addeq	r0, #2
 8009270:	07da      	lsls	r2, r3, #31
 8009272:	d403      	bmi.n	800927c <__lo0bits+0x50>
 8009274:	085b      	lsrs	r3, r3, #1
 8009276:	f100 0001 	add.w	r0, r0, #1
 800927a:	d005      	beq.n	8009288 <__lo0bits+0x5c>
 800927c:	600b      	str	r3, [r1, #0]
 800927e:	4770      	bx	lr
 8009280:	4610      	mov	r0, r2
 8009282:	e7e8      	b.n	8009256 <__lo0bits+0x2a>
 8009284:	2000      	movs	r0, #0
 8009286:	4770      	bx	lr
 8009288:	2020      	movs	r0, #32
 800928a:	4770      	bx	lr

0800928c <__i2b>:
 800928c:	b510      	push	{r4, lr}
 800928e:	460c      	mov	r4, r1
 8009290:	2101      	movs	r1, #1
 8009292:	f7ff feff 	bl	8009094 <_Balloc>
 8009296:	4602      	mov	r2, r0
 8009298:	b928      	cbnz	r0, 80092a6 <__i2b+0x1a>
 800929a:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <__i2b+0x24>)
 800929c:	4805      	ldr	r0, [pc, #20]	; (80092b4 <__i2b+0x28>)
 800929e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092a2:	f000 fc9b 	bl	8009bdc <__assert_func>
 80092a6:	2301      	movs	r3, #1
 80092a8:	6144      	str	r4, [r0, #20]
 80092aa:	6103      	str	r3, [r0, #16]
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop
 80092b0:	0800a8b3 	.word	0x0800a8b3
 80092b4:	0800a8c4 	.word	0x0800a8c4

080092b8 <__multiply>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	4614      	mov	r4, r2
 80092be:	690a      	ldr	r2, [r1, #16]
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	bfb8      	it	lt
 80092c6:	460b      	movlt	r3, r1
 80092c8:	460d      	mov	r5, r1
 80092ca:	bfbc      	itt	lt
 80092cc:	4625      	movlt	r5, r4
 80092ce:	461c      	movlt	r4, r3
 80092d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80092d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80092d8:	68ab      	ldr	r3, [r5, #8]
 80092da:	6869      	ldr	r1, [r5, #4]
 80092dc:	eb0a 0709 	add.w	r7, sl, r9
 80092e0:	42bb      	cmp	r3, r7
 80092e2:	b085      	sub	sp, #20
 80092e4:	bfb8      	it	lt
 80092e6:	3101      	addlt	r1, #1
 80092e8:	f7ff fed4 	bl	8009094 <_Balloc>
 80092ec:	b930      	cbnz	r0, 80092fc <__multiply+0x44>
 80092ee:	4602      	mov	r2, r0
 80092f0:	4b42      	ldr	r3, [pc, #264]	; (80093fc <__multiply+0x144>)
 80092f2:	4843      	ldr	r0, [pc, #268]	; (8009400 <__multiply+0x148>)
 80092f4:	f240 115d 	movw	r1, #349	; 0x15d
 80092f8:	f000 fc70 	bl	8009bdc <__assert_func>
 80092fc:	f100 0614 	add.w	r6, r0, #20
 8009300:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009304:	4633      	mov	r3, r6
 8009306:	2200      	movs	r2, #0
 8009308:	4543      	cmp	r3, r8
 800930a:	d31e      	bcc.n	800934a <__multiply+0x92>
 800930c:	f105 0c14 	add.w	ip, r5, #20
 8009310:	f104 0314 	add.w	r3, r4, #20
 8009314:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009318:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800931c:	9202      	str	r2, [sp, #8]
 800931e:	ebac 0205 	sub.w	r2, ip, r5
 8009322:	3a15      	subs	r2, #21
 8009324:	f022 0203 	bic.w	r2, r2, #3
 8009328:	3204      	adds	r2, #4
 800932a:	f105 0115 	add.w	r1, r5, #21
 800932e:	458c      	cmp	ip, r1
 8009330:	bf38      	it	cc
 8009332:	2204      	movcc	r2, #4
 8009334:	9201      	str	r2, [sp, #4]
 8009336:	9a02      	ldr	r2, [sp, #8]
 8009338:	9303      	str	r3, [sp, #12]
 800933a:	429a      	cmp	r2, r3
 800933c:	d808      	bhi.n	8009350 <__multiply+0x98>
 800933e:	2f00      	cmp	r7, #0
 8009340:	dc55      	bgt.n	80093ee <__multiply+0x136>
 8009342:	6107      	str	r7, [r0, #16]
 8009344:	b005      	add	sp, #20
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	f843 2b04 	str.w	r2, [r3], #4
 800934e:	e7db      	b.n	8009308 <__multiply+0x50>
 8009350:	f8b3 a000 	ldrh.w	sl, [r3]
 8009354:	f1ba 0f00 	cmp.w	sl, #0
 8009358:	d020      	beq.n	800939c <__multiply+0xe4>
 800935a:	f105 0e14 	add.w	lr, r5, #20
 800935e:	46b1      	mov	r9, r6
 8009360:	2200      	movs	r2, #0
 8009362:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009366:	f8d9 b000 	ldr.w	fp, [r9]
 800936a:	b2a1      	uxth	r1, r4
 800936c:	fa1f fb8b 	uxth.w	fp, fp
 8009370:	fb0a b101 	mla	r1, sl, r1, fp
 8009374:	4411      	add	r1, r2
 8009376:	f8d9 2000 	ldr.w	r2, [r9]
 800937a:	0c24      	lsrs	r4, r4, #16
 800937c:	0c12      	lsrs	r2, r2, #16
 800937e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009382:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009386:	b289      	uxth	r1, r1
 8009388:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800938c:	45f4      	cmp	ip, lr
 800938e:	f849 1b04 	str.w	r1, [r9], #4
 8009392:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009396:	d8e4      	bhi.n	8009362 <__multiply+0xaa>
 8009398:	9901      	ldr	r1, [sp, #4]
 800939a:	5072      	str	r2, [r6, r1]
 800939c:	9a03      	ldr	r2, [sp, #12]
 800939e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093a2:	3304      	adds	r3, #4
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	d01f      	beq.n	80093ea <__multiply+0x132>
 80093aa:	6834      	ldr	r4, [r6, #0]
 80093ac:	f105 0114 	add.w	r1, r5, #20
 80093b0:	46b6      	mov	lr, r6
 80093b2:	f04f 0a00 	mov.w	sl, #0
 80093b6:	880a      	ldrh	r2, [r1, #0]
 80093b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80093bc:	fb09 b202 	mla	r2, r9, r2, fp
 80093c0:	4492      	add	sl, r2
 80093c2:	b2a4      	uxth	r4, r4
 80093c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80093c8:	f84e 4b04 	str.w	r4, [lr], #4
 80093cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80093d0:	f8be 2000 	ldrh.w	r2, [lr]
 80093d4:	0c24      	lsrs	r4, r4, #16
 80093d6:	fb09 2404 	mla	r4, r9, r4, r2
 80093da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80093de:	458c      	cmp	ip, r1
 80093e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80093e4:	d8e7      	bhi.n	80093b6 <__multiply+0xfe>
 80093e6:	9a01      	ldr	r2, [sp, #4]
 80093e8:	50b4      	str	r4, [r6, r2]
 80093ea:	3604      	adds	r6, #4
 80093ec:	e7a3      	b.n	8009336 <__multiply+0x7e>
 80093ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1a5      	bne.n	8009342 <__multiply+0x8a>
 80093f6:	3f01      	subs	r7, #1
 80093f8:	e7a1      	b.n	800933e <__multiply+0x86>
 80093fa:	bf00      	nop
 80093fc:	0800a8b3 	.word	0x0800a8b3
 8009400:	0800a8c4 	.word	0x0800a8c4

08009404 <__pow5mult>:
 8009404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009408:	4615      	mov	r5, r2
 800940a:	f012 0203 	ands.w	r2, r2, #3
 800940e:	4606      	mov	r6, r0
 8009410:	460f      	mov	r7, r1
 8009412:	d007      	beq.n	8009424 <__pow5mult+0x20>
 8009414:	4c25      	ldr	r4, [pc, #148]	; (80094ac <__pow5mult+0xa8>)
 8009416:	3a01      	subs	r2, #1
 8009418:	2300      	movs	r3, #0
 800941a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800941e:	f7ff fe9b 	bl	8009158 <__multadd>
 8009422:	4607      	mov	r7, r0
 8009424:	10ad      	asrs	r5, r5, #2
 8009426:	d03d      	beq.n	80094a4 <__pow5mult+0xa0>
 8009428:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800942a:	b97c      	cbnz	r4, 800944c <__pow5mult+0x48>
 800942c:	2010      	movs	r0, #16
 800942e:	f7ff fe1b 	bl	8009068 <malloc>
 8009432:	4602      	mov	r2, r0
 8009434:	6270      	str	r0, [r6, #36]	; 0x24
 8009436:	b928      	cbnz	r0, 8009444 <__pow5mult+0x40>
 8009438:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <__pow5mult+0xac>)
 800943a:	481e      	ldr	r0, [pc, #120]	; (80094b4 <__pow5mult+0xb0>)
 800943c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009440:	f000 fbcc 	bl	8009bdc <__assert_func>
 8009444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009448:	6004      	str	r4, [r0, #0]
 800944a:	60c4      	str	r4, [r0, #12]
 800944c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009454:	b94c      	cbnz	r4, 800946a <__pow5mult+0x66>
 8009456:	f240 2171 	movw	r1, #625	; 0x271
 800945a:	4630      	mov	r0, r6
 800945c:	f7ff ff16 	bl	800928c <__i2b>
 8009460:	2300      	movs	r3, #0
 8009462:	f8c8 0008 	str.w	r0, [r8, #8]
 8009466:	4604      	mov	r4, r0
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	f04f 0900 	mov.w	r9, #0
 800946e:	07eb      	lsls	r3, r5, #31
 8009470:	d50a      	bpl.n	8009488 <__pow5mult+0x84>
 8009472:	4639      	mov	r1, r7
 8009474:	4622      	mov	r2, r4
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff ff1e 	bl	80092b8 <__multiply>
 800947c:	4639      	mov	r1, r7
 800947e:	4680      	mov	r8, r0
 8009480:	4630      	mov	r0, r6
 8009482:	f7ff fe47 	bl	8009114 <_Bfree>
 8009486:	4647      	mov	r7, r8
 8009488:	106d      	asrs	r5, r5, #1
 800948a:	d00b      	beq.n	80094a4 <__pow5mult+0xa0>
 800948c:	6820      	ldr	r0, [r4, #0]
 800948e:	b938      	cbnz	r0, 80094a0 <__pow5mult+0x9c>
 8009490:	4622      	mov	r2, r4
 8009492:	4621      	mov	r1, r4
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff ff0f 	bl	80092b8 <__multiply>
 800949a:	6020      	str	r0, [r4, #0]
 800949c:	f8c0 9000 	str.w	r9, [r0]
 80094a0:	4604      	mov	r4, r0
 80094a2:	e7e4      	b.n	800946e <__pow5mult+0x6a>
 80094a4:	4638      	mov	r0, r7
 80094a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094aa:	bf00      	nop
 80094ac:	0800aa18 	.word	0x0800aa18
 80094b0:	0800a83d 	.word	0x0800a83d
 80094b4:	0800a8c4 	.word	0x0800a8c4

080094b8 <__lshift>:
 80094b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094bc:	460c      	mov	r4, r1
 80094be:	6849      	ldr	r1, [r1, #4]
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094c6:	68a3      	ldr	r3, [r4, #8]
 80094c8:	4607      	mov	r7, r0
 80094ca:	4691      	mov	r9, r2
 80094cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094d0:	f108 0601 	add.w	r6, r8, #1
 80094d4:	42b3      	cmp	r3, r6
 80094d6:	db0b      	blt.n	80094f0 <__lshift+0x38>
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff fddb 	bl	8009094 <_Balloc>
 80094de:	4605      	mov	r5, r0
 80094e0:	b948      	cbnz	r0, 80094f6 <__lshift+0x3e>
 80094e2:	4602      	mov	r2, r0
 80094e4:	4b28      	ldr	r3, [pc, #160]	; (8009588 <__lshift+0xd0>)
 80094e6:	4829      	ldr	r0, [pc, #164]	; (800958c <__lshift+0xd4>)
 80094e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094ec:	f000 fb76 	bl	8009bdc <__assert_func>
 80094f0:	3101      	adds	r1, #1
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	e7ee      	b.n	80094d4 <__lshift+0x1c>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f100 0114 	add.w	r1, r0, #20
 80094fc:	f100 0210 	add.w	r2, r0, #16
 8009500:	4618      	mov	r0, r3
 8009502:	4553      	cmp	r3, sl
 8009504:	db33      	blt.n	800956e <__lshift+0xb6>
 8009506:	6920      	ldr	r0, [r4, #16]
 8009508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800950c:	f104 0314 	add.w	r3, r4, #20
 8009510:	f019 091f 	ands.w	r9, r9, #31
 8009514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800951c:	d02b      	beq.n	8009576 <__lshift+0xbe>
 800951e:	f1c9 0e20 	rsb	lr, r9, #32
 8009522:	468a      	mov	sl, r1
 8009524:	2200      	movs	r2, #0
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	fa00 f009 	lsl.w	r0, r0, r9
 800952c:	4302      	orrs	r2, r0
 800952e:	f84a 2b04 	str.w	r2, [sl], #4
 8009532:	f853 2b04 	ldr.w	r2, [r3], #4
 8009536:	459c      	cmp	ip, r3
 8009538:	fa22 f20e 	lsr.w	r2, r2, lr
 800953c:	d8f3      	bhi.n	8009526 <__lshift+0x6e>
 800953e:	ebac 0304 	sub.w	r3, ip, r4
 8009542:	3b15      	subs	r3, #21
 8009544:	f023 0303 	bic.w	r3, r3, #3
 8009548:	3304      	adds	r3, #4
 800954a:	f104 0015 	add.w	r0, r4, #21
 800954e:	4584      	cmp	ip, r0
 8009550:	bf38      	it	cc
 8009552:	2304      	movcc	r3, #4
 8009554:	50ca      	str	r2, [r1, r3]
 8009556:	b10a      	cbz	r2, 800955c <__lshift+0xa4>
 8009558:	f108 0602 	add.w	r6, r8, #2
 800955c:	3e01      	subs	r6, #1
 800955e:	4638      	mov	r0, r7
 8009560:	612e      	str	r6, [r5, #16]
 8009562:	4621      	mov	r1, r4
 8009564:	f7ff fdd6 	bl	8009114 <_Bfree>
 8009568:	4628      	mov	r0, r5
 800956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009572:	3301      	adds	r3, #1
 8009574:	e7c5      	b.n	8009502 <__lshift+0x4a>
 8009576:	3904      	subs	r1, #4
 8009578:	f853 2b04 	ldr.w	r2, [r3], #4
 800957c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009580:	459c      	cmp	ip, r3
 8009582:	d8f9      	bhi.n	8009578 <__lshift+0xc0>
 8009584:	e7ea      	b.n	800955c <__lshift+0xa4>
 8009586:	bf00      	nop
 8009588:	0800a8b3 	.word	0x0800a8b3
 800958c:	0800a8c4 	.word	0x0800a8c4

08009590 <__mcmp>:
 8009590:	b530      	push	{r4, r5, lr}
 8009592:	6902      	ldr	r2, [r0, #16]
 8009594:	690c      	ldr	r4, [r1, #16]
 8009596:	1b12      	subs	r2, r2, r4
 8009598:	d10e      	bne.n	80095b8 <__mcmp+0x28>
 800959a:	f100 0314 	add.w	r3, r0, #20
 800959e:	3114      	adds	r1, #20
 80095a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095b0:	42a5      	cmp	r5, r4
 80095b2:	d003      	beq.n	80095bc <__mcmp+0x2c>
 80095b4:	d305      	bcc.n	80095c2 <__mcmp+0x32>
 80095b6:	2201      	movs	r2, #1
 80095b8:	4610      	mov	r0, r2
 80095ba:	bd30      	pop	{r4, r5, pc}
 80095bc:	4283      	cmp	r3, r0
 80095be:	d3f3      	bcc.n	80095a8 <__mcmp+0x18>
 80095c0:	e7fa      	b.n	80095b8 <__mcmp+0x28>
 80095c2:	f04f 32ff 	mov.w	r2, #4294967295
 80095c6:	e7f7      	b.n	80095b8 <__mcmp+0x28>

080095c8 <__mdiff>:
 80095c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	460c      	mov	r4, r1
 80095ce:	4606      	mov	r6, r0
 80095d0:	4611      	mov	r1, r2
 80095d2:	4620      	mov	r0, r4
 80095d4:	4617      	mov	r7, r2
 80095d6:	f7ff ffdb 	bl	8009590 <__mcmp>
 80095da:	1e05      	subs	r5, r0, #0
 80095dc:	d110      	bne.n	8009600 <__mdiff+0x38>
 80095de:	4629      	mov	r1, r5
 80095e0:	4630      	mov	r0, r6
 80095e2:	f7ff fd57 	bl	8009094 <_Balloc>
 80095e6:	b930      	cbnz	r0, 80095f6 <__mdiff+0x2e>
 80095e8:	4b39      	ldr	r3, [pc, #228]	; (80096d0 <__mdiff+0x108>)
 80095ea:	4602      	mov	r2, r0
 80095ec:	f240 2132 	movw	r1, #562	; 0x232
 80095f0:	4838      	ldr	r0, [pc, #224]	; (80096d4 <__mdiff+0x10c>)
 80095f2:	f000 faf3 	bl	8009bdc <__assert_func>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009600:	bfa4      	itt	ge
 8009602:	463b      	movge	r3, r7
 8009604:	4627      	movge	r7, r4
 8009606:	4630      	mov	r0, r6
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	bfa6      	itte	ge
 800960c:	461c      	movge	r4, r3
 800960e:	2500      	movge	r5, #0
 8009610:	2501      	movlt	r5, #1
 8009612:	f7ff fd3f 	bl	8009094 <_Balloc>
 8009616:	b920      	cbnz	r0, 8009622 <__mdiff+0x5a>
 8009618:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <__mdiff+0x108>)
 800961a:	4602      	mov	r2, r0
 800961c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009620:	e7e6      	b.n	80095f0 <__mdiff+0x28>
 8009622:	693e      	ldr	r6, [r7, #16]
 8009624:	60c5      	str	r5, [r0, #12]
 8009626:	6925      	ldr	r5, [r4, #16]
 8009628:	f107 0114 	add.w	r1, r7, #20
 800962c:	f104 0914 	add.w	r9, r4, #20
 8009630:	f100 0e14 	add.w	lr, r0, #20
 8009634:	f107 0210 	add.w	r2, r7, #16
 8009638:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800963c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009640:	46f2      	mov	sl, lr
 8009642:	2700      	movs	r7, #0
 8009644:	f859 3b04 	ldr.w	r3, [r9], #4
 8009648:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800964c:	fa1f f883 	uxth.w	r8, r3
 8009650:	fa17 f78b 	uxtah	r7, r7, fp
 8009654:	0c1b      	lsrs	r3, r3, #16
 8009656:	eba7 0808 	sub.w	r8, r7, r8
 800965a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800965e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009662:	fa1f f888 	uxth.w	r8, r8
 8009666:	141f      	asrs	r7, r3, #16
 8009668:	454d      	cmp	r5, r9
 800966a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800966e:	f84a 3b04 	str.w	r3, [sl], #4
 8009672:	d8e7      	bhi.n	8009644 <__mdiff+0x7c>
 8009674:	1b2b      	subs	r3, r5, r4
 8009676:	3b15      	subs	r3, #21
 8009678:	f023 0303 	bic.w	r3, r3, #3
 800967c:	3304      	adds	r3, #4
 800967e:	3415      	adds	r4, #21
 8009680:	42a5      	cmp	r5, r4
 8009682:	bf38      	it	cc
 8009684:	2304      	movcc	r3, #4
 8009686:	4419      	add	r1, r3
 8009688:	4473      	add	r3, lr
 800968a:	469e      	mov	lr, r3
 800968c:	460d      	mov	r5, r1
 800968e:	4565      	cmp	r5, ip
 8009690:	d30e      	bcc.n	80096b0 <__mdiff+0xe8>
 8009692:	f10c 0203 	add.w	r2, ip, #3
 8009696:	1a52      	subs	r2, r2, r1
 8009698:	f022 0203 	bic.w	r2, r2, #3
 800969c:	3903      	subs	r1, #3
 800969e:	458c      	cmp	ip, r1
 80096a0:	bf38      	it	cc
 80096a2:	2200      	movcc	r2, #0
 80096a4:	441a      	add	r2, r3
 80096a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096aa:	b17b      	cbz	r3, 80096cc <__mdiff+0x104>
 80096ac:	6106      	str	r6, [r0, #16]
 80096ae:	e7a5      	b.n	80095fc <__mdiff+0x34>
 80096b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80096b4:	fa17 f488 	uxtah	r4, r7, r8
 80096b8:	1422      	asrs	r2, r4, #16
 80096ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80096be:	b2a4      	uxth	r4, r4
 80096c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80096c4:	f84e 4b04 	str.w	r4, [lr], #4
 80096c8:	1417      	asrs	r7, r2, #16
 80096ca:	e7e0      	b.n	800968e <__mdiff+0xc6>
 80096cc:	3e01      	subs	r6, #1
 80096ce:	e7ea      	b.n	80096a6 <__mdiff+0xde>
 80096d0:	0800a8b3 	.word	0x0800a8b3
 80096d4:	0800a8c4 	.word	0x0800a8c4

080096d8 <__d2b>:
 80096d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096dc:	4689      	mov	r9, r1
 80096de:	2101      	movs	r1, #1
 80096e0:	ec57 6b10 	vmov	r6, r7, d0
 80096e4:	4690      	mov	r8, r2
 80096e6:	f7ff fcd5 	bl	8009094 <_Balloc>
 80096ea:	4604      	mov	r4, r0
 80096ec:	b930      	cbnz	r0, 80096fc <__d2b+0x24>
 80096ee:	4602      	mov	r2, r0
 80096f0:	4b25      	ldr	r3, [pc, #148]	; (8009788 <__d2b+0xb0>)
 80096f2:	4826      	ldr	r0, [pc, #152]	; (800978c <__d2b+0xb4>)
 80096f4:	f240 310a 	movw	r1, #778	; 0x30a
 80096f8:	f000 fa70 	bl	8009bdc <__assert_func>
 80096fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009700:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009704:	bb35      	cbnz	r5, 8009754 <__d2b+0x7c>
 8009706:	2e00      	cmp	r6, #0
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	d028      	beq.n	800975e <__d2b+0x86>
 800970c:	4668      	mov	r0, sp
 800970e:	9600      	str	r6, [sp, #0]
 8009710:	f7ff fd8c 	bl	800922c <__lo0bits>
 8009714:	9900      	ldr	r1, [sp, #0]
 8009716:	b300      	cbz	r0, 800975a <__d2b+0x82>
 8009718:	9a01      	ldr	r2, [sp, #4]
 800971a:	f1c0 0320 	rsb	r3, r0, #32
 800971e:	fa02 f303 	lsl.w	r3, r2, r3
 8009722:	430b      	orrs	r3, r1
 8009724:	40c2      	lsrs	r2, r0
 8009726:	6163      	str	r3, [r4, #20]
 8009728:	9201      	str	r2, [sp, #4]
 800972a:	9b01      	ldr	r3, [sp, #4]
 800972c:	61a3      	str	r3, [r4, #24]
 800972e:	2b00      	cmp	r3, #0
 8009730:	bf14      	ite	ne
 8009732:	2202      	movne	r2, #2
 8009734:	2201      	moveq	r2, #1
 8009736:	6122      	str	r2, [r4, #16]
 8009738:	b1d5      	cbz	r5, 8009770 <__d2b+0x98>
 800973a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800973e:	4405      	add	r5, r0
 8009740:	f8c9 5000 	str.w	r5, [r9]
 8009744:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009748:	f8c8 0000 	str.w	r0, [r8]
 800974c:	4620      	mov	r0, r4
 800974e:	b003      	add	sp, #12
 8009750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009758:	e7d5      	b.n	8009706 <__d2b+0x2e>
 800975a:	6161      	str	r1, [r4, #20]
 800975c:	e7e5      	b.n	800972a <__d2b+0x52>
 800975e:	a801      	add	r0, sp, #4
 8009760:	f7ff fd64 	bl	800922c <__lo0bits>
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	6163      	str	r3, [r4, #20]
 8009768:	2201      	movs	r2, #1
 800976a:	6122      	str	r2, [r4, #16]
 800976c:	3020      	adds	r0, #32
 800976e:	e7e3      	b.n	8009738 <__d2b+0x60>
 8009770:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009778:	f8c9 0000 	str.w	r0, [r9]
 800977c:	6918      	ldr	r0, [r3, #16]
 800977e:	f7ff fd35 	bl	80091ec <__hi0bits>
 8009782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009786:	e7df      	b.n	8009748 <__d2b+0x70>
 8009788:	0800a8b3 	.word	0x0800a8b3
 800978c:	0800a8c4 	.word	0x0800a8c4

08009790 <_calloc_r>:
 8009790:	b513      	push	{r0, r1, r4, lr}
 8009792:	434a      	muls	r2, r1
 8009794:	4611      	mov	r1, r2
 8009796:	9201      	str	r2, [sp, #4]
 8009798:	f000 f85a 	bl	8009850 <_malloc_r>
 800979c:	4604      	mov	r4, r0
 800979e:	b118      	cbz	r0, 80097a8 <_calloc_r+0x18>
 80097a0:	9a01      	ldr	r2, [sp, #4]
 80097a2:	2100      	movs	r1, #0
 80097a4:	f7fe f950 	bl	8007a48 <memset>
 80097a8:	4620      	mov	r0, r4
 80097aa:	b002      	add	sp, #8
 80097ac:	bd10      	pop	{r4, pc}
	...

080097b0 <_free_r>:
 80097b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097b2:	2900      	cmp	r1, #0
 80097b4:	d048      	beq.n	8009848 <_free_r+0x98>
 80097b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ba:	9001      	str	r0, [sp, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f1a1 0404 	sub.w	r4, r1, #4
 80097c2:	bfb8      	it	lt
 80097c4:	18e4      	addlt	r4, r4, r3
 80097c6:	f000 fa65 	bl	8009c94 <__malloc_lock>
 80097ca:	4a20      	ldr	r2, [pc, #128]	; (800984c <_free_r+0x9c>)
 80097cc:	9801      	ldr	r0, [sp, #4]
 80097ce:	6813      	ldr	r3, [r2, #0]
 80097d0:	4615      	mov	r5, r2
 80097d2:	b933      	cbnz	r3, 80097e2 <_free_r+0x32>
 80097d4:	6063      	str	r3, [r4, #4]
 80097d6:	6014      	str	r4, [r2, #0]
 80097d8:	b003      	add	sp, #12
 80097da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097de:	f000 ba5f 	b.w	8009ca0 <__malloc_unlock>
 80097e2:	42a3      	cmp	r3, r4
 80097e4:	d90b      	bls.n	80097fe <_free_r+0x4e>
 80097e6:	6821      	ldr	r1, [r4, #0]
 80097e8:	1862      	adds	r2, r4, r1
 80097ea:	4293      	cmp	r3, r2
 80097ec:	bf04      	itt	eq
 80097ee:	681a      	ldreq	r2, [r3, #0]
 80097f0:	685b      	ldreq	r3, [r3, #4]
 80097f2:	6063      	str	r3, [r4, #4]
 80097f4:	bf04      	itt	eq
 80097f6:	1852      	addeq	r2, r2, r1
 80097f8:	6022      	streq	r2, [r4, #0]
 80097fa:	602c      	str	r4, [r5, #0]
 80097fc:	e7ec      	b.n	80097d8 <_free_r+0x28>
 80097fe:	461a      	mov	r2, r3
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	b10b      	cbz	r3, 8009808 <_free_r+0x58>
 8009804:	42a3      	cmp	r3, r4
 8009806:	d9fa      	bls.n	80097fe <_free_r+0x4e>
 8009808:	6811      	ldr	r1, [r2, #0]
 800980a:	1855      	adds	r5, r2, r1
 800980c:	42a5      	cmp	r5, r4
 800980e:	d10b      	bne.n	8009828 <_free_r+0x78>
 8009810:	6824      	ldr	r4, [r4, #0]
 8009812:	4421      	add	r1, r4
 8009814:	1854      	adds	r4, r2, r1
 8009816:	42a3      	cmp	r3, r4
 8009818:	6011      	str	r1, [r2, #0]
 800981a:	d1dd      	bne.n	80097d8 <_free_r+0x28>
 800981c:	681c      	ldr	r4, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	6053      	str	r3, [r2, #4]
 8009822:	4421      	add	r1, r4
 8009824:	6011      	str	r1, [r2, #0]
 8009826:	e7d7      	b.n	80097d8 <_free_r+0x28>
 8009828:	d902      	bls.n	8009830 <_free_r+0x80>
 800982a:	230c      	movs	r3, #12
 800982c:	6003      	str	r3, [r0, #0]
 800982e:	e7d3      	b.n	80097d8 <_free_r+0x28>
 8009830:	6825      	ldr	r5, [r4, #0]
 8009832:	1961      	adds	r1, r4, r5
 8009834:	428b      	cmp	r3, r1
 8009836:	bf04      	itt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	bf04      	itt	eq
 8009840:	1949      	addeq	r1, r1, r5
 8009842:	6021      	streq	r1, [r4, #0]
 8009844:	6054      	str	r4, [r2, #4]
 8009846:	e7c7      	b.n	80097d8 <_free_r+0x28>
 8009848:	b003      	add	sp, #12
 800984a:	bd30      	pop	{r4, r5, pc}
 800984c:	20000238 	.word	0x20000238

08009850 <_malloc_r>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	1ccd      	adds	r5, r1, #3
 8009854:	f025 0503 	bic.w	r5, r5, #3
 8009858:	3508      	adds	r5, #8
 800985a:	2d0c      	cmp	r5, #12
 800985c:	bf38      	it	cc
 800985e:	250c      	movcc	r5, #12
 8009860:	2d00      	cmp	r5, #0
 8009862:	4606      	mov	r6, r0
 8009864:	db01      	blt.n	800986a <_malloc_r+0x1a>
 8009866:	42a9      	cmp	r1, r5
 8009868:	d903      	bls.n	8009872 <_malloc_r+0x22>
 800986a:	230c      	movs	r3, #12
 800986c:	6033      	str	r3, [r6, #0]
 800986e:	2000      	movs	r0, #0
 8009870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009872:	f000 fa0f 	bl	8009c94 <__malloc_lock>
 8009876:	4921      	ldr	r1, [pc, #132]	; (80098fc <_malloc_r+0xac>)
 8009878:	680a      	ldr	r2, [r1, #0]
 800987a:	4614      	mov	r4, r2
 800987c:	b99c      	cbnz	r4, 80098a6 <_malloc_r+0x56>
 800987e:	4f20      	ldr	r7, [pc, #128]	; (8009900 <_malloc_r+0xb0>)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	b923      	cbnz	r3, 800988e <_malloc_r+0x3e>
 8009884:	4621      	mov	r1, r4
 8009886:	4630      	mov	r0, r6
 8009888:	f000 f998 	bl	8009bbc <_sbrk_r>
 800988c:	6038      	str	r0, [r7, #0]
 800988e:	4629      	mov	r1, r5
 8009890:	4630      	mov	r0, r6
 8009892:	f000 f993 	bl	8009bbc <_sbrk_r>
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	d123      	bne.n	80098e2 <_malloc_r+0x92>
 800989a:	230c      	movs	r3, #12
 800989c:	6033      	str	r3, [r6, #0]
 800989e:	4630      	mov	r0, r6
 80098a0:	f000 f9fe 	bl	8009ca0 <__malloc_unlock>
 80098a4:	e7e3      	b.n	800986e <_malloc_r+0x1e>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	1b5b      	subs	r3, r3, r5
 80098aa:	d417      	bmi.n	80098dc <_malloc_r+0x8c>
 80098ac:	2b0b      	cmp	r3, #11
 80098ae:	d903      	bls.n	80098b8 <_malloc_r+0x68>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	441c      	add	r4, r3
 80098b4:	6025      	str	r5, [r4, #0]
 80098b6:	e004      	b.n	80098c2 <_malloc_r+0x72>
 80098b8:	6863      	ldr	r3, [r4, #4]
 80098ba:	42a2      	cmp	r2, r4
 80098bc:	bf0c      	ite	eq
 80098be:	600b      	streq	r3, [r1, #0]
 80098c0:	6053      	strne	r3, [r2, #4]
 80098c2:	4630      	mov	r0, r6
 80098c4:	f000 f9ec 	bl	8009ca0 <__malloc_unlock>
 80098c8:	f104 000b 	add.w	r0, r4, #11
 80098cc:	1d23      	adds	r3, r4, #4
 80098ce:	f020 0007 	bic.w	r0, r0, #7
 80098d2:	1ac2      	subs	r2, r0, r3
 80098d4:	d0cc      	beq.n	8009870 <_malloc_r+0x20>
 80098d6:	1a1b      	subs	r3, r3, r0
 80098d8:	50a3      	str	r3, [r4, r2]
 80098da:	e7c9      	b.n	8009870 <_malloc_r+0x20>
 80098dc:	4622      	mov	r2, r4
 80098de:	6864      	ldr	r4, [r4, #4]
 80098e0:	e7cc      	b.n	800987c <_malloc_r+0x2c>
 80098e2:	1cc4      	adds	r4, r0, #3
 80098e4:	f024 0403 	bic.w	r4, r4, #3
 80098e8:	42a0      	cmp	r0, r4
 80098ea:	d0e3      	beq.n	80098b4 <_malloc_r+0x64>
 80098ec:	1a21      	subs	r1, r4, r0
 80098ee:	4630      	mov	r0, r6
 80098f0:	f000 f964 	bl	8009bbc <_sbrk_r>
 80098f4:	3001      	adds	r0, #1
 80098f6:	d1dd      	bne.n	80098b4 <_malloc_r+0x64>
 80098f8:	e7cf      	b.n	800989a <_malloc_r+0x4a>
 80098fa:	bf00      	nop
 80098fc:	20000238 	.word	0x20000238
 8009900:	2000023c 	.word	0x2000023c

08009904 <__ssputs_r>:
 8009904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	688e      	ldr	r6, [r1, #8]
 800990a:	429e      	cmp	r6, r3
 800990c:	4682      	mov	sl, r0
 800990e:	460c      	mov	r4, r1
 8009910:	4690      	mov	r8, r2
 8009912:	461f      	mov	r7, r3
 8009914:	d838      	bhi.n	8009988 <__ssputs_r+0x84>
 8009916:	898a      	ldrh	r2, [r1, #12]
 8009918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800991c:	d032      	beq.n	8009984 <__ssputs_r+0x80>
 800991e:	6825      	ldr	r5, [r4, #0]
 8009920:	6909      	ldr	r1, [r1, #16]
 8009922:	eba5 0901 	sub.w	r9, r5, r1
 8009926:	6965      	ldr	r5, [r4, #20]
 8009928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800992c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009930:	3301      	adds	r3, #1
 8009932:	444b      	add	r3, r9
 8009934:	106d      	asrs	r5, r5, #1
 8009936:	429d      	cmp	r5, r3
 8009938:	bf38      	it	cc
 800993a:	461d      	movcc	r5, r3
 800993c:	0553      	lsls	r3, r2, #21
 800993e:	d531      	bpl.n	80099a4 <__ssputs_r+0xa0>
 8009940:	4629      	mov	r1, r5
 8009942:	f7ff ff85 	bl	8009850 <_malloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	b950      	cbnz	r0, 8009960 <__ssputs_r+0x5c>
 800994a:	230c      	movs	r3, #12
 800994c:	f8ca 3000 	str.w	r3, [sl]
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	f04f 30ff 	mov.w	r0, #4294967295
 800995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009960:	6921      	ldr	r1, [r4, #16]
 8009962:	464a      	mov	r2, r9
 8009964:	f7ff fb88 	bl	8009078 <memcpy>
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800996e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	6126      	str	r6, [r4, #16]
 8009976:	6165      	str	r5, [r4, #20]
 8009978:	444e      	add	r6, r9
 800997a:	eba5 0509 	sub.w	r5, r5, r9
 800997e:	6026      	str	r6, [r4, #0]
 8009980:	60a5      	str	r5, [r4, #8]
 8009982:	463e      	mov	r6, r7
 8009984:	42be      	cmp	r6, r7
 8009986:	d900      	bls.n	800998a <__ssputs_r+0x86>
 8009988:	463e      	mov	r6, r7
 800998a:	4632      	mov	r2, r6
 800998c:	6820      	ldr	r0, [r4, #0]
 800998e:	4641      	mov	r1, r8
 8009990:	f000 f966 	bl	8009c60 <memmove>
 8009994:	68a3      	ldr	r3, [r4, #8]
 8009996:	6822      	ldr	r2, [r4, #0]
 8009998:	1b9b      	subs	r3, r3, r6
 800999a:	4432      	add	r2, r6
 800999c:	60a3      	str	r3, [r4, #8]
 800999e:	6022      	str	r2, [r4, #0]
 80099a0:	2000      	movs	r0, #0
 80099a2:	e7db      	b.n	800995c <__ssputs_r+0x58>
 80099a4:	462a      	mov	r2, r5
 80099a6:	f000 f981 	bl	8009cac <_realloc_r>
 80099aa:	4606      	mov	r6, r0
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d1e1      	bne.n	8009974 <__ssputs_r+0x70>
 80099b0:	6921      	ldr	r1, [r4, #16]
 80099b2:	4650      	mov	r0, sl
 80099b4:	f7ff fefc 	bl	80097b0 <_free_r>
 80099b8:	e7c7      	b.n	800994a <__ssputs_r+0x46>
	...

080099bc <_svfiprintf_r>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	4698      	mov	r8, r3
 80099c2:	898b      	ldrh	r3, [r1, #12]
 80099c4:	061b      	lsls	r3, r3, #24
 80099c6:	b09d      	sub	sp, #116	; 0x74
 80099c8:	4607      	mov	r7, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	4614      	mov	r4, r2
 80099ce:	d50e      	bpl.n	80099ee <_svfiprintf_r+0x32>
 80099d0:	690b      	ldr	r3, [r1, #16]
 80099d2:	b963      	cbnz	r3, 80099ee <_svfiprintf_r+0x32>
 80099d4:	2140      	movs	r1, #64	; 0x40
 80099d6:	f7ff ff3b 	bl	8009850 <_malloc_r>
 80099da:	6028      	str	r0, [r5, #0]
 80099dc:	6128      	str	r0, [r5, #16]
 80099de:	b920      	cbnz	r0, 80099ea <_svfiprintf_r+0x2e>
 80099e0:	230c      	movs	r3, #12
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	e0d1      	b.n	8009b8e <_svfiprintf_r+0x1d2>
 80099ea:	2340      	movs	r3, #64	; 0x40
 80099ec:	616b      	str	r3, [r5, #20]
 80099ee:	2300      	movs	r3, #0
 80099f0:	9309      	str	r3, [sp, #36]	; 0x24
 80099f2:	2320      	movs	r3, #32
 80099f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80099fc:	2330      	movs	r3, #48	; 0x30
 80099fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ba8 <_svfiprintf_r+0x1ec>
 8009a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a06:	f04f 0901 	mov.w	r9, #1
 8009a0a:	4623      	mov	r3, r4
 8009a0c:	469a      	mov	sl, r3
 8009a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a12:	b10a      	cbz	r2, 8009a18 <_svfiprintf_r+0x5c>
 8009a14:	2a25      	cmp	r2, #37	; 0x25
 8009a16:	d1f9      	bne.n	8009a0c <_svfiprintf_r+0x50>
 8009a18:	ebba 0b04 	subs.w	fp, sl, r4
 8009a1c:	d00b      	beq.n	8009a36 <_svfiprintf_r+0x7a>
 8009a1e:	465b      	mov	r3, fp
 8009a20:	4622      	mov	r2, r4
 8009a22:	4629      	mov	r1, r5
 8009a24:	4638      	mov	r0, r7
 8009a26:	f7ff ff6d 	bl	8009904 <__ssputs_r>
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f000 80aa 	beq.w	8009b84 <_svfiprintf_r+0x1c8>
 8009a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a32:	445a      	add	r2, fp
 8009a34:	9209      	str	r2, [sp, #36]	; 0x24
 8009a36:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 80a2 	beq.w	8009b84 <_svfiprintf_r+0x1c8>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f04f 32ff 	mov.w	r2, #4294967295
 8009a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a4a:	f10a 0a01 	add.w	sl, sl, #1
 8009a4e:	9304      	str	r3, [sp, #16]
 8009a50:	9307      	str	r3, [sp, #28]
 8009a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a56:	931a      	str	r3, [sp, #104]	; 0x68
 8009a58:	4654      	mov	r4, sl
 8009a5a:	2205      	movs	r2, #5
 8009a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a60:	4851      	ldr	r0, [pc, #324]	; (8009ba8 <_svfiprintf_r+0x1ec>)
 8009a62:	f7f6 fbc5 	bl	80001f0 <memchr>
 8009a66:	9a04      	ldr	r2, [sp, #16]
 8009a68:	b9d8      	cbnz	r0, 8009aa2 <_svfiprintf_r+0xe6>
 8009a6a:	06d0      	lsls	r0, r2, #27
 8009a6c:	bf44      	itt	mi
 8009a6e:	2320      	movmi	r3, #32
 8009a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a74:	0711      	lsls	r1, r2, #28
 8009a76:	bf44      	itt	mi
 8009a78:	232b      	movmi	r3, #43	; 0x2b
 8009a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a82:	2b2a      	cmp	r3, #42	; 0x2a
 8009a84:	d015      	beq.n	8009ab2 <_svfiprintf_r+0xf6>
 8009a86:	9a07      	ldr	r2, [sp, #28]
 8009a88:	4654      	mov	r4, sl
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	f04f 0c0a 	mov.w	ip, #10
 8009a90:	4621      	mov	r1, r4
 8009a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a96:	3b30      	subs	r3, #48	; 0x30
 8009a98:	2b09      	cmp	r3, #9
 8009a9a:	d94e      	bls.n	8009b3a <_svfiprintf_r+0x17e>
 8009a9c:	b1b0      	cbz	r0, 8009acc <_svfiprintf_r+0x110>
 8009a9e:	9207      	str	r2, [sp, #28]
 8009aa0:	e014      	b.n	8009acc <_svfiprintf_r+0x110>
 8009aa2:	eba0 0308 	sub.w	r3, r0, r8
 8009aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	9304      	str	r3, [sp, #16]
 8009aae:	46a2      	mov	sl, r4
 8009ab0:	e7d2      	b.n	8009a58 <_svfiprintf_r+0x9c>
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	1d19      	adds	r1, r3, #4
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	9103      	str	r1, [sp, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	bfbb      	ittet	lt
 8009abe:	425b      	neglt	r3, r3
 8009ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ac4:	9307      	strge	r3, [sp, #28]
 8009ac6:	9307      	strlt	r3, [sp, #28]
 8009ac8:	bfb8      	it	lt
 8009aca:	9204      	strlt	r2, [sp, #16]
 8009acc:	7823      	ldrb	r3, [r4, #0]
 8009ace:	2b2e      	cmp	r3, #46	; 0x2e
 8009ad0:	d10c      	bne.n	8009aec <_svfiprintf_r+0x130>
 8009ad2:	7863      	ldrb	r3, [r4, #1]
 8009ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad6:	d135      	bne.n	8009b44 <_svfiprintf_r+0x188>
 8009ad8:	9b03      	ldr	r3, [sp, #12]
 8009ada:	1d1a      	adds	r2, r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	9203      	str	r2, [sp, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bfb8      	it	lt
 8009ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ae8:	3402      	adds	r4, #2
 8009aea:	9305      	str	r3, [sp, #20]
 8009aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bb8 <_svfiprintf_r+0x1fc>
 8009af0:	7821      	ldrb	r1, [r4, #0]
 8009af2:	2203      	movs	r2, #3
 8009af4:	4650      	mov	r0, sl
 8009af6:	f7f6 fb7b 	bl	80001f0 <memchr>
 8009afa:	b140      	cbz	r0, 8009b0e <_svfiprintf_r+0x152>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	eba0 000a 	sub.w	r0, r0, sl
 8009b02:	fa03 f000 	lsl.w	r0, r3, r0
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	4303      	orrs	r3, r0
 8009b0a:	3401      	adds	r4, #1
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	4826      	ldr	r0, [pc, #152]	; (8009bac <_svfiprintf_r+0x1f0>)
 8009b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b18:	2206      	movs	r2, #6
 8009b1a:	f7f6 fb69 	bl	80001f0 <memchr>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d038      	beq.n	8009b94 <_svfiprintf_r+0x1d8>
 8009b22:	4b23      	ldr	r3, [pc, #140]	; (8009bb0 <_svfiprintf_r+0x1f4>)
 8009b24:	bb1b      	cbnz	r3, 8009b6e <_svfiprintf_r+0x1b2>
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	3307      	adds	r3, #7
 8009b2a:	f023 0307 	bic.w	r3, r3, #7
 8009b2e:	3308      	adds	r3, #8
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b34:	4433      	add	r3, r6
 8009b36:	9309      	str	r3, [sp, #36]	; 0x24
 8009b38:	e767      	b.n	8009a0a <_svfiprintf_r+0x4e>
 8009b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b3e:	460c      	mov	r4, r1
 8009b40:	2001      	movs	r0, #1
 8009b42:	e7a5      	b.n	8009a90 <_svfiprintf_r+0xd4>
 8009b44:	2300      	movs	r3, #0
 8009b46:	3401      	adds	r4, #1
 8009b48:	9305      	str	r3, [sp, #20]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f04f 0c0a 	mov.w	ip, #10
 8009b50:	4620      	mov	r0, r4
 8009b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b56:	3a30      	subs	r2, #48	; 0x30
 8009b58:	2a09      	cmp	r2, #9
 8009b5a:	d903      	bls.n	8009b64 <_svfiprintf_r+0x1a8>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0c5      	beq.n	8009aec <_svfiprintf_r+0x130>
 8009b60:	9105      	str	r1, [sp, #20]
 8009b62:	e7c3      	b.n	8009aec <_svfiprintf_r+0x130>
 8009b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b68:	4604      	mov	r4, r0
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e7f0      	b.n	8009b50 <_svfiprintf_r+0x194>
 8009b6e:	ab03      	add	r3, sp, #12
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	462a      	mov	r2, r5
 8009b74:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <_svfiprintf_r+0x1f8>)
 8009b76:	a904      	add	r1, sp, #16
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f7fe f80d 	bl	8007b98 <_printf_float>
 8009b7e:	1c42      	adds	r2, r0, #1
 8009b80:	4606      	mov	r6, r0
 8009b82:	d1d6      	bne.n	8009b32 <_svfiprintf_r+0x176>
 8009b84:	89ab      	ldrh	r3, [r5, #12]
 8009b86:	065b      	lsls	r3, r3, #25
 8009b88:	f53f af2c 	bmi.w	80099e4 <_svfiprintf_r+0x28>
 8009b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b8e:	b01d      	add	sp, #116	; 0x74
 8009b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b94:	ab03      	add	r3, sp, #12
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	462a      	mov	r2, r5
 8009b9a:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <_svfiprintf_r+0x1f8>)
 8009b9c:	a904      	add	r1, sp, #16
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f7fe fa9e 	bl	80080e0 <_printf_i>
 8009ba4:	e7eb      	b.n	8009b7e <_svfiprintf_r+0x1c2>
 8009ba6:	bf00      	nop
 8009ba8:	0800aa24 	.word	0x0800aa24
 8009bac:	0800aa2e 	.word	0x0800aa2e
 8009bb0:	08007b99 	.word	0x08007b99
 8009bb4:	08009905 	.word	0x08009905
 8009bb8:	0800aa2a 	.word	0x0800aa2a

08009bbc <_sbrk_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d06      	ldr	r5, [pc, #24]	; (8009bd8 <_sbrk_r+0x1c>)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	f7f8 fa4e 	bl	8002068 <_sbrk>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d102      	bne.n	8009bd6 <_sbrk_r+0x1a>
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	b103      	cbz	r3, 8009bd6 <_sbrk_r+0x1a>
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	20000508 	.word	0x20000508

08009bdc <__assert_func>:
 8009bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bde:	4614      	mov	r4, r2
 8009be0:	461a      	mov	r2, r3
 8009be2:	4b09      	ldr	r3, [pc, #36]	; (8009c08 <__assert_func+0x2c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4605      	mov	r5, r0
 8009be8:	68d8      	ldr	r0, [r3, #12]
 8009bea:	b14c      	cbz	r4, 8009c00 <__assert_func+0x24>
 8009bec:	4b07      	ldr	r3, [pc, #28]	; (8009c0c <__assert_func+0x30>)
 8009bee:	9100      	str	r1, [sp, #0]
 8009bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bf4:	4906      	ldr	r1, [pc, #24]	; (8009c10 <__assert_func+0x34>)
 8009bf6:	462b      	mov	r3, r5
 8009bf8:	f000 f80e 	bl	8009c18 <fiprintf>
 8009bfc:	f000 faa4 	bl	800a148 <abort>
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <__assert_func+0x38>)
 8009c02:	461c      	mov	r4, r3
 8009c04:	e7f3      	b.n	8009bee <__assert_func+0x12>
 8009c06:	bf00      	nop
 8009c08:	2000003c 	.word	0x2000003c
 8009c0c:	0800aa35 	.word	0x0800aa35
 8009c10:	0800aa42 	.word	0x0800aa42
 8009c14:	0800aa70 	.word	0x0800aa70

08009c18 <fiprintf>:
 8009c18:	b40e      	push	{r1, r2, r3}
 8009c1a:	b503      	push	{r0, r1, lr}
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	ab03      	add	r3, sp, #12
 8009c20:	4805      	ldr	r0, [pc, #20]	; (8009c38 <fiprintf+0x20>)
 8009c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c26:	6800      	ldr	r0, [r0, #0]
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	f000 f88f 	bl	8009d4c <_vfiprintf_r>
 8009c2e:	b002      	add	sp, #8
 8009c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c34:	b003      	add	sp, #12
 8009c36:	4770      	bx	lr
 8009c38:	2000003c 	.word	0x2000003c

08009c3c <__ascii_mbtowc>:
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	b901      	cbnz	r1, 8009c42 <__ascii_mbtowc+0x6>
 8009c40:	a901      	add	r1, sp, #4
 8009c42:	b142      	cbz	r2, 8009c56 <__ascii_mbtowc+0x1a>
 8009c44:	b14b      	cbz	r3, 8009c5a <__ascii_mbtowc+0x1e>
 8009c46:	7813      	ldrb	r3, [r2, #0]
 8009c48:	600b      	str	r3, [r1, #0]
 8009c4a:	7812      	ldrb	r2, [r2, #0]
 8009c4c:	1e10      	subs	r0, r2, #0
 8009c4e:	bf18      	it	ne
 8009c50:	2001      	movne	r0, #1
 8009c52:	b002      	add	sp, #8
 8009c54:	4770      	bx	lr
 8009c56:	4610      	mov	r0, r2
 8009c58:	e7fb      	b.n	8009c52 <__ascii_mbtowc+0x16>
 8009c5a:	f06f 0001 	mvn.w	r0, #1
 8009c5e:	e7f8      	b.n	8009c52 <__ascii_mbtowc+0x16>

08009c60 <memmove>:
 8009c60:	4288      	cmp	r0, r1
 8009c62:	b510      	push	{r4, lr}
 8009c64:	eb01 0402 	add.w	r4, r1, r2
 8009c68:	d902      	bls.n	8009c70 <memmove+0x10>
 8009c6a:	4284      	cmp	r4, r0
 8009c6c:	4623      	mov	r3, r4
 8009c6e:	d807      	bhi.n	8009c80 <memmove+0x20>
 8009c70:	1e43      	subs	r3, r0, #1
 8009c72:	42a1      	cmp	r1, r4
 8009c74:	d008      	beq.n	8009c88 <memmove+0x28>
 8009c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c7e:	e7f8      	b.n	8009c72 <memmove+0x12>
 8009c80:	4402      	add	r2, r0
 8009c82:	4601      	mov	r1, r0
 8009c84:	428a      	cmp	r2, r1
 8009c86:	d100      	bne.n	8009c8a <memmove+0x2a>
 8009c88:	bd10      	pop	{r4, pc}
 8009c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c92:	e7f7      	b.n	8009c84 <memmove+0x24>

08009c94 <__malloc_lock>:
 8009c94:	4801      	ldr	r0, [pc, #4]	; (8009c9c <__malloc_lock+0x8>)
 8009c96:	f000 bc17 	b.w	800a4c8 <__retarget_lock_acquire_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	20000510 	.word	0x20000510

08009ca0 <__malloc_unlock>:
 8009ca0:	4801      	ldr	r0, [pc, #4]	; (8009ca8 <__malloc_unlock+0x8>)
 8009ca2:	f000 bc12 	b.w	800a4ca <__retarget_lock_release_recursive>
 8009ca6:	bf00      	nop
 8009ca8:	20000510 	.word	0x20000510

08009cac <_realloc_r>:
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	4607      	mov	r7, r0
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	460e      	mov	r6, r1
 8009cb4:	b921      	cbnz	r1, 8009cc0 <_realloc_r+0x14>
 8009cb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cba:	4611      	mov	r1, r2
 8009cbc:	f7ff bdc8 	b.w	8009850 <_malloc_r>
 8009cc0:	b922      	cbnz	r2, 8009ccc <_realloc_r+0x20>
 8009cc2:	f7ff fd75 	bl	80097b0 <_free_r>
 8009cc6:	4625      	mov	r5, r4
 8009cc8:	4628      	mov	r0, r5
 8009cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ccc:	f000 fc62 	bl	800a594 <_malloc_usable_size_r>
 8009cd0:	42a0      	cmp	r0, r4
 8009cd2:	d20f      	bcs.n	8009cf4 <_realloc_r+0x48>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f7ff fdba 	bl	8009850 <_malloc_r>
 8009cdc:	4605      	mov	r5, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0f2      	beq.n	8009cc8 <_realloc_r+0x1c>
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	f7ff f9c7 	bl	8009078 <memcpy>
 8009cea:	4631      	mov	r1, r6
 8009cec:	4638      	mov	r0, r7
 8009cee:	f7ff fd5f 	bl	80097b0 <_free_r>
 8009cf2:	e7e9      	b.n	8009cc8 <_realloc_r+0x1c>
 8009cf4:	4635      	mov	r5, r6
 8009cf6:	e7e7      	b.n	8009cc8 <_realloc_r+0x1c>

08009cf8 <__sfputc_r>:
 8009cf8:	6893      	ldr	r3, [r2, #8]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	b410      	push	{r4}
 8009d00:	6093      	str	r3, [r2, #8]
 8009d02:	da08      	bge.n	8009d16 <__sfputc_r+0x1e>
 8009d04:	6994      	ldr	r4, [r2, #24]
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	db01      	blt.n	8009d0e <__sfputc_r+0x16>
 8009d0a:	290a      	cmp	r1, #10
 8009d0c:	d103      	bne.n	8009d16 <__sfputc_r+0x1e>
 8009d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d12:	f000 b94b 	b.w	8009fac <__swbuf_r>
 8009d16:	6813      	ldr	r3, [r2, #0]
 8009d18:	1c58      	adds	r0, r3, #1
 8009d1a:	6010      	str	r0, [r2, #0]
 8009d1c:	7019      	strb	r1, [r3, #0]
 8009d1e:	4608      	mov	r0, r1
 8009d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <__sfputs_r>:
 8009d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d28:	4606      	mov	r6, r0
 8009d2a:	460f      	mov	r7, r1
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	18d5      	adds	r5, r2, r3
 8009d30:	42ac      	cmp	r4, r5
 8009d32:	d101      	bne.n	8009d38 <__sfputs_r+0x12>
 8009d34:	2000      	movs	r0, #0
 8009d36:	e007      	b.n	8009d48 <__sfputs_r+0x22>
 8009d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3c:	463a      	mov	r2, r7
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f7ff ffda 	bl	8009cf8 <__sfputc_r>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d1f3      	bne.n	8009d30 <__sfputs_r+0xa>
 8009d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d4c <_vfiprintf_r>:
 8009d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	460d      	mov	r5, r1
 8009d52:	b09d      	sub	sp, #116	; 0x74
 8009d54:	4614      	mov	r4, r2
 8009d56:	4698      	mov	r8, r3
 8009d58:	4606      	mov	r6, r0
 8009d5a:	b118      	cbz	r0, 8009d64 <_vfiprintf_r+0x18>
 8009d5c:	6983      	ldr	r3, [r0, #24]
 8009d5e:	b90b      	cbnz	r3, 8009d64 <_vfiprintf_r+0x18>
 8009d60:	f000 fb14 	bl	800a38c <__sinit>
 8009d64:	4b89      	ldr	r3, [pc, #548]	; (8009f8c <_vfiprintf_r+0x240>)
 8009d66:	429d      	cmp	r5, r3
 8009d68:	d11b      	bne.n	8009da2 <_vfiprintf_r+0x56>
 8009d6a:	6875      	ldr	r5, [r6, #4]
 8009d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d6e:	07d9      	lsls	r1, r3, #31
 8009d70:	d405      	bmi.n	8009d7e <_vfiprintf_r+0x32>
 8009d72:	89ab      	ldrh	r3, [r5, #12]
 8009d74:	059a      	lsls	r2, r3, #22
 8009d76:	d402      	bmi.n	8009d7e <_vfiprintf_r+0x32>
 8009d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d7a:	f000 fba5 	bl	800a4c8 <__retarget_lock_acquire_recursive>
 8009d7e:	89ab      	ldrh	r3, [r5, #12]
 8009d80:	071b      	lsls	r3, r3, #28
 8009d82:	d501      	bpl.n	8009d88 <_vfiprintf_r+0x3c>
 8009d84:	692b      	ldr	r3, [r5, #16]
 8009d86:	b9eb      	cbnz	r3, 8009dc4 <_vfiprintf_r+0x78>
 8009d88:	4629      	mov	r1, r5
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f000 f96e 	bl	800a06c <__swsetup_r>
 8009d90:	b1c0      	cbz	r0, 8009dc4 <_vfiprintf_r+0x78>
 8009d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d94:	07dc      	lsls	r4, r3, #31
 8009d96:	d50e      	bpl.n	8009db6 <_vfiprintf_r+0x6a>
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9c:	b01d      	add	sp, #116	; 0x74
 8009d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da2:	4b7b      	ldr	r3, [pc, #492]	; (8009f90 <_vfiprintf_r+0x244>)
 8009da4:	429d      	cmp	r5, r3
 8009da6:	d101      	bne.n	8009dac <_vfiprintf_r+0x60>
 8009da8:	68b5      	ldr	r5, [r6, #8]
 8009daa:	e7df      	b.n	8009d6c <_vfiprintf_r+0x20>
 8009dac:	4b79      	ldr	r3, [pc, #484]	; (8009f94 <_vfiprintf_r+0x248>)
 8009dae:	429d      	cmp	r5, r3
 8009db0:	bf08      	it	eq
 8009db2:	68f5      	ldreq	r5, [r6, #12]
 8009db4:	e7da      	b.n	8009d6c <_vfiprintf_r+0x20>
 8009db6:	89ab      	ldrh	r3, [r5, #12]
 8009db8:	0598      	lsls	r0, r3, #22
 8009dba:	d4ed      	bmi.n	8009d98 <_vfiprintf_r+0x4c>
 8009dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dbe:	f000 fb84 	bl	800a4ca <__retarget_lock_release_recursive>
 8009dc2:	e7e9      	b.n	8009d98 <_vfiprintf_r+0x4c>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc8:	2320      	movs	r3, #32
 8009dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dd2:	2330      	movs	r3, #48	; 0x30
 8009dd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f98 <_vfiprintf_r+0x24c>
 8009dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ddc:	f04f 0901 	mov.w	r9, #1
 8009de0:	4623      	mov	r3, r4
 8009de2:	469a      	mov	sl, r3
 8009de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009de8:	b10a      	cbz	r2, 8009dee <_vfiprintf_r+0xa2>
 8009dea:	2a25      	cmp	r2, #37	; 0x25
 8009dec:	d1f9      	bne.n	8009de2 <_vfiprintf_r+0x96>
 8009dee:	ebba 0b04 	subs.w	fp, sl, r4
 8009df2:	d00b      	beq.n	8009e0c <_vfiprintf_r+0xc0>
 8009df4:	465b      	mov	r3, fp
 8009df6:	4622      	mov	r2, r4
 8009df8:	4629      	mov	r1, r5
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7ff ff93 	bl	8009d26 <__sfputs_r>
 8009e00:	3001      	adds	r0, #1
 8009e02:	f000 80aa 	beq.w	8009f5a <_vfiprintf_r+0x20e>
 8009e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e08:	445a      	add	r2, fp
 8009e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 80a2 	beq.w	8009f5a <_vfiprintf_r+0x20e>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e20:	f10a 0a01 	add.w	sl, sl, #1
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	9307      	str	r3, [sp, #28]
 8009e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e2e:	4654      	mov	r4, sl
 8009e30:	2205      	movs	r2, #5
 8009e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e36:	4858      	ldr	r0, [pc, #352]	; (8009f98 <_vfiprintf_r+0x24c>)
 8009e38:	f7f6 f9da 	bl	80001f0 <memchr>
 8009e3c:	9a04      	ldr	r2, [sp, #16]
 8009e3e:	b9d8      	cbnz	r0, 8009e78 <_vfiprintf_r+0x12c>
 8009e40:	06d1      	lsls	r1, r2, #27
 8009e42:	bf44      	itt	mi
 8009e44:	2320      	movmi	r3, #32
 8009e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e4a:	0713      	lsls	r3, r2, #28
 8009e4c:	bf44      	itt	mi
 8009e4e:	232b      	movmi	r3, #43	; 0x2b
 8009e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e54:	f89a 3000 	ldrb.w	r3, [sl]
 8009e58:	2b2a      	cmp	r3, #42	; 0x2a
 8009e5a:	d015      	beq.n	8009e88 <_vfiprintf_r+0x13c>
 8009e5c:	9a07      	ldr	r2, [sp, #28]
 8009e5e:	4654      	mov	r4, sl
 8009e60:	2000      	movs	r0, #0
 8009e62:	f04f 0c0a 	mov.w	ip, #10
 8009e66:	4621      	mov	r1, r4
 8009e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e6c:	3b30      	subs	r3, #48	; 0x30
 8009e6e:	2b09      	cmp	r3, #9
 8009e70:	d94e      	bls.n	8009f10 <_vfiprintf_r+0x1c4>
 8009e72:	b1b0      	cbz	r0, 8009ea2 <_vfiprintf_r+0x156>
 8009e74:	9207      	str	r2, [sp, #28]
 8009e76:	e014      	b.n	8009ea2 <_vfiprintf_r+0x156>
 8009e78:	eba0 0308 	sub.w	r3, r0, r8
 8009e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e80:	4313      	orrs	r3, r2
 8009e82:	9304      	str	r3, [sp, #16]
 8009e84:	46a2      	mov	sl, r4
 8009e86:	e7d2      	b.n	8009e2e <_vfiprintf_r+0xe2>
 8009e88:	9b03      	ldr	r3, [sp, #12]
 8009e8a:	1d19      	adds	r1, r3, #4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	9103      	str	r1, [sp, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	bfbb      	ittet	lt
 8009e94:	425b      	neglt	r3, r3
 8009e96:	f042 0202 	orrlt.w	r2, r2, #2
 8009e9a:	9307      	strge	r3, [sp, #28]
 8009e9c:	9307      	strlt	r3, [sp, #28]
 8009e9e:	bfb8      	it	lt
 8009ea0:	9204      	strlt	r2, [sp, #16]
 8009ea2:	7823      	ldrb	r3, [r4, #0]
 8009ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ea6:	d10c      	bne.n	8009ec2 <_vfiprintf_r+0x176>
 8009ea8:	7863      	ldrb	r3, [r4, #1]
 8009eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8009eac:	d135      	bne.n	8009f1a <_vfiprintf_r+0x1ce>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	1d1a      	adds	r2, r3, #4
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	9203      	str	r2, [sp, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfb8      	it	lt
 8009eba:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ebe:	3402      	adds	r4, #2
 8009ec0:	9305      	str	r3, [sp, #20]
 8009ec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fa8 <_vfiprintf_r+0x25c>
 8009ec6:	7821      	ldrb	r1, [r4, #0]
 8009ec8:	2203      	movs	r2, #3
 8009eca:	4650      	mov	r0, sl
 8009ecc:	f7f6 f990 	bl	80001f0 <memchr>
 8009ed0:	b140      	cbz	r0, 8009ee4 <_vfiprintf_r+0x198>
 8009ed2:	2340      	movs	r3, #64	; 0x40
 8009ed4:	eba0 000a 	sub.w	r0, r0, sl
 8009ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	4303      	orrs	r3, r0
 8009ee0:	3401      	adds	r4, #1
 8009ee2:	9304      	str	r3, [sp, #16]
 8009ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee8:	482c      	ldr	r0, [pc, #176]	; (8009f9c <_vfiprintf_r+0x250>)
 8009eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eee:	2206      	movs	r2, #6
 8009ef0:	f7f6 f97e 	bl	80001f0 <memchr>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d03f      	beq.n	8009f78 <_vfiprintf_r+0x22c>
 8009ef8:	4b29      	ldr	r3, [pc, #164]	; (8009fa0 <_vfiprintf_r+0x254>)
 8009efa:	bb1b      	cbnz	r3, 8009f44 <_vfiprintf_r+0x1f8>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	3307      	adds	r3, #7
 8009f00:	f023 0307 	bic.w	r3, r3, #7
 8009f04:	3308      	adds	r3, #8
 8009f06:	9303      	str	r3, [sp, #12]
 8009f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0a:	443b      	add	r3, r7
 8009f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0e:	e767      	b.n	8009de0 <_vfiprintf_r+0x94>
 8009f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f14:	460c      	mov	r4, r1
 8009f16:	2001      	movs	r0, #1
 8009f18:	e7a5      	b.n	8009e66 <_vfiprintf_r+0x11a>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	3401      	adds	r4, #1
 8009f1e:	9305      	str	r3, [sp, #20]
 8009f20:	4619      	mov	r1, r3
 8009f22:	f04f 0c0a 	mov.w	ip, #10
 8009f26:	4620      	mov	r0, r4
 8009f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f2c:	3a30      	subs	r2, #48	; 0x30
 8009f2e:	2a09      	cmp	r2, #9
 8009f30:	d903      	bls.n	8009f3a <_vfiprintf_r+0x1ee>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0c5      	beq.n	8009ec2 <_vfiprintf_r+0x176>
 8009f36:	9105      	str	r1, [sp, #20]
 8009f38:	e7c3      	b.n	8009ec2 <_vfiprintf_r+0x176>
 8009f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f3e:	4604      	mov	r4, r0
 8009f40:	2301      	movs	r3, #1
 8009f42:	e7f0      	b.n	8009f26 <_vfiprintf_r+0x1da>
 8009f44:	ab03      	add	r3, sp, #12
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	462a      	mov	r2, r5
 8009f4a:	4b16      	ldr	r3, [pc, #88]	; (8009fa4 <_vfiprintf_r+0x258>)
 8009f4c:	a904      	add	r1, sp, #16
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7fd fe22 	bl	8007b98 <_printf_float>
 8009f54:	4607      	mov	r7, r0
 8009f56:	1c78      	adds	r0, r7, #1
 8009f58:	d1d6      	bne.n	8009f08 <_vfiprintf_r+0x1bc>
 8009f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f5c:	07d9      	lsls	r1, r3, #31
 8009f5e:	d405      	bmi.n	8009f6c <_vfiprintf_r+0x220>
 8009f60:	89ab      	ldrh	r3, [r5, #12]
 8009f62:	059a      	lsls	r2, r3, #22
 8009f64:	d402      	bmi.n	8009f6c <_vfiprintf_r+0x220>
 8009f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f68:	f000 faaf 	bl	800a4ca <__retarget_lock_release_recursive>
 8009f6c:	89ab      	ldrh	r3, [r5, #12]
 8009f6e:	065b      	lsls	r3, r3, #25
 8009f70:	f53f af12 	bmi.w	8009d98 <_vfiprintf_r+0x4c>
 8009f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f76:	e711      	b.n	8009d9c <_vfiprintf_r+0x50>
 8009f78:	ab03      	add	r3, sp, #12
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	462a      	mov	r2, r5
 8009f7e:	4b09      	ldr	r3, [pc, #36]	; (8009fa4 <_vfiprintf_r+0x258>)
 8009f80:	a904      	add	r1, sp, #16
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7fe f8ac 	bl	80080e0 <_printf_i>
 8009f88:	e7e4      	b.n	8009f54 <_vfiprintf_r+0x208>
 8009f8a:	bf00      	nop
 8009f8c:	0800ab9c 	.word	0x0800ab9c
 8009f90:	0800abbc 	.word	0x0800abbc
 8009f94:	0800ab7c 	.word	0x0800ab7c
 8009f98:	0800aa24 	.word	0x0800aa24
 8009f9c:	0800aa2e 	.word	0x0800aa2e
 8009fa0:	08007b99 	.word	0x08007b99
 8009fa4:	08009d27 	.word	0x08009d27
 8009fa8:	0800aa2a 	.word	0x0800aa2a

08009fac <__swbuf_r>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	460e      	mov	r6, r1
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	b118      	cbz	r0, 8009fbe <__swbuf_r+0x12>
 8009fb6:	6983      	ldr	r3, [r0, #24]
 8009fb8:	b90b      	cbnz	r3, 8009fbe <__swbuf_r+0x12>
 8009fba:	f000 f9e7 	bl	800a38c <__sinit>
 8009fbe:	4b21      	ldr	r3, [pc, #132]	; (800a044 <__swbuf_r+0x98>)
 8009fc0:	429c      	cmp	r4, r3
 8009fc2:	d12b      	bne.n	800a01c <__swbuf_r+0x70>
 8009fc4:	686c      	ldr	r4, [r5, #4]
 8009fc6:	69a3      	ldr	r3, [r4, #24]
 8009fc8:	60a3      	str	r3, [r4, #8]
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	071a      	lsls	r2, r3, #28
 8009fce:	d52f      	bpl.n	800a030 <__swbuf_r+0x84>
 8009fd0:	6923      	ldr	r3, [r4, #16]
 8009fd2:	b36b      	cbz	r3, 800a030 <__swbuf_r+0x84>
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	6820      	ldr	r0, [r4, #0]
 8009fd8:	1ac0      	subs	r0, r0, r3
 8009fda:	6963      	ldr	r3, [r4, #20]
 8009fdc:	b2f6      	uxtb	r6, r6
 8009fde:	4283      	cmp	r3, r0
 8009fe0:	4637      	mov	r7, r6
 8009fe2:	dc04      	bgt.n	8009fee <__swbuf_r+0x42>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 f93c 	bl	800a264 <_fflush_r>
 8009fec:	bb30      	cbnz	r0, 800a03c <__swbuf_r+0x90>
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	60a3      	str	r3, [r4, #8]
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	6022      	str	r2, [r4, #0]
 8009ffa:	701e      	strb	r6, [r3, #0]
 8009ffc:	6963      	ldr	r3, [r4, #20]
 8009ffe:	3001      	adds	r0, #1
 800a000:	4283      	cmp	r3, r0
 800a002:	d004      	beq.n	800a00e <__swbuf_r+0x62>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	07db      	lsls	r3, r3, #31
 800a008:	d506      	bpl.n	800a018 <__swbuf_r+0x6c>
 800a00a:	2e0a      	cmp	r6, #10
 800a00c:	d104      	bne.n	800a018 <__swbuf_r+0x6c>
 800a00e:	4621      	mov	r1, r4
 800a010:	4628      	mov	r0, r5
 800a012:	f000 f927 	bl	800a264 <_fflush_r>
 800a016:	b988      	cbnz	r0, 800a03c <__swbuf_r+0x90>
 800a018:	4638      	mov	r0, r7
 800a01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01c:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <__swbuf_r+0x9c>)
 800a01e:	429c      	cmp	r4, r3
 800a020:	d101      	bne.n	800a026 <__swbuf_r+0x7a>
 800a022:	68ac      	ldr	r4, [r5, #8]
 800a024:	e7cf      	b.n	8009fc6 <__swbuf_r+0x1a>
 800a026:	4b09      	ldr	r3, [pc, #36]	; (800a04c <__swbuf_r+0xa0>)
 800a028:	429c      	cmp	r4, r3
 800a02a:	bf08      	it	eq
 800a02c:	68ec      	ldreq	r4, [r5, #12]
 800a02e:	e7ca      	b.n	8009fc6 <__swbuf_r+0x1a>
 800a030:	4621      	mov	r1, r4
 800a032:	4628      	mov	r0, r5
 800a034:	f000 f81a 	bl	800a06c <__swsetup_r>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d0cb      	beq.n	8009fd4 <__swbuf_r+0x28>
 800a03c:	f04f 37ff 	mov.w	r7, #4294967295
 800a040:	e7ea      	b.n	800a018 <__swbuf_r+0x6c>
 800a042:	bf00      	nop
 800a044:	0800ab9c 	.word	0x0800ab9c
 800a048:	0800abbc 	.word	0x0800abbc
 800a04c:	0800ab7c 	.word	0x0800ab7c

0800a050 <__ascii_wctomb>:
 800a050:	b149      	cbz	r1, 800a066 <__ascii_wctomb+0x16>
 800a052:	2aff      	cmp	r2, #255	; 0xff
 800a054:	bf85      	ittet	hi
 800a056:	238a      	movhi	r3, #138	; 0x8a
 800a058:	6003      	strhi	r3, [r0, #0]
 800a05a:	700a      	strbls	r2, [r1, #0]
 800a05c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a060:	bf98      	it	ls
 800a062:	2001      	movls	r0, #1
 800a064:	4770      	bx	lr
 800a066:	4608      	mov	r0, r1
 800a068:	4770      	bx	lr
	...

0800a06c <__swsetup_r>:
 800a06c:	4b32      	ldr	r3, [pc, #200]	; (800a138 <__swsetup_r+0xcc>)
 800a06e:	b570      	push	{r4, r5, r6, lr}
 800a070:	681d      	ldr	r5, [r3, #0]
 800a072:	4606      	mov	r6, r0
 800a074:	460c      	mov	r4, r1
 800a076:	b125      	cbz	r5, 800a082 <__swsetup_r+0x16>
 800a078:	69ab      	ldr	r3, [r5, #24]
 800a07a:	b913      	cbnz	r3, 800a082 <__swsetup_r+0x16>
 800a07c:	4628      	mov	r0, r5
 800a07e:	f000 f985 	bl	800a38c <__sinit>
 800a082:	4b2e      	ldr	r3, [pc, #184]	; (800a13c <__swsetup_r+0xd0>)
 800a084:	429c      	cmp	r4, r3
 800a086:	d10f      	bne.n	800a0a8 <__swsetup_r+0x3c>
 800a088:	686c      	ldr	r4, [r5, #4]
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a090:	0719      	lsls	r1, r3, #28
 800a092:	d42c      	bmi.n	800a0ee <__swsetup_r+0x82>
 800a094:	06dd      	lsls	r5, r3, #27
 800a096:	d411      	bmi.n	800a0bc <__swsetup_r+0x50>
 800a098:	2309      	movs	r3, #9
 800a09a:	6033      	str	r3, [r6, #0]
 800a09c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a6:	e03e      	b.n	800a126 <__swsetup_r+0xba>
 800a0a8:	4b25      	ldr	r3, [pc, #148]	; (800a140 <__swsetup_r+0xd4>)
 800a0aa:	429c      	cmp	r4, r3
 800a0ac:	d101      	bne.n	800a0b2 <__swsetup_r+0x46>
 800a0ae:	68ac      	ldr	r4, [r5, #8]
 800a0b0:	e7eb      	b.n	800a08a <__swsetup_r+0x1e>
 800a0b2:	4b24      	ldr	r3, [pc, #144]	; (800a144 <__swsetup_r+0xd8>)
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	bf08      	it	eq
 800a0b8:	68ec      	ldreq	r4, [r5, #12]
 800a0ba:	e7e6      	b.n	800a08a <__swsetup_r+0x1e>
 800a0bc:	0758      	lsls	r0, r3, #29
 800a0be:	d512      	bpl.n	800a0e6 <__swsetup_r+0x7a>
 800a0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0c2:	b141      	cbz	r1, 800a0d6 <__swsetup_r+0x6a>
 800a0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	d002      	beq.n	800a0d2 <__swsetup_r+0x66>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f7ff fb6f 	bl	80097b0 <_free_r>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	6063      	str	r3, [r4, #4]
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	f043 0308 	orr.w	r3, r3, #8
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	b94b      	cbnz	r3, 800a106 <__swsetup_r+0x9a>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0fc:	d003      	beq.n	800a106 <__swsetup_r+0x9a>
 800a0fe:	4621      	mov	r1, r4
 800a100:	4630      	mov	r0, r6
 800a102:	f000 fa07 	bl	800a514 <__smakebuf_r>
 800a106:	89a0      	ldrh	r0, [r4, #12]
 800a108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a10c:	f010 0301 	ands.w	r3, r0, #1
 800a110:	d00a      	beq.n	800a128 <__swsetup_r+0xbc>
 800a112:	2300      	movs	r3, #0
 800a114:	60a3      	str	r3, [r4, #8]
 800a116:	6963      	ldr	r3, [r4, #20]
 800a118:	425b      	negs	r3, r3
 800a11a:	61a3      	str	r3, [r4, #24]
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	b943      	cbnz	r3, 800a132 <__swsetup_r+0xc6>
 800a120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a124:	d1ba      	bne.n	800a09c <__swsetup_r+0x30>
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	0781      	lsls	r1, r0, #30
 800a12a:	bf58      	it	pl
 800a12c:	6963      	ldrpl	r3, [r4, #20]
 800a12e:	60a3      	str	r3, [r4, #8]
 800a130:	e7f4      	b.n	800a11c <__swsetup_r+0xb0>
 800a132:	2000      	movs	r0, #0
 800a134:	e7f7      	b.n	800a126 <__swsetup_r+0xba>
 800a136:	bf00      	nop
 800a138:	2000003c 	.word	0x2000003c
 800a13c:	0800ab9c 	.word	0x0800ab9c
 800a140:	0800abbc 	.word	0x0800abbc
 800a144:	0800ab7c 	.word	0x0800ab7c

0800a148 <abort>:
 800a148:	b508      	push	{r3, lr}
 800a14a:	2006      	movs	r0, #6
 800a14c:	f000 fa52 	bl	800a5f4 <raise>
 800a150:	2001      	movs	r0, #1
 800a152:	f7f7 ff11 	bl	8001f78 <_exit>
	...

0800a158 <__sflush_r>:
 800a158:	898a      	ldrh	r2, [r1, #12]
 800a15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15e:	4605      	mov	r5, r0
 800a160:	0710      	lsls	r0, r2, #28
 800a162:	460c      	mov	r4, r1
 800a164:	d458      	bmi.n	800a218 <__sflush_r+0xc0>
 800a166:	684b      	ldr	r3, [r1, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dc05      	bgt.n	800a178 <__sflush_r+0x20>
 800a16c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a16e:	2b00      	cmp	r3, #0
 800a170:	dc02      	bgt.n	800a178 <__sflush_r+0x20>
 800a172:	2000      	movs	r0, #0
 800a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a17a:	2e00      	cmp	r6, #0
 800a17c:	d0f9      	beq.n	800a172 <__sflush_r+0x1a>
 800a17e:	2300      	movs	r3, #0
 800a180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a184:	682f      	ldr	r7, [r5, #0]
 800a186:	602b      	str	r3, [r5, #0]
 800a188:	d032      	beq.n	800a1f0 <__sflush_r+0x98>
 800a18a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	075a      	lsls	r2, r3, #29
 800a190:	d505      	bpl.n	800a19e <__sflush_r+0x46>
 800a192:	6863      	ldr	r3, [r4, #4]
 800a194:	1ac0      	subs	r0, r0, r3
 800a196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a198:	b10b      	cbz	r3, 800a19e <__sflush_r+0x46>
 800a19a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a19c:	1ac0      	subs	r0, r0, r3
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1a4:	6a21      	ldr	r1, [r4, #32]
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b0      	blx	r6
 800a1aa:	1c43      	adds	r3, r0, #1
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	d106      	bne.n	800a1be <__sflush_r+0x66>
 800a1b0:	6829      	ldr	r1, [r5, #0]
 800a1b2:	291d      	cmp	r1, #29
 800a1b4:	d82c      	bhi.n	800a210 <__sflush_r+0xb8>
 800a1b6:	4a2a      	ldr	r2, [pc, #168]	; (800a260 <__sflush_r+0x108>)
 800a1b8:	40ca      	lsrs	r2, r1
 800a1ba:	07d6      	lsls	r6, r2, #31
 800a1bc:	d528      	bpl.n	800a210 <__sflush_r+0xb8>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	6062      	str	r2, [r4, #4]
 800a1c2:	04d9      	lsls	r1, r3, #19
 800a1c4:	6922      	ldr	r2, [r4, #16]
 800a1c6:	6022      	str	r2, [r4, #0]
 800a1c8:	d504      	bpl.n	800a1d4 <__sflush_r+0x7c>
 800a1ca:	1c42      	adds	r2, r0, #1
 800a1cc:	d101      	bne.n	800a1d2 <__sflush_r+0x7a>
 800a1ce:	682b      	ldr	r3, [r5, #0]
 800a1d0:	b903      	cbnz	r3, 800a1d4 <__sflush_r+0x7c>
 800a1d2:	6560      	str	r0, [r4, #84]	; 0x54
 800a1d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1d6:	602f      	str	r7, [r5, #0]
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	d0ca      	beq.n	800a172 <__sflush_r+0x1a>
 800a1dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1e0:	4299      	cmp	r1, r3
 800a1e2:	d002      	beq.n	800a1ea <__sflush_r+0x92>
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f7ff fae3 	bl	80097b0 <_free_r>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ee:	e7c1      	b.n	800a174 <__sflush_r+0x1c>
 800a1f0:	6a21      	ldr	r1, [r4, #32]
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b0      	blx	r6
 800a1f8:	1c41      	adds	r1, r0, #1
 800a1fa:	d1c7      	bne.n	800a18c <__sflush_r+0x34>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0c4      	beq.n	800a18c <__sflush_r+0x34>
 800a202:	2b1d      	cmp	r3, #29
 800a204:	d001      	beq.n	800a20a <__sflush_r+0xb2>
 800a206:	2b16      	cmp	r3, #22
 800a208:	d101      	bne.n	800a20e <__sflush_r+0xb6>
 800a20a:	602f      	str	r7, [r5, #0]
 800a20c:	e7b1      	b.n	800a172 <__sflush_r+0x1a>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a214:	81a3      	strh	r3, [r4, #12]
 800a216:	e7ad      	b.n	800a174 <__sflush_r+0x1c>
 800a218:	690f      	ldr	r7, [r1, #16]
 800a21a:	2f00      	cmp	r7, #0
 800a21c:	d0a9      	beq.n	800a172 <__sflush_r+0x1a>
 800a21e:	0793      	lsls	r3, r2, #30
 800a220:	680e      	ldr	r6, [r1, #0]
 800a222:	bf08      	it	eq
 800a224:	694b      	ldreq	r3, [r1, #20]
 800a226:	600f      	str	r7, [r1, #0]
 800a228:	bf18      	it	ne
 800a22a:	2300      	movne	r3, #0
 800a22c:	eba6 0807 	sub.w	r8, r6, r7
 800a230:	608b      	str	r3, [r1, #8]
 800a232:	f1b8 0f00 	cmp.w	r8, #0
 800a236:	dd9c      	ble.n	800a172 <__sflush_r+0x1a>
 800a238:	6a21      	ldr	r1, [r4, #32]
 800a23a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a23c:	4643      	mov	r3, r8
 800a23e:	463a      	mov	r2, r7
 800a240:	4628      	mov	r0, r5
 800a242:	47b0      	blx	r6
 800a244:	2800      	cmp	r0, #0
 800a246:	dc06      	bgt.n	800a256 <__sflush_r+0xfe>
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	e78e      	b.n	800a174 <__sflush_r+0x1c>
 800a256:	4407      	add	r7, r0
 800a258:	eba8 0800 	sub.w	r8, r8, r0
 800a25c:	e7e9      	b.n	800a232 <__sflush_r+0xda>
 800a25e:	bf00      	nop
 800a260:	20400001 	.word	0x20400001

0800a264 <_fflush_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	690b      	ldr	r3, [r1, #16]
 800a268:	4605      	mov	r5, r0
 800a26a:	460c      	mov	r4, r1
 800a26c:	b913      	cbnz	r3, 800a274 <_fflush_r+0x10>
 800a26e:	2500      	movs	r5, #0
 800a270:	4628      	mov	r0, r5
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	b118      	cbz	r0, 800a27e <_fflush_r+0x1a>
 800a276:	6983      	ldr	r3, [r0, #24]
 800a278:	b90b      	cbnz	r3, 800a27e <_fflush_r+0x1a>
 800a27a:	f000 f887 	bl	800a38c <__sinit>
 800a27e:	4b14      	ldr	r3, [pc, #80]	; (800a2d0 <_fflush_r+0x6c>)
 800a280:	429c      	cmp	r4, r3
 800a282:	d11b      	bne.n	800a2bc <_fflush_r+0x58>
 800a284:	686c      	ldr	r4, [r5, #4]
 800a286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0ef      	beq.n	800a26e <_fflush_r+0xa>
 800a28e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a290:	07d0      	lsls	r0, r2, #31
 800a292:	d404      	bmi.n	800a29e <_fflush_r+0x3a>
 800a294:	0599      	lsls	r1, r3, #22
 800a296:	d402      	bmi.n	800a29e <_fflush_r+0x3a>
 800a298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a29a:	f000 f915 	bl	800a4c8 <__retarget_lock_acquire_recursive>
 800a29e:	4628      	mov	r0, r5
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	f7ff ff59 	bl	800a158 <__sflush_r>
 800a2a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2a8:	07da      	lsls	r2, r3, #31
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	d4e0      	bmi.n	800a270 <_fflush_r+0xc>
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	059b      	lsls	r3, r3, #22
 800a2b2:	d4dd      	bmi.n	800a270 <_fflush_r+0xc>
 800a2b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2b6:	f000 f908 	bl	800a4ca <__retarget_lock_release_recursive>
 800a2ba:	e7d9      	b.n	800a270 <_fflush_r+0xc>
 800a2bc:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <_fflush_r+0x70>)
 800a2be:	429c      	cmp	r4, r3
 800a2c0:	d101      	bne.n	800a2c6 <_fflush_r+0x62>
 800a2c2:	68ac      	ldr	r4, [r5, #8]
 800a2c4:	e7df      	b.n	800a286 <_fflush_r+0x22>
 800a2c6:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <_fflush_r+0x74>)
 800a2c8:	429c      	cmp	r4, r3
 800a2ca:	bf08      	it	eq
 800a2cc:	68ec      	ldreq	r4, [r5, #12]
 800a2ce:	e7da      	b.n	800a286 <_fflush_r+0x22>
 800a2d0:	0800ab9c 	.word	0x0800ab9c
 800a2d4:	0800abbc 	.word	0x0800abbc
 800a2d8:	0800ab7c 	.word	0x0800ab7c

0800a2dc <std>:
 800a2dc:	2300      	movs	r3, #0
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2ea:	6083      	str	r3, [r0, #8]
 800a2ec:	8181      	strh	r1, [r0, #12]
 800a2ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a2f0:	81c2      	strh	r2, [r0, #14]
 800a2f2:	6183      	str	r3, [r0, #24]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	2208      	movs	r2, #8
 800a2f8:	305c      	adds	r0, #92	; 0x5c
 800a2fa:	f7fd fba5 	bl	8007a48 <memset>
 800a2fe:	4b05      	ldr	r3, [pc, #20]	; (800a314 <std+0x38>)
 800a300:	6263      	str	r3, [r4, #36]	; 0x24
 800a302:	4b05      	ldr	r3, [pc, #20]	; (800a318 <std+0x3c>)
 800a304:	62a3      	str	r3, [r4, #40]	; 0x28
 800a306:	4b05      	ldr	r3, [pc, #20]	; (800a31c <std+0x40>)
 800a308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a30a:	4b05      	ldr	r3, [pc, #20]	; (800a320 <std+0x44>)
 800a30c:	6224      	str	r4, [r4, #32]
 800a30e:	6323      	str	r3, [r4, #48]	; 0x30
 800a310:	bd10      	pop	{r4, pc}
 800a312:	bf00      	nop
 800a314:	0800a62d 	.word	0x0800a62d
 800a318:	0800a64f 	.word	0x0800a64f
 800a31c:	0800a687 	.word	0x0800a687
 800a320:	0800a6ab 	.word	0x0800a6ab

0800a324 <_cleanup_r>:
 800a324:	4901      	ldr	r1, [pc, #4]	; (800a32c <_cleanup_r+0x8>)
 800a326:	f000 b8af 	b.w	800a488 <_fwalk_reent>
 800a32a:	bf00      	nop
 800a32c:	0800a265 	.word	0x0800a265

0800a330 <__sfmoreglue>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	1e4a      	subs	r2, r1, #1
 800a334:	2568      	movs	r5, #104	; 0x68
 800a336:	4355      	muls	r5, r2
 800a338:	460e      	mov	r6, r1
 800a33a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a33e:	f7ff fa87 	bl	8009850 <_malloc_r>
 800a342:	4604      	mov	r4, r0
 800a344:	b140      	cbz	r0, 800a358 <__sfmoreglue+0x28>
 800a346:	2100      	movs	r1, #0
 800a348:	e9c0 1600 	strd	r1, r6, [r0]
 800a34c:	300c      	adds	r0, #12
 800a34e:	60a0      	str	r0, [r4, #8]
 800a350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a354:	f7fd fb78 	bl	8007a48 <memset>
 800a358:	4620      	mov	r0, r4
 800a35a:	bd70      	pop	{r4, r5, r6, pc}

0800a35c <__sfp_lock_acquire>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__sfp_lock_acquire+0x8>)
 800a35e:	f000 b8b3 	b.w	800a4c8 <__retarget_lock_acquire_recursive>
 800a362:	bf00      	nop
 800a364:	20000514 	.word	0x20000514

0800a368 <__sfp_lock_release>:
 800a368:	4801      	ldr	r0, [pc, #4]	; (800a370 <__sfp_lock_release+0x8>)
 800a36a:	f000 b8ae 	b.w	800a4ca <__retarget_lock_release_recursive>
 800a36e:	bf00      	nop
 800a370:	20000514 	.word	0x20000514

0800a374 <__sinit_lock_acquire>:
 800a374:	4801      	ldr	r0, [pc, #4]	; (800a37c <__sinit_lock_acquire+0x8>)
 800a376:	f000 b8a7 	b.w	800a4c8 <__retarget_lock_acquire_recursive>
 800a37a:	bf00      	nop
 800a37c:	2000050f 	.word	0x2000050f

0800a380 <__sinit_lock_release>:
 800a380:	4801      	ldr	r0, [pc, #4]	; (800a388 <__sinit_lock_release+0x8>)
 800a382:	f000 b8a2 	b.w	800a4ca <__retarget_lock_release_recursive>
 800a386:	bf00      	nop
 800a388:	2000050f 	.word	0x2000050f

0800a38c <__sinit>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	4604      	mov	r4, r0
 800a390:	f7ff fff0 	bl	800a374 <__sinit_lock_acquire>
 800a394:	69a3      	ldr	r3, [r4, #24]
 800a396:	b11b      	cbz	r3, 800a3a0 <__sinit+0x14>
 800a398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a39c:	f7ff bff0 	b.w	800a380 <__sinit_lock_release>
 800a3a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3a4:	6523      	str	r3, [r4, #80]	; 0x50
 800a3a6:	4b13      	ldr	r3, [pc, #76]	; (800a3f4 <__sinit+0x68>)
 800a3a8:	4a13      	ldr	r2, [pc, #76]	; (800a3f8 <__sinit+0x6c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3ae:	42a3      	cmp	r3, r4
 800a3b0:	bf04      	itt	eq
 800a3b2:	2301      	moveq	r3, #1
 800a3b4:	61a3      	streq	r3, [r4, #24]
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f000 f820 	bl	800a3fc <__sfp>
 800a3bc:	6060      	str	r0, [r4, #4]
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f000 f81c 	bl	800a3fc <__sfp>
 800a3c4:	60a0      	str	r0, [r4, #8]
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 f818 	bl	800a3fc <__sfp>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	60e0      	str	r0, [r4, #12]
 800a3d0:	2104      	movs	r1, #4
 800a3d2:	6860      	ldr	r0, [r4, #4]
 800a3d4:	f7ff ff82 	bl	800a2dc <std>
 800a3d8:	68a0      	ldr	r0, [r4, #8]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	2109      	movs	r1, #9
 800a3de:	f7ff ff7d 	bl	800a2dc <std>
 800a3e2:	68e0      	ldr	r0, [r4, #12]
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	2112      	movs	r1, #18
 800a3e8:	f7ff ff78 	bl	800a2dc <std>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	61a3      	str	r3, [r4, #24]
 800a3f0:	e7d2      	b.n	800a398 <__sinit+0xc>
 800a3f2:	bf00      	nop
 800a3f4:	0800a7f8 	.word	0x0800a7f8
 800a3f8:	0800a325 	.word	0x0800a325

0800a3fc <__sfp>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	4607      	mov	r7, r0
 800a400:	f7ff ffac 	bl	800a35c <__sfp_lock_acquire>
 800a404:	4b1e      	ldr	r3, [pc, #120]	; (800a480 <__sfp+0x84>)
 800a406:	681e      	ldr	r6, [r3, #0]
 800a408:	69b3      	ldr	r3, [r6, #24]
 800a40a:	b913      	cbnz	r3, 800a412 <__sfp+0x16>
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7ff ffbd 	bl	800a38c <__sinit>
 800a412:	3648      	adds	r6, #72	; 0x48
 800a414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a418:	3b01      	subs	r3, #1
 800a41a:	d503      	bpl.n	800a424 <__sfp+0x28>
 800a41c:	6833      	ldr	r3, [r6, #0]
 800a41e:	b30b      	cbz	r3, 800a464 <__sfp+0x68>
 800a420:	6836      	ldr	r6, [r6, #0]
 800a422:	e7f7      	b.n	800a414 <__sfp+0x18>
 800a424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a428:	b9d5      	cbnz	r5, 800a460 <__sfp+0x64>
 800a42a:	4b16      	ldr	r3, [pc, #88]	; (800a484 <__sfp+0x88>)
 800a42c:	60e3      	str	r3, [r4, #12]
 800a42e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a432:	6665      	str	r5, [r4, #100]	; 0x64
 800a434:	f000 f847 	bl	800a4c6 <__retarget_lock_init_recursive>
 800a438:	f7ff ff96 	bl	800a368 <__sfp_lock_release>
 800a43c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a444:	6025      	str	r5, [r4, #0]
 800a446:	61a5      	str	r5, [r4, #24]
 800a448:	2208      	movs	r2, #8
 800a44a:	4629      	mov	r1, r5
 800a44c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a450:	f7fd fafa 	bl	8007a48 <memset>
 800a454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a45c:	4620      	mov	r0, r4
 800a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a460:	3468      	adds	r4, #104	; 0x68
 800a462:	e7d9      	b.n	800a418 <__sfp+0x1c>
 800a464:	2104      	movs	r1, #4
 800a466:	4638      	mov	r0, r7
 800a468:	f7ff ff62 	bl	800a330 <__sfmoreglue>
 800a46c:	4604      	mov	r4, r0
 800a46e:	6030      	str	r0, [r6, #0]
 800a470:	2800      	cmp	r0, #0
 800a472:	d1d5      	bne.n	800a420 <__sfp+0x24>
 800a474:	f7ff ff78 	bl	800a368 <__sfp_lock_release>
 800a478:	230c      	movs	r3, #12
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	e7ee      	b.n	800a45c <__sfp+0x60>
 800a47e:	bf00      	nop
 800a480:	0800a7f8 	.word	0x0800a7f8
 800a484:	ffff0001 	.word	0xffff0001

0800a488 <_fwalk_reent>:
 800a488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a48c:	4606      	mov	r6, r0
 800a48e:	4688      	mov	r8, r1
 800a490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a494:	2700      	movs	r7, #0
 800a496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a49a:	f1b9 0901 	subs.w	r9, r9, #1
 800a49e:	d505      	bpl.n	800a4ac <_fwalk_reent+0x24>
 800a4a0:	6824      	ldr	r4, [r4, #0]
 800a4a2:	2c00      	cmp	r4, #0
 800a4a4:	d1f7      	bne.n	800a496 <_fwalk_reent+0xe>
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ac:	89ab      	ldrh	r3, [r5, #12]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d907      	bls.n	800a4c2 <_fwalk_reent+0x3a>
 800a4b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	d003      	beq.n	800a4c2 <_fwalk_reent+0x3a>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4630      	mov	r0, r6
 800a4be:	47c0      	blx	r8
 800a4c0:	4307      	orrs	r7, r0
 800a4c2:	3568      	adds	r5, #104	; 0x68
 800a4c4:	e7e9      	b.n	800a49a <_fwalk_reent+0x12>

0800a4c6 <__retarget_lock_init_recursive>:
 800a4c6:	4770      	bx	lr

0800a4c8 <__retarget_lock_acquire_recursive>:
 800a4c8:	4770      	bx	lr

0800a4ca <__retarget_lock_release_recursive>:
 800a4ca:	4770      	bx	lr

0800a4cc <__swhatbuf_r>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	460e      	mov	r6, r1
 800a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	b096      	sub	sp, #88	; 0x58
 800a4d8:	4614      	mov	r4, r2
 800a4da:	461d      	mov	r5, r3
 800a4dc:	da07      	bge.n	800a4ee <__swhatbuf_r+0x22>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	602b      	str	r3, [r5, #0]
 800a4e2:	89b3      	ldrh	r3, [r6, #12]
 800a4e4:	061a      	lsls	r2, r3, #24
 800a4e6:	d410      	bmi.n	800a50a <__swhatbuf_r+0x3e>
 800a4e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4ec:	e00e      	b.n	800a50c <__swhatbuf_r+0x40>
 800a4ee:	466a      	mov	r2, sp
 800a4f0:	f000 f902 	bl	800a6f8 <_fstat_r>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	dbf2      	blt.n	800a4de <__swhatbuf_r+0x12>
 800a4f8:	9a01      	ldr	r2, [sp, #4]
 800a4fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a502:	425a      	negs	r2, r3
 800a504:	415a      	adcs	r2, r3
 800a506:	602a      	str	r2, [r5, #0]
 800a508:	e7ee      	b.n	800a4e8 <__swhatbuf_r+0x1c>
 800a50a:	2340      	movs	r3, #64	; 0x40
 800a50c:	2000      	movs	r0, #0
 800a50e:	6023      	str	r3, [r4, #0]
 800a510:	b016      	add	sp, #88	; 0x58
 800a512:	bd70      	pop	{r4, r5, r6, pc}

0800a514 <__smakebuf_r>:
 800a514:	898b      	ldrh	r3, [r1, #12]
 800a516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a518:	079d      	lsls	r5, r3, #30
 800a51a:	4606      	mov	r6, r0
 800a51c:	460c      	mov	r4, r1
 800a51e:	d507      	bpl.n	800a530 <__smakebuf_r+0x1c>
 800a520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	6123      	str	r3, [r4, #16]
 800a528:	2301      	movs	r3, #1
 800a52a:	6163      	str	r3, [r4, #20]
 800a52c:	b002      	add	sp, #8
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	ab01      	add	r3, sp, #4
 800a532:	466a      	mov	r2, sp
 800a534:	f7ff ffca 	bl	800a4cc <__swhatbuf_r>
 800a538:	9900      	ldr	r1, [sp, #0]
 800a53a:	4605      	mov	r5, r0
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7ff f987 	bl	8009850 <_malloc_r>
 800a542:	b948      	cbnz	r0, 800a558 <__smakebuf_r+0x44>
 800a544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a548:	059a      	lsls	r2, r3, #22
 800a54a:	d4ef      	bmi.n	800a52c <__smakebuf_r+0x18>
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	f043 0302 	orr.w	r3, r3, #2
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	e7e3      	b.n	800a520 <__smakebuf_r+0xc>
 800a558:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <__smakebuf_r+0x7c>)
 800a55a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	6020      	str	r0, [r4, #0]
 800a560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	9b00      	ldr	r3, [sp, #0]
 800a568:	6163      	str	r3, [r4, #20]
 800a56a:	9b01      	ldr	r3, [sp, #4]
 800a56c:	6120      	str	r0, [r4, #16]
 800a56e:	b15b      	cbz	r3, 800a588 <__smakebuf_r+0x74>
 800a570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a574:	4630      	mov	r0, r6
 800a576:	f000 f8d1 	bl	800a71c <_isatty_r>
 800a57a:	b128      	cbz	r0, 800a588 <__smakebuf_r+0x74>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f023 0303 	bic.w	r3, r3, #3
 800a582:	f043 0301 	orr.w	r3, r3, #1
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	89a0      	ldrh	r0, [r4, #12]
 800a58a:	4305      	orrs	r5, r0
 800a58c:	81a5      	strh	r5, [r4, #12]
 800a58e:	e7cd      	b.n	800a52c <__smakebuf_r+0x18>
 800a590:	0800a325 	.word	0x0800a325

0800a594 <_malloc_usable_size_r>:
 800a594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a598:	1f18      	subs	r0, r3, #4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bfbc      	itt	lt
 800a59e:	580b      	ldrlt	r3, [r1, r0]
 800a5a0:	18c0      	addlt	r0, r0, r3
 800a5a2:	4770      	bx	lr

0800a5a4 <_raise_r>:
 800a5a4:	291f      	cmp	r1, #31
 800a5a6:	b538      	push	{r3, r4, r5, lr}
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	d904      	bls.n	800a5b8 <_raise_r+0x14>
 800a5ae:	2316      	movs	r3, #22
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5ba:	b112      	cbz	r2, 800a5c2 <_raise_r+0x1e>
 800a5bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5c0:	b94b      	cbnz	r3, 800a5d6 <_raise_r+0x32>
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f000 f830 	bl	800a628 <_getpid_r>
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d2:	f000 b817 	b.w	800a604 <_kill_r>
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d00a      	beq.n	800a5f0 <_raise_r+0x4c>
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	d103      	bne.n	800a5e6 <_raise_r+0x42>
 800a5de:	2316      	movs	r3, #22
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	e7e7      	b.n	800a5b6 <_raise_r+0x12>
 800a5e6:	2400      	movs	r4, #0
 800a5e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	4798      	blx	r3
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	e7e0      	b.n	800a5b6 <_raise_r+0x12>

0800a5f4 <raise>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <raise+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f7ff bfd3 	b.w	800a5a4 <_raise_r>
 800a5fe:	bf00      	nop
 800a600:	2000003c 	.word	0x2000003c

0800a604 <_kill_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d07      	ldr	r5, [pc, #28]	; (800a624 <_kill_r+0x20>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	f7f7 fca1 	bl	8001f58 <_kill>
 800a616:	1c43      	adds	r3, r0, #1
 800a618:	d102      	bne.n	800a620 <_kill_r+0x1c>
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	b103      	cbz	r3, 800a620 <_kill_r+0x1c>
 800a61e:	6023      	str	r3, [r4, #0]
 800a620:	bd38      	pop	{r3, r4, r5, pc}
 800a622:	bf00      	nop
 800a624:	20000508 	.word	0x20000508

0800a628 <_getpid_r>:
 800a628:	f7f7 bc8e 	b.w	8001f48 <_getpid>

0800a62c <__sread>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	460c      	mov	r4, r1
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	f000 f894 	bl	800a760 <_read_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	bfab      	itete	ge
 800a63c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a63e:	89a3      	ldrhlt	r3, [r4, #12]
 800a640:	181b      	addge	r3, r3, r0
 800a642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a646:	bfac      	ite	ge
 800a648:	6563      	strge	r3, [r4, #84]	; 0x54
 800a64a:	81a3      	strhlt	r3, [r4, #12]
 800a64c:	bd10      	pop	{r4, pc}

0800a64e <__swrite>:
 800a64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a652:	461f      	mov	r7, r3
 800a654:	898b      	ldrh	r3, [r1, #12]
 800a656:	05db      	lsls	r3, r3, #23
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	4616      	mov	r6, r2
 800a65e:	d505      	bpl.n	800a66c <__swrite+0x1e>
 800a660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a664:	2302      	movs	r3, #2
 800a666:	2200      	movs	r2, #0
 800a668:	f000 f868 	bl	800a73c <_lseek_r>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a682:	f000 b817 	b.w	800a6b4 <_write_r>

0800a686 <__sseek>:
 800a686:	b510      	push	{r4, lr}
 800a688:	460c      	mov	r4, r1
 800a68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68e:	f000 f855 	bl	800a73c <_lseek_r>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	bf15      	itete	ne
 800a698:	6560      	strne	r0, [r4, #84]	; 0x54
 800a69a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a69e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6a2:	81a3      	strheq	r3, [r4, #12]
 800a6a4:	bf18      	it	ne
 800a6a6:	81a3      	strhne	r3, [r4, #12]
 800a6a8:	bd10      	pop	{r4, pc}

0800a6aa <__sclose>:
 800a6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ae:	f000 b813 	b.w	800a6d8 <_close_r>
	...

0800a6b4 <_write_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	; (800a6d4 <_write_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f7 fc7f 	bl	8001fc6 <_write>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_write_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_write_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	20000508 	.word	0x20000508

0800a6d8 <_close_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d06      	ldr	r5, [pc, #24]	; (800a6f4 <_close_r+0x1c>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f7 fc8b 	bl	8001ffe <_close>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_close_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_close_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	20000508 	.word	0x20000508

0800a6f8 <_fstat_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	; (800a718 <_fstat_r+0x20>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	4611      	mov	r1, r2
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	f7f7 fc86 	bl	8002016 <_fstat>
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	d102      	bne.n	800a714 <_fstat_r+0x1c>
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	b103      	cbz	r3, 800a714 <_fstat_r+0x1c>
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	bf00      	nop
 800a718:	20000508 	.word	0x20000508

0800a71c <_isatty_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d06      	ldr	r5, [pc, #24]	; (800a738 <_isatty_r+0x1c>)
 800a720:	2300      	movs	r3, #0
 800a722:	4604      	mov	r4, r0
 800a724:	4608      	mov	r0, r1
 800a726:	602b      	str	r3, [r5, #0]
 800a728:	f7f7 fc85 	bl	8002036 <_isatty>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <_isatty_r+0x1a>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	b103      	cbz	r3, 800a736 <_isatty_r+0x1a>
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	20000508 	.word	0x20000508

0800a73c <_lseek_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d07      	ldr	r5, [pc, #28]	; (800a75c <_lseek_r+0x20>)
 800a740:	4604      	mov	r4, r0
 800a742:	4608      	mov	r0, r1
 800a744:	4611      	mov	r1, r2
 800a746:	2200      	movs	r2, #0
 800a748:	602a      	str	r2, [r5, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	f7f7 fc7e 	bl	800204c <_lseek>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_lseek_r+0x1e>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_lseek_r+0x1e>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	20000508 	.word	0x20000508

0800a760 <_read_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d07      	ldr	r5, [pc, #28]	; (800a780 <_read_r+0x20>)
 800a764:	4604      	mov	r4, r0
 800a766:	4608      	mov	r0, r1
 800a768:	4611      	mov	r1, r2
 800a76a:	2200      	movs	r2, #0
 800a76c:	602a      	str	r2, [r5, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	f7f7 fc0c 	bl	8001f8c <_read>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_read_r+0x1e>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_read_r+0x1e>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	20000508 	.word	0x20000508

0800a784 <_init>:
 800a784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a786:	bf00      	nop
 800a788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78a:	bc08      	pop	{r3}
 800a78c:	469e      	mov	lr, r3
 800a78e:	4770      	bx	lr

0800a790 <_fini>:
 800a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a792:	bf00      	nop
 800a794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a796:	bc08      	pop	{r3}
 800a798:	469e      	mov	lr, r3
 800a79a:	4770      	bx	lr
