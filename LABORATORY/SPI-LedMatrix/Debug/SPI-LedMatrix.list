
SPI-LedMatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004014  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080041b0  080041b0  000141b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004210  08004210  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004218  08004218  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000007c  0800429c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  0800429c  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1b2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c05  00000000  00000000  0002f25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00030e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00031bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161d5  00000000  00000000  00032880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9df  00000000  00000000  00048a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e78a  00000000  00000000  00057434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5bbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cdc  00000000  00000000  000e5c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004194 	.word	0x08004194

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08004194 	.word	0x08004194

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b96e 	b.w	8000de4 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	468c      	mov	ip, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f040 8083 	bne.w	8000c36 <__udivmoddi4+0x116>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4617      	mov	r7, r2
 8000b34:	d947      	bls.n	8000bc6 <__udivmoddi4+0xa6>
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	b142      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	f1c2 0020 	rsb	r0, r2, #32
 8000b40:	fa24 f000 	lsr.w	r0, r4, r0
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4097      	lsls	r7, r2
 8000b48:	ea40 0c01 	orr.w	ip, r0, r1
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbbc f6f8 	udiv	r6, ip, r8
 8000b58:	fa1f fe87 	uxth.w	lr, r7
 8000b5c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b64:	fb06 f10e 	mul.w	r1, r6, lr
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 8119 	bcs.w	8000da8 <__udivmoddi4+0x288>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8116 	bls.w	8000da8 <__udivmoddi4+0x288>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8105 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f240 8102 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	443c      	add	r4, r7
 8000bac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb0:	eba4 040e 	sub.w	r4, r4, lr
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	b902      	cbnz	r2, 8000bca <__udivmoddi4+0xaa>
 8000bc8:	deff      	udf	#255	; 0xff
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d150      	bne.n	8000c74 <__udivmoddi4+0x154>
 8000bd2:	1bcb      	subs	r3, r1, r7
 8000bd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd8:	fa1f f887 	uxth.w	r8, r7
 8000bdc:	2601      	movs	r6, #1
 8000bde:	fbb3 fcfe 	udiv	ip, r3, lr
 8000be2:	0c21      	lsrs	r1, r4, #16
 8000be4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bec:	fb08 f30c 	mul.w	r3, r8, ip
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d907      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000bf4:	1879      	adds	r1, r7, r1
 8000bf6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0xe2>
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	f200 80e9 	bhi.w	8000dd4 <__udivmoddi4+0x2b4>
 8000c02:	4684      	mov	ip, r0
 8000c04:	1ac9      	subs	r1, r1, r3
 8000c06:	b2a3      	uxth	r3, r4
 8000c08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c10:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c14:	fb08 f800 	mul.w	r8, r8, r0
 8000c18:	45a0      	cmp	r8, r4
 8000c1a:	d907      	bls.n	8000c2c <__udivmoddi4+0x10c>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x10a>
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	f200 80d9 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	eba4 0408 	sub.w	r4, r4, r8
 8000c30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c34:	e7bf      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x12e>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	f000 80b1 	beq.w	8000da2 <__udivmoddi4+0x282>
 8000c40:	2600      	movs	r6, #0
 8000c42:	e9c5 0100 	strd	r0, r1, [r5]
 8000c46:	4630      	mov	r0, r6
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	fab3 f683 	clz	r6, r3
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d14a      	bne.n	8000cec <__udivmoddi4+0x1cc>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0x140>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80b8 	bhi.w	8000dd0 <__udivmoddi4+0x2b0>
 8000c60:	1a84      	subs	r4, r0, r2
 8000c62:	eb61 0103 	sbc.w	r1, r1, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	468c      	mov	ip, r1
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d0a8      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000c6e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c72:	e7a5      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c74:	f1c2 0320 	rsb	r3, r2, #32
 8000c78:	fa20 f603 	lsr.w	r6, r0, r3
 8000c7c:	4097      	lsls	r7, r2
 8000c7e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c82:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c86:	40d9      	lsrs	r1, r3
 8000c88:	4330      	orrs	r0, r6
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f108 	mul.w	r1, r6, r8
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x19c>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cae:	f080 808d 	bcs.w	8000dcc <__udivmoddi4+0x2ac>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 808a 	bls.w	8000dcc <__udivmoddi4+0x2ac>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	443b      	add	r3, r7
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b281      	uxth	r1, r0
 8000cc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb00 f308 	mul.w	r3, r0, r8
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x1c4>
 8000cd4:	1879      	adds	r1, r7, r1
 8000cd6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cda:	d273      	bcs.n	8000dc4 <__udivmoddi4+0x2a4>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d971      	bls.n	8000dc4 <__udivmoddi4+0x2a4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4439      	add	r1, r7
 8000ce4:	1acb      	subs	r3, r1, r3
 8000ce6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cea:	e778      	b.n	8000bde <__udivmoddi4+0xbe>
 8000cec:	f1c6 0c20 	rsb	ip, r6, #32
 8000cf0:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000d02:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d06:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d0a:	431f      	orrs	r7, r3
 8000d0c:	0c3b      	lsrs	r3, r7, #16
 8000d0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d12:	fa1f f884 	uxth.w	r8, r4
 8000d16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d1a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d22:	458a      	cmp	sl, r1
 8000d24:	fa02 f206 	lsl.w	r2, r2, r6
 8000d28:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x220>
 8000d2e:	1861      	adds	r1, r4, r1
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	d248      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d36:	458a      	cmp	sl, r1
 8000d38:	d946      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d3a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3e:	4421      	add	r1, r4
 8000d40:	eba1 010a 	sub.w	r1, r1, sl
 8000d44:	b2bf      	uxth	r7, r7
 8000d46:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d4a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d52:	fb00 f808 	mul.w	r8, r0, r8
 8000d56:	45b8      	cmp	r8, r7
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x24a>
 8000d5a:	19e7      	adds	r7, r4, r7
 8000d5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d60:	d22e      	bcs.n	8000dc0 <__udivmoddi4+0x2a0>
 8000d62:	45b8      	cmp	r8, r7
 8000d64:	d92c      	bls.n	8000dc0 <__udivmoddi4+0x2a0>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4427      	add	r7, r4
 8000d6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6e:	eba7 0708 	sub.w	r7, r7, r8
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	454f      	cmp	r7, r9
 8000d78:	46c6      	mov	lr, r8
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	d31a      	bcc.n	8000db4 <__udivmoddi4+0x294>
 8000d7e:	d017      	beq.n	8000db0 <__udivmoddi4+0x290>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x27a>
 8000d82:	ebb3 020e 	subs.w	r2, r3, lr
 8000d86:	eb67 0701 	sbc.w	r7, r7, r1
 8000d8a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8e:	40f2      	lsrs	r2, r6
 8000d90:	ea4c 0202 	orr.w	r2, ip, r2
 8000d94:	40f7      	lsrs	r7, r6
 8000d96:	e9c5 2700 	strd	r2, r7, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	462e      	mov	r6, r5
 8000da4:	4628      	mov	r0, r5
 8000da6:	e70b      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000da8:	4606      	mov	r6, r0
 8000daa:	e6e9      	b.n	8000b80 <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fd      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db0:	4543      	cmp	r3, r8
 8000db2:	d2e5      	bcs.n	8000d80 <__udivmoddi4+0x260>
 8000db4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7df      	b.n	8000d80 <__udivmoddi4+0x260>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e7d2      	b.n	8000d6a <__udivmoddi4+0x24a>
 8000dc4:	4660      	mov	r0, ip
 8000dc6:	e78d      	b.n	8000ce4 <__udivmoddi4+0x1c4>
 8000dc8:	4681      	mov	r9, r0
 8000dca:	e7b9      	b.n	8000d40 <__udivmoddi4+0x220>
 8000dcc:	4666      	mov	r6, ip
 8000dce:	e775      	b.n	8000cbc <__udivmoddi4+0x19c>
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	e74a      	b.n	8000c6a <__udivmoddi4+0x14a>
 8000dd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd8:	4439      	add	r1, r7
 8000dda:	e713      	b.n	8000c04 <__udivmoddi4+0xe4>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	e724      	b.n	8000c2c <__udivmoddi4+0x10c>
 8000de2:	bf00      	nop

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <encodeLetterToShow>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM11_Init(void);
/* USER CODE BEGIN PFP */
static void encodeLetterToShow(uint8_t x[5]) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 5; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	e023      	b.n	8000e3e <encodeLetterToShow+0x56>
		letterToShow[i][0] = x[i];
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	7819      	ldrb	r1, [r3, #0]
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <encodeLetterToShow+0x70>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		letterToShow[i][1] = (uint8_t) pow(2, i);
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f7ff fb38 	bl	800047c <__aeabi_i2d>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	ec43 2b11 	vmov	d1, r2, r3
 8000e14:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8000e50 <encodeLetterToShow+0x68>
 8000e18:	f002 fa08 	bl	800322c <pow>
 8000e1c:	ec53 2b10 	vmov	r2, r3, d0
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fe44 	bl	8000ab0 <__aeabi_d2uiz>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b2d9      	uxtb	r1, r3
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <encodeLetterToShow+0x70>)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	460a      	mov	r2, r1
 8000e36:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 5; i++) {
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	ddd8      	ble.n	8000df6 <encodeLetterToShow+0xe>
	}
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	00000000 	.word	0x00000000
 8000e54:	40000000 	.word	0x40000000
 8000e58:	20000180 	.word	0x20000180

08000e5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e60:	f000 fb00 	bl	8001464 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e64:	f000 f814 	bl	8000e90 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e68:	f000 f902 	bl	8001070 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e6c:	f000 f8d6 	bl	800101c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000e70:	f000 f87a 	bl	8000f68 <MX_SPI1_Init>
	MX_TIM11_Init();
 8000e74:	f000 f8ae 	bl	8000fd4 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	encodeLetterToShow(letter_S);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <main+0x2c>)
 8000e7a:	f7ff ffb5 	bl	8000de8 <encodeLetterToShow>
	HAL_TIM_Base_Start_IT(&htim11);
 8000e7e:	4803      	ldr	r0, [pc, #12]	; (8000e8c <main+0x30>)
 8000e80:	f001 fd66 	bl	8002950 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000e84:	e7fe      	b.n	8000e84 <main+0x28>
 8000e86:	bf00      	nop
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	2000009c 	.word	0x2000009c

08000e90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b094      	sub	sp, #80	; 0x50
 8000e94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e96:	f107 0320 	add.w	r3, r7, #32
 8000e9a:	2230      	movs	r2, #48	; 0x30
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 f9bc 	bl	800321c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <SystemClock_Config+0xd0>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a28      	ldr	r2, [pc, #160]	; (8000f60 <SystemClock_Config+0xd0>)
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <SystemClock_Config+0xd0>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <SystemClock_Config+0xd4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <SystemClock_Config+0xd4>)
 8000ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <SystemClock_Config+0xd4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000f04:	2310      	movs	r3, #16
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000f08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f0c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f12:	2307      	movs	r3, #7
 8000f14:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fdc4 	bl	8001aa8 <HAL_RCC_OscConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x9a>
		Error_Handler();
 8000f26:	f000 f947 	bl	80011b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 f826 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xc6>
		Error_Handler();
 8000f52:	f000 f931 	bl	80011b8 <Error_Handler>
	}
}
 8000f56:	bf00      	nop
 8000f58:	3750      	adds	r7, #80	; 0x50
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40007000 	.word	0x40007000

08000f68 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <MX_SPI1_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f78:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f98:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_SPI1_Init+0x64>)
 8000fba:	f001 f9e9 	bl	8002390 <HAL_SPI_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000fc4:	f000 f8f8 	bl	80011b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200000e4 	.word	0x200000e4
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_TIM11_Init+0x40>)
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <MX_TIM11_Init+0x44>)
 8000fdc:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 330 - 1;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_TIM11_Init+0x40>)
 8000fe0:	f240 1249 	movw	r2, #329	; 0x149
 8000fe4:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_TIM11_Init+0x40>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 1000 - 1;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_TIM11_Init+0x40>)
 8000fee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff2:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_TIM11_Init+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_TIM11_Init+0x40>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_TIM11_Init+0x40>)
 8001002:	f001 fc55 	bl	80028b0 <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM11_Init+0x3c>
		Error_Handler();
 800100c:	f000 f8d4 	bl	80011b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000009c 	.word	0x2000009c
 8001018:	40014800 	.word	0x40014800

0800101c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_USART2_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001054:	f001 fea2 	bl	8002d9c <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800105e:	f000 f8ab 	bl	80011b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000013c 	.word	0x2000013c
 800106c:	40004400 	.word	0x40004400

08001070 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <MX_GPIO_Init+0xd0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <MX_GPIO_Init+0xd0>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_GPIO_Init+0xd0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	4812      	ldr	r0, [pc, #72]	; (8001144 <MX_GPIO_Init+0xd4>)
 80010fc:	f000 fcba 	bl	8001a74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001106:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800110a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_GPIO_Init+0xd8>)
 8001118:	f000 fb28 	bl	800176c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800111c:	2340      	movs	r3, #64	; 0x40
 800111e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_GPIO_Init+0xd4>)
 8001134:	f000 fb1a 	bl	800176c <HAL_GPIO_Init>

}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800

0800114c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit(&hspi1, letterToShow[nCol], 2, 100);
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800115c:	1899      	adds	r1, r3, r2
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	2202      	movs	r2, #2
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001164:	f001 f99d 	bl	80024a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	4810      	ldr	r0, [pc, #64]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800116e:	f000 fc81 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001178:	f000 fc7c 	bl	8001a74 <HAL_GPIO_WritePin>
	nCol = (nCol + 1) % 5;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001184:	fb83 1302 	smull	r1, r3, r3, r2
 8001188:	1059      	asrs	r1, r3, #1
 800118a:	17d3      	asrs	r3, r2, #31
 800118c:	1ac9      	subs	r1, r1, r3
 800118e:	460b      	mov	r3, r1
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	1ad1      	subs	r1, r2, r3
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800119a:	701a      	strb	r2, [r3, #0]
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000098 	.word	0x20000098
 80011a8:	20000180 	.word	0x20000180
 80011ac:	200000e4 	.word	0x200000e4
 80011b0:	40020400 	.word	0x40020400
 80011b4:	66666667 	.word	0x66666667

080011b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>
	...

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_MspInit+0x4c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_MspInit+0x4c>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001202:	2006      	movs	r0, #6
 8001204:	f000 fa70 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800

08001214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_SPI_MspInit+0x84>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12b      	bne.n	800128e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_SPI_MspInit+0x88>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001240:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <HAL_SPI_MspInit+0x88>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800126e:	23e0      	movs	r3, #224	; 0xe0
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800127e:	2305      	movs	r3, #5
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_SPI_MspInit+0x8c>)
 800128a:	f000 fa6f 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40013000 	.word	0x40013000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_TIM_Base_MspInit+0x48>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d115      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_TIM_Base_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_TIM_Base_MspInit+0x4c>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_TIM_Base_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2101      	movs	r1, #1
 80012d6:	201a      	movs	r0, #26
 80012d8:	f000 fa11 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012dc:	201a      	movs	r0, #26
 80012de:	f000 fa2a 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40014800 	.word	0x40014800
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_UART_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_UART_MspInit+0x88>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_UART_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_UART_MspInit+0x88>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_UART_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800134e:	230c      	movs	r3, #12
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_UART_MspInit+0x8c>)
 800136a:	f000 f9ff 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40004400 	.word	0x40004400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 f89a 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80013de:	f001 fb19 	bl	8002a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000009c 	.word	0x2000009c

080013ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopFillZerobss+0x26>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800143a:	f7ff ffd7 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f001 fec9 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff fd0b 	bl	8000e5c <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001448:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001454:	08004220 	.word	0x08004220
  ldr r2, =_sbss
 8001458:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800145c:	20000190 	.word	0x20000190

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f92b 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fe94 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f943 	bl	8001752 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f90b 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000010 	.word	0x20000010
 8001504:	2000000c 	.word	0x2000000c

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000010 	.word	0x20000010
 800152c:	2000018c 	.word	0x2000018c

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000018c 	.word	0x2000018c

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff29 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff3e 	bl	8001590 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff31 	bl	80015ac <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffa2 	bl	80016a4 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e159      	b.n	8001a3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8148 	bne.w	8001a36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d005      	beq.n	80017be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d130      	bne.n	8001820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b03      	cmp	r3, #3
 800182a:	d017      	beq.n	800185c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80a2 	beq.w	8001a36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_GPIO_Init+0x2e8>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a56      	ldr	r2, [pc, #344]	; (8001a54 <HAL_GPIO_Init+0x2e8>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <HAL_GPIO_Init+0x2e8>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190e:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_GPIO_Init+0x2ec>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a49      	ldr	r2, [pc, #292]	; (8001a5c <HAL_GPIO_Init+0x2f0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_GPIO_Init+0x202>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <HAL_GPIO_Init+0x2f4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x1fe>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a47      	ldr	r2, [pc, #284]	; (8001a64 <HAL_GPIO_Init+0x2f8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x1fa>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a46      	ldr	r2, [pc, #280]	; (8001a68 <HAL_GPIO_Init+0x2fc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x1f6>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a45      	ldr	r2, [pc, #276]	; (8001a6c <HAL_GPIO_Init+0x300>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x1f2>
 800195a:	2304      	movs	r3, #4
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x204>
 800195e:	2307      	movs	r3, #7
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x204>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x204>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x204>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x204>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001980:	4935      	ldr	r1, [pc, #212]	; (8001a58 <HAL_GPIO_Init+0x2ec>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800198e:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b2:	4a2f      	ldr	r2, [pc, #188]	; (8001a70 <HAL_GPIO_Init+0x304>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_GPIO_Init+0x304>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019dc:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <HAL_GPIO_Init+0x304>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e2:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_GPIO_Init+0x304>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a06:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f aea2 	bls.w	8001788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40013c00 	.word	0x40013c00

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e264      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d075      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ac6:	4ba3      	ldr	r3, [pc, #652]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d00c      	beq.n	8001aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4ba0      	ldr	r3, [pc, #640]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d112      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ade:	4b9d      	ldr	r3, [pc, #628]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	4b99      	ldr	r3, [pc, #612]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d05b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x108>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d157      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e23f      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d106      	bne.n	8001b1c <HAL_RCC_OscConfig+0x74>
 8001b0e:	4b91      	ldr	r3, [pc, #580]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a90      	ldr	r2, [pc, #576]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x98>
 8001b26:	4b8b      	ldr	r3, [pc, #556]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a8a      	ldr	r2, [pc, #552]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a87      	ldr	r2, [pc, #540]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b40:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a83      	ldr	r2, [pc, #524]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a80      	ldr	r2, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fce6 	bl	8001530 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fce2 	bl	8001530 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e204      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xc0>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fcd2 	bl	8001530 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fcce 	bl	8001530 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1f0      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0xe8>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bbe:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1c4      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4952      	ldr	r1, [pc, #328]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b4f      	ldr	r3, [pc, #316]	; (8001d58 <HAL_RCC_OscConfig+0x2b0>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fc87 	bl	8001530 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fc83 	bl	8001530 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1a5      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4940      	ldr	r1, [pc, #256]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCC_OscConfig+0x2b0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fc66 	bl	8001530 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fc62 	bl	8001530 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e184      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d030      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <HAL_RCC_OscConfig+0x2b4>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fc46 	bl	8001530 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fc42 	bl	8001530 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e164      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x200>
 8001cc6:	e015      	b.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_RCC_OscConfig+0x2b4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fc2f 	bl	8001530 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fc2b 	bl	8001530 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e14d      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a0 	beq.w	8001e42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x2b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d121      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_RCC_OscConfig+0x2b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_RCC_OscConfig+0x2b8>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fbf1 	bl	8001530 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	e011      	b.n	8001d76 <HAL_RCC_OscConfig+0x2ce>
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	42470000 	.word	0x42470000
 8001d5c:	42470e80 	.word	0x42470e80
 8001d60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7ff fbe4 	bl	8001530 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e106      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b85      	ldr	r3, [pc, #532]	; (8001f8c <HAL_RCC_OscConfig+0x4e4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2f0>
 8001d8a:	4b81      	ldr	r3, [pc, #516]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	4a80      	ldr	r2, [pc, #512]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x32a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x312>
 8001da0:	4b7b      	ldr	r3, [pc, #492]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a7a      	ldr	r2, [pc, #488]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	4b78      	ldr	r3, [pc, #480]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a77      	ldr	r2, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x32a>
 8001dba:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a74      	ldr	r2, [pc, #464]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a71      	ldr	r2, [pc, #452]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7ff fba9 	bl	8001530 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fba5 	bl	8001530 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0c5      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x33a>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fb93 	bl	8001530 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fb8f 	bl	8001530 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0af      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a55      	ldr	r2, [pc, #340]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 809b 	beq.w	8001f82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e4c:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d05c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d141      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCC_OscConfig+0x4ec>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fb63 	bl	8001530 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff fb5f 	bl	8001530 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e081      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	019b      	lsls	r3, r3, #6
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	061b      	lsls	r3, r3, #24
 8001eb0:	4937      	ldr	r1, [pc, #220]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_RCC_OscConfig+0x4ec>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fb38 	bl	8001530 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff fb34 	bl	8001530 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e056      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x41c>
 8001ee2:	e04e      	b.n	8001f82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_RCC_OscConfig+0x4ec>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fb21 	bl	8001530 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff fb1d 	bl	8001530 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e03f      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x44a>
 8001f10:	e037      	b.n	8001f82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e032      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_RCC_OscConfig+0x4e8>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d028      	beq.n	8001f7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d121      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d11a      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f4e:	4013      	ands	r3, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d111      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	3b01      	subs	r3, #1
 8001f68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	40023800 	.word	0x40023800
 8001f94:	42470060 	.word	0x42470060

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0cc      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d90c      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b8      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a52      	ldr	r2, [pc, #328]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800200e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	494d      	ldr	r1, [pc, #308]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d044      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d119      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d003      	beq.n	8002056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002052:	2b03      	cmp	r3, #3
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e067      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4934      	ldr	r1, [pc, #208]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002088:	f7ff fa52 	bl	8001530 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7ff fa4e 	bl	8001530 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e04f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d20c      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4916      	ldr	r1, [pc, #88]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	490e      	ldr	r1, [pc, #56]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800211e:	f000 f821 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	490a      	ldr	r1, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f9b2 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00
 8002154:	40023800 	.word	0x40023800
 8002158:	080041b0 	.word	0x080041b0
 800215c:	20000008 	.word	0x20000008
 8002160:	2000000c 	.word	0x2000000c

08002164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	2300      	movs	r3, #0
 8002176:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800217c:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d00d      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002188:	2b08      	cmp	r3, #8
 800218a:	f200 80bd 	bhi.w	8002308 <HAL_RCC_GetSysClockFreq+0x1a4>
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x34>
 8002192:	2b04      	cmp	r3, #4
 8002194:	d003      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x3a>
 8002196:	e0b7      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b61      	ldr	r3, [pc, #388]	; (8002320 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800219a:	60bb      	str	r3, [r7, #8]
       break;
 800219c:	e0b7      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800219e:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021a0:	60bb      	str	r3, [r7, #8]
      break;
 80021a2:	e0b4      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a4:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04d      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	461a      	mov	r2, r3
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	ea02 0800 	and.w	r8, r2, r0
 80021d2:	ea03 0901 	and.w	r9, r3, r1
 80021d6:	4640      	mov	r0, r8
 80021d8:	4649      	mov	r1, r9
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	014b      	lsls	r3, r1, #5
 80021e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021e8:	0142      	lsls	r2, r0, #5
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	ebb0 0008 	subs.w	r0, r0, r8
 80021f2:	eb61 0109 	sbc.w	r1, r1, r9
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	018b      	lsls	r3, r1, #6
 8002200:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002204:	0182      	lsls	r2, r0, #6
 8002206:	1a12      	subs	r2, r2, r0
 8002208:	eb63 0301 	sbc.w	r3, r3, r1
 800220c:	f04f 0000 	mov.w	r0, #0
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	00d9      	lsls	r1, r3, #3
 8002216:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800221a:	00d0      	lsls	r0, r2, #3
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	eb12 0208 	adds.w	r2, r2, r8
 8002224:	eb43 0309 	adc.w	r3, r3, r9
 8002228:	f04f 0000 	mov.w	r0, #0
 800222c:	f04f 0100 	mov.w	r1, #0
 8002230:	0259      	lsls	r1, r3, #9
 8002232:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002236:	0250      	lsls	r0, r2, #9
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	f7fe fc52 	bl	8000af0 <__aeabi_uldivmod>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4613      	mov	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e04a      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	461a      	mov	r2, r3
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	ea02 0400 	and.w	r4, r2, r0
 800226e:	ea03 0501 	and.w	r5, r3, r1
 8002272:	4620      	mov	r0, r4
 8002274:	4629      	mov	r1, r5
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	014b      	lsls	r3, r1, #5
 8002280:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002284:	0142      	lsls	r2, r0, #5
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	1b00      	subs	r0, r0, r4
 800228c:	eb61 0105 	sbc.w	r1, r1, r5
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	018b      	lsls	r3, r1, #6
 800229a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800229e:	0182      	lsls	r2, r0, #6
 80022a0:	1a12      	subs	r2, r2, r0
 80022a2:	eb63 0301 	sbc.w	r3, r3, r1
 80022a6:	f04f 0000 	mov.w	r0, #0
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	00d9      	lsls	r1, r3, #3
 80022b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022b4:	00d0      	lsls	r0, r2, #3
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	1912      	adds	r2, r2, r4
 80022bc:	eb45 0303 	adc.w	r3, r5, r3
 80022c0:	f04f 0000 	mov.w	r0, #0
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	0299      	lsls	r1, r3, #10
 80022ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022ce:	0290      	lsls	r0, r2, #10
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	f7fe fc06 	bl	8000af0 <__aeabi_uldivmod>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4613      	mov	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	3301      	adds	r3, #1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	60bb      	str	r3, [r7, #8]
      break;
 8002306:	e002      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800230a:	60bb      	str	r3, [r7, #8]
      break;
 800230c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230e:	68bb      	ldr	r3, [r7, #8]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	00f42400 	.word	0x00f42400
 8002324:	007a1200 	.word	0x007a1200

08002328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_RCC_GetHCLKFreq+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000008 	.word	0x20000008

08002340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002344:	f7ff fff0 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0a9b      	lsrs	r3, r3, #10
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	080041c0 	.word	0x080041c0

08002368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800236c:	f7ff ffdc 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	0b5b      	lsrs	r3, r3, #13
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <HAL_RCC_GetPCLK2Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800
 800238c:	080041c0 	.word	0x080041c0

08002390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07b      	b.n	800249a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b2:	d009      	beq.n	80023c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
 80023ba:	e005      	b.n	80023c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe ff16 	bl	8001214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0104 	and.w	r1, r3, #4
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f003 0210 	and.w	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b088      	sub	sp, #32
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_SPI_Transmit+0x22>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e126      	b.n	8002712 <HAL_SPI_Transmit+0x270>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024cc:	f7ff f830 	bl	8001530 <HAL_GetTick>
 80024d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d002      	beq.n	80024e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
 80024e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024e6:	e10b      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_SPI_Transmit+0x52>
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f8:	e102      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002540:	d10f      	bne.n	8002562 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d007      	beq.n	8002580 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002588:	d14b      	bne.n	8002622 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_SPI_Transmit+0xf6>
 8002592:	8afb      	ldrh	r3, [r7, #22]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d13e      	bne.n	8002616 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	1c9a      	adds	r2, r3, #2
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025bc:	e02b      	b.n	8002616 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d112      	bne.n	80025f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	881a      	ldrh	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	1c9a      	adds	r2, r3, #2
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80025f0:	e011      	b.n	8002616 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f2:	f7fe ff9d 	bl	8001530 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d803      	bhi.n	800260a <HAL_SPI_Transmit+0x168>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d102      	bne.n	8002610 <HAL_SPI_Transmit+0x16e>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002614:	e074      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ce      	bne.n	80025be <HAL_SPI_Transmit+0x11c>
 8002620:	e04c      	b.n	80026bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_SPI_Transmit+0x18e>
 800262a:	8afb      	ldrh	r3, [r7, #22]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d140      	bne.n	80026b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002656:	e02c      	b.n	80026b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d113      	bne.n	800268e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	86da      	strh	r2, [r3, #54]	; 0x36
 800268c:	e011      	b.n	80026b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268e:	f7fe ff4f 	bl	8001530 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d803      	bhi.n	80026a6 <HAL_SPI_Transmit+0x204>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d102      	bne.n	80026ac <HAL_SPI_Transmit+0x20a>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026b0:	e026      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1cd      	bne.n	8002658 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f8b3 	bl	800282c <SPI_EndRxTxTransaction>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e000      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
  }

error:
 80026fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002710:	7ffb      	ldrb	r3, [r7, #31]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800272c:	f7fe ff00 	bl	8001530 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	4413      	add	r3, r2
 800273a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800273c:	f7fe fef8 	bl	8001530 <HAL_GetTick>
 8002740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002742:	4b39      	ldr	r3, [pc, #228]	; (8002828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	015b      	lsls	r3, r3, #5
 8002748:	0d1b      	lsrs	r3, r3, #20
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002752:	e054      	b.n	80027fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d050      	beq.n	80027fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800275c:	f7fe fee8 	bl	8001530 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	429a      	cmp	r2, r3
 800276a:	d902      	bls.n	8002772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d13d      	bne.n	80027ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278a:	d111      	bne.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002794:	d004      	beq.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d107      	bne.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b8:	d10f      	bne.n	80027da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e017      	b.n	800281e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4013      	ands	r3, r2
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	429a      	cmp	r2, r3
 800281a:	d19b      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000008 	.word	0x20000008

0800282c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <SPI_EndRxTxTransaction+0x7c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <SPI_EndRxTxTransaction+0x80>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0d5b      	lsrs	r3, r3, #21
 8002844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002856:	d112      	bne.n	800287e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2200      	movs	r2, #0
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff ff5a 	bl	800271c <SPI_WaitFlagStateUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e00f      	b.n	800289e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3b01      	subs	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d0f2      	beq.n	800287e <SPI_EndRxTxTransaction+0x52>
 8002898:	e000      	b.n	800289c <SPI_EndRxTxTransaction+0x70>
        break;
 800289a:	bf00      	nop
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000008 	.word	0x20000008
 80028ac:	165e9f81 	.word	0x165e9f81

080028b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e041      	b.n	8002946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe fce4 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 f9c0 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d001      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e044      	b.n	80029f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <HAL_TIM_Base_Start_IT+0xb0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d018      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x6c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002992:	d013      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x6c>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1a      	ldr	r2, [pc, #104]	; (8002a04 <HAL_TIM_Base_Start_IT+0xb4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00e      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x6c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <HAL_TIM_Base_Start_IT+0xb8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d009      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x6c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <HAL_TIM_Base_Start_IT+0xbc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x6c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <HAL_TIM_Base_Start_IT+0xc0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d010      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029de:	e007      	b.n	80029f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	40000c00 	.word	0x40000c00
 8002a10:	40014000 	.word	0x40014000

08002a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0202 	mvn.w	r2, #2
 8002a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8ee 	bl	8002c38 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8e0 	bl	8002c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8f1 	bl	8002c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0204 	mvn.w	r2, #4
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f8c4 	bl	8002c38 <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8b6 	bl	8002c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f8c7 	bl	8002c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0208 	mvn.w	r2, #8
 8002ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f89a 	bl	8002c38 <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f88c 	bl	8002c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f89d 	bl	8002c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0210 	mvn.w	r2, #16
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2208      	movs	r2, #8
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f870 	bl	8002c38 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f862 	bl	8002c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f873 	bl	8002c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0201 	mvn.w	r2, #1
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe fada 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f8e2 	bl	8002d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f838 	bl	8002c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0220 	mvn.w	r2, #32
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8ac 	bl	8002d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <TIM_Base_SetConfig+0xe4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00f      	beq.n	8002cac <TIM_Base_SetConfig+0x38>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c92:	d00b      	beq.n	8002cac <TIM_Base_SetConfig+0x38>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a31      	ldr	r2, [pc, #196]	; (8002d5c <TIM_Base_SetConfig+0xe8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <TIM_Base_SetConfig+0x38>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a30      	ldr	r2, [pc, #192]	; (8002d60 <TIM_Base_SetConfig+0xec>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0x38>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a2f      	ldr	r2, [pc, #188]	; (8002d64 <TIM_Base_SetConfig+0xf0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <TIM_Base_SetConfig+0xe4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01b      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d017      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <TIM_Base_SetConfig+0xe8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <TIM_Base_SetConfig+0xec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00f      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <TIM_Base_SetConfig+0xf0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <TIM_Base_SetConfig+0xf4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <TIM_Base_SetConfig+0xf8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <TIM_Base_SetConfig+0xfc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <TIM_Base_SetConfig+0xe4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d103      	bne.n	8002d44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	615a      	str	r2, [r3, #20]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40010000 	.word	0x40010000
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800
 8002d64:	40000c00 	.word	0x40000c00
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800

08002d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e03f      	b.n	8002e2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe fa96 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f829 	bl	8002e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e3c:	b09f      	sub	sp, #124	; 0x7c
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4e:	68d9      	ldr	r1, [r3, #12]
 8002e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	ea40 0301 	orr.w	r3, r0, r1
 8002e58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e7c:	f021 010c 	bic.w	r1, r1, #12
 8002e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e86:	430b      	orrs	r3, r1
 8002e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e96:	6999      	ldr	r1, [r3, #24]
 8002e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	ea40 0301 	orr.w	r3, r0, r1
 8002ea0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4bc5      	ldr	r3, [pc, #788]	; (80031bc <UART_SetConfig+0x384>)
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d004      	beq.n	8002eb6 <UART_SetConfig+0x7e>
 8002eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4bc3      	ldr	r3, [pc, #780]	; (80031c0 <UART_SetConfig+0x388>)
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d103      	bne.n	8002ebe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eb6:	f7ff fa57 	bl	8002368 <HAL_RCC_GetPCLK2Freq>
 8002eba:	6778      	str	r0, [r7, #116]	; 0x74
 8002ebc:	e002      	b.n	8002ec4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ebe:	f7ff fa3f 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 8002ec2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	f040 80b6 	bne.w	800303c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed2:	461c      	mov	r4, r3
 8002ed4:	f04f 0500 	mov.w	r5, #0
 8002ed8:	4622      	mov	r2, r4
 8002eda:	462b      	mov	r3, r5
 8002edc:	1891      	adds	r1, r2, r2
 8002ede:	6439      	str	r1, [r7, #64]	; 0x40
 8002ee0:	415b      	adcs	r3, r3
 8002ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ee8:	1912      	adds	r2, r2, r4
 8002eea:	eb45 0303 	adc.w	r3, r5, r3
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	00d9      	lsls	r1, r3, #3
 8002ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002efc:	00d0      	lsls	r0, r2, #3
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	1911      	adds	r1, r2, r4
 8002f04:	6639      	str	r1, [r7, #96]	; 0x60
 8002f06:	416b      	adcs	r3, r5
 8002f08:	667b      	str	r3, [r7, #100]	; 0x64
 8002f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	1891      	adds	r1, r2, r2
 8002f16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f18:	415b      	adcs	r3, r3
 8002f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f24:	f7fd fde4 	bl	8000af0 <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4ba5      	ldr	r3, [pc, #660]	; (80031c4 <UART_SetConfig+0x38c>)
 8002f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	011e      	lsls	r6, r3, #4
 8002f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f38:	461c      	mov	r4, r3
 8002f3a:	f04f 0500 	mov.w	r5, #0
 8002f3e:	4622      	mov	r2, r4
 8002f40:	462b      	mov	r3, r5
 8002f42:	1891      	adds	r1, r2, r2
 8002f44:	6339      	str	r1, [r7, #48]	; 0x30
 8002f46:	415b      	adcs	r3, r3
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f4e:	1912      	adds	r2, r2, r4
 8002f50:	eb45 0303 	adc.w	r3, r5, r3
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	00d9      	lsls	r1, r3, #3
 8002f5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f62:	00d0      	lsls	r0, r2, #3
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	1911      	adds	r1, r2, r4
 8002f6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f6c:	416b      	adcs	r3, r5
 8002f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	461a      	mov	r2, r3
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	1891      	adds	r1, r2, r2
 8002f7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f7e:	415b      	adcs	r3, r3
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f8a:	f7fd fdb1 	bl	8000af0 <__aeabi_uldivmod>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4b8c      	ldr	r3, [pc, #560]	; (80031c4 <UART_SetConfig+0x38c>)
 8002f94:	fba3 1302 	umull	r1, r3, r3, r2
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	2164      	movs	r1, #100	; 0x64
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	3332      	adds	r3, #50	; 0x32
 8002fa6:	4a87      	ldr	r2, [pc, #540]	; (80031c4 <UART_SetConfig+0x38c>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fb4:	441e      	add	r6, r3
 8002fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	1894      	adds	r4, r2, r2
 8002fc4:	623c      	str	r4, [r7, #32]
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fce:	1812      	adds	r2, r2, r0
 8002fd0:	eb41 0303 	adc.w	r3, r1, r3
 8002fd4:	f04f 0400 	mov.w	r4, #0
 8002fd8:	f04f 0500 	mov.w	r5, #0
 8002fdc:	00dd      	lsls	r5, r3, #3
 8002fde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fe2:	00d4      	lsls	r4, r2, #3
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	462b      	mov	r3, r5
 8002fe8:	1814      	adds	r4, r2, r0
 8002fea:	653c      	str	r4, [r7, #80]	; 0x50
 8002fec:	414b      	adcs	r3, r1
 8002fee:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	1891      	adds	r1, r2, r2
 8002ffc:	61b9      	str	r1, [r7, #24]
 8002ffe:	415b      	adcs	r3, r3
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003006:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800300a:	f7fd fd71 	bl	8000af0 <__aeabi_uldivmod>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <UART_SetConfig+0x38c>)
 8003014:	fba3 1302 	umull	r1, r3, r3, r2
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	2164      	movs	r1, #100	; 0x64
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	3332      	adds	r3, #50	; 0x32
 8003026:	4a67      	ldr	r2, [pc, #412]	; (80031c4 <UART_SetConfig+0x38c>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	f003 0207 	and.w	r2, r3, #7
 8003032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4432      	add	r2, r6
 8003038:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800303a:	e0b9      	b.n	80031b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800303c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303e:	461c      	mov	r4, r3
 8003040:	f04f 0500 	mov.w	r5, #0
 8003044:	4622      	mov	r2, r4
 8003046:	462b      	mov	r3, r5
 8003048:	1891      	adds	r1, r2, r2
 800304a:	6139      	str	r1, [r7, #16]
 800304c:	415b      	adcs	r3, r3
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003054:	1912      	adds	r2, r2, r4
 8003056:	eb45 0303 	adc.w	r3, r5, r3
 800305a:	f04f 0000 	mov.w	r0, #0
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	00d9      	lsls	r1, r3, #3
 8003064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003068:	00d0      	lsls	r0, r2, #3
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	eb12 0804 	adds.w	r8, r2, r4
 8003072:	eb43 0905 	adc.w	r9, r3, r5
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f04f 0100 	mov.w	r1, #0
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	008b      	lsls	r3, r1, #2
 800308a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800308e:	0082      	lsls	r2, r0, #2
 8003090:	4640      	mov	r0, r8
 8003092:	4649      	mov	r1, r9
 8003094:	f7fd fd2c 	bl	8000af0 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <UART_SetConfig+0x38c>)
 800309e:	fba3 2302 	umull	r2, r3, r3, r2
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	011e      	lsls	r6, r3, #4
 80030a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a8:	4618      	mov	r0, r3
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	1894      	adds	r4, r2, r2
 80030b4:	60bc      	str	r4, [r7, #8]
 80030b6:	415b      	adcs	r3, r3
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030be:	1812      	adds	r2, r2, r0
 80030c0:	eb41 0303 	adc.w	r3, r1, r3
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	f04f 0500 	mov.w	r5, #0
 80030cc:	00dd      	lsls	r5, r3, #3
 80030ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030d2:	00d4      	lsls	r4, r2, #3
 80030d4:	4622      	mov	r2, r4
 80030d6:	462b      	mov	r3, r5
 80030d8:	1814      	adds	r4, r2, r0
 80030da:	64bc      	str	r4, [r7, #72]	; 0x48
 80030dc:	414b      	adcs	r3, r1
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	008b      	lsls	r3, r1, #2
 80030f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030f8:	0082      	lsls	r2, r0, #2
 80030fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80030fe:	f7fd fcf7 	bl	8000af0 <__aeabi_uldivmod>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <UART_SetConfig+0x38c>)
 8003108:	fba3 1302 	umull	r1, r3, r3, r2
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	2164      	movs	r1, #100	; 0x64
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	3332      	adds	r3, #50	; 0x32
 800311a:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <UART_SetConfig+0x38c>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003126:	441e      	add	r6, r3
 8003128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312a:	4618      	mov	r0, r3
 800312c:	f04f 0100 	mov.w	r1, #0
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	1894      	adds	r4, r2, r2
 8003136:	603c      	str	r4, [r7, #0]
 8003138:	415b      	adcs	r3, r3
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003140:	1812      	adds	r2, r2, r0
 8003142:	eb41 0303 	adc.w	r3, r1, r3
 8003146:	f04f 0400 	mov.w	r4, #0
 800314a:	f04f 0500 	mov.w	r5, #0
 800314e:	00dd      	lsls	r5, r3, #3
 8003150:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003154:	00d4      	lsls	r4, r2, #3
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	eb12 0a00 	adds.w	sl, r2, r0
 800315e:	eb43 0b01 	adc.w	fp, r3, r1
 8003162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4618      	mov	r0, r3
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	008b      	lsls	r3, r1, #2
 8003176:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800317a:	0082      	lsls	r2, r0, #2
 800317c:	4650      	mov	r0, sl
 800317e:	4659      	mov	r1, fp
 8003180:	f7fd fcb6 	bl	8000af0 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <UART_SetConfig+0x38c>)
 800318a:	fba3 1302 	umull	r1, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2164      	movs	r1, #100	; 0x64
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	3332      	adds	r3, #50	; 0x32
 800319c:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <UART_SetConfig+0x38c>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4432      	add	r2, r6
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	377c      	adds	r7, #124	; 0x7c
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ba:	bf00      	nop
 80031bc:	40011000 	.word	0x40011000
 80031c0:	40011400 	.word	0x40011400
 80031c4:	51eb851f 	.word	0x51eb851f

080031c8 <__errno>:
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <__errno+0x8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000014 	.word	0x20000014

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4d0d      	ldr	r5, [pc, #52]	; (800320c <__libc_init_array+0x38>)
 80031d8:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	2600      	movs	r6, #0
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	4d0b      	ldr	r5, [pc, #44]	; (8003214 <__libc_init_array+0x40>)
 80031e6:	4c0c      	ldr	r4, [pc, #48]	; (8003218 <__libc_init_array+0x44>)
 80031e8:	f000 ffd4 	bl	8004194 <_init>
 80031ec:	1b64      	subs	r4, r4, r5
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	2600      	movs	r6, #0
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08004218 	.word	0x08004218
 8003210:	08004218 	.word	0x08004218
 8003214:	08004218 	.word	0x08004218
 8003218:	0800421c 	.word	0x0800421c

0800321c <memset>:
 800321c:	4402      	add	r2, r0
 800321e:	4603      	mov	r3, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <pow>:
 800322c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003230:	ec59 8b10 	vmov	r8, r9, d0
 8003234:	ec57 6b11 	vmov	r6, r7, d1
 8003238:	f000 f8a6 	bl	8003388 <__ieee754_pow>
 800323c:	4b4e      	ldr	r3, [pc, #312]	; (8003378 <pow+0x14c>)
 800323e:	f993 3000 	ldrsb.w	r3, [r3]
 8003242:	3301      	adds	r3, #1
 8003244:	ec55 4b10 	vmov	r4, r5, d0
 8003248:	d015      	beq.n	8003276 <pow+0x4a>
 800324a:	4632      	mov	r2, r6
 800324c:	463b      	mov	r3, r7
 800324e:	4630      	mov	r0, r6
 8003250:	4639      	mov	r1, r7
 8003252:	f7fd fc17 	bl	8000a84 <__aeabi_dcmpun>
 8003256:	b970      	cbnz	r0, 8003276 <pow+0x4a>
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	4640      	mov	r0, r8
 800325e:	4649      	mov	r1, r9
 8003260:	f7fd fc10 	bl	8000a84 <__aeabi_dcmpun>
 8003264:	2200      	movs	r2, #0
 8003266:	2300      	movs	r3, #0
 8003268:	b148      	cbz	r0, 800327e <pow+0x52>
 800326a:	4630      	mov	r0, r6
 800326c:	4639      	mov	r1, r7
 800326e:	f7fd fbd7 	bl	8000a20 <__aeabi_dcmpeq>
 8003272:	2800      	cmp	r0, #0
 8003274:	d17d      	bne.n	8003372 <pow+0x146>
 8003276:	ec45 4b10 	vmov	d0, r4, r5
 800327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800327e:	4640      	mov	r0, r8
 8003280:	4649      	mov	r1, r9
 8003282:	f7fd fbcd 	bl	8000a20 <__aeabi_dcmpeq>
 8003286:	b1e0      	cbz	r0, 80032c2 <pow+0x96>
 8003288:	2200      	movs	r2, #0
 800328a:	2300      	movs	r3, #0
 800328c:	4630      	mov	r0, r6
 800328e:	4639      	mov	r1, r7
 8003290:	f7fd fbc6 	bl	8000a20 <__aeabi_dcmpeq>
 8003294:	2800      	cmp	r0, #0
 8003296:	d16c      	bne.n	8003372 <pow+0x146>
 8003298:	ec47 6b10 	vmov	d0, r6, r7
 800329c:	f000 fe53 	bl	8003f46 <finite>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d0e8      	beq.n	8003276 <pow+0x4a>
 80032a4:	2200      	movs	r2, #0
 80032a6:	2300      	movs	r3, #0
 80032a8:	4630      	mov	r0, r6
 80032aa:	4639      	mov	r1, r7
 80032ac:	f7fd fbc2 	bl	8000a34 <__aeabi_dcmplt>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d0e0      	beq.n	8003276 <pow+0x4a>
 80032b4:	f7ff ff88 	bl	80031c8 <__errno>
 80032b8:	2321      	movs	r3, #33	; 0x21
 80032ba:	6003      	str	r3, [r0, #0]
 80032bc:	2400      	movs	r4, #0
 80032be:	4d2f      	ldr	r5, [pc, #188]	; (800337c <pow+0x150>)
 80032c0:	e7d9      	b.n	8003276 <pow+0x4a>
 80032c2:	ec45 4b10 	vmov	d0, r4, r5
 80032c6:	f000 fe3e 	bl	8003f46 <finite>
 80032ca:	bbb8      	cbnz	r0, 800333c <pow+0x110>
 80032cc:	ec49 8b10 	vmov	d0, r8, r9
 80032d0:	f000 fe39 	bl	8003f46 <finite>
 80032d4:	b390      	cbz	r0, 800333c <pow+0x110>
 80032d6:	ec47 6b10 	vmov	d0, r6, r7
 80032da:	f000 fe34 	bl	8003f46 <finite>
 80032de:	b368      	cbz	r0, 800333c <pow+0x110>
 80032e0:	4622      	mov	r2, r4
 80032e2:	462b      	mov	r3, r5
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fd fbcc 	bl	8000a84 <__aeabi_dcmpun>
 80032ec:	b160      	cbz	r0, 8003308 <pow+0xdc>
 80032ee:	f7ff ff6b 	bl	80031c8 <__errno>
 80032f2:	2321      	movs	r3, #33	; 0x21
 80032f4:	6003      	str	r3, [r0, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	2300      	movs	r3, #0
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	f7fd fa51 	bl	80007a4 <__aeabi_ddiv>
 8003302:	4604      	mov	r4, r0
 8003304:	460d      	mov	r5, r1
 8003306:	e7b6      	b.n	8003276 <pow+0x4a>
 8003308:	f7ff ff5e 	bl	80031c8 <__errno>
 800330c:	2322      	movs	r3, #34	; 0x22
 800330e:	6003      	str	r3, [r0, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	2300      	movs	r3, #0
 8003314:	4640      	mov	r0, r8
 8003316:	4649      	mov	r1, r9
 8003318:	f7fd fb8c 	bl	8000a34 <__aeabi_dcmplt>
 800331c:	2400      	movs	r4, #0
 800331e:	b158      	cbz	r0, 8003338 <pow+0x10c>
 8003320:	ec47 6b10 	vmov	d0, r6, r7
 8003324:	f000 fe24 	bl	8003f70 <rint>
 8003328:	4632      	mov	r2, r6
 800332a:	ec51 0b10 	vmov	r0, r1, d0
 800332e:	463b      	mov	r3, r7
 8003330:	f7fd fb76 	bl	8000a20 <__aeabi_dcmpeq>
 8003334:	2800      	cmp	r0, #0
 8003336:	d0c2      	beq.n	80032be <pow+0x92>
 8003338:	4d11      	ldr	r5, [pc, #68]	; (8003380 <pow+0x154>)
 800333a:	e79c      	b.n	8003276 <pow+0x4a>
 800333c:	2200      	movs	r2, #0
 800333e:	2300      	movs	r3, #0
 8003340:	4620      	mov	r0, r4
 8003342:	4629      	mov	r1, r5
 8003344:	f7fd fb6c 	bl	8000a20 <__aeabi_dcmpeq>
 8003348:	2800      	cmp	r0, #0
 800334a:	d094      	beq.n	8003276 <pow+0x4a>
 800334c:	ec49 8b10 	vmov	d0, r8, r9
 8003350:	f000 fdf9 	bl	8003f46 <finite>
 8003354:	2800      	cmp	r0, #0
 8003356:	d08e      	beq.n	8003276 <pow+0x4a>
 8003358:	ec47 6b10 	vmov	d0, r6, r7
 800335c:	f000 fdf3 	bl	8003f46 <finite>
 8003360:	2800      	cmp	r0, #0
 8003362:	d088      	beq.n	8003276 <pow+0x4a>
 8003364:	f7ff ff30 	bl	80031c8 <__errno>
 8003368:	2322      	movs	r3, #34	; 0x22
 800336a:	6003      	str	r3, [r0, #0]
 800336c:	2400      	movs	r4, #0
 800336e:	2500      	movs	r5, #0
 8003370:	e781      	b.n	8003276 <pow+0x4a>
 8003372:	4d04      	ldr	r5, [pc, #16]	; (8003384 <pow+0x158>)
 8003374:	2400      	movs	r4, #0
 8003376:	e77e      	b.n	8003276 <pow+0x4a>
 8003378:	20000078 	.word	0x20000078
 800337c:	fff00000 	.word	0xfff00000
 8003380:	7ff00000 	.word	0x7ff00000
 8003384:	3ff00000 	.word	0x3ff00000

08003388 <__ieee754_pow>:
 8003388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338c:	ed2d 8b06 	vpush	{d8-d10}
 8003390:	b08d      	sub	sp, #52	; 0x34
 8003392:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003396:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800339a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800339e:	ea56 0100 	orrs.w	r1, r6, r0
 80033a2:	ec53 2b10 	vmov	r2, r3, d0
 80033a6:	f000 84d1 	beq.w	8003d4c <__ieee754_pow+0x9c4>
 80033aa:	497f      	ldr	r1, [pc, #508]	; (80035a8 <__ieee754_pow+0x220>)
 80033ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80033b0:	428c      	cmp	r4, r1
 80033b2:	ee10 8a10 	vmov	r8, s0
 80033b6:	4699      	mov	r9, r3
 80033b8:	dc09      	bgt.n	80033ce <__ieee754_pow+0x46>
 80033ba:	d103      	bne.n	80033c4 <__ieee754_pow+0x3c>
 80033bc:	b97a      	cbnz	r2, 80033de <__ieee754_pow+0x56>
 80033be:	42a6      	cmp	r6, r4
 80033c0:	dd02      	ble.n	80033c8 <__ieee754_pow+0x40>
 80033c2:	e00c      	b.n	80033de <__ieee754_pow+0x56>
 80033c4:	428e      	cmp	r6, r1
 80033c6:	dc02      	bgt.n	80033ce <__ieee754_pow+0x46>
 80033c8:	428e      	cmp	r6, r1
 80033ca:	d110      	bne.n	80033ee <__ieee754_pow+0x66>
 80033cc:	b178      	cbz	r0, 80033ee <__ieee754_pow+0x66>
 80033ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80033d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80033d6:	ea54 0308 	orrs.w	r3, r4, r8
 80033da:	f000 84b7 	beq.w	8003d4c <__ieee754_pow+0x9c4>
 80033de:	4873      	ldr	r0, [pc, #460]	; (80035ac <__ieee754_pow+0x224>)
 80033e0:	b00d      	add	sp, #52	; 0x34
 80033e2:	ecbd 8b06 	vpop	{d8-d10}
 80033e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ea:	f000 bdb9 	b.w	8003f60 <nan>
 80033ee:	f1b9 0f00 	cmp.w	r9, #0
 80033f2:	da36      	bge.n	8003462 <__ieee754_pow+0xda>
 80033f4:	496e      	ldr	r1, [pc, #440]	; (80035b0 <__ieee754_pow+0x228>)
 80033f6:	428e      	cmp	r6, r1
 80033f8:	dc51      	bgt.n	800349e <__ieee754_pow+0x116>
 80033fa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80033fe:	428e      	cmp	r6, r1
 8003400:	f340 84af 	ble.w	8003d62 <__ieee754_pow+0x9da>
 8003404:	1531      	asrs	r1, r6, #20
 8003406:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800340a:	2914      	cmp	r1, #20
 800340c:	dd0f      	ble.n	800342e <__ieee754_pow+0xa6>
 800340e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8003412:	fa20 fc01 	lsr.w	ip, r0, r1
 8003416:	fa0c f101 	lsl.w	r1, ip, r1
 800341a:	4281      	cmp	r1, r0
 800341c:	f040 84a1 	bne.w	8003d62 <__ieee754_pow+0x9da>
 8003420:	f00c 0c01 	and.w	ip, ip, #1
 8003424:	f1cc 0102 	rsb	r1, ip, #2
 8003428:	9100      	str	r1, [sp, #0]
 800342a:	b180      	cbz	r0, 800344e <__ieee754_pow+0xc6>
 800342c:	e059      	b.n	80034e2 <__ieee754_pow+0x15a>
 800342e:	2800      	cmp	r0, #0
 8003430:	d155      	bne.n	80034de <__ieee754_pow+0x156>
 8003432:	f1c1 0114 	rsb	r1, r1, #20
 8003436:	fa46 fc01 	asr.w	ip, r6, r1
 800343a:	fa0c f101 	lsl.w	r1, ip, r1
 800343e:	42b1      	cmp	r1, r6
 8003440:	f040 848c 	bne.w	8003d5c <__ieee754_pow+0x9d4>
 8003444:	f00c 0c01 	and.w	ip, ip, #1
 8003448:	f1cc 0102 	rsb	r1, ip, #2
 800344c:	9100      	str	r1, [sp, #0]
 800344e:	4959      	ldr	r1, [pc, #356]	; (80035b4 <__ieee754_pow+0x22c>)
 8003450:	428e      	cmp	r6, r1
 8003452:	d12d      	bne.n	80034b0 <__ieee754_pow+0x128>
 8003454:	2f00      	cmp	r7, #0
 8003456:	da79      	bge.n	800354c <__ieee754_pow+0x1c4>
 8003458:	4956      	ldr	r1, [pc, #344]	; (80035b4 <__ieee754_pow+0x22c>)
 800345a:	2000      	movs	r0, #0
 800345c:	f7fd f9a2 	bl	80007a4 <__aeabi_ddiv>
 8003460:	e016      	b.n	8003490 <__ieee754_pow+0x108>
 8003462:	2100      	movs	r1, #0
 8003464:	9100      	str	r1, [sp, #0]
 8003466:	2800      	cmp	r0, #0
 8003468:	d13b      	bne.n	80034e2 <__ieee754_pow+0x15a>
 800346a:	494f      	ldr	r1, [pc, #316]	; (80035a8 <__ieee754_pow+0x220>)
 800346c:	428e      	cmp	r6, r1
 800346e:	d1ee      	bne.n	800344e <__ieee754_pow+0xc6>
 8003470:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003474:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003478:	ea53 0308 	orrs.w	r3, r3, r8
 800347c:	f000 8466 	beq.w	8003d4c <__ieee754_pow+0x9c4>
 8003480:	4b4d      	ldr	r3, [pc, #308]	; (80035b8 <__ieee754_pow+0x230>)
 8003482:	429c      	cmp	r4, r3
 8003484:	dd0d      	ble.n	80034a2 <__ieee754_pow+0x11a>
 8003486:	2f00      	cmp	r7, #0
 8003488:	f280 8464 	bge.w	8003d54 <__ieee754_pow+0x9cc>
 800348c:	2000      	movs	r0, #0
 800348e:	2100      	movs	r1, #0
 8003490:	ec41 0b10 	vmov	d0, r0, r1
 8003494:	b00d      	add	sp, #52	; 0x34
 8003496:	ecbd 8b06 	vpop	{d8-d10}
 800349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349e:	2102      	movs	r1, #2
 80034a0:	e7e0      	b.n	8003464 <__ieee754_pow+0xdc>
 80034a2:	2f00      	cmp	r7, #0
 80034a4:	daf2      	bge.n	800348c <__ieee754_pow+0x104>
 80034a6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80034aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80034ae:	e7ef      	b.n	8003490 <__ieee754_pow+0x108>
 80034b0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80034b4:	d104      	bne.n	80034c0 <__ieee754_pow+0x138>
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f7fd f849 	bl	8000550 <__aeabi_dmul>
 80034be:	e7e7      	b.n	8003490 <__ieee754_pow+0x108>
 80034c0:	493e      	ldr	r1, [pc, #248]	; (80035bc <__ieee754_pow+0x234>)
 80034c2:	428f      	cmp	r7, r1
 80034c4:	d10d      	bne.n	80034e2 <__ieee754_pow+0x15a>
 80034c6:	f1b9 0f00 	cmp.w	r9, #0
 80034ca:	db0a      	blt.n	80034e2 <__ieee754_pow+0x15a>
 80034cc:	ec43 2b10 	vmov	d0, r2, r3
 80034d0:	b00d      	add	sp, #52	; 0x34
 80034d2:	ecbd 8b06 	vpop	{d8-d10}
 80034d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034da:	f000 bc77 	b.w	8003dcc <__ieee754_sqrt>
 80034de:	2100      	movs	r1, #0
 80034e0:	9100      	str	r1, [sp, #0]
 80034e2:	ec43 2b10 	vmov	d0, r2, r3
 80034e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034ea:	f000 fd23 	bl	8003f34 <fabs>
 80034ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034f2:	ec51 0b10 	vmov	r0, r1, d0
 80034f6:	f1b8 0f00 	cmp.w	r8, #0
 80034fa:	d12a      	bne.n	8003552 <__ieee754_pow+0x1ca>
 80034fc:	b12c      	cbz	r4, 800350a <__ieee754_pow+0x182>
 80034fe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80035b4 <__ieee754_pow+0x22c>
 8003502:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8003506:	45e6      	cmp	lr, ip
 8003508:	d123      	bne.n	8003552 <__ieee754_pow+0x1ca>
 800350a:	2f00      	cmp	r7, #0
 800350c:	da05      	bge.n	800351a <__ieee754_pow+0x192>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	2000      	movs	r0, #0
 8003514:	4927      	ldr	r1, [pc, #156]	; (80035b4 <__ieee754_pow+0x22c>)
 8003516:	f7fd f945 	bl	80007a4 <__aeabi_ddiv>
 800351a:	f1b9 0f00 	cmp.w	r9, #0
 800351e:	dab7      	bge.n	8003490 <__ieee754_pow+0x108>
 8003520:	9b00      	ldr	r3, [sp, #0]
 8003522:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003526:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800352a:	4323      	orrs	r3, r4
 800352c:	d108      	bne.n	8003540 <__ieee754_pow+0x1b8>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	f7fc fe53 	bl	80001e0 <__aeabi_dsub>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	e78d      	b.n	800345c <__ieee754_pow+0xd4>
 8003540:	9b00      	ldr	r3, [sp, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d1a4      	bne.n	8003490 <__ieee754_pow+0x108>
 8003546:	4602      	mov	r2, r0
 8003548:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	e79e      	b.n	8003490 <__ieee754_pow+0x108>
 8003552:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8003556:	f10c 35ff 	add.w	r5, ip, #4294967295
 800355a:	950a      	str	r5, [sp, #40]	; 0x28
 800355c:	9d00      	ldr	r5, [sp, #0]
 800355e:	46ac      	mov	ip, r5
 8003560:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003562:	ea5c 0505 	orrs.w	r5, ip, r5
 8003566:	d0e4      	beq.n	8003532 <__ieee754_pow+0x1aa>
 8003568:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <__ieee754_pow+0x238>)
 800356a:	429e      	cmp	r6, r3
 800356c:	f340 80fc 	ble.w	8003768 <__ieee754_pow+0x3e0>
 8003570:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003574:	429e      	cmp	r6, r3
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <__ieee754_pow+0x230>)
 8003578:	dd07      	ble.n	800358a <__ieee754_pow+0x202>
 800357a:	429c      	cmp	r4, r3
 800357c:	dc0a      	bgt.n	8003594 <__ieee754_pow+0x20c>
 800357e:	2f00      	cmp	r7, #0
 8003580:	da84      	bge.n	800348c <__ieee754_pow+0x104>
 8003582:	a307      	add	r3, pc, #28	; (adr r3, 80035a0 <__ieee754_pow+0x218>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	e795      	b.n	80034b6 <__ieee754_pow+0x12e>
 800358a:	429c      	cmp	r4, r3
 800358c:	dbf7      	blt.n	800357e <__ieee754_pow+0x1f6>
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <__ieee754_pow+0x22c>)
 8003590:	429c      	cmp	r4, r3
 8003592:	dd17      	ble.n	80035c4 <__ieee754_pow+0x23c>
 8003594:	2f00      	cmp	r7, #0
 8003596:	dcf4      	bgt.n	8003582 <__ieee754_pow+0x1fa>
 8003598:	e778      	b.n	800348c <__ieee754_pow+0x104>
 800359a:	bf00      	nop
 800359c:	f3af 8000 	nop.w
 80035a0:	8800759c 	.word	0x8800759c
 80035a4:	7e37e43c 	.word	0x7e37e43c
 80035a8:	7ff00000 	.word	0x7ff00000
 80035ac:	080041c8 	.word	0x080041c8
 80035b0:	433fffff 	.word	0x433fffff
 80035b4:	3ff00000 	.word	0x3ff00000
 80035b8:	3fefffff 	.word	0x3fefffff
 80035bc:	3fe00000 	.word	0x3fe00000
 80035c0:	41e00000 	.word	0x41e00000
 80035c4:	4b64      	ldr	r3, [pc, #400]	; (8003758 <__ieee754_pow+0x3d0>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	f7fc fe0a 	bl	80001e0 <__aeabi_dsub>
 80035cc:	a356      	add	r3, pc, #344	; (adr r3, 8003728 <__ieee754_pow+0x3a0>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	4604      	mov	r4, r0
 80035d4:	460d      	mov	r5, r1
 80035d6:	f7fc ffbb 	bl	8000550 <__aeabi_dmul>
 80035da:	a355      	add	r3, pc, #340	; (adr r3, 8003730 <__ieee754_pow+0x3a8>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	4606      	mov	r6, r0
 80035e2:	460f      	mov	r7, r1
 80035e4:	4620      	mov	r0, r4
 80035e6:	4629      	mov	r1, r5
 80035e8:	f7fc ffb2 	bl	8000550 <__aeabi_dmul>
 80035ec:	4b5b      	ldr	r3, [pc, #364]	; (800375c <__ieee754_pow+0x3d4>)
 80035ee:	4682      	mov	sl, r0
 80035f0:	468b      	mov	fp, r1
 80035f2:	2200      	movs	r2, #0
 80035f4:	4620      	mov	r0, r4
 80035f6:	4629      	mov	r1, r5
 80035f8:	f7fc ffaa 	bl	8000550 <__aeabi_dmul>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	a14d      	add	r1, pc, #308	; (adr r1, 8003738 <__ieee754_pow+0x3b0>)
 8003602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003606:	f7fc fdeb 	bl	80001e0 <__aeabi_dsub>
 800360a:	4622      	mov	r2, r4
 800360c:	462b      	mov	r3, r5
 800360e:	f7fc ff9f 	bl	8000550 <__aeabi_dmul>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	2000      	movs	r0, #0
 8003618:	4951      	ldr	r1, [pc, #324]	; (8003760 <__ieee754_pow+0x3d8>)
 800361a:	f7fc fde1 	bl	80001e0 <__aeabi_dsub>
 800361e:	4622      	mov	r2, r4
 8003620:	4680      	mov	r8, r0
 8003622:	4689      	mov	r9, r1
 8003624:	462b      	mov	r3, r5
 8003626:	4620      	mov	r0, r4
 8003628:	4629      	mov	r1, r5
 800362a:	f7fc ff91 	bl	8000550 <__aeabi_dmul>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4640      	mov	r0, r8
 8003634:	4649      	mov	r1, r9
 8003636:	f7fc ff8b 	bl	8000550 <__aeabi_dmul>
 800363a:	a341      	add	r3, pc, #260	; (adr r3, 8003740 <__ieee754_pow+0x3b8>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f7fc ff86 	bl	8000550 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4650      	mov	r0, sl
 800364a:	4659      	mov	r1, fp
 800364c:	f7fc fdc8 	bl	80001e0 <__aeabi_dsub>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4680      	mov	r8, r0
 8003656:	4689      	mov	r9, r1
 8003658:	4630      	mov	r0, r6
 800365a:	4639      	mov	r1, r7
 800365c:	f7fc fdc2 	bl	80001e4 <__adddf3>
 8003660:	2400      	movs	r4, #0
 8003662:	4632      	mov	r2, r6
 8003664:	463b      	mov	r3, r7
 8003666:	4620      	mov	r0, r4
 8003668:	460d      	mov	r5, r1
 800366a:	f7fc fdb9 	bl	80001e0 <__aeabi_dsub>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4640      	mov	r0, r8
 8003674:	4649      	mov	r1, r9
 8003676:	f7fc fdb3 	bl	80001e0 <__aeabi_dsub>
 800367a:	9b00      	ldr	r3, [sp, #0]
 800367c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	4313      	orrs	r3, r2
 8003682:	4682      	mov	sl, r0
 8003684:	468b      	mov	fp, r1
 8003686:	f040 81f1 	bne.w	8003a6c <__ieee754_pow+0x6e4>
 800368a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8003748 <__ieee754_pow+0x3c0>
 800368e:	eeb0 8a47 	vmov.f32	s16, s14
 8003692:	eef0 8a67 	vmov.f32	s17, s15
 8003696:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800369a:	2600      	movs	r6, #0
 800369c:	4632      	mov	r2, r6
 800369e:	463b      	mov	r3, r7
 80036a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036a4:	f7fc fd9c 	bl	80001e0 <__aeabi_dsub>
 80036a8:	4622      	mov	r2, r4
 80036aa:	462b      	mov	r3, r5
 80036ac:	f7fc ff50 	bl	8000550 <__aeabi_dmul>
 80036b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036b4:	4680      	mov	r8, r0
 80036b6:	4689      	mov	r9, r1
 80036b8:	4650      	mov	r0, sl
 80036ba:	4659      	mov	r1, fp
 80036bc:	f7fc ff48 	bl	8000550 <__aeabi_dmul>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4640      	mov	r0, r8
 80036c6:	4649      	mov	r1, r9
 80036c8:	f7fc fd8c 	bl	80001e4 <__adddf3>
 80036cc:	4632      	mov	r2, r6
 80036ce:	463b      	mov	r3, r7
 80036d0:	4680      	mov	r8, r0
 80036d2:	4689      	mov	r9, r1
 80036d4:	4620      	mov	r0, r4
 80036d6:	4629      	mov	r1, r5
 80036d8:	f7fc ff3a 	bl	8000550 <__aeabi_dmul>
 80036dc:	460b      	mov	r3, r1
 80036de:	4604      	mov	r4, r0
 80036e0:	460d      	mov	r5, r1
 80036e2:	4602      	mov	r2, r0
 80036e4:	4649      	mov	r1, r9
 80036e6:	4640      	mov	r0, r8
 80036e8:	f7fc fd7c 	bl	80001e4 <__adddf3>
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <__ieee754_pow+0x3dc>)
 80036ee:	4299      	cmp	r1, r3
 80036f0:	ec45 4b19 	vmov	d9, r4, r5
 80036f4:	4606      	mov	r6, r0
 80036f6:	460f      	mov	r7, r1
 80036f8:	468b      	mov	fp, r1
 80036fa:	f340 82fe 	ble.w	8003cfa <__ieee754_pow+0x972>
 80036fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003702:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003706:	4303      	orrs	r3, r0
 8003708:	f000 81f0 	beq.w	8003aec <__ieee754_pow+0x764>
 800370c:	a310      	add	r3, pc, #64	; (adr r3, 8003750 <__ieee754_pow+0x3c8>)
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	ec51 0b18 	vmov	r0, r1, d8
 8003716:	f7fc ff1b 	bl	8000550 <__aeabi_dmul>
 800371a:	a30d      	add	r3, pc, #52	; (adr r3, 8003750 <__ieee754_pow+0x3c8>)
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	e6cb      	b.n	80034ba <__ieee754_pow+0x132>
 8003722:	bf00      	nop
 8003724:	f3af 8000 	nop.w
 8003728:	60000000 	.word	0x60000000
 800372c:	3ff71547 	.word	0x3ff71547
 8003730:	f85ddf44 	.word	0xf85ddf44
 8003734:	3e54ae0b 	.word	0x3e54ae0b
 8003738:	55555555 	.word	0x55555555
 800373c:	3fd55555 	.word	0x3fd55555
 8003740:	652b82fe 	.word	0x652b82fe
 8003744:	3ff71547 	.word	0x3ff71547
 8003748:	00000000 	.word	0x00000000
 800374c:	bff00000 	.word	0xbff00000
 8003750:	8800759c 	.word	0x8800759c
 8003754:	7e37e43c 	.word	0x7e37e43c
 8003758:	3ff00000 	.word	0x3ff00000
 800375c:	3fd00000 	.word	0x3fd00000
 8003760:	3fe00000 	.word	0x3fe00000
 8003764:	408fffff 	.word	0x408fffff
 8003768:	4bd7      	ldr	r3, [pc, #860]	; (8003ac8 <__ieee754_pow+0x740>)
 800376a:	ea03 0309 	and.w	r3, r3, r9
 800376e:	2200      	movs	r2, #0
 8003770:	b92b      	cbnz	r3, 800377e <__ieee754_pow+0x3f6>
 8003772:	4bd6      	ldr	r3, [pc, #856]	; (8003acc <__ieee754_pow+0x744>)
 8003774:	f7fc feec 	bl	8000550 <__aeabi_dmul>
 8003778:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800377c:	460c      	mov	r4, r1
 800377e:	1523      	asrs	r3, r4, #20
 8003780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003784:	4413      	add	r3, r2
 8003786:	9309      	str	r3, [sp, #36]	; 0x24
 8003788:	4bd1      	ldr	r3, [pc, #836]	; (8003ad0 <__ieee754_pow+0x748>)
 800378a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800378e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003792:	429c      	cmp	r4, r3
 8003794:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003798:	dd08      	ble.n	80037ac <__ieee754_pow+0x424>
 800379a:	4bce      	ldr	r3, [pc, #824]	; (8003ad4 <__ieee754_pow+0x74c>)
 800379c:	429c      	cmp	r4, r3
 800379e:	f340 8163 	ble.w	8003a68 <__ieee754_pow+0x6e0>
 80037a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a4:	3301      	adds	r3, #1
 80037a6:	9309      	str	r3, [sp, #36]	; 0x24
 80037a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80037ac:	2400      	movs	r4, #0
 80037ae:	00e3      	lsls	r3, r4, #3
 80037b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80037b2:	4bc9      	ldr	r3, [pc, #804]	; (8003ad8 <__ieee754_pow+0x750>)
 80037b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80037b8:	ed93 7b00 	vldr	d7, [r3]
 80037bc:	4629      	mov	r1, r5
 80037be:	ec53 2b17 	vmov	r2, r3, d7
 80037c2:	eeb0 8a47 	vmov.f32	s16, s14
 80037c6:	eef0 8a67 	vmov.f32	s17, s15
 80037ca:	4682      	mov	sl, r0
 80037cc:	f7fc fd08 	bl	80001e0 <__aeabi_dsub>
 80037d0:	4652      	mov	r2, sl
 80037d2:	4606      	mov	r6, r0
 80037d4:	460f      	mov	r7, r1
 80037d6:	462b      	mov	r3, r5
 80037d8:	ec51 0b18 	vmov	r0, r1, d8
 80037dc:	f7fc fd02 	bl	80001e4 <__adddf3>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	2000      	movs	r0, #0
 80037e6:	49bd      	ldr	r1, [pc, #756]	; (8003adc <__ieee754_pow+0x754>)
 80037e8:	f7fc ffdc 	bl	80007a4 <__aeabi_ddiv>
 80037ec:	ec41 0b19 	vmov	d9, r0, r1
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4630      	mov	r0, r6
 80037f6:	4639      	mov	r1, r7
 80037f8:	f7fc feaa 	bl	8000550 <__aeabi_dmul>
 80037fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003804:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003808:	2300      	movs	r3, #0
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003810:	46ab      	mov	fp, r5
 8003812:	106d      	asrs	r5, r5, #1
 8003814:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003818:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800381c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8003820:	2200      	movs	r2, #0
 8003822:	4640      	mov	r0, r8
 8003824:	4649      	mov	r1, r9
 8003826:	4614      	mov	r4, r2
 8003828:	461d      	mov	r5, r3
 800382a:	f7fc fe91 	bl	8000550 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4630      	mov	r0, r6
 8003834:	4639      	mov	r1, r7
 8003836:	f7fc fcd3 	bl	80001e0 <__aeabi_dsub>
 800383a:	ec53 2b18 	vmov	r2, r3, d8
 800383e:	4606      	mov	r6, r0
 8003840:	460f      	mov	r7, r1
 8003842:	4620      	mov	r0, r4
 8003844:	4629      	mov	r1, r5
 8003846:	f7fc fccb 	bl	80001e0 <__aeabi_dsub>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4650      	mov	r0, sl
 8003850:	4659      	mov	r1, fp
 8003852:	f7fc fcc5 	bl	80001e0 <__aeabi_dsub>
 8003856:	4642      	mov	r2, r8
 8003858:	464b      	mov	r3, r9
 800385a:	f7fc fe79 	bl	8000550 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4630      	mov	r0, r6
 8003864:	4639      	mov	r1, r7
 8003866:	f7fc fcbb 	bl	80001e0 <__aeabi_dsub>
 800386a:	ec53 2b19 	vmov	r2, r3, d9
 800386e:	f7fc fe6f 	bl	8000550 <__aeabi_dmul>
 8003872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003876:	ec41 0b18 	vmov	d8, r0, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f7fc fe67 	bl	8000550 <__aeabi_dmul>
 8003882:	a37d      	add	r3, pc, #500	; (adr r3, 8003a78 <__ieee754_pow+0x6f0>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	4604      	mov	r4, r0
 800388a:	460d      	mov	r5, r1
 800388c:	f7fc fe60 	bl	8000550 <__aeabi_dmul>
 8003890:	a37b      	add	r3, pc, #492	; (adr r3, 8003a80 <__ieee754_pow+0x6f8>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f7fc fca5 	bl	80001e4 <__adddf3>
 800389a:	4622      	mov	r2, r4
 800389c:	462b      	mov	r3, r5
 800389e:	f7fc fe57 	bl	8000550 <__aeabi_dmul>
 80038a2:	a379      	add	r3, pc, #484	; (adr r3, 8003a88 <__ieee754_pow+0x700>)
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f7fc fc9c 	bl	80001e4 <__adddf3>
 80038ac:	4622      	mov	r2, r4
 80038ae:	462b      	mov	r3, r5
 80038b0:	f7fc fe4e 	bl	8000550 <__aeabi_dmul>
 80038b4:	a376      	add	r3, pc, #472	; (adr r3, 8003a90 <__ieee754_pow+0x708>)
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f7fc fc93 	bl	80001e4 <__adddf3>
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	f7fc fe45 	bl	8000550 <__aeabi_dmul>
 80038c6:	a374      	add	r3, pc, #464	; (adr r3, 8003a98 <__ieee754_pow+0x710>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fc8a 	bl	80001e4 <__adddf3>
 80038d0:	4622      	mov	r2, r4
 80038d2:	462b      	mov	r3, r5
 80038d4:	f7fc fe3c 	bl	8000550 <__aeabi_dmul>
 80038d8:	a371      	add	r3, pc, #452	; (adr r3, 8003aa0 <__ieee754_pow+0x718>)
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f7fc fc81 	bl	80001e4 <__adddf3>
 80038e2:	4622      	mov	r2, r4
 80038e4:	4606      	mov	r6, r0
 80038e6:	460f      	mov	r7, r1
 80038e8:	462b      	mov	r3, r5
 80038ea:	4620      	mov	r0, r4
 80038ec:	4629      	mov	r1, r5
 80038ee:	f7fc fe2f 	bl	8000550 <__aeabi_dmul>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4630      	mov	r0, r6
 80038f8:	4639      	mov	r1, r7
 80038fa:	f7fc fe29 	bl	8000550 <__aeabi_dmul>
 80038fe:	4642      	mov	r2, r8
 8003900:	4604      	mov	r4, r0
 8003902:	460d      	mov	r5, r1
 8003904:	464b      	mov	r3, r9
 8003906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800390a:	f7fc fc6b 	bl	80001e4 <__adddf3>
 800390e:	ec53 2b18 	vmov	r2, r3, d8
 8003912:	f7fc fe1d 	bl	8000550 <__aeabi_dmul>
 8003916:	4622      	mov	r2, r4
 8003918:	462b      	mov	r3, r5
 800391a:	f7fc fc63 	bl	80001e4 <__adddf3>
 800391e:	4642      	mov	r2, r8
 8003920:	4682      	mov	sl, r0
 8003922:	468b      	mov	fp, r1
 8003924:	464b      	mov	r3, r9
 8003926:	4640      	mov	r0, r8
 8003928:	4649      	mov	r1, r9
 800392a:	f7fc fe11 	bl	8000550 <__aeabi_dmul>
 800392e:	4b6c      	ldr	r3, [pc, #432]	; (8003ae0 <__ieee754_pow+0x758>)
 8003930:	2200      	movs	r2, #0
 8003932:	4606      	mov	r6, r0
 8003934:	460f      	mov	r7, r1
 8003936:	f7fc fc55 	bl	80001e4 <__adddf3>
 800393a:	4652      	mov	r2, sl
 800393c:	465b      	mov	r3, fp
 800393e:	f7fc fc51 	bl	80001e4 <__adddf3>
 8003942:	9c04      	ldr	r4, [sp, #16]
 8003944:	460d      	mov	r5, r1
 8003946:	4622      	mov	r2, r4
 8003948:	460b      	mov	r3, r1
 800394a:	4640      	mov	r0, r8
 800394c:	4649      	mov	r1, r9
 800394e:	f7fc fdff 	bl	8000550 <__aeabi_dmul>
 8003952:	4b63      	ldr	r3, [pc, #396]	; (8003ae0 <__ieee754_pow+0x758>)
 8003954:	4680      	mov	r8, r0
 8003956:	4689      	mov	r9, r1
 8003958:	2200      	movs	r2, #0
 800395a:	4620      	mov	r0, r4
 800395c:	4629      	mov	r1, r5
 800395e:	f7fc fc3f 	bl	80001e0 <__aeabi_dsub>
 8003962:	4632      	mov	r2, r6
 8003964:	463b      	mov	r3, r7
 8003966:	f7fc fc3b 	bl	80001e0 <__aeabi_dsub>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4650      	mov	r0, sl
 8003970:	4659      	mov	r1, fp
 8003972:	f7fc fc35 	bl	80001e0 <__aeabi_dsub>
 8003976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800397a:	f7fc fde9 	bl	8000550 <__aeabi_dmul>
 800397e:	4622      	mov	r2, r4
 8003980:	4606      	mov	r6, r0
 8003982:	460f      	mov	r7, r1
 8003984:	462b      	mov	r3, r5
 8003986:	ec51 0b18 	vmov	r0, r1, d8
 800398a:	f7fc fde1 	bl	8000550 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4630      	mov	r0, r6
 8003994:	4639      	mov	r1, r7
 8003996:	f7fc fc25 	bl	80001e4 <__adddf3>
 800399a:	4606      	mov	r6, r0
 800399c:	460f      	mov	r7, r1
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4640      	mov	r0, r8
 80039a4:	4649      	mov	r1, r9
 80039a6:	f7fc fc1d 	bl	80001e4 <__adddf3>
 80039aa:	9c04      	ldr	r4, [sp, #16]
 80039ac:	a33e      	add	r3, pc, #248	; (adr r3, 8003aa8 <__ieee754_pow+0x720>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	4620      	mov	r0, r4
 80039b4:	460d      	mov	r5, r1
 80039b6:	f7fc fdcb 	bl	8000550 <__aeabi_dmul>
 80039ba:	4642      	mov	r2, r8
 80039bc:	ec41 0b18 	vmov	d8, r0, r1
 80039c0:	464b      	mov	r3, r9
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	f7fc fc0b 	bl	80001e0 <__aeabi_dsub>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4630      	mov	r0, r6
 80039d0:	4639      	mov	r1, r7
 80039d2:	f7fc fc05 	bl	80001e0 <__aeabi_dsub>
 80039d6:	a336      	add	r3, pc, #216	; (adr r3, 8003ab0 <__ieee754_pow+0x728>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f7fc fdb8 	bl	8000550 <__aeabi_dmul>
 80039e0:	a335      	add	r3, pc, #212	; (adr r3, 8003ab8 <__ieee754_pow+0x730>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	4606      	mov	r6, r0
 80039e8:	460f      	mov	r7, r1
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7fc fdaf 	bl	8000550 <__aeabi_dmul>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4630      	mov	r0, r6
 80039f8:	4639      	mov	r1, r7
 80039fa:	f7fc fbf3 	bl	80001e4 <__adddf3>
 80039fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a00:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <__ieee754_pow+0x75c>)
 8003a02:	4413      	add	r3, r2
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f7fc fbec 	bl	80001e4 <__adddf3>
 8003a0c:	4682      	mov	sl, r0
 8003a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a10:	468b      	mov	fp, r1
 8003a12:	f7fc fd33 	bl	800047c <__aeabi_i2d>
 8003a16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a18:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <__ieee754_pow+0x760>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a20:	4606      	mov	r6, r0
 8003a22:	460f      	mov	r7, r1
 8003a24:	4652      	mov	r2, sl
 8003a26:	465b      	mov	r3, fp
 8003a28:	ec51 0b18 	vmov	r0, r1, d8
 8003a2c:	f7fc fbda 	bl	80001e4 <__adddf3>
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	f7fc fbd6 	bl	80001e4 <__adddf3>
 8003a38:	4632      	mov	r2, r6
 8003a3a:	463b      	mov	r3, r7
 8003a3c:	f7fc fbd2 	bl	80001e4 <__adddf3>
 8003a40:	9c04      	ldr	r4, [sp, #16]
 8003a42:	4632      	mov	r2, r6
 8003a44:	463b      	mov	r3, r7
 8003a46:	4620      	mov	r0, r4
 8003a48:	460d      	mov	r5, r1
 8003a4a:	f7fc fbc9 	bl	80001e0 <__aeabi_dsub>
 8003a4e:	4642      	mov	r2, r8
 8003a50:	464b      	mov	r3, r9
 8003a52:	f7fc fbc5 	bl	80001e0 <__aeabi_dsub>
 8003a56:	ec53 2b18 	vmov	r2, r3, d8
 8003a5a:	f7fc fbc1 	bl	80001e0 <__aeabi_dsub>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4650      	mov	r0, sl
 8003a64:	4659      	mov	r1, fp
 8003a66:	e606      	b.n	8003676 <__ieee754_pow+0x2ee>
 8003a68:	2401      	movs	r4, #1
 8003a6a:	e6a0      	b.n	80037ae <__ieee754_pow+0x426>
 8003a6c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003ac0 <__ieee754_pow+0x738>
 8003a70:	e60d      	b.n	800368e <__ieee754_pow+0x306>
 8003a72:	bf00      	nop
 8003a74:	f3af 8000 	nop.w
 8003a78:	4a454eef 	.word	0x4a454eef
 8003a7c:	3fca7e28 	.word	0x3fca7e28
 8003a80:	93c9db65 	.word	0x93c9db65
 8003a84:	3fcd864a 	.word	0x3fcd864a
 8003a88:	a91d4101 	.word	0xa91d4101
 8003a8c:	3fd17460 	.word	0x3fd17460
 8003a90:	518f264d 	.word	0x518f264d
 8003a94:	3fd55555 	.word	0x3fd55555
 8003a98:	db6fabff 	.word	0xdb6fabff
 8003a9c:	3fdb6db6 	.word	0x3fdb6db6
 8003aa0:	33333303 	.word	0x33333303
 8003aa4:	3fe33333 	.word	0x3fe33333
 8003aa8:	e0000000 	.word	0xe0000000
 8003aac:	3feec709 	.word	0x3feec709
 8003ab0:	dc3a03fd 	.word	0xdc3a03fd
 8003ab4:	3feec709 	.word	0x3feec709
 8003ab8:	145b01f5 	.word	0x145b01f5
 8003abc:	be3e2fe0 	.word	0xbe3e2fe0
 8003ac0:	00000000 	.word	0x00000000
 8003ac4:	3ff00000 	.word	0x3ff00000
 8003ac8:	7ff00000 	.word	0x7ff00000
 8003acc:	43400000 	.word	0x43400000
 8003ad0:	0003988e 	.word	0x0003988e
 8003ad4:	000bb679 	.word	0x000bb679
 8003ad8:	080041d0 	.word	0x080041d0
 8003adc:	3ff00000 	.word	0x3ff00000
 8003ae0:	40080000 	.word	0x40080000
 8003ae4:	080041f0 	.word	0x080041f0
 8003ae8:	080041e0 	.word	0x080041e0
 8003aec:	a3b5      	add	r3, pc, #724	; (adr r3, 8003dc4 <__ieee754_pow+0xa3c>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	4640      	mov	r0, r8
 8003af4:	4649      	mov	r1, r9
 8003af6:	f7fc fb75 	bl	80001e4 <__adddf3>
 8003afa:	4622      	mov	r2, r4
 8003afc:	ec41 0b1a 	vmov	d10, r0, r1
 8003b00:	462b      	mov	r3, r5
 8003b02:	4630      	mov	r0, r6
 8003b04:	4639      	mov	r1, r7
 8003b06:	f7fc fb6b 	bl	80001e0 <__aeabi_dsub>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	ec51 0b1a 	vmov	r0, r1, d10
 8003b12:	f7fc ffad 	bl	8000a70 <__aeabi_dcmpgt>
 8003b16:	2800      	cmp	r0, #0
 8003b18:	f47f adf8 	bne.w	800370c <__ieee754_pow+0x384>
 8003b1c:	4aa4      	ldr	r2, [pc, #656]	; (8003db0 <__ieee754_pow+0xa28>)
 8003b1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003b22:	4293      	cmp	r3, r2
 8003b24:	f340 810b 	ble.w	8003d3e <__ieee754_pow+0x9b6>
 8003b28:	151b      	asrs	r3, r3, #20
 8003b2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003b2e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003b32:	fa4a f303 	asr.w	r3, sl, r3
 8003b36:	445b      	add	r3, fp
 8003b38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003b3c:	4e9d      	ldr	r6, [pc, #628]	; (8003db4 <__ieee754_pow+0xa2c>)
 8003b3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003b42:	4116      	asrs	r6, r2
 8003b44:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003b48:	2000      	movs	r0, #0
 8003b4a:	ea23 0106 	bic.w	r1, r3, r6
 8003b4e:	f1c2 0214 	rsb	r2, r2, #20
 8003b52:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003b56:	fa4a fa02 	asr.w	sl, sl, r2
 8003b5a:	f1bb 0f00 	cmp.w	fp, #0
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4620      	mov	r0, r4
 8003b64:	4629      	mov	r1, r5
 8003b66:	bfb8      	it	lt
 8003b68:	f1ca 0a00 	rsblt	sl, sl, #0
 8003b6c:	f7fc fb38 	bl	80001e0 <__aeabi_dsub>
 8003b70:	ec41 0b19 	vmov	d9, r0, r1
 8003b74:	4642      	mov	r2, r8
 8003b76:	464b      	mov	r3, r9
 8003b78:	ec51 0b19 	vmov	r0, r1, d9
 8003b7c:	f7fc fb32 	bl	80001e4 <__adddf3>
 8003b80:	2400      	movs	r4, #0
 8003b82:	a379      	add	r3, pc, #484	; (adr r3, 8003d68 <__ieee754_pow+0x9e0>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	4620      	mov	r0, r4
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	f7fc fce0 	bl	8000550 <__aeabi_dmul>
 8003b90:	ec53 2b19 	vmov	r2, r3, d9
 8003b94:	4606      	mov	r6, r0
 8003b96:	460f      	mov	r7, r1
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	f7fc fb20 	bl	80001e0 <__aeabi_dsub>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4640      	mov	r0, r8
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	f7fc fb1a 	bl	80001e0 <__aeabi_dsub>
 8003bac:	a370      	add	r3, pc, #448	; (adr r3, 8003d70 <__ieee754_pow+0x9e8>)
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f7fc fccd 	bl	8000550 <__aeabi_dmul>
 8003bb6:	a370      	add	r3, pc, #448	; (adr r3, 8003d78 <__ieee754_pow+0x9f0>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	4680      	mov	r8, r0
 8003bbe:	4689      	mov	r9, r1
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc fcc4 	bl	8000550 <__aeabi_dmul>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4640      	mov	r0, r8
 8003bce:	4649      	mov	r1, r9
 8003bd0:	f7fc fb08 	bl	80001e4 <__adddf3>
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	460d      	mov	r5, r1
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4630      	mov	r0, r6
 8003bde:	4639      	mov	r1, r7
 8003be0:	f7fc fb00 	bl	80001e4 <__adddf3>
 8003be4:	4632      	mov	r2, r6
 8003be6:	463b      	mov	r3, r7
 8003be8:	4680      	mov	r8, r0
 8003bea:	4689      	mov	r9, r1
 8003bec:	f7fc faf8 	bl	80001e0 <__aeabi_dsub>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	f7fc faf2 	bl	80001e0 <__aeabi_dsub>
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	4606      	mov	r6, r0
 8003c00:	460f      	mov	r7, r1
 8003c02:	464b      	mov	r3, r9
 8003c04:	4640      	mov	r0, r8
 8003c06:	4649      	mov	r1, r9
 8003c08:	f7fc fca2 	bl	8000550 <__aeabi_dmul>
 8003c0c:	a35c      	add	r3, pc, #368	; (adr r3, 8003d80 <__ieee754_pow+0x9f8>)
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	4604      	mov	r4, r0
 8003c14:	460d      	mov	r5, r1
 8003c16:	f7fc fc9b 	bl	8000550 <__aeabi_dmul>
 8003c1a:	a35b      	add	r3, pc, #364	; (adr r3, 8003d88 <__ieee754_pow+0xa00>)
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f7fc fade 	bl	80001e0 <__aeabi_dsub>
 8003c24:	4622      	mov	r2, r4
 8003c26:	462b      	mov	r3, r5
 8003c28:	f7fc fc92 	bl	8000550 <__aeabi_dmul>
 8003c2c:	a358      	add	r3, pc, #352	; (adr r3, 8003d90 <__ieee754_pow+0xa08>)
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	f7fc fad7 	bl	80001e4 <__adddf3>
 8003c36:	4622      	mov	r2, r4
 8003c38:	462b      	mov	r3, r5
 8003c3a:	f7fc fc89 	bl	8000550 <__aeabi_dmul>
 8003c3e:	a356      	add	r3, pc, #344	; (adr r3, 8003d98 <__ieee754_pow+0xa10>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc facc 	bl	80001e0 <__aeabi_dsub>
 8003c48:	4622      	mov	r2, r4
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	f7fc fc80 	bl	8000550 <__aeabi_dmul>
 8003c50:	a353      	add	r3, pc, #332	; (adr r3, 8003da0 <__ieee754_pow+0xa18>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f7fc fac5 	bl	80001e4 <__adddf3>
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	f7fc fc77 	bl	8000550 <__aeabi_dmul>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4640      	mov	r0, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	f7fc fab9 	bl	80001e0 <__aeabi_dsub>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	460d      	mov	r5, r1
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4640      	mov	r0, r8
 8003c78:	4649      	mov	r1, r9
 8003c7a:	f7fc fc69 	bl	8000550 <__aeabi_dmul>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	ec41 0b19 	vmov	d9, r0, r1
 8003c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c88:	4620      	mov	r0, r4
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	f7fc faa8 	bl	80001e0 <__aeabi_dsub>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	ec51 0b19 	vmov	r0, r1, d9
 8003c98:	f7fc fd84 	bl	80007a4 <__aeabi_ddiv>
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	460d      	mov	r5, r1
 8003ca2:	463b      	mov	r3, r7
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	f7fc fc52 	bl	8000550 <__aeabi_dmul>
 8003cac:	4632      	mov	r2, r6
 8003cae:	463b      	mov	r3, r7
 8003cb0:	f7fc fa98 	bl	80001e4 <__adddf3>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4620      	mov	r0, r4
 8003cba:	4629      	mov	r1, r5
 8003cbc:	f7fc fa90 	bl	80001e0 <__aeabi_dsub>
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	f7fc fa8c 	bl	80001e0 <__aeabi_dsub>
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4602      	mov	r2, r0
 8003ccc:	493a      	ldr	r1, [pc, #232]	; (8003db8 <__ieee754_pow+0xa30>)
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7fc fa86 	bl	80001e0 <__aeabi_dsub>
 8003cd4:	e9cd 0100 	strd	r0, r1, [sp]
 8003cd8:	9b01      	ldr	r3, [sp, #4]
 8003cda:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce2:	da2f      	bge.n	8003d44 <__ieee754_pow+0x9bc>
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	ed9d 0b00 	vldr	d0, [sp]
 8003cea:	f000 f9cd 	bl	8004088 <scalbn>
 8003cee:	ec51 0b10 	vmov	r0, r1, d0
 8003cf2:	ec53 2b18 	vmov	r2, r3, d8
 8003cf6:	f7ff bbe0 	b.w	80034ba <__ieee754_pow+0x132>
 8003cfa:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <__ieee754_pow+0xa34>)
 8003cfc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003d00:	429e      	cmp	r6, r3
 8003d02:	f77f af0b 	ble.w	8003b1c <__ieee754_pow+0x794>
 8003d06:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <__ieee754_pow+0xa38>)
 8003d08:	440b      	add	r3, r1
 8003d0a:	4303      	orrs	r3, r0
 8003d0c:	d00b      	beq.n	8003d26 <__ieee754_pow+0x99e>
 8003d0e:	a326      	add	r3, pc, #152	; (adr r3, 8003da8 <__ieee754_pow+0xa20>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	ec51 0b18 	vmov	r0, r1, d8
 8003d18:	f7fc fc1a 	bl	8000550 <__aeabi_dmul>
 8003d1c:	a322      	add	r3, pc, #136	; (adr r3, 8003da8 <__ieee754_pow+0xa20>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7ff bbca 	b.w	80034ba <__ieee754_pow+0x132>
 8003d26:	4622      	mov	r2, r4
 8003d28:	462b      	mov	r3, r5
 8003d2a:	f7fc fa59 	bl	80001e0 <__aeabi_dsub>
 8003d2e:	4642      	mov	r2, r8
 8003d30:	464b      	mov	r3, r9
 8003d32:	f7fc fe93 	bl	8000a5c <__aeabi_dcmpge>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	f43f aef0 	beq.w	8003b1c <__ieee754_pow+0x794>
 8003d3c:	e7e7      	b.n	8003d0e <__ieee754_pow+0x986>
 8003d3e:	f04f 0a00 	mov.w	sl, #0
 8003d42:	e717      	b.n	8003b74 <__ieee754_pow+0x7ec>
 8003d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	e7d2      	b.n	8003cf2 <__ieee754_pow+0x96a>
 8003d4c:	491a      	ldr	r1, [pc, #104]	; (8003db8 <__ieee754_pow+0xa30>)
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7ff bb9e 	b.w	8003490 <__ieee754_pow+0x108>
 8003d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d58:	f7ff bb9a 	b.w	8003490 <__ieee754_pow+0x108>
 8003d5c:	9000      	str	r0, [sp, #0]
 8003d5e:	f7ff bb76 	b.w	800344e <__ieee754_pow+0xc6>
 8003d62:	2100      	movs	r1, #0
 8003d64:	f7ff bb60 	b.w	8003428 <__ieee754_pow+0xa0>
 8003d68:	00000000 	.word	0x00000000
 8003d6c:	3fe62e43 	.word	0x3fe62e43
 8003d70:	fefa39ef 	.word	0xfefa39ef
 8003d74:	3fe62e42 	.word	0x3fe62e42
 8003d78:	0ca86c39 	.word	0x0ca86c39
 8003d7c:	be205c61 	.word	0xbe205c61
 8003d80:	72bea4d0 	.word	0x72bea4d0
 8003d84:	3e663769 	.word	0x3e663769
 8003d88:	c5d26bf1 	.word	0xc5d26bf1
 8003d8c:	3ebbbd41 	.word	0x3ebbbd41
 8003d90:	af25de2c 	.word	0xaf25de2c
 8003d94:	3f11566a 	.word	0x3f11566a
 8003d98:	16bebd93 	.word	0x16bebd93
 8003d9c:	3f66c16c 	.word	0x3f66c16c
 8003da0:	5555553e 	.word	0x5555553e
 8003da4:	3fc55555 	.word	0x3fc55555
 8003da8:	c2f8f359 	.word	0xc2f8f359
 8003dac:	01a56e1f 	.word	0x01a56e1f
 8003db0:	3fe00000 	.word	0x3fe00000
 8003db4:	000fffff 	.word	0x000fffff
 8003db8:	3ff00000 	.word	0x3ff00000
 8003dbc:	4090cbff 	.word	0x4090cbff
 8003dc0:	3f6f3400 	.word	0x3f6f3400
 8003dc4:	652b82fe 	.word	0x652b82fe
 8003dc8:	3c971547 	.word	0x3c971547

08003dcc <__ieee754_sqrt>:
 8003dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd0:	ec55 4b10 	vmov	r4, r5, d0
 8003dd4:	4e56      	ldr	r6, [pc, #344]	; (8003f30 <__ieee754_sqrt+0x164>)
 8003dd6:	43ae      	bics	r6, r5
 8003dd8:	ee10 0a10 	vmov	r0, s0
 8003ddc:	ee10 3a10 	vmov	r3, s0
 8003de0:	4629      	mov	r1, r5
 8003de2:	462a      	mov	r2, r5
 8003de4:	d110      	bne.n	8003e08 <__ieee754_sqrt+0x3c>
 8003de6:	ee10 2a10 	vmov	r2, s0
 8003dea:	462b      	mov	r3, r5
 8003dec:	f7fc fbb0 	bl	8000550 <__aeabi_dmul>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4620      	mov	r0, r4
 8003df6:	4629      	mov	r1, r5
 8003df8:	f7fc f9f4 	bl	80001e4 <__adddf3>
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	460d      	mov	r5, r1
 8003e00:	ec45 4b10 	vmov	d0, r4, r5
 8003e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e08:	2d00      	cmp	r5, #0
 8003e0a:	dc10      	bgt.n	8003e2e <__ieee754_sqrt+0x62>
 8003e0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003e10:	4330      	orrs	r0, r6
 8003e12:	d0f5      	beq.n	8003e00 <__ieee754_sqrt+0x34>
 8003e14:	b15d      	cbz	r5, 8003e2e <__ieee754_sqrt+0x62>
 8003e16:	ee10 2a10 	vmov	r2, s0
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	ee10 0a10 	vmov	r0, s0
 8003e20:	f7fc f9de 	bl	80001e0 <__aeabi_dsub>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	f7fc fcbc 	bl	80007a4 <__aeabi_ddiv>
 8003e2c:	e7e6      	b.n	8003dfc <__ieee754_sqrt+0x30>
 8003e2e:	1509      	asrs	r1, r1, #20
 8003e30:	d076      	beq.n	8003f20 <__ieee754_sqrt+0x154>
 8003e32:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003e36:	07ce      	lsls	r6, r1, #31
 8003e38:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8003e3c:	bf5e      	ittt	pl
 8003e3e:	0fda      	lsrpl	r2, r3, #31
 8003e40:	005b      	lslpl	r3, r3, #1
 8003e42:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8003e46:	0fda      	lsrs	r2, r3, #31
 8003e48:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8003e4c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003e50:	2000      	movs	r0, #0
 8003e52:	106d      	asrs	r5, r5, #1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	f04f 0e16 	mov.w	lr, #22
 8003e5a:	4684      	mov	ip, r0
 8003e5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e60:	eb0c 0401 	add.w	r4, ip, r1
 8003e64:	4294      	cmp	r4, r2
 8003e66:	bfde      	ittt	le
 8003e68:	1b12      	suble	r2, r2, r4
 8003e6a:	eb04 0c01 	addle.w	ip, r4, r1
 8003e6e:	1840      	addle	r0, r0, r1
 8003e70:	0052      	lsls	r2, r2, #1
 8003e72:	f1be 0e01 	subs.w	lr, lr, #1
 8003e76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003e7a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003e7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e82:	d1ed      	bne.n	8003e60 <__ieee754_sqrt+0x94>
 8003e84:	4671      	mov	r1, lr
 8003e86:	2720      	movs	r7, #32
 8003e88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003e8c:	4562      	cmp	r2, ip
 8003e8e:	eb04 060e 	add.w	r6, r4, lr
 8003e92:	dc02      	bgt.n	8003e9a <__ieee754_sqrt+0xce>
 8003e94:	d113      	bne.n	8003ebe <__ieee754_sqrt+0xf2>
 8003e96:	429e      	cmp	r6, r3
 8003e98:	d811      	bhi.n	8003ebe <__ieee754_sqrt+0xf2>
 8003e9a:	2e00      	cmp	r6, #0
 8003e9c:	eb06 0e04 	add.w	lr, r6, r4
 8003ea0:	da43      	bge.n	8003f2a <__ieee754_sqrt+0x15e>
 8003ea2:	f1be 0f00 	cmp.w	lr, #0
 8003ea6:	db40      	blt.n	8003f2a <__ieee754_sqrt+0x15e>
 8003ea8:	f10c 0801 	add.w	r8, ip, #1
 8003eac:	eba2 020c 	sub.w	r2, r2, ip
 8003eb0:	429e      	cmp	r6, r3
 8003eb2:	bf88      	it	hi
 8003eb4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003eb8:	1b9b      	subs	r3, r3, r6
 8003eba:	4421      	add	r1, r4
 8003ebc:	46c4      	mov	ip, r8
 8003ebe:	0052      	lsls	r2, r2, #1
 8003ec0:	3f01      	subs	r7, #1
 8003ec2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003ec6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003eca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ece:	d1dd      	bne.n	8003e8c <__ieee754_sqrt+0xc0>
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	d006      	beq.n	8003ee2 <__ieee754_sqrt+0x116>
 8003ed4:	1c4c      	adds	r4, r1, #1
 8003ed6:	bf13      	iteet	ne
 8003ed8:	3101      	addne	r1, #1
 8003eda:	3001      	addeq	r0, #1
 8003edc:	4639      	moveq	r1, r7
 8003ede:	f021 0101 	bicne.w	r1, r1, #1
 8003ee2:	1043      	asrs	r3, r0, #1
 8003ee4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003ee8:	0849      	lsrs	r1, r1, #1
 8003eea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003eee:	07c2      	lsls	r2, r0, #31
 8003ef0:	bf48      	it	mi
 8003ef2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003ef6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8003efa:	460c      	mov	r4, r1
 8003efc:	463d      	mov	r5, r7
 8003efe:	e77f      	b.n	8003e00 <__ieee754_sqrt+0x34>
 8003f00:	0ada      	lsrs	r2, r3, #11
 8003f02:	3815      	subs	r0, #21
 8003f04:	055b      	lsls	r3, r3, #21
 8003f06:	2a00      	cmp	r2, #0
 8003f08:	d0fa      	beq.n	8003f00 <__ieee754_sqrt+0x134>
 8003f0a:	02d7      	lsls	r7, r2, #11
 8003f0c:	d50a      	bpl.n	8003f24 <__ieee754_sqrt+0x158>
 8003f0e:	f1c1 0420 	rsb	r4, r1, #32
 8003f12:	fa23 f404 	lsr.w	r4, r3, r4
 8003f16:	1e4d      	subs	r5, r1, #1
 8003f18:	408b      	lsls	r3, r1
 8003f1a:	4322      	orrs	r2, r4
 8003f1c:	1b41      	subs	r1, r0, r5
 8003f1e:	e788      	b.n	8003e32 <__ieee754_sqrt+0x66>
 8003f20:	4608      	mov	r0, r1
 8003f22:	e7f0      	b.n	8003f06 <__ieee754_sqrt+0x13a>
 8003f24:	0052      	lsls	r2, r2, #1
 8003f26:	3101      	adds	r1, #1
 8003f28:	e7ef      	b.n	8003f0a <__ieee754_sqrt+0x13e>
 8003f2a:	46e0      	mov	r8, ip
 8003f2c:	e7be      	b.n	8003eac <__ieee754_sqrt+0xe0>
 8003f2e:	bf00      	nop
 8003f30:	7ff00000 	.word	0x7ff00000

08003f34 <fabs>:
 8003f34:	ec51 0b10 	vmov	r0, r1, d0
 8003f38:	ee10 2a10 	vmov	r2, s0
 8003f3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003f40:	ec43 2b10 	vmov	d0, r2, r3
 8003f44:	4770      	bx	lr

08003f46 <finite>:
 8003f46:	b082      	sub	sp, #8
 8003f48:	ed8d 0b00 	vstr	d0, [sp]
 8003f4c:	9801      	ldr	r0, [sp, #4]
 8003f4e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003f52:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003f56:	0fc0      	lsrs	r0, r0, #31
 8003f58:	b002      	add	sp, #8
 8003f5a:	4770      	bx	lr
 8003f5c:	0000      	movs	r0, r0
	...

08003f60 <nan>:
 8003f60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003f68 <nan+0x8>
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	7ff80000 	.word	0x7ff80000

08003f70 <rint>:
 8003f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f72:	ec51 0b10 	vmov	r0, r1, d0
 8003f76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003f7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003f7e:	2e13      	cmp	r6, #19
 8003f80:	ee10 4a10 	vmov	r4, s0
 8003f84:	460b      	mov	r3, r1
 8003f86:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8003f8a:	dc58      	bgt.n	800403e <rint+0xce>
 8003f8c:	2e00      	cmp	r6, #0
 8003f8e:	da2b      	bge.n	8003fe8 <rint+0x78>
 8003f90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003f94:	4302      	orrs	r2, r0
 8003f96:	d023      	beq.n	8003fe0 <rint+0x70>
 8003f98:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8003f9c:	4302      	orrs	r2, r0
 8003f9e:	4254      	negs	r4, r2
 8003fa0:	4314      	orrs	r4, r2
 8003fa2:	0c4b      	lsrs	r3, r1, #17
 8003fa4:	0b24      	lsrs	r4, r4, #12
 8003fa6:	045b      	lsls	r3, r3, #17
 8003fa8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8003fac:	ea44 0103 	orr.w	r1, r4, r3
 8003fb0:	4b32      	ldr	r3, [pc, #200]	; (800407c <rint+0x10c>)
 8003fb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003fb6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	f7fc f90f 	bl	80001e4 <__adddf3>
 8003fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8003fca:	463b      	mov	r3, r7
 8003fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	f7fc f905 	bl	80001e0 <__aeabi_dsub>
 8003fd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003fda:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8003fde:	4639      	mov	r1, r7
 8003fe0:	ec41 0b10 	vmov	d0, r0, r1
 8003fe4:	b003      	add	sp, #12
 8003fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe8:	4a25      	ldr	r2, [pc, #148]	; (8004080 <rint+0x110>)
 8003fea:	4132      	asrs	r2, r6
 8003fec:	ea01 0702 	and.w	r7, r1, r2
 8003ff0:	4307      	orrs	r7, r0
 8003ff2:	d0f5      	beq.n	8003fe0 <rint+0x70>
 8003ff4:	0851      	lsrs	r1, r2, #1
 8003ff6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8003ffa:	4314      	orrs	r4, r2
 8003ffc:	d00c      	beq.n	8004018 <rint+0xa8>
 8003ffe:	ea23 0201 	bic.w	r2, r3, r1
 8004002:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004006:	2e13      	cmp	r6, #19
 8004008:	fa43 f606 	asr.w	r6, r3, r6
 800400c:	bf0c      	ite	eq
 800400e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004012:	2400      	movne	r4, #0
 8004014:	ea42 0306 	orr.w	r3, r2, r6
 8004018:	4918      	ldr	r1, [pc, #96]	; (800407c <rint+0x10c>)
 800401a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800401e:	4622      	mov	r2, r4
 8004020:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc f8dc 	bl	80001e4 <__adddf3>
 800402c:	e9cd 0100 	strd	r0, r1, [sp]
 8004030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004034:	4622      	mov	r2, r4
 8004036:	462b      	mov	r3, r5
 8004038:	f7fc f8d2 	bl	80001e0 <__aeabi_dsub>
 800403c:	e7d0      	b.n	8003fe0 <rint+0x70>
 800403e:	2e33      	cmp	r6, #51	; 0x33
 8004040:	dd07      	ble.n	8004052 <rint+0xe2>
 8004042:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004046:	d1cb      	bne.n	8003fe0 <rint+0x70>
 8004048:	ee10 2a10 	vmov	r2, s0
 800404c:	f7fc f8ca 	bl	80001e4 <__adddf3>
 8004050:	e7c6      	b.n	8003fe0 <rint+0x70>
 8004052:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8004056:	f04f 36ff 	mov.w	r6, #4294967295
 800405a:	40d6      	lsrs	r6, r2
 800405c:	4230      	tst	r0, r6
 800405e:	d0bf      	beq.n	8003fe0 <rint+0x70>
 8004060:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8004064:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8004068:	bf1f      	itttt	ne
 800406a:	ea24 0101 	bicne.w	r1, r4, r1
 800406e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004072:	fa44 f202 	asrne.w	r2, r4, r2
 8004076:	ea41 0402 	orrne.w	r4, r1, r2
 800407a:	e7cd      	b.n	8004018 <rint+0xa8>
 800407c:	08004200 	.word	0x08004200
 8004080:	000fffff 	.word	0x000fffff
 8004084:	00000000 	.word	0x00000000

08004088 <scalbn>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	ec55 4b10 	vmov	r4, r5, d0
 800408e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004092:	4606      	mov	r6, r0
 8004094:	462b      	mov	r3, r5
 8004096:	b99a      	cbnz	r2, 80040c0 <scalbn+0x38>
 8004098:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800409c:	4323      	orrs	r3, r4
 800409e:	d036      	beq.n	800410e <scalbn+0x86>
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <scalbn+0x100>)
 80040a2:	4629      	mov	r1, r5
 80040a4:	ee10 0a10 	vmov	r0, s0
 80040a8:	2200      	movs	r2, #0
 80040aa:	f7fc fa51 	bl	8000550 <__aeabi_dmul>
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <scalbn+0x104>)
 80040b0:	429e      	cmp	r6, r3
 80040b2:	4604      	mov	r4, r0
 80040b4:	460d      	mov	r5, r1
 80040b6:	da10      	bge.n	80040da <scalbn+0x52>
 80040b8:	a32b      	add	r3, pc, #172	; (adr r3, 8004168 <scalbn+0xe0>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	e03a      	b.n	8004136 <scalbn+0xae>
 80040c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80040c4:	428a      	cmp	r2, r1
 80040c6:	d10c      	bne.n	80040e2 <scalbn+0x5a>
 80040c8:	ee10 2a10 	vmov	r2, s0
 80040cc:	4620      	mov	r0, r4
 80040ce:	4629      	mov	r1, r5
 80040d0:	f7fc f888 	bl	80001e4 <__adddf3>
 80040d4:	4604      	mov	r4, r0
 80040d6:	460d      	mov	r5, r1
 80040d8:	e019      	b.n	800410e <scalbn+0x86>
 80040da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80040de:	460b      	mov	r3, r1
 80040e0:	3a36      	subs	r2, #54	; 0x36
 80040e2:	4432      	add	r2, r6
 80040e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80040e8:	428a      	cmp	r2, r1
 80040ea:	dd08      	ble.n	80040fe <scalbn+0x76>
 80040ec:	2d00      	cmp	r5, #0
 80040ee:	a120      	add	r1, pc, #128	; (adr r1, 8004170 <scalbn+0xe8>)
 80040f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040f4:	da1c      	bge.n	8004130 <scalbn+0xa8>
 80040f6:	a120      	add	r1, pc, #128	; (adr r1, 8004178 <scalbn+0xf0>)
 80040f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040fc:	e018      	b.n	8004130 <scalbn+0xa8>
 80040fe:	2a00      	cmp	r2, #0
 8004100:	dd08      	ble.n	8004114 <scalbn+0x8c>
 8004102:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004106:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800410a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800410e:	ec45 4b10 	vmov	d0, r4, r5
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004118:	da19      	bge.n	800414e <scalbn+0xc6>
 800411a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800411e:	429e      	cmp	r6, r3
 8004120:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004124:	dd0a      	ble.n	800413c <scalbn+0xb4>
 8004126:	a112      	add	r1, pc, #72	; (adr r1, 8004170 <scalbn+0xe8>)
 8004128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e2      	bne.n	80040f6 <scalbn+0x6e>
 8004130:	a30f      	add	r3, pc, #60	; (adr r3, 8004170 <scalbn+0xe8>)
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f7fc fa0b 	bl	8000550 <__aeabi_dmul>
 800413a:	e7cb      	b.n	80040d4 <scalbn+0x4c>
 800413c:	a10a      	add	r1, pc, #40	; (adr r1, 8004168 <scalbn+0xe0>)
 800413e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0b8      	beq.n	80040b8 <scalbn+0x30>
 8004146:	a10e      	add	r1, pc, #56	; (adr r1, 8004180 <scalbn+0xf8>)
 8004148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800414c:	e7b4      	b.n	80040b8 <scalbn+0x30>
 800414e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004152:	3236      	adds	r2, #54	; 0x36
 8004154:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004158:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800415c:	4620      	mov	r0, r4
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <scalbn+0x108>)
 8004160:	2200      	movs	r2, #0
 8004162:	e7e8      	b.n	8004136 <scalbn+0xae>
 8004164:	f3af 8000 	nop.w
 8004168:	c2f8f359 	.word	0xc2f8f359
 800416c:	01a56e1f 	.word	0x01a56e1f
 8004170:	8800759c 	.word	0x8800759c
 8004174:	7e37e43c 	.word	0x7e37e43c
 8004178:	8800759c 	.word	0x8800759c
 800417c:	fe37e43c 	.word	0xfe37e43c
 8004180:	c2f8f359 	.word	0xc2f8f359
 8004184:	81a56e1f 	.word	0x81a56e1f
 8004188:	43500000 	.word	0x43500000
 800418c:	ffff3cb0 	.word	0xffff3cb0
 8004190:	3c900000 	.word	0x3c900000

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
