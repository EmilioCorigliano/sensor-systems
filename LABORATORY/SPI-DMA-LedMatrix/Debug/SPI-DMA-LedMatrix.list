
SPI-DMA-LedMatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a50  08004a50  00014a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac0  08004ac0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000094  08004b5c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004b5c  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe03  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4b  00000000  00000000  0002fec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00031d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00032b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163b9  00000000  00000000  00033870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa19  00000000  00000000  00049c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eace  00000000  00000000  00059642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  000e8164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004a34 	.word	0x08004a34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	08004a34 	.word	0x08004a34

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b96e 	b.w	8000de4 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	468c      	mov	ip, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f040 8083 	bne.w	8000c36 <__udivmoddi4+0x116>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4617      	mov	r7, r2
 8000b34:	d947      	bls.n	8000bc6 <__udivmoddi4+0xa6>
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	b142      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	f1c2 0020 	rsb	r0, r2, #32
 8000b40:	fa24 f000 	lsr.w	r0, r4, r0
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4097      	lsls	r7, r2
 8000b48:	ea40 0c01 	orr.w	ip, r0, r1
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbbc f6f8 	udiv	r6, ip, r8
 8000b58:	fa1f fe87 	uxth.w	lr, r7
 8000b5c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b64:	fb06 f10e 	mul.w	r1, r6, lr
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 8119 	bcs.w	8000da8 <__udivmoddi4+0x288>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8116 	bls.w	8000da8 <__udivmoddi4+0x288>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8105 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f240 8102 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	443c      	add	r4, r7
 8000bac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb0:	eba4 040e 	sub.w	r4, r4, lr
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	b902      	cbnz	r2, 8000bca <__udivmoddi4+0xaa>
 8000bc8:	deff      	udf	#255	; 0xff
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d150      	bne.n	8000c74 <__udivmoddi4+0x154>
 8000bd2:	1bcb      	subs	r3, r1, r7
 8000bd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd8:	fa1f f887 	uxth.w	r8, r7
 8000bdc:	2601      	movs	r6, #1
 8000bde:	fbb3 fcfe 	udiv	ip, r3, lr
 8000be2:	0c21      	lsrs	r1, r4, #16
 8000be4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bec:	fb08 f30c 	mul.w	r3, r8, ip
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d907      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000bf4:	1879      	adds	r1, r7, r1
 8000bf6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0xe2>
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	f200 80e9 	bhi.w	8000dd4 <__udivmoddi4+0x2b4>
 8000c02:	4684      	mov	ip, r0
 8000c04:	1ac9      	subs	r1, r1, r3
 8000c06:	b2a3      	uxth	r3, r4
 8000c08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c10:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c14:	fb08 f800 	mul.w	r8, r8, r0
 8000c18:	45a0      	cmp	r8, r4
 8000c1a:	d907      	bls.n	8000c2c <__udivmoddi4+0x10c>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x10a>
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	f200 80d9 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	eba4 0408 	sub.w	r4, r4, r8
 8000c30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c34:	e7bf      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x12e>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	f000 80b1 	beq.w	8000da2 <__udivmoddi4+0x282>
 8000c40:	2600      	movs	r6, #0
 8000c42:	e9c5 0100 	strd	r0, r1, [r5]
 8000c46:	4630      	mov	r0, r6
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	fab3 f683 	clz	r6, r3
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d14a      	bne.n	8000cec <__udivmoddi4+0x1cc>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0x140>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80b8 	bhi.w	8000dd0 <__udivmoddi4+0x2b0>
 8000c60:	1a84      	subs	r4, r0, r2
 8000c62:	eb61 0103 	sbc.w	r1, r1, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	468c      	mov	ip, r1
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d0a8      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000c6e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c72:	e7a5      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c74:	f1c2 0320 	rsb	r3, r2, #32
 8000c78:	fa20 f603 	lsr.w	r6, r0, r3
 8000c7c:	4097      	lsls	r7, r2
 8000c7e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c82:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c86:	40d9      	lsrs	r1, r3
 8000c88:	4330      	orrs	r0, r6
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f108 	mul.w	r1, r6, r8
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x19c>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cae:	f080 808d 	bcs.w	8000dcc <__udivmoddi4+0x2ac>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 808a 	bls.w	8000dcc <__udivmoddi4+0x2ac>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	443b      	add	r3, r7
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b281      	uxth	r1, r0
 8000cc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb00 f308 	mul.w	r3, r0, r8
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x1c4>
 8000cd4:	1879      	adds	r1, r7, r1
 8000cd6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cda:	d273      	bcs.n	8000dc4 <__udivmoddi4+0x2a4>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d971      	bls.n	8000dc4 <__udivmoddi4+0x2a4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4439      	add	r1, r7
 8000ce4:	1acb      	subs	r3, r1, r3
 8000ce6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cea:	e778      	b.n	8000bde <__udivmoddi4+0xbe>
 8000cec:	f1c6 0c20 	rsb	ip, r6, #32
 8000cf0:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000d02:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d06:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d0a:	431f      	orrs	r7, r3
 8000d0c:	0c3b      	lsrs	r3, r7, #16
 8000d0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d12:	fa1f f884 	uxth.w	r8, r4
 8000d16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d1a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d22:	458a      	cmp	sl, r1
 8000d24:	fa02 f206 	lsl.w	r2, r2, r6
 8000d28:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x220>
 8000d2e:	1861      	adds	r1, r4, r1
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	d248      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d36:	458a      	cmp	sl, r1
 8000d38:	d946      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d3a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3e:	4421      	add	r1, r4
 8000d40:	eba1 010a 	sub.w	r1, r1, sl
 8000d44:	b2bf      	uxth	r7, r7
 8000d46:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d4a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d52:	fb00 f808 	mul.w	r8, r0, r8
 8000d56:	45b8      	cmp	r8, r7
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x24a>
 8000d5a:	19e7      	adds	r7, r4, r7
 8000d5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d60:	d22e      	bcs.n	8000dc0 <__udivmoddi4+0x2a0>
 8000d62:	45b8      	cmp	r8, r7
 8000d64:	d92c      	bls.n	8000dc0 <__udivmoddi4+0x2a0>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4427      	add	r7, r4
 8000d6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6e:	eba7 0708 	sub.w	r7, r7, r8
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	454f      	cmp	r7, r9
 8000d78:	46c6      	mov	lr, r8
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	d31a      	bcc.n	8000db4 <__udivmoddi4+0x294>
 8000d7e:	d017      	beq.n	8000db0 <__udivmoddi4+0x290>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x27a>
 8000d82:	ebb3 020e 	subs.w	r2, r3, lr
 8000d86:	eb67 0701 	sbc.w	r7, r7, r1
 8000d8a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8e:	40f2      	lsrs	r2, r6
 8000d90:	ea4c 0202 	orr.w	r2, ip, r2
 8000d94:	40f7      	lsrs	r7, r6
 8000d96:	e9c5 2700 	strd	r2, r7, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	462e      	mov	r6, r5
 8000da4:	4628      	mov	r0, r5
 8000da6:	e70b      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000da8:	4606      	mov	r6, r0
 8000daa:	e6e9      	b.n	8000b80 <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fd      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db0:	4543      	cmp	r3, r8
 8000db2:	d2e5      	bcs.n	8000d80 <__udivmoddi4+0x260>
 8000db4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7df      	b.n	8000d80 <__udivmoddi4+0x260>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e7d2      	b.n	8000d6a <__udivmoddi4+0x24a>
 8000dc4:	4660      	mov	r0, ip
 8000dc6:	e78d      	b.n	8000ce4 <__udivmoddi4+0x1c4>
 8000dc8:	4681      	mov	r9, r0
 8000dca:	e7b9      	b.n	8000d40 <__udivmoddi4+0x220>
 8000dcc:	4666      	mov	r6, ip
 8000dce:	e775      	b.n	8000cbc <__udivmoddi4+0x19c>
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	e74a      	b.n	8000c6a <__udivmoddi4+0x14a>
 8000dd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd8:	4439      	add	r1, r7
 8000dda:	e713      	b.n	8000c04 <__udivmoddi4+0xe4>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	e724      	b.n	8000c2c <__udivmoddi4+0x10c>
 8000de2:	bf00      	nop

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <encodeLetterToShow>:
/**
 * @brief converts a letter in the "easy to draw" format to the format accepted by the led matrix
 * @param x the letter in the easy to draw format
 * @param pos the of the letter to insert in the toShow variable
 */
static void encodeLetterToShow(uint8_t x[5], uint8_t pos) {
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 5; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e02e      	b.n	8000e58 <encodeLetterToShow+0x70>
		toShow[pos][i][0] = x[i];
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	78fa      	ldrb	r2, [r7, #3]
 8000e02:	7818      	ldrb	r0, [r3, #0]
 8000e04:	491a      	ldr	r1, [pc, #104]	; (8000e70 <encodeLetterToShow+0x88>)
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4602      	mov	r2, r0
 8000e12:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		toShow[pos][i][1] = (uint8_t) pow(2, i);
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff fb30 	bl	800047c <__aeabi_i2d>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	ec43 2b11 	vmov	d1, r2, r3
 8000e24:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8000e68 <encodeLetterToShow+0x80>
 8000e28:	f002 fe4e 	bl	8003ac8 <pow>
 8000e2c:	ec53 2b10 	vmov	r2, r3, d0
 8000e30:	78fc      	ldrb	r4, [r7, #3]
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe3b 	bl	8000ab0 <__aeabi_d2uiz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b2d8      	uxtb	r0, r3
 8000e3e:	490c      	ldr	r1, [pc, #48]	; (8000e70 <encodeLetterToShow+0x88>)
 8000e40:	4623      	mov	r3, r4
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4423      	add	r3, r4
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	440b      	add	r3, r1
 8000e4e:	4602      	mov	r2, r0
 8000e50:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 5; i++) {
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	ddcd      	ble.n	8000dfa <encodeLetterToShow+0x12>
	}
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd90      	pop	{r4, r7, pc}
 8000e68:	00000000 	.word	0x00000000
 8000e6c:	40000000 	.word	0x40000000
 8000e70:	200000b4 	.word	0x200000b4

08000e74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e78:	f000 fb9e 	bl	80015b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e7c:	f000 f83e 	bl	8000efc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_DMA_Init();
 8000e80:	f000 f92c 	bl	80010dc <MX_DMA_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e84:	f000 f94a 	bl	800111c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e88:	f000 f8fe 	bl	8001088 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000e8c:	f000 f8a2 	bl	8000fd4 <MX_SPI1_Init>
	MX_TIM11_Init();
 8000e90:	f000 f8d6 	bl	8001040 <MX_TIM11_Init>
	MX_DMA_Init();
 8000e94:	f000 f922 	bl	80010dc <MX_DMA_Init>
	/* USER CODE BEGIN 2 */

	// inserting letters into the toShow variable
	encodeLetterToShow(letter_C, 0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <main+0x70>)
 8000e9c:	f7ff ffa4 	bl	8000de8 <encodeLetterToShow>
	encodeLetterToShow(letter_I, 1);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <main+0x74>)
 8000ea4:	f7ff ffa0 	bl	8000de8 <encodeLetterToShow>
	encodeLetterToShow(letter_A, 2);
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4810      	ldr	r0, [pc, #64]	; (8000eec <main+0x78>)
 8000eac:	f7ff ff9c 	bl	8000de8 <encodeLetterToShow>
	encodeLetterToShow(letter_O, 3);
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <main+0x7c>)
 8000eb4:	f7ff ff98 	bl	8000de8 <encodeLetterToShow>

	// starting the timer
	HAL_TIM_Base_Start_IT(&htim11);
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <main+0x80>)
 8000eba:	f002 f997 	bl	80031ec <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(1000);
 8000ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec2:	f000 fbeb 	bl	800169c <HAL_Delay>
		iLetter = (iLetter + 1) % N_LETTER;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <main+0x84>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	425a      	negs	r2, r3
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	bf58      	it	pl
 8000ed8:	4253      	negpl	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <main+0x84>)
 8000ede:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8000ee0:	e7ed      	b.n	8000ebe <main+0x4a>
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000018 	.word	0x20000018
 8000ef4:	200000dc 	.word	0x200000dc
 8000ef8:	200000b1 	.word	0x200000b1

08000efc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2230      	movs	r2, #48	; 0x30
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fdd4 	bl	8003ab8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000f70:	2310      	movs	r3, #16
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000f74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 f9cc 	bl	8002324 <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x9a>
		Error_Handler();
 8000f92:	f000 f97f 	bl	8001294 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fc2e 	bl	8002814 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xc6>
		Error_Handler();
 8000fbe:	f000 f969 	bl	8001294 <Error_Handler>
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <MX_SPI1_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_SPI1_Init+0x64>)
 8001000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001004:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_SPI1_Init+0x64>)
 8001008:	2210      	movs	r2, #16
 800100a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_SPI1_Init+0x64>)
 8001020:	220a      	movs	r2, #10
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_SPI1_Init+0x64>)
 8001026:	f001 fdf1 	bl	8002c0c <HAL_SPI_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001030:	f000 f930 	bl	8001294 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000124 	.word	0x20000124
 800103c:	40013000 	.word	0x40013000

08001040 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_TIM11_Init+0x40>)
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <MX_TIM11_Init+0x44>)
 8001048:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 8;
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <MX_TIM11_Init+0x40>)
 800104c:	2208      	movs	r2, #8
 800104e:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_TIM11_Init+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 42000;
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MX_TIM11_Init+0x40>)
 8001058:	f24a 4210 	movw	r2, #42000	; 0xa410
 800105c:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_TIM11_Init+0x40>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_TIM11_Init+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_TIM11_Init+0x40>)
 800106c:	f002 f86e 	bl	800314c <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM11_Init+0x3a>
		Error_Handler();
 8001076:	f000 f90d 	bl	8001294 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000dc 	.word	0x200000dc
 8001084:	40014800 	.word	0x40014800

08001088 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_USART2_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f002 faba 	bl	8003638 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80010ca:	f000 f8e3 	bl	8001294 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000017c 	.word	0x2000017c
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x3c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x3c>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	203b      	movs	r0, #59	; 0x3b
 8001104:	f000 fbc9 	bl	800189a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001108:	203b      	movs	r0, #59	; 0x3b
 800110a:	f000 fbe2 	bl	80018d2 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <MX_GPIO_Init+0xd0>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_GPIO_Init+0xd0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_GPIO_Init+0xd4>)
 80011a8:	f001 f8a2 	bl	80022f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80011ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_GPIO_Init+0xd8>)
 80011c4:	f000 ff10 	bl	8001fe8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011c8:	2340      	movs	r3, #64	; 0x40
 80011ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_GPIO_Init+0xd4>)
 80011e0:	f000 ff02 	bl	8001fe8 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800

080011f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/**
 * @brief transmits in DMA format the iCol column of the iLetter letter of toShow
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d121      	bne.n	800124c <HAL_TIM_PeriodElapsedCallback+0x54>
		HAL_SPI_Transmit_DMA(&hspi1, toShow[iLetter][iCol], 2);
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	440b      	add	r3, r1
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001220:	4413      	add	r3, r2
 8001222:	2202      	movs	r2, #2
 8001224:	4619      	mov	r1, r3
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001228:	f001 fd7a 	bl	8002d20 <HAL_SPI_Transmit_DMA>
		iCol = (iCol + 1) % 5;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001234:	fb83 1302 	smull	r1, r3, r3, r2
 8001238:	1059      	asrs	r1, r3, #1
 800123a:	17d3      	asrs	r3, r2, #31
 800123c:	1ac9      	subs	r1, r1, r3
 800123e:	460b      	mov	r3, r1
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	1ad1      	subs	r1, r2, r3
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800124a:	701a      	strb	r2, [r3, #0]
	}
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200000dc 	.word	0x200000dc
 8001258:	200000b1 	.word	0x200000b1
 800125c:	200000b0 	.word	0x200000b0
 8001260:	200000b4 	.word	0x200000b4
 8001264:	20000124 	.word	0x20000124
 8001268:	66666667 	.word	0x66666667

0800126c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_SPI_TxCpltCallback+0x24>)
 800127a:	f001 f839 	bl	80022f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <HAL_SPI_TxCpltCallback+0x24>)
 8001284:	f001 f834 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020400 	.word	0x40020400

08001294 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012de:	2007      	movs	r0, #7
 80012e0:	f000 fad0 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <HAL_SPI_MspInit+0xe0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d159      	bne.n	80013c6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a2e      	ldr	r2, [pc, #184]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 800131c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800134a:	23e0      	movs	r3, #224	; 0xe0
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135a:	2305      	movs	r3, #5
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	481c      	ldr	r0, [pc, #112]	; (80013d8 <HAL_SPI_MspInit+0xe8>)
 8001366:	f000 fe3f 	bl	8001fe8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_SPI_MspInit+0xec>)
 800136c:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 800136e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001372:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001376:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_SPI_MspInit+0xec>)
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_SPI_MspInit+0xec>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_SPI_MspInit+0xec>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_SPI_MspInit+0xec>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_SPI_MspInit+0xec>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_SPI_MspInit+0xec>)
 80013ac:	f000 faac 	bl	8001908 <HAL_DMA_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80013b6:	f7ff ff6d 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_SPI_MspInit+0xec>)
 80013be:	649a      	str	r2, [r3, #72]	; 0x48
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_SPI_MspInit+0xec>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40013000 	.word	0x40013000
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	200001c0 	.word	0x200001c0
 80013e0:	40026458 	.word	0x40026458

080013e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_TIM_Base_MspInit+0x48>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d115      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_TIM_Base_MspInit+0x4c>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <HAL_TIM_Base_MspInit+0x4c>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_TIM_Base_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	201a      	movs	r0, #26
 8001418:	f000 fa3f 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800141c:	201a      	movs	r0, #26
 800141e:	f000 fa58 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40014800 	.word	0x40014800
 8001430:	40023800 	.word	0x40023800

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_UART_MspInit+0x84>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d12b      	bne.n	80014ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_UART_MspInit+0x88>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <HAL_UART_MspInit+0x88>)
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_UART_MspInit+0x88>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_UART_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_UART_MspInit+0x88>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_UART_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800148e:	230c      	movs	r3, #12
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149e:	2307      	movs	r3, #7
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_UART_MspInit+0x8c>)
 80014aa:	f000 fd9d 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40004400 	.word	0x40004400
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f8a4 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800151e:	f001 fec7 	bl	80032b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000dc 	.word	0x200000dc

0800152c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA2_Stream3_IRQHandler+0x10>)
 8001532:	f000 faef 	bl	8001b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200001c0 	.word	0x200001c0

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800158e:	f7ff ffd7 	bl	8001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f002 fa6d 	bl	8003a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fc6d 	bl	8000e74 <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800159c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80015a8:	08004ac8 	.word	0x08004ac8
  ldr r2, =_sbss
 80015ac:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015b0:	20000224 	.word	0x20000224

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f94f 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fe58 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f967 	bl	80018ee <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f000 f92f 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000020 	.word	0x20000020
 8001654:	20000028 	.word	0x20000028
 8001658:	20000024 	.word	0x20000024

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000028 	.word	0x20000028
 8001680:	20000220 	.word	0x20000220

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000220 	.word	0x20000220

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000028 	.word	0x20000028

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff feb6 	bl	8001684 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e099      	b.n	8001a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	e00f      	b.n	8001966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001946:	f7ff fe9d 	bl	8001684 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b05      	cmp	r3, #5
 8001952:	d908      	bls.n	8001966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2220      	movs	r2, #32
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e078      	b.n	8001a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e8      	bne.n	8001946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_DMA_Init+0x158>)
 8001980:	4013      	ands	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d107      	bne.n	80019d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	4313      	orrs	r3, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d117      	bne.n	8001a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fa6f 	bl	8001ef0 <DMA_CheckFifoParam>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a26:	2301      	movs	r3, #1
 8001a28:	e016      	b.n	8001a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fa26 	bl	8001e84 <DMA_CalcBaseAndBitshift>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	223f      	movs	r2, #63	; 0x3f
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	f010803f 	.word	0xf010803f

08001a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_DMA_Start_IT+0x26>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e040      	b.n	8001b0c <HAL_DMA_Start_IT+0xa8>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d12f      	bne.n	8001afe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f9b8 	bl	8001e28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	223f      	movs	r2, #63	; 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0216 	orr.w	r2, r2, #22
 8001ad2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0208 	orr.w	r2, r2, #8
 8001aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e005      	b.n	8001b0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
 8001b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <HAL_DMA_IRQHandler+0x258>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a92      	ldr	r2, [pc, #584]	; (8001d70 <HAL_DMA_IRQHandler+0x25c>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	2208      	movs	r2, #8
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01a      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0204 	bic.w	r2, r2, #4
 8001b66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	2201      	movs	r2, #1
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d012      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	f043 0202 	orr.w	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	2204      	movs	r2, #4
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d012      	beq.n	8001bec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2204      	movs	r2, #4
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d043      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d03c      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2210      	movs	r2, #16
 8001c10:	409a      	lsls	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d018      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d108      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d024      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
 8001c42:	e01f      	b.n	8001c84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01b      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
 8001c54:	e016      	b.n	8001c84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d107      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0208 	bic.w	r2, r2, #8
 8001c72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	2220      	movs	r2, #32
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 808e 	beq.w	8001db2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8086 	beq.w	8001db2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	2220      	movs	r2, #32
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d136      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0216 	bic.w	r2, r2, #22
 8001ccc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <HAL_DMA_IRQHandler+0x1da>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0208 	bic.w	r2, r2, #8
 8001cfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	223f      	movs	r2, #63	; 0x3f
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d07d      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
        }
        return;
 8001d2a:	e078      	b.n	8001e1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d01c      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d108      	bne.n	8001d5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d030      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e02b      	b.n	8001db2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d027      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
 8001d6a:	e022      	b.n	8001db2 <HAL_DMA_IRQHandler+0x29e>
 8001d6c:	20000020 	.word	0x20000020
 8001d70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10f      	bne.n	8001da2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0210 	bic.w	r2, r2, #16
 8001d90:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d032      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d022      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2205      	movs	r2, #5
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d307      	bcc.n	8001dfa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f2      	bne.n	8001dde <HAL_DMA_IRQHandler+0x2ca>
 8001df8:	e000      	b.n	8001dfc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dfa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
 8001e1c:	e000      	b.n	8001e20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e1e:	bf00      	nop
    }
  }
}
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop

08001e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b40      	cmp	r3, #64	; 0x40
 8001e54:	d108      	bne.n	8001e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e66:	e007      	b.n	8001e78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3b10      	subs	r3, #16
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <DMA_CalcBaseAndBitshift+0x64>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e9e:	4a13      	ldr	r2, [pc, #76]	; (8001eec <DMA_CalcBaseAndBitshift+0x68>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d909      	bls.n	8001ec6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	1d1a      	adds	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ec4:	e007      	b.n	8001ed6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ece:	f023 0303 	bic.w	r3, r3, #3
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	aaaaaaab 	.word	0xaaaaaaab
 8001eec:	08004a68 	.word	0x08004a68

08001ef0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d11f      	bne.n	8001f4a <DMA_CheckFifoParam+0x5a>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d856      	bhi.n	8001fbe <DMA_CheckFifoParam+0xce>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <DMA_CheckFifoParam+0x28>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08001f3b 	.word	0x08001f3b
 8001f20:	08001f29 	.word	0x08001f29
 8001f24:	08001fbf 	.word	0x08001fbf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d046      	beq.n	8001fc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f38:	e043      	b.n	8001fc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f42:	d140      	bne.n	8001fc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f48:	e03d      	b.n	8001fc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f52:	d121      	bne.n	8001f98 <DMA_CheckFifoParam+0xa8>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d837      	bhi.n	8001fca <DMA_CheckFifoParam+0xda>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <DMA_CheckFifoParam+0x70>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f77 	.word	0x08001f77
 8001f68:	08001f71 	.word	0x08001f71
 8001f6c:	08001f89 	.word	0x08001f89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
      break;
 8001f74:	e030      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d025      	beq.n	8001fce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f86:	e022      	b.n	8001fce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f90:	d11f      	bne.n	8001fd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f96:	e01c      	b.n	8001fd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d903      	bls.n	8001fa6 <DMA_CheckFifoParam+0xb6>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d003      	beq.n	8001fac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fa4:	e018      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8001faa:	e015      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00e      	beq.n	8001fd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
      break;
 8001fbc:	e00b      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fbe:	bf00      	nop
 8001fc0:	e00a      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e008      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e006      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fca:	bf00      	nop
 8001fcc:	e004      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e002      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fd2:	bf00      	nop
 8001fd4:	e000      	b.n	8001fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fd6:	bf00      	nop
    }
  } 
  
  return status; 
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e159      	b.n	80022b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 8148 	bne.w	80022b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d005      	beq.n	800203a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002036:	2b02      	cmp	r3, #2
 8002038:	d130      	bne.n	800209c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 0201 	and.w	r2, r3, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d017      	beq.n	80020d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a2 	beq.w	80022b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <HAL_GPIO_Init+0x2e8>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a56      	ldr	r2, [pc, #344]	; (80022d0 <HAL_GPIO_Init+0x2e8>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <HAL_GPIO_Init+0x2e8>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218a:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <HAL_GPIO_Init+0x2ec>)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a49      	ldr	r2, [pc, #292]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x202>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a48      	ldr	r2, [pc, #288]	; (80022dc <HAL_GPIO_Init+0x2f4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x1fe>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a47      	ldr	r2, [pc, #284]	; (80022e0 <HAL_GPIO_Init+0x2f8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x1fa>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a46      	ldr	r2, [pc, #280]	; (80022e4 <HAL_GPIO_Init+0x2fc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x1f6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <HAL_GPIO_Init+0x300>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x1f2>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e008      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021da:	2307      	movs	r3, #7
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021de:	2303      	movs	r3, #3
 80021e0:	e004      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021ea:	2300      	movs	r3, #0
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	f002 0203 	and.w	r2, r2, #3
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4093      	lsls	r3, r2
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021fc:	4935      	ldr	r1, [pc, #212]	; (80022d4 <HAL_GPIO_Init+0x2ec>)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_GPIO_Init+0x304>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222e:	4a2f      	ldr	r2, [pc, #188]	; (80022ec <HAL_GPIO_Init+0x304>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_GPIO_Init+0x304>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002258:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_GPIO_Init+0x304>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_GPIO_Init+0x304>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_GPIO_Init+0x304>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_GPIO_Init+0x304>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <HAL_GPIO_Init+0x304>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	f67f aea2 	bls.w	8002004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020c00 	.word	0x40020c00
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	041a      	lsls	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e264      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d075      	beq.n	800242e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002342:	4ba3      	ldr	r3, [pc, #652]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d00c      	beq.n	8002368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4ba0      	ldr	r3, [pc, #640]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	2b08      	cmp	r3, #8
 8002358:	d112      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4b9d      	ldr	r3, [pc, #628]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b99      	ldr	r3, [pc, #612]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05b      	beq.n	800242c <HAL_RCC_OscConfig+0x108>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d157      	bne.n	800242c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e23f      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x74>
 800238a:	4b91      	ldr	r3, [pc, #580]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a90      	ldr	r2, [pc, #576]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x98>
 80023a2:	4b8b      	ldr	r3, [pc, #556]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a8a      	ldr	r2, [pc, #552]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a87      	ldr	r2, [pc, #540]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 80023bc:	4b84      	ldr	r3, [pc, #528]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a83      	ldr	r2, [pc, #524]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a80      	ldr	r2, [pc, #512]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f952 	bl	8001684 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff f94e 	bl	8001684 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e204      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xc0>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff f93e 	bl	8001684 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff f93a 	bl	8001684 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1f0      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0xe8>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243a:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b62      	ldr	r3, [pc, #392]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11c      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1c4      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4952      	ldr	r1, [pc, #328]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	e03a      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <HAL_RCC_OscConfig+0x2b0>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff f8f3 	bl	8001684 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff f8ef 	bl	8001684 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1a5      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4940      	ldr	r1, [pc, #256]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_OscConfig+0x2b0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff f8d2 	bl	8001684 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e4:	f7ff f8ce 	bl	8001684 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e184      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d030      	beq.n	8002570 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_RCC_OscConfig+0x2b4>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff f8b2 	bl	8001684 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002524:	f7ff f8ae 	bl	8001684 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e164      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x200>
 8002542:	e015      	b.n	8002570 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_OscConfig+0x2b4>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7ff f89b 	bl	8001684 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002552:	f7ff f897 	bl	8001684 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e14d      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a0 	beq.w	80026be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025aa:	2301      	movs	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x2b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d121      	bne.n	80025fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_RCC_OscConfig+0x2b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_RCC_OscConfig+0x2b8>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c6:	f7ff f85d 	bl	8001684 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	e011      	b.n	80025f2 <HAL_RCC_OscConfig+0x2ce>
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	42470000 	.word	0x42470000
 80025d8:	42470e80 	.word	0x42470e80
 80025dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7ff f850 	bl	8001684 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e106      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b85      	ldr	r3, [pc, #532]	; (8002808 <HAL_RCC_OscConfig+0x4e4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d106      	bne.n	8002614 <HAL_RCC_OscConfig+0x2f0>
 8002606:	4b81      	ldr	r3, [pc, #516]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a80      	ldr	r2, [pc, #512]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
 8002612:	e01c      	b.n	800264e <HAL_RCC_OscConfig+0x32a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b05      	cmp	r3, #5
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x312>
 800261c:	4b7b      	ldr	r3, [pc, #492]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a7a      	ldr	r2, [pc, #488]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	4b78      	ldr	r3, [pc, #480]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a77      	ldr	r2, [pc, #476]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	e00b      	b.n	800264e <HAL_RCC_OscConfig+0x32a>
 8002636:	4b75      	ldr	r3, [pc, #468]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	4a74      	ldr	r2, [pc, #464]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6713      	str	r3, [r2, #112]	; 0x70
 8002642:	4b72      	ldr	r3, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	4a71      	ldr	r2, [pc, #452]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7ff f815 	bl	8001684 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7ff f811 	bl	8001684 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0c5      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	4b65      	ldr	r3, [pc, #404]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ee      	beq.n	800265e <HAL_RCC_OscConfig+0x33a>
 8002680:	e014      	b.n	80026ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002682:	f7fe ffff 	bl	8001684 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fffb 	bl	8001684 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0af      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ee      	bne.n	800268a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d105      	bne.n	80026be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a55      	ldr	r2, [pc, #340]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 80026b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 809b 	beq.w	80027fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d05c      	beq.n	800278e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d141      	bne.n	8002760 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <HAL_RCC_OscConfig+0x4ec>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe ffcf 	bl	8001684 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe ffcb 	bl	8001684 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e081      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fc:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	019b      	lsls	r3, r3, #6
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	4937      	ldr	r1, [pc, #220]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCC_OscConfig+0x4ec>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe ffa4 	bl	8001684 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe ffa0 	bl	8001684 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e056      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x41c>
 800275e:	e04e      	b.n	80027fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_OscConfig+0x4ec>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe ff8d 	bl	8001684 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe ff89 	bl	8001684 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e03f      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x44a>
 800278c:	e037      	b.n	80027fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e032      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x4e8>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d028      	beq.n	80027fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d121      	bne.n	80027fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d11a      	bne.n	80027fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027ca:	4013      	ands	r3, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d111      	bne.n	80027fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	3b01      	subs	r3, #1
 80027e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40007000 	.word	0x40007000
 800280c:	40023800 	.word	0x40023800
 8002810:	42470060 	.word	0x42470060

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0cc      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d90c      	bls.n	8002850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b65      	ldr	r3, [pc, #404]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800288a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	494d      	ldr	r1, [pc, #308]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d044      	beq.n	8002934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d119      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e067      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4934      	ldr	r1, [pc, #208]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002904:	f7fe febe 	bl	8001684 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7fe feba 	bl	8001684 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e04f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d20c      	bcs.n	800295c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e032      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4916      	ldr	r1, [pc, #88]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	490e      	ldr	r1, [pc, #56]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800299a:	f000 f821 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	490a      	ldr	r1, [pc, #40]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fe1e 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023c00 	.word	0x40023c00
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08004a50 	.word	0x08004a50
 80029d8:	20000020 	.word	0x20000020
 80029dc:	20000024 	.word	0x20000024

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	2300      	movs	r3, #0
 80029f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f8:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x40>
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	f200 80bd 	bhi.w	8002b84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a12:	e0b7      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a16:	60bb      	str	r3, [r7, #8]
       break;
 8002a18:	e0b7      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b61      	ldr	r3, [pc, #388]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a1c:	60bb      	str	r3, [r7, #8]
      break;
 8002a1e:	e0b4      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d04d      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	ea02 0800 	and.w	r8, r2, r0
 8002a4e:	ea03 0901 	and.w	r9, r3, r1
 8002a52:	4640      	mov	r0, r8
 8002a54:	4649      	mov	r1, r9
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	014b      	lsls	r3, r1, #5
 8002a60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a64:	0142      	lsls	r2, r0, #5
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	ebb0 0008 	subs.w	r0, r0, r8
 8002a6e:	eb61 0109 	sbc.w	r1, r1, r9
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	018b      	lsls	r3, r1, #6
 8002a7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a80:	0182      	lsls	r2, r0, #6
 8002a82:	1a12      	subs	r2, r2, r0
 8002a84:	eb63 0301 	sbc.w	r3, r3, r1
 8002a88:	f04f 0000 	mov.w	r0, #0
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	00d9      	lsls	r1, r3, #3
 8002a92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a96:	00d0      	lsls	r0, r2, #3
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	eb12 0208 	adds.w	r2, r2, r8
 8002aa0:	eb43 0309 	adc.w	r3, r3, r9
 8002aa4:	f04f 0000 	mov.w	r0, #0
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	0259      	lsls	r1, r3, #9
 8002aae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ab2:	0250      	lsls	r0, r2, #9
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	f7fe f814 	bl	8000af0 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4613      	mov	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e04a      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad2:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	ea02 0400 	and.w	r4, r2, r0
 8002aea:	ea03 0501 	and.w	r5, r3, r1
 8002aee:	4620      	mov	r0, r4
 8002af0:	4629      	mov	r1, r5
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	014b      	lsls	r3, r1, #5
 8002afc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b00:	0142      	lsls	r2, r0, #5
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	1b00      	subs	r0, r0, r4
 8002b08:	eb61 0105 	sbc.w	r1, r1, r5
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	018b      	lsls	r3, r1, #6
 8002b16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b1a:	0182      	lsls	r2, r0, #6
 8002b1c:	1a12      	subs	r2, r2, r0
 8002b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b22:	f04f 0000 	mov.w	r0, #0
 8002b26:	f04f 0100 	mov.w	r1, #0
 8002b2a:	00d9      	lsls	r1, r3, #3
 8002b2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b30:	00d0      	lsls	r0, r2, #3
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	1912      	adds	r2, r2, r4
 8002b38:	eb45 0303 	adc.w	r3, r5, r3
 8002b3c:	f04f 0000 	mov.w	r0, #0
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	0299      	lsls	r1, r3, #10
 8002b46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b4a:	0290      	lsls	r0, r2, #10
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	f7fd ffc8 	bl	8000af0 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4613      	mov	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	60bb      	str	r3, [r7, #8]
      break;
 8002b82:	e002      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b86:	60bb      	str	r3, [r7, #8]
      break;
 8002b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	00f42400 	.word	0x00f42400
 8002ba0:	007a1200 	.word	0x007a1200

08002ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000020 	.word	0x20000020

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc0:	f7ff fff0 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0a9b      	lsrs	r3, r3, #10
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08004a60 	.word	0x08004a60

08002be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002be8:	f7ff ffdc 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0b5b      	lsrs	r3, r3, #13
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4903      	ldr	r1, [pc, #12]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	08004a60 	.word	0x08004a60

08002c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e07b      	b.n	8002d16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d108      	bne.n	8002c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c2e:	d009      	beq.n	8002c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
 8002c36:	e005      	b.n	8002c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fb46 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	ea42 0103 	orr.w	r1, r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0104 	and.w	r1, r3, #4
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	f003 0210 	and.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_SPI_Transmit_DMA+0x20>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e09b      	b.n	8002e78 <HAL_SPI_Transmit_DMA+0x158>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d002      	beq.n	8002d5a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
 8002d56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d58:	e089      	b.n	8002e6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_SPI_Transmit_DMA+0x46>
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d6a:	e080      	b.n	8002e6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db2:	d10f      	bne.n	8002dd4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd8:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <HAL_SPI_Transmit_DMA+0x160>)
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <HAL_SPI_Transmit_DMA+0x164>)
 8002de2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <HAL_SPI_Transmit_DMA+0x168>)
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	2200      	movs	r2, #0
 8002df2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e0c:	f7fe fe2a 	bl	8001a64 <HAL_DMA_Start_IT>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002e2e:	e01e      	b.n	8002e6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d007      	beq.n	8002e4e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0220 	orr.w	r2, r2, #32
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0202 	orr.w	r2, r2, #2
 8002e6c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	08002f5d 	.word	0x08002f5d
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002f79 	.word	0x08002f79

08002e8c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec2:	f7fe fbdf 	bl	8001684 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed6:	d03b      	beq.n	8002f50 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0220 	bic.w	r2, r2, #32
 8002ee6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0202 	bic.w	r2, r2, #2
 8002ef6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	2164      	movs	r1, #100	; 0x64
 8002efc:	6978      	ldr	r0, [r7, #20]
 8002efe:	f000 f8e3 	bl	80030c8 <SPI_EndRxTxTransaction>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002f48:	6978      	ldr	r0, [r7, #20]
 8002f4a:	f7ff ffa9 	bl	8002ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f4e:	e002      	b.n	8002f56 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002f50:	6978      	ldr	r0, [r7, #20]
 8002f52:	f7fe f98b 	bl	800126c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7ff ff8e 	bl	8002e8c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0203 	bic.w	r2, r2, #3
 8002f94:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f043 0210 	orr.w	r2, r3, #16
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff ff78 	bl	8002ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fc8:	f7fe fb5c 	bl	8001684 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fd8:	f7fe fb54 	bl	8001684 <HAL_GetTick>
 8002fdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fde:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	015b      	lsls	r3, r3, #5
 8002fe4:	0d1b      	lsrs	r3, r3, #20
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fee:	e054      	b.n	800309a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d050      	beq.n	800309a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ff8:	f7fe fb44 	bl	8001684 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	429a      	cmp	r2, r3
 8003006:	d902      	bls.n	800300e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d13d      	bne.n	800308a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800301c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003026:	d111      	bne.n	800304c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003030:	d004      	beq.n	800303c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303a:	d107      	bne.n	800304c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800304a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003054:	d10f      	bne.n	8003076 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003074:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e017      	b.n	80030ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3b01      	subs	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d19b      	bne.n	8002ff0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000020 	.word	0x20000020

080030c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <SPI_EndRxTxTransaction+0x7c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <SPI_EndRxTxTransaction+0x80>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0d5b      	lsrs	r3, r3, #21
 80030e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f2:	d112      	bne.n	800311a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2200      	movs	r2, #0
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff ff5a 	bl	8002fb8 <SPI_WaitFlagStateUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e00f      	b.n	800313a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3b01      	subs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d0f2      	beq.n	800311a <SPI_EndRxTxTransaction+0x52>
 8003134:	e000      	b.n	8003138 <SPI_EndRxTxTransaction+0x70>
        break;
 8003136:	bf00      	nop
  }

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000020 	.word	0x20000020
 8003148:	165e9f81 	.word	0x165e9f81

0800314c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e041      	b.n	80031e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe f936 	bl	80013e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 f9c0 	bl	8003510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d001      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e044      	b.n	800328e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1e      	ldr	r2, [pc, #120]	; (800329c <HAL_TIM_Base_Start_IT+0xb0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d018      	beq.n	8003258 <HAL_TIM_Base_Start_IT+0x6c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d013      	beq.n	8003258 <HAL_TIM_Base_Start_IT+0x6c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00e      	beq.n	8003258 <HAL_TIM_Base_Start_IT+0x6c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_TIM_Base_Start_IT+0x6c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_TIM_Base_Start_IT+0x6c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_TIM_Base_Start_IT+0xc0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d111      	bne.n	800327c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b06      	cmp	r3, #6
 8003268:	d010      	beq.n	800328c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	e007      	b.n	800328c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40010000 	.word	0x40010000
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800
 80032a8:	40000c00 	.word	0x40000c00
 80032ac:	40014000 	.word	0x40014000

080032b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d122      	bne.n	800330c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d11b      	bne.n	800330c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0202 	mvn.w	r2, #2
 80032dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8ee 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8e0 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8f1 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b04      	cmp	r3, #4
 8003318:	d122      	bne.n	8003360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b04      	cmp	r3, #4
 8003326:	d11b      	bne.n	8003360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0204 	mvn.w	r2, #4
 8003330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8c4 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8b6 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8c7 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b08      	cmp	r3, #8
 800336c:	d122      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b08      	cmp	r3, #8
 800337a:	d11b      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0208 	mvn.w	r2, #8
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2204      	movs	r2, #4
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f89a 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f88c 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f89d 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d122      	bne.n	8003408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0210 	mvn.w	r2, #16
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2208      	movs	r2, #8
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f870 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f862 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f873 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d10e      	bne.n	8003434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d107      	bne.n	8003434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0201 	mvn.w	r2, #1
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fee2 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d10e      	bne.n	8003460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	2b80      	cmp	r3, #128	; 0x80
 800344e:	d107      	bne.n	8003460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8e2 	bl	8003624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d10e      	bne.n	800348c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d107      	bne.n	800348c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f838 	bl	80034fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0220 	mvn.w	r2, #32
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8ac 	bl	8003610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <TIM_Base_SetConfig+0xe4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00f      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a31      	ldr	r2, [pc, #196]	; (80035f8 <TIM_Base_SetConfig+0xe8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a30      	ldr	r2, [pc, #192]	; (80035fc <TIM_Base_SetConfig+0xec>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <TIM_Base_SetConfig+0xf0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a25      	ldr	r2, [pc, #148]	; (80035f4 <TIM_Base_SetConfig+0xe4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01b      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d017      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <TIM_Base_SetConfig+0xe8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <TIM_Base_SetConfig+0xec>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00f      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <TIM_Base_SetConfig+0xf0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <TIM_Base_SetConfig+0xf4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <TIM_Base_SetConfig+0xf8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <TIM_Base_SetConfig+0xfc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <TIM_Base_SetConfig+0xe4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	615a      	str	r2, [r3, #20]
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40000c00 	.word	0x40000c00
 8003604:	40014000 	.word	0x40014000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800

08003610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e03f      	b.n	80036ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fee8 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	; 0x24
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800367a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f829 	bl	80036d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d8:	b09f      	sub	sp, #124	; 0x7c
 80036da:	af00      	add	r7, sp, #0
 80036dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	68d9      	ldr	r1, [r3, #12]
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	ea40 0301 	orr.w	r3, r0, r1
 80036f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	431a      	orrs	r2, r3
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	431a      	orrs	r2, r3
 8003706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4313      	orrs	r3, r2
 800370c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003718:	f021 010c 	bic.w	r1, r1, #12
 800371c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003722:	430b      	orrs	r3, r1
 8003724:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003732:	6999      	ldr	r1, [r3, #24]
 8003734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	ea40 0301 	orr.w	r3, r0, r1
 800373c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4bc5      	ldr	r3, [pc, #788]	; (8003a58 <UART_SetConfig+0x384>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d004      	beq.n	8003752 <UART_SetConfig+0x7e>
 8003748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4bc3      	ldr	r3, [pc, #780]	; (8003a5c <UART_SetConfig+0x388>)
 800374e:	429a      	cmp	r2, r3
 8003750:	d103      	bne.n	800375a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003752:	f7ff fa47 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 8003756:	6778      	str	r0, [r7, #116]	; 0x74
 8003758:	e002      	b.n	8003760 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800375a:	f7ff fa2f 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 800375e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003768:	f040 80b6 	bne.w	80038d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800376c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800376e:	461c      	mov	r4, r3
 8003770:	f04f 0500 	mov.w	r5, #0
 8003774:	4622      	mov	r2, r4
 8003776:	462b      	mov	r3, r5
 8003778:	1891      	adds	r1, r2, r2
 800377a:	6439      	str	r1, [r7, #64]	; 0x40
 800377c:	415b      	adcs	r3, r3
 800377e:	647b      	str	r3, [r7, #68]	; 0x44
 8003780:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003784:	1912      	adds	r2, r2, r4
 8003786:	eb45 0303 	adc.w	r3, r5, r3
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003798:	00d0      	lsls	r0, r2, #3
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	1911      	adds	r1, r2, r4
 80037a0:	6639      	str	r1, [r7, #96]	; 0x60
 80037a2:	416b      	adcs	r3, r5
 80037a4:	667b      	str	r3, [r7, #100]	; 0x64
 80037a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	1891      	adds	r1, r2, r2
 80037b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80037b4:	415b      	adcs	r3, r3
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037c0:	f7fd f996 	bl	8000af0 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4ba5      	ldr	r3, [pc, #660]	; (8003a60 <UART_SetConfig+0x38c>)
 80037ca:	fba3 2302 	umull	r2, r3, r3, r2
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	011e      	lsls	r6, r3, #4
 80037d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d4:	461c      	mov	r4, r3
 80037d6:	f04f 0500 	mov.w	r5, #0
 80037da:	4622      	mov	r2, r4
 80037dc:	462b      	mov	r3, r5
 80037de:	1891      	adds	r1, r2, r2
 80037e0:	6339      	str	r1, [r7, #48]	; 0x30
 80037e2:	415b      	adcs	r3, r3
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
 80037e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037ea:	1912      	adds	r2, r2, r4
 80037ec:	eb45 0303 	adc.w	r3, r5, r3
 80037f0:	f04f 0000 	mov.w	r0, #0
 80037f4:	f04f 0100 	mov.w	r1, #0
 80037f8:	00d9      	lsls	r1, r3, #3
 80037fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037fe:	00d0      	lsls	r0, r2, #3
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	1911      	adds	r1, r2, r4
 8003806:	65b9      	str	r1, [r7, #88]	; 0x58
 8003808:	416b      	adcs	r3, r5
 800380a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800380c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	461a      	mov	r2, r3
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	1891      	adds	r1, r2, r2
 8003818:	62b9      	str	r1, [r7, #40]	; 0x28
 800381a:	415b      	adcs	r3, r3
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003822:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003826:	f7fd f963 	bl	8000af0 <__aeabi_uldivmod>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4b8c      	ldr	r3, [pc, #560]	; (8003a60 <UART_SetConfig+0x38c>)
 8003830:	fba3 1302 	umull	r1, r3, r3, r2
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	2164      	movs	r1, #100	; 0x64
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	3332      	adds	r3, #50	; 0x32
 8003842:	4a87      	ldr	r2, [pc, #540]	; (8003a60 <UART_SetConfig+0x38c>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003850:	441e      	add	r6, r3
 8003852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003854:	4618      	mov	r0, r3
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	1894      	adds	r4, r2, r2
 8003860:	623c      	str	r4, [r7, #32]
 8003862:	415b      	adcs	r3, r3
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800386a:	1812      	adds	r2, r2, r0
 800386c:	eb41 0303 	adc.w	r3, r1, r3
 8003870:	f04f 0400 	mov.w	r4, #0
 8003874:	f04f 0500 	mov.w	r5, #0
 8003878:	00dd      	lsls	r5, r3, #3
 800387a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800387e:	00d4      	lsls	r4, r2, #3
 8003880:	4622      	mov	r2, r4
 8003882:	462b      	mov	r3, r5
 8003884:	1814      	adds	r4, r2, r0
 8003886:	653c      	str	r4, [r7, #80]	; 0x50
 8003888:	414b      	adcs	r3, r1
 800388a:	657b      	str	r3, [r7, #84]	; 0x54
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	461a      	mov	r2, r3
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	1891      	adds	r1, r2, r2
 8003898:	61b9      	str	r1, [r7, #24]
 800389a:	415b      	adcs	r3, r3
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038a6:	f7fd f923 	bl	8000af0 <__aeabi_uldivmod>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <UART_SetConfig+0x38c>)
 80038b0:	fba3 1302 	umull	r1, r3, r3, r2
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	2164      	movs	r1, #100	; 0x64
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	3332      	adds	r3, #50	; 0x32
 80038c2:	4a67      	ldr	r2, [pc, #412]	; (8003a60 <UART_SetConfig+0x38c>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	f003 0207 	and.w	r2, r3, #7
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4432      	add	r2, r6
 80038d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038d6:	e0b9      	b.n	8003a4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038da:	461c      	mov	r4, r3
 80038dc:	f04f 0500 	mov.w	r5, #0
 80038e0:	4622      	mov	r2, r4
 80038e2:	462b      	mov	r3, r5
 80038e4:	1891      	adds	r1, r2, r2
 80038e6:	6139      	str	r1, [r7, #16]
 80038e8:	415b      	adcs	r3, r3
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038f0:	1912      	adds	r2, r2, r4
 80038f2:	eb45 0303 	adc.w	r3, r5, r3
 80038f6:	f04f 0000 	mov.w	r0, #0
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	00d9      	lsls	r1, r3, #3
 8003900:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003904:	00d0      	lsls	r0, r2, #3
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	eb12 0804 	adds.w	r8, r2, r4
 800390e:	eb43 0905 	adc.w	r9, r3, r5
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4618      	mov	r0, r3
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	008b      	lsls	r3, r1, #2
 8003926:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800392a:	0082      	lsls	r2, r0, #2
 800392c:	4640      	mov	r0, r8
 800392e:	4649      	mov	r1, r9
 8003930:	f7fd f8de 	bl	8000af0 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4b49      	ldr	r3, [pc, #292]	; (8003a60 <UART_SetConfig+0x38c>)
 800393a:	fba3 2302 	umull	r2, r3, r3, r2
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	011e      	lsls	r6, r3, #4
 8003942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003944:	4618      	mov	r0, r3
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	1894      	adds	r4, r2, r2
 8003950:	60bc      	str	r4, [r7, #8]
 8003952:	415b      	adcs	r3, r3
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800395a:	1812      	adds	r2, r2, r0
 800395c:	eb41 0303 	adc.w	r3, r1, r3
 8003960:	f04f 0400 	mov.w	r4, #0
 8003964:	f04f 0500 	mov.w	r5, #0
 8003968:	00dd      	lsls	r5, r3, #3
 800396a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800396e:	00d4      	lsls	r4, r2, #3
 8003970:	4622      	mov	r2, r4
 8003972:	462b      	mov	r3, r5
 8003974:	1814      	adds	r4, r2, r0
 8003976:	64bc      	str	r4, [r7, #72]	; 0x48
 8003978:	414b      	adcs	r3, r1
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800397c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4618      	mov	r0, r3
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	008b      	lsls	r3, r1, #2
 8003990:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003994:	0082      	lsls	r2, r0, #2
 8003996:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800399a:	f7fd f8a9 	bl	8000af0 <__aeabi_uldivmod>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4b2f      	ldr	r3, [pc, #188]	; (8003a60 <UART_SetConfig+0x38c>)
 80039a4:	fba3 1302 	umull	r1, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2164      	movs	r1, #100	; 0x64
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <UART_SetConfig+0x38c>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c2:	441e      	add	r6, r3
 80039c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c6:	4618      	mov	r0, r3
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	1894      	adds	r4, r2, r2
 80039d2:	603c      	str	r4, [r7, #0]
 80039d4:	415b      	adcs	r3, r3
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039dc:	1812      	adds	r2, r2, r0
 80039de:	eb41 0303 	adc.w	r3, r1, r3
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	f04f 0500 	mov.w	r5, #0
 80039ea:	00dd      	lsls	r5, r3, #3
 80039ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039f0:	00d4      	lsls	r4, r2, #3
 80039f2:	4622      	mov	r2, r4
 80039f4:	462b      	mov	r3, r5
 80039f6:	eb12 0a00 	adds.w	sl, r2, r0
 80039fa:	eb43 0b01 	adc.w	fp, r3, r1
 80039fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f04f 0100 	mov.w	r1, #0
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	008b      	lsls	r3, r1, #2
 8003a12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a16:	0082      	lsls	r2, r0, #2
 8003a18:	4650      	mov	r0, sl
 8003a1a:	4659      	mov	r1, fp
 8003a1c:	f7fd f868 	bl	8000af0 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <UART_SetConfig+0x38c>)
 8003a26:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2164      	movs	r1, #100	; 0x64
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	3332      	adds	r3, #50	; 0x32
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <UART_SetConfig+0x38c>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	f003 020f 	and.w	r2, r3, #15
 8003a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4432      	add	r2, r6
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	377c      	adds	r7, #124	; 0x7c
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a56:	bf00      	nop
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	40011400 	.word	0x40011400
 8003a60:	51eb851f 	.word	0x51eb851f

08003a64 <__errno>:
 8003a64:	4b01      	ldr	r3, [pc, #4]	; (8003a6c <__errno+0x8>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	2000002c 	.word	0x2000002c

08003a70 <__libc_init_array>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	4d0d      	ldr	r5, [pc, #52]	; (8003aa8 <__libc_init_array+0x38>)
 8003a74:	4c0d      	ldr	r4, [pc, #52]	; (8003aac <__libc_init_array+0x3c>)
 8003a76:	1b64      	subs	r4, r4, r5
 8003a78:	10a4      	asrs	r4, r4, #2
 8003a7a:	2600      	movs	r6, #0
 8003a7c:	42a6      	cmp	r6, r4
 8003a7e:	d109      	bne.n	8003a94 <__libc_init_array+0x24>
 8003a80:	4d0b      	ldr	r5, [pc, #44]	; (8003ab0 <__libc_init_array+0x40>)
 8003a82:	4c0c      	ldr	r4, [pc, #48]	; (8003ab4 <__libc_init_array+0x44>)
 8003a84:	f000 ffd6 	bl	8004a34 <_init>
 8003a88:	1b64      	subs	r4, r4, r5
 8003a8a:	10a4      	asrs	r4, r4, #2
 8003a8c:	2600      	movs	r6, #0
 8003a8e:	42a6      	cmp	r6, r4
 8003a90:	d105      	bne.n	8003a9e <__libc_init_array+0x2e>
 8003a92:	bd70      	pop	{r4, r5, r6, pc}
 8003a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a98:	4798      	blx	r3
 8003a9a:	3601      	adds	r6, #1
 8003a9c:	e7ee      	b.n	8003a7c <__libc_init_array+0xc>
 8003a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa2:	4798      	blx	r3
 8003aa4:	3601      	adds	r6, #1
 8003aa6:	e7f2      	b.n	8003a8e <__libc_init_array+0x1e>
 8003aa8:	08004ac0 	.word	0x08004ac0
 8003aac:	08004ac0 	.word	0x08004ac0
 8003ab0:	08004ac0 	.word	0x08004ac0
 8003ab4:	08004ac4 	.word	0x08004ac4

08003ab8 <memset>:
 8003ab8:	4402      	add	r2, r0
 8003aba:	4603      	mov	r3, r0
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <memset+0xa>
 8003ac0:	4770      	bx	lr
 8003ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac6:	e7f9      	b.n	8003abc <memset+0x4>

08003ac8 <pow>:
 8003ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003acc:	ec59 8b10 	vmov	r8, r9, d0
 8003ad0:	ec57 6b11 	vmov	r6, r7, d1
 8003ad4:	f000 f8a8 	bl	8003c28 <__ieee754_pow>
 8003ad8:	4b4e      	ldr	r3, [pc, #312]	; (8003c14 <pow+0x14c>)
 8003ada:	f993 3000 	ldrsb.w	r3, [r3]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	ec55 4b10 	vmov	r4, r5, d0
 8003ae4:	d015      	beq.n	8003b12 <pow+0x4a>
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	463b      	mov	r3, r7
 8003aea:	4630      	mov	r0, r6
 8003aec:	4639      	mov	r1, r7
 8003aee:	f7fc ffc9 	bl	8000a84 <__aeabi_dcmpun>
 8003af2:	b970      	cbnz	r0, 8003b12 <pow+0x4a>
 8003af4:	4642      	mov	r2, r8
 8003af6:	464b      	mov	r3, r9
 8003af8:	4640      	mov	r0, r8
 8003afa:	4649      	mov	r1, r9
 8003afc:	f7fc ffc2 	bl	8000a84 <__aeabi_dcmpun>
 8003b00:	2200      	movs	r2, #0
 8003b02:	2300      	movs	r3, #0
 8003b04:	b148      	cbz	r0, 8003b1a <pow+0x52>
 8003b06:	4630      	mov	r0, r6
 8003b08:	4639      	mov	r1, r7
 8003b0a:	f7fc ff89 	bl	8000a20 <__aeabi_dcmpeq>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d17d      	bne.n	8003c0e <pow+0x146>
 8003b12:	ec45 4b10 	vmov	d0, r4, r5
 8003b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	f7fc ff7f 	bl	8000a20 <__aeabi_dcmpeq>
 8003b22:	b1e0      	cbz	r0, 8003b5e <pow+0x96>
 8003b24:	2200      	movs	r2, #0
 8003b26:	2300      	movs	r3, #0
 8003b28:	4630      	mov	r0, r6
 8003b2a:	4639      	mov	r1, r7
 8003b2c:	f7fc ff78 	bl	8000a20 <__aeabi_dcmpeq>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d16c      	bne.n	8003c0e <pow+0x146>
 8003b34:	ec47 6b10 	vmov	d0, r6, r7
 8003b38:	f000 fe55 	bl	80047e6 <finite>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d0e8      	beq.n	8003b12 <pow+0x4a>
 8003b40:	2200      	movs	r2, #0
 8003b42:	2300      	movs	r3, #0
 8003b44:	4630      	mov	r0, r6
 8003b46:	4639      	mov	r1, r7
 8003b48:	f7fc ff74 	bl	8000a34 <__aeabi_dcmplt>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d0e0      	beq.n	8003b12 <pow+0x4a>
 8003b50:	f7ff ff88 	bl	8003a64 <__errno>
 8003b54:	2321      	movs	r3, #33	; 0x21
 8003b56:	6003      	str	r3, [r0, #0]
 8003b58:	2400      	movs	r4, #0
 8003b5a:	4d2f      	ldr	r5, [pc, #188]	; (8003c18 <pow+0x150>)
 8003b5c:	e7d9      	b.n	8003b12 <pow+0x4a>
 8003b5e:	ec45 4b10 	vmov	d0, r4, r5
 8003b62:	f000 fe40 	bl	80047e6 <finite>
 8003b66:	bbb8      	cbnz	r0, 8003bd8 <pow+0x110>
 8003b68:	ec49 8b10 	vmov	d0, r8, r9
 8003b6c:	f000 fe3b 	bl	80047e6 <finite>
 8003b70:	b390      	cbz	r0, 8003bd8 <pow+0x110>
 8003b72:	ec47 6b10 	vmov	d0, r6, r7
 8003b76:	f000 fe36 	bl	80047e6 <finite>
 8003b7a:	b368      	cbz	r0, 8003bd8 <pow+0x110>
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	462b      	mov	r3, r5
 8003b80:	4620      	mov	r0, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	f7fc ff7e 	bl	8000a84 <__aeabi_dcmpun>
 8003b88:	b160      	cbz	r0, 8003ba4 <pow+0xdc>
 8003b8a:	f7ff ff6b 	bl	8003a64 <__errno>
 8003b8e:	2321      	movs	r3, #33	; 0x21
 8003b90:	6003      	str	r3, [r0, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2300      	movs	r3, #0
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f7fc fe03 	bl	80007a4 <__aeabi_ddiv>
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	460d      	mov	r5, r1
 8003ba2:	e7b6      	b.n	8003b12 <pow+0x4a>
 8003ba4:	f7ff ff5e 	bl	8003a64 <__errno>
 8003ba8:	2322      	movs	r3, #34	; 0x22
 8003baa:	6003      	str	r3, [r0, #0]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2300      	movs	r3, #0
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	f7fc ff3e 	bl	8000a34 <__aeabi_dcmplt>
 8003bb8:	2400      	movs	r4, #0
 8003bba:	b158      	cbz	r0, 8003bd4 <pow+0x10c>
 8003bbc:	ec47 6b10 	vmov	d0, r6, r7
 8003bc0:	f000 fe26 	bl	8004810 <rint>
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	ec51 0b10 	vmov	r0, r1, d0
 8003bca:	463b      	mov	r3, r7
 8003bcc:	f7fc ff28 	bl	8000a20 <__aeabi_dcmpeq>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d0c2      	beq.n	8003b5a <pow+0x92>
 8003bd4:	4d11      	ldr	r5, [pc, #68]	; (8003c1c <pow+0x154>)
 8003bd6:	e79c      	b.n	8003b12 <pow+0x4a>
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2300      	movs	r3, #0
 8003bdc:	4620      	mov	r0, r4
 8003bde:	4629      	mov	r1, r5
 8003be0:	f7fc ff1e 	bl	8000a20 <__aeabi_dcmpeq>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d094      	beq.n	8003b12 <pow+0x4a>
 8003be8:	ec49 8b10 	vmov	d0, r8, r9
 8003bec:	f000 fdfb 	bl	80047e6 <finite>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d08e      	beq.n	8003b12 <pow+0x4a>
 8003bf4:	ec47 6b10 	vmov	d0, r6, r7
 8003bf8:	f000 fdf5 	bl	80047e6 <finite>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d088      	beq.n	8003b12 <pow+0x4a>
 8003c00:	f7ff ff30 	bl	8003a64 <__errno>
 8003c04:	2322      	movs	r3, #34	; 0x22
 8003c06:	6003      	str	r3, [r0, #0]
 8003c08:	2400      	movs	r4, #0
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	e781      	b.n	8003b12 <pow+0x4a>
 8003c0e:	4d04      	ldr	r5, [pc, #16]	; (8003c20 <pow+0x158>)
 8003c10:	2400      	movs	r4, #0
 8003c12:	e77e      	b.n	8003b12 <pow+0x4a>
 8003c14:	20000090 	.word	0x20000090
 8003c18:	fff00000 	.word	0xfff00000
 8003c1c:	7ff00000 	.word	0x7ff00000
 8003c20:	3ff00000 	.word	0x3ff00000
 8003c24:	00000000 	.word	0x00000000

08003c28 <__ieee754_pow>:
 8003c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2c:	ed2d 8b06 	vpush	{d8-d10}
 8003c30:	b08d      	sub	sp, #52	; 0x34
 8003c32:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003c36:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8003c3a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003c3e:	ea56 0100 	orrs.w	r1, r6, r0
 8003c42:	ec53 2b10 	vmov	r2, r3, d0
 8003c46:	f000 84d1 	beq.w	80045ec <__ieee754_pow+0x9c4>
 8003c4a:	497f      	ldr	r1, [pc, #508]	; (8003e48 <__ieee754_pow+0x220>)
 8003c4c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8003c50:	428c      	cmp	r4, r1
 8003c52:	ee10 8a10 	vmov	r8, s0
 8003c56:	4699      	mov	r9, r3
 8003c58:	dc09      	bgt.n	8003c6e <__ieee754_pow+0x46>
 8003c5a:	d103      	bne.n	8003c64 <__ieee754_pow+0x3c>
 8003c5c:	b97a      	cbnz	r2, 8003c7e <__ieee754_pow+0x56>
 8003c5e:	42a6      	cmp	r6, r4
 8003c60:	dd02      	ble.n	8003c68 <__ieee754_pow+0x40>
 8003c62:	e00c      	b.n	8003c7e <__ieee754_pow+0x56>
 8003c64:	428e      	cmp	r6, r1
 8003c66:	dc02      	bgt.n	8003c6e <__ieee754_pow+0x46>
 8003c68:	428e      	cmp	r6, r1
 8003c6a:	d110      	bne.n	8003c8e <__ieee754_pow+0x66>
 8003c6c:	b178      	cbz	r0, 8003c8e <__ieee754_pow+0x66>
 8003c6e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003c72:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003c76:	ea54 0308 	orrs.w	r3, r4, r8
 8003c7a:	f000 84b7 	beq.w	80045ec <__ieee754_pow+0x9c4>
 8003c7e:	4873      	ldr	r0, [pc, #460]	; (8003e4c <__ieee754_pow+0x224>)
 8003c80:	b00d      	add	sp, #52	; 0x34
 8003c82:	ecbd 8b06 	vpop	{d8-d10}
 8003c86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8a:	f000 bdb9 	b.w	8004800 <nan>
 8003c8e:	f1b9 0f00 	cmp.w	r9, #0
 8003c92:	da36      	bge.n	8003d02 <__ieee754_pow+0xda>
 8003c94:	496e      	ldr	r1, [pc, #440]	; (8003e50 <__ieee754_pow+0x228>)
 8003c96:	428e      	cmp	r6, r1
 8003c98:	dc51      	bgt.n	8003d3e <__ieee754_pow+0x116>
 8003c9a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8003c9e:	428e      	cmp	r6, r1
 8003ca0:	f340 84af 	ble.w	8004602 <__ieee754_pow+0x9da>
 8003ca4:	1531      	asrs	r1, r6, #20
 8003ca6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003caa:	2914      	cmp	r1, #20
 8003cac:	dd0f      	ble.n	8003cce <__ieee754_pow+0xa6>
 8003cae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8003cb2:	fa20 fc01 	lsr.w	ip, r0, r1
 8003cb6:	fa0c f101 	lsl.w	r1, ip, r1
 8003cba:	4281      	cmp	r1, r0
 8003cbc:	f040 84a1 	bne.w	8004602 <__ieee754_pow+0x9da>
 8003cc0:	f00c 0c01 	and.w	ip, ip, #1
 8003cc4:	f1cc 0102 	rsb	r1, ip, #2
 8003cc8:	9100      	str	r1, [sp, #0]
 8003cca:	b180      	cbz	r0, 8003cee <__ieee754_pow+0xc6>
 8003ccc:	e059      	b.n	8003d82 <__ieee754_pow+0x15a>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d155      	bne.n	8003d7e <__ieee754_pow+0x156>
 8003cd2:	f1c1 0114 	rsb	r1, r1, #20
 8003cd6:	fa46 fc01 	asr.w	ip, r6, r1
 8003cda:	fa0c f101 	lsl.w	r1, ip, r1
 8003cde:	42b1      	cmp	r1, r6
 8003ce0:	f040 848c 	bne.w	80045fc <__ieee754_pow+0x9d4>
 8003ce4:	f00c 0c01 	and.w	ip, ip, #1
 8003ce8:	f1cc 0102 	rsb	r1, ip, #2
 8003cec:	9100      	str	r1, [sp, #0]
 8003cee:	4959      	ldr	r1, [pc, #356]	; (8003e54 <__ieee754_pow+0x22c>)
 8003cf0:	428e      	cmp	r6, r1
 8003cf2:	d12d      	bne.n	8003d50 <__ieee754_pow+0x128>
 8003cf4:	2f00      	cmp	r7, #0
 8003cf6:	da79      	bge.n	8003dec <__ieee754_pow+0x1c4>
 8003cf8:	4956      	ldr	r1, [pc, #344]	; (8003e54 <__ieee754_pow+0x22c>)
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fc fd52 	bl	80007a4 <__aeabi_ddiv>
 8003d00:	e016      	b.n	8003d30 <__ieee754_pow+0x108>
 8003d02:	2100      	movs	r1, #0
 8003d04:	9100      	str	r1, [sp, #0]
 8003d06:	2800      	cmp	r0, #0
 8003d08:	d13b      	bne.n	8003d82 <__ieee754_pow+0x15a>
 8003d0a:	494f      	ldr	r1, [pc, #316]	; (8003e48 <__ieee754_pow+0x220>)
 8003d0c:	428e      	cmp	r6, r1
 8003d0e:	d1ee      	bne.n	8003cee <__ieee754_pow+0xc6>
 8003d10:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003d14:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003d18:	ea53 0308 	orrs.w	r3, r3, r8
 8003d1c:	f000 8466 	beq.w	80045ec <__ieee754_pow+0x9c4>
 8003d20:	4b4d      	ldr	r3, [pc, #308]	; (8003e58 <__ieee754_pow+0x230>)
 8003d22:	429c      	cmp	r4, r3
 8003d24:	dd0d      	ble.n	8003d42 <__ieee754_pow+0x11a>
 8003d26:	2f00      	cmp	r7, #0
 8003d28:	f280 8464 	bge.w	80045f4 <__ieee754_pow+0x9cc>
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	2100      	movs	r1, #0
 8003d30:	ec41 0b10 	vmov	d0, r0, r1
 8003d34:	b00d      	add	sp, #52	; 0x34
 8003d36:	ecbd 8b06 	vpop	{d8-d10}
 8003d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3e:	2102      	movs	r1, #2
 8003d40:	e7e0      	b.n	8003d04 <__ieee754_pow+0xdc>
 8003d42:	2f00      	cmp	r7, #0
 8003d44:	daf2      	bge.n	8003d2c <__ieee754_pow+0x104>
 8003d46:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8003d4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d4e:	e7ef      	b.n	8003d30 <__ieee754_pow+0x108>
 8003d50:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003d54:	d104      	bne.n	8003d60 <__ieee754_pow+0x138>
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f7fc fbf9 	bl	8000550 <__aeabi_dmul>
 8003d5e:	e7e7      	b.n	8003d30 <__ieee754_pow+0x108>
 8003d60:	493e      	ldr	r1, [pc, #248]	; (8003e5c <__ieee754_pow+0x234>)
 8003d62:	428f      	cmp	r7, r1
 8003d64:	d10d      	bne.n	8003d82 <__ieee754_pow+0x15a>
 8003d66:	f1b9 0f00 	cmp.w	r9, #0
 8003d6a:	db0a      	blt.n	8003d82 <__ieee754_pow+0x15a>
 8003d6c:	ec43 2b10 	vmov	d0, r2, r3
 8003d70:	b00d      	add	sp, #52	; 0x34
 8003d72:	ecbd 8b06 	vpop	{d8-d10}
 8003d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7a:	f000 bc77 	b.w	800466c <__ieee754_sqrt>
 8003d7e:	2100      	movs	r1, #0
 8003d80:	9100      	str	r1, [sp, #0]
 8003d82:	ec43 2b10 	vmov	d0, r2, r3
 8003d86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d8a:	f000 fd23 	bl	80047d4 <fabs>
 8003d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d92:	ec51 0b10 	vmov	r0, r1, d0
 8003d96:	f1b8 0f00 	cmp.w	r8, #0
 8003d9a:	d12a      	bne.n	8003df2 <__ieee754_pow+0x1ca>
 8003d9c:	b12c      	cbz	r4, 8003daa <__ieee754_pow+0x182>
 8003d9e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8003e54 <__ieee754_pow+0x22c>
 8003da2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8003da6:	45e6      	cmp	lr, ip
 8003da8:	d123      	bne.n	8003df2 <__ieee754_pow+0x1ca>
 8003daa:	2f00      	cmp	r7, #0
 8003dac:	da05      	bge.n	8003dba <__ieee754_pow+0x192>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	2000      	movs	r0, #0
 8003db4:	4927      	ldr	r1, [pc, #156]	; (8003e54 <__ieee754_pow+0x22c>)
 8003db6:	f7fc fcf5 	bl	80007a4 <__aeabi_ddiv>
 8003dba:	f1b9 0f00 	cmp.w	r9, #0
 8003dbe:	dab7      	bge.n	8003d30 <__ieee754_pow+0x108>
 8003dc0:	9b00      	ldr	r3, [sp, #0]
 8003dc2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003dc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003dca:	4323      	orrs	r3, r4
 8003dcc:	d108      	bne.n	8003de0 <__ieee754_pow+0x1b8>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f7fc fa03 	bl	80001e0 <__aeabi_dsub>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	e78d      	b.n	8003cfc <__ieee754_pow+0xd4>
 8003de0:	9b00      	ldr	r3, [sp, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d1a4      	bne.n	8003d30 <__ieee754_pow+0x108>
 8003de6:	4602      	mov	r2, r0
 8003de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	e79e      	b.n	8003d30 <__ieee754_pow+0x108>
 8003df2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8003df6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8003dfa:	950a      	str	r5, [sp, #40]	; 0x28
 8003dfc:	9d00      	ldr	r5, [sp, #0]
 8003dfe:	46ac      	mov	ip, r5
 8003e00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003e02:	ea5c 0505 	orrs.w	r5, ip, r5
 8003e06:	d0e4      	beq.n	8003dd2 <__ieee754_pow+0x1aa>
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <__ieee754_pow+0x238>)
 8003e0a:	429e      	cmp	r6, r3
 8003e0c:	f340 80fc 	ble.w	8004008 <__ieee754_pow+0x3e0>
 8003e10:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003e14:	429e      	cmp	r6, r3
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <__ieee754_pow+0x230>)
 8003e18:	dd07      	ble.n	8003e2a <__ieee754_pow+0x202>
 8003e1a:	429c      	cmp	r4, r3
 8003e1c:	dc0a      	bgt.n	8003e34 <__ieee754_pow+0x20c>
 8003e1e:	2f00      	cmp	r7, #0
 8003e20:	da84      	bge.n	8003d2c <__ieee754_pow+0x104>
 8003e22:	a307      	add	r3, pc, #28	; (adr r3, 8003e40 <__ieee754_pow+0x218>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	e795      	b.n	8003d56 <__ieee754_pow+0x12e>
 8003e2a:	429c      	cmp	r4, r3
 8003e2c:	dbf7      	blt.n	8003e1e <__ieee754_pow+0x1f6>
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <__ieee754_pow+0x22c>)
 8003e30:	429c      	cmp	r4, r3
 8003e32:	dd17      	ble.n	8003e64 <__ieee754_pow+0x23c>
 8003e34:	2f00      	cmp	r7, #0
 8003e36:	dcf4      	bgt.n	8003e22 <__ieee754_pow+0x1fa>
 8003e38:	e778      	b.n	8003d2c <__ieee754_pow+0x104>
 8003e3a:	bf00      	nop
 8003e3c:	f3af 8000 	nop.w
 8003e40:	8800759c 	.word	0x8800759c
 8003e44:	7e37e43c 	.word	0x7e37e43c
 8003e48:	7ff00000 	.word	0x7ff00000
 8003e4c:	08004a70 	.word	0x08004a70
 8003e50:	433fffff 	.word	0x433fffff
 8003e54:	3ff00000 	.word	0x3ff00000
 8003e58:	3fefffff 	.word	0x3fefffff
 8003e5c:	3fe00000 	.word	0x3fe00000
 8003e60:	41e00000 	.word	0x41e00000
 8003e64:	4b64      	ldr	r3, [pc, #400]	; (8003ff8 <__ieee754_pow+0x3d0>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	f7fc f9ba 	bl	80001e0 <__aeabi_dsub>
 8003e6c:	a356      	add	r3, pc, #344	; (adr r3, 8003fc8 <__ieee754_pow+0x3a0>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	4604      	mov	r4, r0
 8003e74:	460d      	mov	r5, r1
 8003e76:	f7fc fb6b 	bl	8000550 <__aeabi_dmul>
 8003e7a:	a355      	add	r3, pc, #340	; (adr r3, 8003fd0 <__ieee754_pow+0x3a8>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	4606      	mov	r6, r0
 8003e82:	460f      	mov	r7, r1
 8003e84:	4620      	mov	r0, r4
 8003e86:	4629      	mov	r1, r5
 8003e88:	f7fc fb62 	bl	8000550 <__aeabi_dmul>
 8003e8c:	4b5b      	ldr	r3, [pc, #364]	; (8003ffc <__ieee754_pow+0x3d4>)
 8003e8e:	4682      	mov	sl, r0
 8003e90:	468b      	mov	fp, r1
 8003e92:	2200      	movs	r2, #0
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc fb5a 	bl	8000550 <__aeabi_dmul>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	a14d      	add	r1, pc, #308	; (adr r1, 8003fd8 <__ieee754_pow+0x3b0>)
 8003ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ea6:	f7fc f99b 	bl	80001e0 <__aeabi_dsub>
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	f7fc fb4f 	bl	8000550 <__aeabi_dmul>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	4951      	ldr	r1, [pc, #324]	; (8004000 <__ieee754_pow+0x3d8>)
 8003eba:	f7fc f991 	bl	80001e0 <__aeabi_dsub>
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	4680      	mov	r8, r0
 8003ec2:	4689      	mov	r9, r1
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7fc fb41 	bl	8000550 <__aeabi_dmul>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	f7fc fb3b 	bl	8000550 <__aeabi_dmul>
 8003eda:	a341      	add	r3, pc, #260	; (adr r3, 8003fe0 <__ieee754_pow+0x3b8>)
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f7fc fb36 	bl	8000550 <__aeabi_dmul>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4650      	mov	r0, sl
 8003eea:	4659      	mov	r1, fp
 8003eec:	f7fc f978 	bl	80001e0 <__aeabi_dsub>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4680      	mov	r8, r0
 8003ef6:	4689      	mov	r9, r1
 8003ef8:	4630      	mov	r0, r6
 8003efa:	4639      	mov	r1, r7
 8003efc:	f7fc f972 	bl	80001e4 <__adddf3>
 8003f00:	2400      	movs	r4, #0
 8003f02:	4632      	mov	r2, r6
 8003f04:	463b      	mov	r3, r7
 8003f06:	4620      	mov	r0, r4
 8003f08:	460d      	mov	r5, r1
 8003f0a:	f7fc f969 	bl	80001e0 <__aeabi_dsub>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4640      	mov	r0, r8
 8003f14:	4649      	mov	r1, r9
 8003f16:	f7fc f963 	bl	80001e0 <__aeabi_dsub>
 8003f1a:	9b00      	ldr	r3, [sp, #0]
 8003f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	4682      	mov	sl, r0
 8003f24:	468b      	mov	fp, r1
 8003f26:	f040 81f1 	bne.w	800430c <__ieee754_pow+0x6e4>
 8003f2a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8003fe8 <__ieee754_pow+0x3c0>
 8003f2e:	eeb0 8a47 	vmov.f32	s16, s14
 8003f32:	eef0 8a67 	vmov.f32	s17, s15
 8003f36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f3a:	2600      	movs	r6, #0
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	463b      	mov	r3, r7
 8003f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f44:	f7fc f94c 	bl	80001e0 <__aeabi_dsub>
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	f7fc fb00 	bl	8000550 <__aeabi_dmul>
 8003f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f54:	4680      	mov	r8, r0
 8003f56:	4689      	mov	r9, r1
 8003f58:	4650      	mov	r0, sl
 8003f5a:	4659      	mov	r1, fp
 8003f5c:	f7fc faf8 	bl	8000550 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4640      	mov	r0, r8
 8003f66:	4649      	mov	r1, r9
 8003f68:	f7fc f93c 	bl	80001e4 <__adddf3>
 8003f6c:	4632      	mov	r2, r6
 8003f6e:	463b      	mov	r3, r7
 8003f70:	4680      	mov	r8, r0
 8003f72:	4689      	mov	r9, r1
 8003f74:	4620      	mov	r0, r4
 8003f76:	4629      	mov	r1, r5
 8003f78:	f7fc faea 	bl	8000550 <__aeabi_dmul>
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4604      	mov	r4, r0
 8003f80:	460d      	mov	r5, r1
 8003f82:	4602      	mov	r2, r0
 8003f84:	4649      	mov	r1, r9
 8003f86:	4640      	mov	r0, r8
 8003f88:	f7fc f92c 	bl	80001e4 <__adddf3>
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <__ieee754_pow+0x3dc>)
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	ec45 4b19 	vmov	d9, r4, r5
 8003f94:	4606      	mov	r6, r0
 8003f96:	460f      	mov	r7, r1
 8003f98:	468b      	mov	fp, r1
 8003f9a:	f340 82fe 	ble.w	800459a <__ieee754_pow+0x972>
 8003f9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003fa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003fa6:	4303      	orrs	r3, r0
 8003fa8:	f000 81f0 	beq.w	800438c <__ieee754_pow+0x764>
 8003fac:	a310      	add	r3, pc, #64	; (adr r3, 8003ff0 <__ieee754_pow+0x3c8>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	ec51 0b18 	vmov	r0, r1, d8
 8003fb6:	f7fc facb 	bl	8000550 <__aeabi_dmul>
 8003fba:	a30d      	add	r3, pc, #52	; (adr r3, 8003ff0 <__ieee754_pow+0x3c8>)
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	e6cb      	b.n	8003d5a <__ieee754_pow+0x132>
 8003fc2:	bf00      	nop
 8003fc4:	f3af 8000 	nop.w
 8003fc8:	60000000 	.word	0x60000000
 8003fcc:	3ff71547 	.word	0x3ff71547
 8003fd0:	f85ddf44 	.word	0xf85ddf44
 8003fd4:	3e54ae0b 	.word	0x3e54ae0b
 8003fd8:	55555555 	.word	0x55555555
 8003fdc:	3fd55555 	.word	0x3fd55555
 8003fe0:	652b82fe 	.word	0x652b82fe
 8003fe4:	3ff71547 	.word	0x3ff71547
 8003fe8:	00000000 	.word	0x00000000
 8003fec:	bff00000 	.word	0xbff00000
 8003ff0:	8800759c 	.word	0x8800759c
 8003ff4:	7e37e43c 	.word	0x7e37e43c
 8003ff8:	3ff00000 	.word	0x3ff00000
 8003ffc:	3fd00000 	.word	0x3fd00000
 8004000:	3fe00000 	.word	0x3fe00000
 8004004:	408fffff 	.word	0x408fffff
 8004008:	4bd7      	ldr	r3, [pc, #860]	; (8004368 <__ieee754_pow+0x740>)
 800400a:	ea03 0309 	and.w	r3, r3, r9
 800400e:	2200      	movs	r2, #0
 8004010:	b92b      	cbnz	r3, 800401e <__ieee754_pow+0x3f6>
 8004012:	4bd6      	ldr	r3, [pc, #856]	; (800436c <__ieee754_pow+0x744>)
 8004014:	f7fc fa9c 	bl	8000550 <__aeabi_dmul>
 8004018:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800401c:	460c      	mov	r4, r1
 800401e:	1523      	asrs	r3, r4, #20
 8004020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004024:	4413      	add	r3, r2
 8004026:	9309      	str	r3, [sp, #36]	; 0x24
 8004028:	4bd1      	ldr	r3, [pc, #836]	; (8004370 <__ieee754_pow+0x748>)
 800402a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800402e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004032:	429c      	cmp	r4, r3
 8004034:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004038:	dd08      	ble.n	800404c <__ieee754_pow+0x424>
 800403a:	4bce      	ldr	r3, [pc, #824]	; (8004374 <__ieee754_pow+0x74c>)
 800403c:	429c      	cmp	r4, r3
 800403e:	f340 8163 	ble.w	8004308 <__ieee754_pow+0x6e0>
 8004042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004044:	3301      	adds	r3, #1
 8004046:	9309      	str	r3, [sp, #36]	; 0x24
 8004048:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800404c:	2400      	movs	r4, #0
 800404e:	00e3      	lsls	r3, r4, #3
 8004050:	930b      	str	r3, [sp, #44]	; 0x2c
 8004052:	4bc9      	ldr	r3, [pc, #804]	; (8004378 <__ieee754_pow+0x750>)
 8004054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004058:	ed93 7b00 	vldr	d7, [r3]
 800405c:	4629      	mov	r1, r5
 800405e:	ec53 2b17 	vmov	r2, r3, d7
 8004062:	eeb0 8a47 	vmov.f32	s16, s14
 8004066:	eef0 8a67 	vmov.f32	s17, s15
 800406a:	4682      	mov	sl, r0
 800406c:	f7fc f8b8 	bl	80001e0 <__aeabi_dsub>
 8004070:	4652      	mov	r2, sl
 8004072:	4606      	mov	r6, r0
 8004074:	460f      	mov	r7, r1
 8004076:	462b      	mov	r3, r5
 8004078:	ec51 0b18 	vmov	r0, r1, d8
 800407c:	f7fc f8b2 	bl	80001e4 <__adddf3>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	2000      	movs	r0, #0
 8004086:	49bd      	ldr	r1, [pc, #756]	; (800437c <__ieee754_pow+0x754>)
 8004088:	f7fc fb8c 	bl	80007a4 <__aeabi_ddiv>
 800408c:	ec41 0b19 	vmov	d9, r0, r1
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4630      	mov	r0, r6
 8004096:	4639      	mov	r1, r7
 8004098:	f7fc fa5a 	bl	8000550 <__aeabi_dmul>
 800409c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040a8:	2300      	movs	r3, #0
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80040b0:	46ab      	mov	fp, r5
 80040b2:	106d      	asrs	r5, r5, #1
 80040b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80040b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80040bc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80040c0:	2200      	movs	r2, #0
 80040c2:	4640      	mov	r0, r8
 80040c4:	4649      	mov	r1, r9
 80040c6:	4614      	mov	r4, r2
 80040c8:	461d      	mov	r5, r3
 80040ca:	f7fc fa41 	bl	8000550 <__aeabi_dmul>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4630      	mov	r0, r6
 80040d4:	4639      	mov	r1, r7
 80040d6:	f7fc f883 	bl	80001e0 <__aeabi_dsub>
 80040da:	ec53 2b18 	vmov	r2, r3, d8
 80040de:	4606      	mov	r6, r0
 80040e0:	460f      	mov	r7, r1
 80040e2:	4620      	mov	r0, r4
 80040e4:	4629      	mov	r1, r5
 80040e6:	f7fc f87b 	bl	80001e0 <__aeabi_dsub>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4650      	mov	r0, sl
 80040f0:	4659      	mov	r1, fp
 80040f2:	f7fc f875 	bl	80001e0 <__aeabi_dsub>
 80040f6:	4642      	mov	r2, r8
 80040f8:	464b      	mov	r3, r9
 80040fa:	f7fc fa29 	bl	8000550 <__aeabi_dmul>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4630      	mov	r0, r6
 8004104:	4639      	mov	r1, r7
 8004106:	f7fc f86b 	bl	80001e0 <__aeabi_dsub>
 800410a:	ec53 2b19 	vmov	r2, r3, d9
 800410e:	f7fc fa1f 	bl	8000550 <__aeabi_dmul>
 8004112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004116:	ec41 0b18 	vmov	d8, r0, r1
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	f7fc fa17 	bl	8000550 <__aeabi_dmul>
 8004122:	a37d      	add	r3, pc, #500	; (adr r3, 8004318 <__ieee754_pow+0x6f0>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	4604      	mov	r4, r0
 800412a:	460d      	mov	r5, r1
 800412c:	f7fc fa10 	bl	8000550 <__aeabi_dmul>
 8004130:	a37b      	add	r3, pc, #492	; (adr r3, 8004320 <__ieee754_pow+0x6f8>)
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f7fc f855 	bl	80001e4 <__adddf3>
 800413a:	4622      	mov	r2, r4
 800413c:	462b      	mov	r3, r5
 800413e:	f7fc fa07 	bl	8000550 <__aeabi_dmul>
 8004142:	a379      	add	r3, pc, #484	; (adr r3, 8004328 <__ieee754_pow+0x700>)
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f7fc f84c 	bl	80001e4 <__adddf3>
 800414c:	4622      	mov	r2, r4
 800414e:	462b      	mov	r3, r5
 8004150:	f7fc f9fe 	bl	8000550 <__aeabi_dmul>
 8004154:	a376      	add	r3, pc, #472	; (adr r3, 8004330 <__ieee754_pow+0x708>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc f843 	bl	80001e4 <__adddf3>
 800415e:	4622      	mov	r2, r4
 8004160:	462b      	mov	r3, r5
 8004162:	f7fc f9f5 	bl	8000550 <__aeabi_dmul>
 8004166:	a374      	add	r3, pc, #464	; (adr r3, 8004338 <__ieee754_pow+0x710>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f7fc f83a 	bl	80001e4 <__adddf3>
 8004170:	4622      	mov	r2, r4
 8004172:	462b      	mov	r3, r5
 8004174:	f7fc f9ec 	bl	8000550 <__aeabi_dmul>
 8004178:	a371      	add	r3, pc, #452	; (adr r3, 8004340 <__ieee754_pow+0x718>)
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f7fc f831 	bl	80001e4 <__adddf3>
 8004182:	4622      	mov	r2, r4
 8004184:	4606      	mov	r6, r0
 8004186:	460f      	mov	r7, r1
 8004188:	462b      	mov	r3, r5
 800418a:	4620      	mov	r0, r4
 800418c:	4629      	mov	r1, r5
 800418e:	f7fc f9df 	bl	8000550 <__aeabi_dmul>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4630      	mov	r0, r6
 8004198:	4639      	mov	r1, r7
 800419a:	f7fc f9d9 	bl	8000550 <__aeabi_dmul>
 800419e:	4642      	mov	r2, r8
 80041a0:	4604      	mov	r4, r0
 80041a2:	460d      	mov	r5, r1
 80041a4:	464b      	mov	r3, r9
 80041a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041aa:	f7fc f81b 	bl	80001e4 <__adddf3>
 80041ae:	ec53 2b18 	vmov	r2, r3, d8
 80041b2:	f7fc f9cd 	bl	8000550 <__aeabi_dmul>
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	f7fc f813 	bl	80001e4 <__adddf3>
 80041be:	4642      	mov	r2, r8
 80041c0:	4682      	mov	sl, r0
 80041c2:	468b      	mov	fp, r1
 80041c4:	464b      	mov	r3, r9
 80041c6:	4640      	mov	r0, r8
 80041c8:	4649      	mov	r1, r9
 80041ca:	f7fc f9c1 	bl	8000550 <__aeabi_dmul>
 80041ce:	4b6c      	ldr	r3, [pc, #432]	; (8004380 <__ieee754_pow+0x758>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	4606      	mov	r6, r0
 80041d4:	460f      	mov	r7, r1
 80041d6:	f7fc f805 	bl	80001e4 <__adddf3>
 80041da:	4652      	mov	r2, sl
 80041dc:	465b      	mov	r3, fp
 80041de:	f7fc f801 	bl	80001e4 <__adddf3>
 80041e2:	9c04      	ldr	r4, [sp, #16]
 80041e4:	460d      	mov	r5, r1
 80041e6:	4622      	mov	r2, r4
 80041e8:	460b      	mov	r3, r1
 80041ea:	4640      	mov	r0, r8
 80041ec:	4649      	mov	r1, r9
 80041ee:	f7fc f9af 	bl	8000550 <__aeabi_dmul>
 80041f2:	4b63      	ldr	r3, [pc, #396]	; (8004380 <__ieee754_pow+0x758>)
 80041f4:	4680      	mov	r8, r0
 80041f6:	4689      	mov	r9, r1
 80041f8:	2200      	movs	r2, #0
 80041fa:	4620      	mov	r0, r4
 80041fc:	4629      	mov	r1, r5
 80041fe:	f7fb ffef 	bl	80001e0 <__aeabi_dsub>
 8004202:	4632      	mov	r2, r6
 8004204:	463b      	mov	r3, r7
 8004206:	f7fb ffeb 	bl	80001e0 <__aeabi_dsub>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4650      	mov	r0, sl
 8004210:	4659      	mov	r1, fp
 8004212:	f7fb ffe5 	bl	80001e0 <__aeabi_dsub>
 8004216:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800421a:	f7fc f999 	bl	8000550 <__aeabi_dmul>
 800421e:	4622      	mov	r2, r4
 8004220:	4606      	mov	r6, r0
 8004222:	460f      	mov	r7, r1
 8004224:	462b      	mov	r3, r5
 8004226:	ec51 0b18 	vmov	r0, r1, d8
 800422a:	f7fc f991 	bl	8000550 <__aeabi_dmul>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4630      	mov	r0, r6
 8004234:	4639      	mov	r1, r7
 8004236:	f7fb ffd5 	bl	80001e4 <__adddf3>
 800423a:	4606      	mov	r6, r0
 800423c:	460f      	mov	r7, r1
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fb ffcd 	bl	80001e4 <__adddf3>
 800424a:	9c04      	ldr	r4, [sp, #16]
 800424c:	a33e      	add	r3, pc, #248	; (adr r3, 8004348 <__ieee754_pow+0x720>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	4620      	mov	r0, r4
 8004254:	460d      	mov	r5, r1
 8004256:	f7fc f97b 	bl	8000550 <__aeabi_dmul>
 800425a:	4642      	mov	r2, r8
 800425c:	ec41 0b18 	vmov	d8, r0, r1
 8004260:	464b      	mov	r3, r9
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fb ffbb 	bl	80001e0 <__aeabi_dsub>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4630      	mov	r0, r6
 8004270:	4639      	mov	r1, r7
 8004272:	f7fb ffb5 	bl	80001e0 <__aeabi_dsub>
 8004276:	a336      	add	r3, pc, #216	; (adr r3, 8004350 <__ieee754_pow+0x728>)
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f7fc f968 	bl	8000550 <__aeabi_dmul>
 8004280:	a335      	add	r3, pc, #212	; (adr r3, 8004358 <__ieee754_pow+0x730>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	4606      	mov	r6, r0
 8004288:	460f      	mov	r7, r1
 800428a:	4620      	mov	r0, r4
 800428c:	4629      	mov	r1, r5
 800428e:	f7fc f95f 	bl	8000550 <__aeabi_dmul>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4630      	mov	r0, r6
 8004298:	4639      	mov	r1, r7
 800429a:	f7fb ffa3 	bl	80001e4 <__adddf3>
 800429e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042a0:	4b38      	ldr	r3, [pc, #224]	; (8004384 <__ieee754_pow+0x75c>)
 80042a2:	4413      	add	r3, r2
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f7fb ff9c 	bl	80001e4 <__adddf3>
 80042ac:	4682      	mov	sl, r0
 80042ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042b0:	468b      	mov	fp, r1
 80042b2:	f7fc f8e3 	bl	800047c <__aeabi_i2d>
 80042b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042b8:	4b33      	ldr	r3, [pc, #204]	; (8004388 <__ieee754_pow+0x760>)
 80042ba:	4413      	add	r3, r2
 80042bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042c0:	4606      	mov	r6, r0
 80042c2:	460f      	mov	r7, r1
 80042c4:	4652      	mov	r2, sl
 80042c6:	465b      	mov	r3, fp
 80042c8:	ec51 0b18 	vmov	r0, r1, d8
 80042cc:	f7fb ff8a 	bl	80001e4 <__adddf3>
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	f7fb ff86 	bl	80001e4 <__adddf3>
 80042d8:	4632      	mov	r2, r6
 80042da:	463b      	mov	r3, r7
 80042dc:	f7fb ff82 	bl	80001e4 <__adddf3>
 80042e0:	9c04      	ldr	r4, [sp, #16]
 80042e2:	4632      	mov	r2, r6
 80042e4:	463b      	mov	r3, r7
 80042e6:	4620      	mov	r0, r4
 80042e8:	460d      	mov	r5, r1
 80042ea:	f7fb ff79 	bl	80001e0 <__aeabi_dsub>
 80042ee:	4642      	mov	r2, r8
 80042f0:	464b      	mov	r3, r9
 80042f2:	f7fb ff75 	bl	80001e0 <__aeabi_dsub>
 80042f6:	ec53 2b18 	vmov	r2, r3, d8
 80042fa:	f7fb ff71 	bl	80001e0 <__aeabi_dsub>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4650      	mov	r0, sl
 8004304:	4659      	mov	r1, fp
 8004306:	e606      	b.n	8003f16 <__ieee754_pow+0x2ee>
 8004308:	2401      	movs	r4, #1
 800430a:	e6a0      	b.n	800404e <__ieee754_pow+0x426>
 800430c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004360 <__ieee754_pow+0x738>
 8004310:	e60d      	b.n	8003f2e <__ieee754_pow+0x306>
 8004312:	bf00      	nop
 8004314:	f3af 8000 	nop.w
 8004318:	4a454eef 	.word	0x4a454eef
 800431c:	3fca7e28 	.word	0x3fca7e28
 8004320:	93c9db65 	.word	0x93c9db65
 8004324:	3fcd864a 	.word	0x3fcd864a
 8004328:	a91d4101 	.word	0xa91d4101
 800432c:	3fd17460 	.word	0x3fd17460
 8004330:	518f264d 	.word	0x518f264d
 8004334:	3fd55555 	.word	0x3fd55555
 8004338:	db6fabff 	.word	0xdb6fabff
 800433c:	3fdb6db6 	.word	0x3fdb6db6
 8004340:	33333303 	.word	0x33333303
 8004344:	3fe33333 	.word	0x3fe33333
 8004348:	e0000000 	.word	0xe0000000
 800434c:	3feec709 	.word	0x3feec709
 8004350:	dc3a03fd 	.word	0xdc3a03fd
 8004354:	3feec709 	.word	0x3feec709
 8004358:	145b01f5 	.word	0x145b01f5
 800435c:	be3e2fe0 	.word	0xbe3e2fe0
 8004360:	00000000 	.word	0x00000000
 8004364:	3ff00000 	.word	0x3ff00000
 8004368:	7ff00000 	.word	0x7ff00000
 800436c:	43400000 	.word	0x43400000
 8004370:	0003988e 	.word	0x0003988e
 8004374:	000bb679 	.word	0x000bb679
 8004378:	08004a78 	.word	0x08004a78
 800437c:	3ff00000 	.word	0x3ff00000
 8004380:	40080000 	.word	0x40080000
 8004384:	08004a98 	.word	0x08004a98
 8004388:	08004a88 	.word	0x08004a88
 800438c:	a3b5      	add	r3, pc, #724	; (adr r3, 8004664 <__ieee754_pow+0xa3c>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	4640      	mov	r0, r8
 8004394:	4649      	mov	r1, r9
 8004396:	f7fb ff25 	bl	80001e4 <__adddf3>
 800439a:	4622      	mov	r2, r4
 800439c:	ec41 0b1a 	vmov	d10, r0, r1
 80043a0:	462b      	mov	r3, r5
 80043a2:	4630      	mov	r0, r6
 80043a4:	4639      	mov	r1, r7
 80043a6:	f7fb ff1b 	bl	80001e0 <__aeabi_dsub>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	ec51 0b1a 	vmov	r0, r1, d10
 80043b2:	f7fc fb5d 	bl	8000a70 <__aeabi_dcmpgt>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	f47f adf8 	bne.w	8003fac <__ieee754_pow+0x384>
 80043bc:	4aa4      	ldr	r2, [pc, #656]	; (8004650 <__ieee754_pow+0xa28>)
 80043be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80043c2:	4293      	cmp	r3, r2
 80043c4:	f340 810b 	ble.w	80045de <__ieee754_pow+0x9b6>
 80043c8:	151b      	asrs	r3, r3, #20
 80043ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80043ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80043d2:	fa4a f303 	asr.w	r3, sl, r3
 80043d6:	445b      	add	r3, fp
 80043d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80043dc:	4e9d      	ldr	r6, [pc, #628]	; (8004654 <__ieee754_pow+0xa2c>)
 80043de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80043e2:	4116      	asrs	r6, r2
 80043e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80043e8:	2000      	movs	r0, #0
 80043ea:	ea23 0106 	bic.w	r1, r3, r6
 80043ee:	f1c2 0214 	rsb	r2, r2, #20
 80043f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80043f6:	fa4a fa02 	asr.w	sl, sl, r2
 80043fa:	f1bb 0f00 	cmp.w	fp, #0
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4620      	mov	r0, r4
 8004404:	4629      	mov	r1, r5
 8004406:	bfb8      	it	lt
 8004408:	f1ca 0a00 	rsblt	sl, sl, #0
 800440c:	f7fb fee8 	bl	80001e0 <__aeabi_dsub>
 8004410:	ec41 0b19 	vmov	d9, r0, r1
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	ec51 0b19 	vmov	r0, r1, d9
 800441c:	f7fb fee2 	bl	80001e4 <__adddf3>
 8004420:	2400      	movs	r4, #0
 8004422:	a379      	add	r3, pc, #484	; (adr r3, 8004608 <__ieee754_pow+0x9e0>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	4620      	mov	r0, r4
 800442a:	460d      	mov	r5, r1
 800442c:	f7fc f890 	bl	8000550 <__aeabi_dmul>
 8004430:	ec53 2b19 	vmov	r2, r3, d9
 8004434:	4606      	mov	r6, r0
 8004436:	460f      	mov	r7, r1
 8004438:	4620      	mov	r0, r4
 800443a:	4629      	mov	r1, r5
 800443c:	f7fb fed0 	bl	80001e0 <__aeabi_dsub>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4640      	mov	r0, r8
 8004446:	4649      	mov	r1, r9
 8004448:	f7fb feca 	bl	80001e0 <__aeabi_dsub>
 800444c:	a370      	add	r3, pc, #448	; (adr r3, 8004610 <__ieee754_pow+0x9e8>)
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f7fc f87d 	bl	8000550 <__aeabi_dmul>
 8004456:	a370      	add	r3, pc, #448	; (adr r3, 8004618 <__ieee754_pow+0x9f0>)
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	4680      	mov	r8, r0
 800445e:	4689      	mov	r9, r1
 8004460:	4620      	mov	r0, r4
 8004462:	4629      	mov	r1, r5
 8004464:	f7fc f874 	bl	8000550 <__aeabi_dmul>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4640      	mov	r0, r8
 800446e:	4649      	mov	r1, r9
 8004470:	f7fb feb8 	bl	80001e4 <__adddf3>
 8004474:	4604      	mov	r4, r0
 8004476:	460d      	mov	r5, r1
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4630      	mov	r0, r6
 800447e:	4639      	mov	r1, r7
 8004480:	f7fb feb0 	bl	80001e4 <__adddf3>
 8004484:	4632      	mov	r2, r6
 8004486:	463b      	mov	r3, r7
 8004488:	4680      	mov	r8, r0
 800448a:	4689      	mov	r9, r1
 800448c:	f7fb fea8 	bl	80001e0 <__aeabi_dsub>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4620      	mov	r0, r4
 8004496:	4629      	mov	r1, r5
 8004498:	f7fb fea2 	bl	80001e0 <__aeabi_dsub>
 800449c:	4642      	mov	r2, r8
 800449e:	4606      	mov	r6, r0
 80044a0:	460f      	mov	r7, r1
 80044a2:	464b      	mov	r3, r9
 80044a4:	4640      	mov	r0, r8
 80044a6:	4649      	mov	r1, r9
 80044a8:	f7fc f852 	bl	8000550 <__aeabi_dmul>
 80044ac:	a35c      	add	r3, pc, #368	; (adr r3, 8004620 <__ieee754_pow+0x9f8>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	4604      	mov	r4, r0
 80044b4:	460d      	mov	r5, r1
 80044b6:	f7fc f84b 	bl	8000550 <__aeabi_dmul>
 80044ba:	a35b      	add	r3, pc, #364	; (adr r3, 8004628 <__ieee754_pow+0xa00>)
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	f7fb fe8e 	bl	80001e0 <__aeabi_dsub>
 80044c4:	4622      	mov	r2, r4
 80044c6:	462b      	mov	r3, r5
 80044c8:	f7fc f842 	bl	8000550 <__aeabi_dmul>
 80044cc:	a358      	add	r3, pc, #352	; (adr r3, 8004630 <__ieee754_pow+0xa08>)
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	f7fb fe87 	bl	80001e4 <__adddf3>
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	f7fc f839 	bl	8000550 <__aeabi_dmul>
 80044de:	a356      	add	r3, pc, #344	; (adr r3, 8004638 <__ieee754_pow+0xa10>)
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f7fb fe7c 	bl	80001e0 <__aeabi_dsub>
 80044e8:	4622      	mov	r2, r4
 80044ea:	462b      	mov	r3, r5
 80044ec:	f7fc f830 	bl	8000550 <__aeabi_dmul>
 80044f0:	a353      	add	r3, pc, #332	; (adr r3, 8004640 <__ieee754_pow+0xa18>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f7fb fe75 	bl	80001e4 <__adddf3>
 80044fa:	4622      	mov	r2, r4
 80044fc:	462b      	mov	r3, r5
 80044fe:	f7fc f827 	bl	8000550 <__aeabi_dmul>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4640      	mov	r0, r8
 8004508:	4649      	mov	r1, r9
 800450a:	f7fb fe69 	bl	80001e0 <__aeabi_dsub>
 800450e:	4604      	mov	r4, r0
 8004510:	460d      	mov	r5, r1
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4640      	mov	r0, r8
 8004518:	4649      	mov	r1, r9
 800451a:	f7fc f819 	bl	8000550 <__aeabi_dmul>
 800451e:	2200      	movs	r2, #0
 8004520:	ec41 0b19 	vmov	d9, r0, r1
 8004524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004528:	4620      	mov	r0, r4
 800452a:	4629      	mov	r1, r5
 800452c:	f7fb fe58 	bl	80001e0 <__aeabi_dsub>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	ec51 0b19 	vmov	r0, r1, d9
 8004538:	f7fc f934 	bl	80007a4 <__aeabi_ddiv>
 800453c:	4632      	mov	r2, r6
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	463b      	mov	r3, r7
 8004544:	4640      	mov	r0, r8
 8004546:	4649      	mov	r1, r9
 8004548:	f7fc f802 	bl	8000550 <__aeabi_dmul>
 800454c:	4632      	mov	r2, r6
 800454e:	463b      	mov	r3, r7
 8004550:	f7fb fe48 	bl	80001e4 <__adddf3>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fb fe40 	bl	80001e0 <__aeabi_dsub>
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	f7fb fe3c 	bl	80001e0 <__aeabi_dsub>
 8004568:	460b      	mov	r3, r1
 800456a:	4602      	mov	r2, r0
 800456c:	493a      	ldr	r1, [pc, #232]	; (8004658 <__ieee754_pow+0xa30>)
 800456e:	2000      	movs	r0, #0
 8004570:	f7fb fe36 	bl	80001e0 <__aeabi_dsub>
 8004574:	e9cd 0100 	strd	r0, r1, [sp]
 8004578:	9b01      	ldr	r3, [sp, #4]
 800457a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004582:	da2f      	bge.n	80045e4 <__ieee754_pow+0x9bc>
 8004584:	4650      	mov	r0, sl
 8004586:	ed9d 0b00 	vldr	d0, [sp]
 800458a:	f000 f9cd 	bl	8004928 <scalbn>
 800458e:	ec51 0b10 	vmov	r0, r1, d0
 8004592:	ec53 2b18 	vmov	r2, r3, d8
 8004596:	f7ff bbe0 	b.w	8003d5a <__ieee754_pow+0x132>
 800459a:	4b30      	ldr	r3, [pc, #192]	; (800465c <__ieee754_pow+0xa34>)
 800459c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80045a0:	429e      	cmp	r6, r3
 80045a2:	f77f af0b 	ble.w	80043bc <__ieee754_pow+0x794>
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <__ieee754_pow+0xa38>)
 80045a8:	440b      	add	r3, r1
 80045aa:	4303      	orrs	r3, r0
 80045ac:	d00b      	beq.n	80045c6 <__ieee754_pow+0x99e>
 80045ae:	a326      	add	r3, pc, #152	; (adr r3, 8004648 <__ieee754_pow+0xa20>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	ec51 0b18 	vmov	r0, r1, d8
 80045b8:	f7fb ffca 	bl	8000550 <__aeabi_dmul>
 80045bc:	a322      	add	r3, pc, #136	; (adr r3, 8004648 <__ieee754_pow+0xa20>)
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f7ff bbca 	b.w	8003d5a <__ieee754_pow+0x132>
 80045c6:	4622      	mov	r2, r4
 80045c8:	462b      	mov	r3, r5
 80045ca:	f7fb fe09 	bl	80001e0 <__aeabi_dsub>
 80045ce:	4642      	mov	r2, r8
 80045d0:	464b      	mov	r3, r9
 80045d2:	f7fc fa43 	bl	8000a5c <__aeabi_dcmpge>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	f43f aef0 	beq.w	80043bc <__ieee754_pow+0x794>
 80045dc:	e7e7      	b.n	80045ae <__ieee754_pow+0x986>
 80045de:	f04f 0a00 	mov.w	sl, #0
 80045e2:	e717      	b.n	8004414 <__ieee754_pow+0x7ec>
 80045e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045e8:	4619      	mov	r1, r3
 80045ea:	e7d2      	b.n	8004592 <__ieee754_pow+0x96a>
 80045ec:	491a      	ldr	r1, [pc, #104]	; (8004658 <__ieee754_pow+0xa30>)
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7ff bb9e 	b.w	8003d30 <__ieee754_pow+0x108>
 80045f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045f8:	f7ff bb9a 	b.w	8003d30 <__ieee754_pow+0x108>
 80045fc:	9000      	str	r0, [sp, #0]
 80045fe:	f7ff bb76 	b.w	8003cee <__ieee754_pow+0xc6>
 8004602:	2100      	movs	r1, #0
 8004604:	f7ff bb60 	b.w	8003cc8 <__ieee754_pow+0xa0>
 8004608:	00000000 	.word	0x00000000
 800460c:	3fe62e43 	.word	0x3fe62e43
 8004610:	fefa39ef 	.word	0xfefa39ef
 8004614:	3fe62e42 	.word	0x3fe62e42
 8004618:	0ca86c39 	.word	0x0ca86c39
 800461c:	be205c61 	.word	0xbe205c61
 8004620:	72bea4d0 	.word	0x72bea4d0
 8004624:	3e663769 	.word	0x3e663769
 8004628:	c5d26bf1 	.word	0xc5d26bf1
 800462c:	3ebbbd41 	.word	0x3ebbbd41
 8004630:	af25de2c 	.word	0xaf25de2c
 8004634:	3f11566a 	.word	0x3f11566a
 8004638:	16bebd93 	.word	0x16bebd93
 800463c:	3f66c16c 	.word	0x3f66c16c
 8004640:	5555553e 	.word	0x5555553e
 8004644:	3fc55555 	.word	0x3fc55555
 8004648:	c2f8f359 	.word	0xc2f8f359
 800464c:	01a56e1f 	.word	0x01a56e1f
 8004650:	3fe00000 	.word	0x3fe00000
 8004654:	000fffff 	.word	0x000fffff
 8004658:	3ff00000 	.word	0x3ff00000
 800465c:	4090cbff 	.word	0x4090cbff
 8004660:	3f6f3400 	.word	0x3f6f3400
 8004664:	652b82fe 	.word	0x652b82fe
 8004668:	3c971547 	.word	0x3c971547

0800466c <__ieee754_sqrt>:
 800466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004670:	ec55 4b10 	vmov	r4, r5, d0
 8004674:	4e56      	ldr	r6, [pc, #344]	; (80047d0 <__ieee754_sqrt+0x164>)
 8004676:	43ae      	bics	r6, r5
 8004678:	ee10 0a10 	vmov	r0, s0
 800467c:	ee10 3a10 	vmov	r3, s0
 8004680:	4629      	mov	r1, r5
 8004682:	462a      	mov	r2, r5
 8004684:	d110      	bne.n	80046a8 <__ieee754_sqrt+0x3c>
 8004686:	ee10 2a10 	vmov	r2, s0
 800468a:	462b      	mov	r3, r5
 800468c:	f7fb ff60 	bl	8000550 <__aeabi_dmul>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4620      	mov	r0, r4
 8004696:	4629      	mov	r1, r5
 8004698:	f7fb fda4 	bl	80001e4 <__adddf3>
 800469c:	4604      	mov	r4, r0
 800469e:	460d      	mov	r5, r1
 80046a0:	ec45 4b10 	vmov	d0, r4, r5
 80046a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	dc10      	bgt.n	80046ce <__ieee754_sqrt+0x62>
 80046ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80046b0:	4330      	orrs	r0, r6
 80046b2:	d0f5      	beq.n	80046a0 <__ieee754_sqrt+0x34>
 80046b4:	b15d      	cbz	r5, 80046ce <__ieee754_sqrt+0x62>
 80046b6:	ee10 2a10 	vmov	r2, s0
 80046ba:	462b      	mov	r3, r5
 80046bc:	ee10 0a10 	vmov	r0, s0
 80046c0:	f7fb fd8e 	bl	80001e0 <__aeabi_dsub>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	f7fc f86c 	bl	80007a4 <__aeabi_ddiv>
 80046cc:	e7e6      	b.n	800469c <__ieee754_sqrt+0x30>
 80046ce:	1509      	asrs	r1, r1, #20
 80046d0:	d076      	beq.n	80047c0 <__ieee754_sqrt+0x154>
 80046d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80046d6:	07ce      	lsls	r6, r1, #31
 80046d8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80046dc:	bf5e      	ittt	pl
 80046de:	0fda      	lsrpl	r2, r3, #31
 80046e0:	005b      	lslpl	r3, r3, #1
 80046e2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80046e6:	0fda      	lsrs	r2, r3, #31
 80046e8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80046ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80046f0:	2000      	movs	r0, #0
 80046f2:	106d      	asrs	r5, r5, #1
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	f04f 0e16 	mov.w	lr, #22
 80046fa:	4684      	mov	ip, r0
 80046fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004700:	eb0c 0401 	add.w	r4, ip, r1
 8004704:	4294      	cmp	r4, r2
 8004706:	bfde      	ittt	le
 8004708:	1b12      	suble	r2, r2, r4
 800470a:	eb04 0c01 	addle.w	ip, r4, r1
 800470e:	1840      	addle	r0, r0, r1
 8004710:	0052      	lsls	r2, r2, #1
 8004712:	f1be 0e01 	subs.w	lr, lr, #1
 8004716:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800471a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800471e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004722:	d1ed      	bne.n	8004700 <__ieee754_sqrt+0x94>
 8004724:	4671      	mov	r1, lr
 8004726:	2720      	movs	r7, #32
 8004728:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800472c:	4562      	cmp	r2, ip
 800472e:	eb04 060e 	add.w	r6, r4, lr
 8004732:	dc02      	bgt.n	800473a <__ieee754_sqrt+0xce>
 8004734:	d113      	bne.n	800475e <__ieee754_sqrt+0xf2>
 8004736:	429e      	cmp	r6, r3
 8004738:	d811      	bhi.n	800475e <__ieee754_sqrt+0xf2>
 800473a:	2e00      	cmp	r6, #0
 800473c:	eb06 0e04 	add.w	lr, r6, r4
 8004740:	da43      	bge.n	80047ca <__ieee754_sqrt+0x15e>
 8004742:	f1be 0f00 	cmp.w	lr, #0
 8004746:	db40      	blt.n	80047ca <__ieee754_sqrt+0x15e>
 8004748:	f10c 0801 	add.w	r8, ip, #1
 800474c:	eba2 020c 	sub.w	r2, r2, ip
 8004750:	429e      	cmp	r6, r3
 8004752:	bf88      	it	hi
 8004754:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004758:	1b9b      	subs	r3, r3, r6
 800475a:	4421      	add	r1, r4
 800475c:	46c4      	mov	ip, r8
 800475e:	0052      	lsls	r2, r2, #1
 8004760:	3f01      	subs	r7, #1
 8004762:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004766:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800476a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800476e:	d1dd      	bne.n	800472c <__ieee754_sqrt+0xc0>
 8004770:	4313      	orrs	r3, r2
 8004772:	d006      	beq.n	8004782 <__ieee754_sqrt+0x116>
 8004774:	1c4c      	adds	r4, r1, #1
 8004776:	bf13      	iteet	ne
 8004778:	3101      	addne	r1, #1
 800477a:	3001      	addeq	r0, #1
 800477c:	4639      	moveq	r1, r7
 800477e:	f021 0101 	bicne.w	r1, r1, #1
 8004782:	1043      	asrs	r3, r0, #1
 8004784:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004788:	0849      	lsrs	r1, r1, #1
 800478a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800478e:	07c2      	lsls	r2, r0, #31
 8004790:	bf48      	it	mi
 8004792:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004796:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800479a:	460c      	mov	r4, r1
 800479c:	463d      	mov	r5, r7
 800479e:	e77f      	b.n	80046a0 <__ieee754_sqrt+0x34>
 80047a0:	0ada      	lsrs	r2, r3, #11
 80047a2:	3815      	subs	r0, #21
 80047a4:	055b      	lsls	r3, r3, #21
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	d0fa      	beq.n	80047a0 <__ieee754_sqrt+0x134>
 80047aa:	02d7      	lsls	r7, r2, #11
 80047ac:	d50a      	bpl.n	80047c4 <__ieee754_sqrt+0x158>
 80047ae:	f1c1 0420 	rsb	r4, r1, #32
 80047b2:	fa23 f404 	lsr.w	r4, r3, r4
 80047b6:	1e4d      	subs	r5, r1, #1
 80047b8:	408b      	lsls	r3, r1
 80047ba:	4322      	orrs	r2, r4
 80047bc:	1b41      	subs	r1, r0, r5
 80047be:	e788      	b.n	80046d2 <__ieee754_sqrt+0x66>
 80047c0:	4608      	mov	r0, r1
 80047c2:	e7f0      	b.n	80047a6 <__ieee754_sqrt+0x13a>
 80047c4:	0052      	lsls	r2, r2, #1
 80047c6:	3101      	adds	r1, #1
 80047c8:	e7ef      	b.n	80047aa <__ieee754_sqrt+0x13e>
 80047ca:	46e0      	mov	r8, ip
 80047cc:	e7be      	b.n	800474c <__ieee754_sqrt+0xe0>
 80047ce:	bf00      	nop
 80047d0:	7ff00000 	.word	0x7ff00000

080047d4 <fabs>:
 80047d4:	ec51 0b10 	vmov	r0, r1, d0
 80047d8:	ee10 2a10 	vmov	r2, s0
 80047dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80047e0:	ec43 2b10 	vmov	d0, r2, r3
 80047e4:	4770      	bx	lr

080047e6 <finite>:
 80047e6:	b082      	sub	sp, #8
 80047e8:	ed8d 0b00 	vstr	d0, [sp]
 80047ec:	9801      	ldr	r0, [sp, #4]
 80047ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80047f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80047f6:	0fc0      	lsrs	r0, r0, #31
 80047f8:	b002      	add	sp, #8
 80047fa:	4770      	bx	lr
 80047fc:	0000      	movs	r0, r0
	...

08004800 <nan>:
 8004800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004808 <nan+0x8>
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	00000000 	.word	0x00000000
 800480c:	7ff80000 	.word	0x7ff80000

08004810 <rint>:
 8004810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004812:	ec51 0b10 	vmov	r0, r1, d0
 8004816:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800481a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800481e:	2e13      	cmp	r6, #19
 8004820:	ee10 4a10 	vmov	r4, s0
 8004824:	460b      	mov	r3, r1
 8004826:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800482a:	dc58      	bgt.n	80048de <rint+0xce>
 800482c:	2e00      	cmp	r6, #0
 800482e:	da2b      	bge.n	8004888 <rint+0x78>
 8004830:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004834:	4302      	orrs	r2, r0
 8004836:	d023      	beq.n	8004880 <rint+0x70>
 8004838:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800483c:	4302      	orrs	r2, r0
 800483e:	4254      	negs	r4, r2
 8004840:	4314      	orrs	r4, r2
 8004842:	0c4b      	lsrs	r3, r1, #17
 8004844:	0b24      	lsrs	r4, r4, #12
 8004846:	045b      	lsls	r3, r3, #17
 8004848:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800484c:	ea44 0103 	orr.w	r1, r4, r3
 8004850:	4b32      	ldr	r3, [pc, #200]	; (800491c <rint+0x10c>)
 8004852:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004856:	e9d3 6700 	ldrd	r6, r7, [r3]
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4630      	mov	r0, r6
 8004860:	4639      	mov	r1, r7
 8004862:	f7fb fcbf 	bl	80001e4 <__adddf3>
 8004866:	e9cd 0100 	strd	r0, r1, [sp]
 800486a:	463b      	mov	r3, r7
 800486c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004870:	4632      	mov	r2, r6
 8004872:	f7fb fcb5 	bl	80001e0 <__aeabi_dsub>
 8004876:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800487a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800487e:	4639      	mov	r1, r7
 8004880:	ec41 0b10 	vmov	d0, r0, r1
 8004884:	b003      	add	sp, #12
 8004886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004888:	4a25      	ldr	r2, [pc, #148]	; (8004920 <rint+0x110>)
 800488a:	4132      	asrs	r2, r6
 800488c:	ea01 0702 	and.w	r7, r1, r2
 8004890:	4307      	orrs	r7, r0
 8004892:	d0f5      	beq.n	8004880 <rint+0x70>
 8004894:	0851      	lsrs	r1, r2, #1
 8004896:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800489a:	4314      	orrs	r4, r2
 800489c:	d00c      	beq.n	80048b8 <rint+0xa8>
 800489e:	ea23 0201 	bic.w	r2, r3, r1
 80048a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048a6:	2e13      	cmp	r6, #19
 80048a8:	fa43 f606 	asr.w	r6, r3, r6
 80048ac:	bf0c      	ite	eq
 80048ae:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80048b2:	2400      	movne	r4, #0
 80048b4:	ea42 0306 	orr.w	r3, r2, r6
 80048b8:	4918      	ldr	r1, [pc, #96]	; (800491c <rint+0x10c>)
 80048ba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80048be:	4622      	mov	r2, r4
 80048c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80048c4:	4620      	mov	r0, r4
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7fb fc8c 	bl	80001e4 <__adddf3>
 80048cc:	e9cd 0100 	strd	r0, r1, [sp]
 80048d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048d4:	4622      	mov	r2, r4
 80048d6:	462b      	mov	r3, r5
 80048d8:	f7fb fc82 	bl	80001e0 <__aeabi_dsub>
 80048dc:	e7d0      	b.n	8004880 <rint+0x70>
 80048de:	2e33      	cmp	r6, #51	; 0x33
 80048e0:	dd07      	ble.n	80048f2 <rint+0xe2>
 80048e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80048e6:	d1cb      	bne.n	8004880 <rint+0x70>
 80048e8:	ee10 2a10 	vmov	r2, s0
 80048ec:	f7fb fc7a 	bl	80001e4 <__adddf3>
 80048f0:	e7c6      	b.n	8004880 <rint+0x70>
 80048f2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80048f6:	f04f 36ff 	mov.w	r6, #4294967295
 80048fa:	40d6      	lsrs	r6, r2
 80048fc:	4230      	tst	r0, r6
 80048fe:	d0bf      	beq.n	8004880 <rint+0x70>
 8004900:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8004904:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8004908:	bf1f      	itttt	ne
 800490a:	ea24 0101 	bicne.w	r1, r4, r1
 800490e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004912:	fa44 f202 	asrne.w	r2, r4, r2
 8004916:	ea41 0402 	orrne.w	r4, r1, r2
 800491a:	e7cd      	b.n	80048b8 <rint+0xa8>
 800491c:	08004aa8 	.word	0x08004aa8
 8004920:	000fffff 	.word	0x000fffff
 8004924:	00000000 	.word	0x00000000

08004928 <scalbn>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	ec55 4b10 	vmov	r4, r5, d0
 800492e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004932:	4606      	mov	r6, r0
 8004934:	462b      	mov	r3, r5
 8004936:	b99a      	cbnz	r2, 8004960 <scalbn+0x38>
 8004938:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800493c:	4323      	orrs	r3, r4
 800493e:	d036      	beq.n	80049ae <scalbn+0x86>
 8004940:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <scalbn+0x100>)
 8004942:	4629      	mov	r1, r5
 8004944:	ee10 0a10 	vmov	r0, s0
 8004948:	2200      	movs	r2, #0
 800494a:	f7fb fe01 	bl	8000550 <__aeabi_dmul>
 800494e:	4b37      	ldr	r3, [pc, #220]	; (8004a2c <scalbn+0x104>)
 8004950:	429e      	cmp	r6, r3
 8004952:	4604      	mov	r4, r0
 8004954:	460d      	mov	r5, r1
 8004956:	da10      	bge.n	800497a <scalbn+0x52>
 8004958:	a32b      	add	r3, pc, #172	; (adr r3, 8004a08 <scalbn+0xe0>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	e03a      	b.n	80049d6 <scalbn+0xae>
 8004960:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004964:	428a      	cmp	r2, r1
 8004966:	d10c      	bne.n	8004982 <scalbn+0x5a>
 8004968:	ee10 2a10 	vmov	r2, s0
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fb fc38 	bl	80001e4 <__adddf3>
 8004974:	4604      	mov	r4, r0
 8004976:	460d      	mov	r5, r1
 8004978:	e019      	b.n	80049ae <scalbn+0x86>
 800497a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800497e:	460b      	mov	r3, r1
 8004980:	3a36      	subs	r2, #54	; 0x36
 8004982:	4432      	add	r2, r6
 8004984:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004988:	428a      	cmp	r2, r1
 800498a:	dd08      	ble.n	800499e <scalbn+0x76>
 800498c:	2d00      	cmp	r5, #0
 800498e:	a120      	add	r1, pc, #128	; (adr r1, 8004a10 <scalbn+0xe8>)
 8004990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004994:	da1c      	bge.n	80049d0 <scalbn+0xa8>
 8004996:	a120      	add	r1, pc, #128	; (adr r1, 8004a18 <scalbn+0xf0>)
 8004998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800499c:	e018      	b.n	80049d0 <scalbn+0xa8>
 800499e:	2a00      	cmp	r2, #0
 80049a0:	dd08      	ble.n	80049b4 <scalbn+0x8c>
 80049a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80049ae:	ec45 4b10 	vmov	d0, r4, r5
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80049b8:	da19      	bge.n	80049ee <scalbn+0xc6>
 80049ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80049be:	429e      	cmp	r6, r3
 80049c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80049c4:	dd0a      	ble.n	80049dc <scalbn+0xb4>
 80049c6:	a112      	add	r1, pc, #72	; (adr r1, 8004a10 <scalbn+0xe8>)
 80049c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e2      	bne.n	8004996 <scalbn+0x6e>
 80049d0:	a30f      	add	r3, pc, #60	; (adr r3, 8004a10 <scalbn+0xe8>)
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f7fb fdbb 	bl	8000550 <__aeabi_dmul>
 80049da:	e7cb      	b.n	8004974 <scalbn+0x4c>
 80049dc:	a10a      	add	r1, pc, #40	; (adr r1, 8004a08 <scalbn+0xe0>)
 80049de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0b8      	beq.n	8004958 <scalbn+0x30>
 80049e6:	a10e      	add	r1, pc, #56	; (adr r1, 8004a20 <scalbn+0xf8>)
 80049e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049ec:	e7b4      	b.n	8004958 <scalbn+0x30>
 80049ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049f2:	3236      	adds	r2, #54	; 0x36
 80049f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80049fc:	4620      	mov	r0, r4
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <scalbn+0x108>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	e7e8      	b.n	80049d6 <scalbn+0xae>
 8004a04:	f3af 8000 	nop.w
 8004a08:	c2f8f359 	.word	0xc2f8f359
 8004a0c:	01a56e1f 	.word	0x01a56e1f
 8004a10:	8800759c 	.word	0x8800759c
 8004a14:	7e37e43c 	.word	0x7e37e43c
 8004a18:	8800759c 	.word	0x8800759c
 8004a1c:	fe37e43c 	.word	0xfe37e43c
 8004a20:	c2f8f359 	.word	0xc2f8f359
 8004a24:	81a56e1f 	.word	0x81a56e1f
 8004a28:	43500000 	.word	0x43500000
 8004a2c:	ffff3cb0 	.word	0xffff3cb0
 8004a30:	3c900000 	.word	0x3c900000

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
