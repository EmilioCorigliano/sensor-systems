
ADC-DMA_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08008278  08008278  00018278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f8  080086f8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080086f8  080086f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008700  08008700  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  200001e0  080088e8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012f0  080088e8  000212f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011975  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c4  00000000  00000000  00031b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00033f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00034dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a50  00000000  00000000  00035b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011120  00000000  00000000  0004e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b462  00000000  00000000  0005f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fab2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005040  00000000  00000000  000fab80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800825c 	.word	0x0800825c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800825c 	.word	0x0800825c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eb4:	f000 fd0e 	bl	80018d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eb8:	f000 f81c 	bl	8000ef4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_DMA_Init();
 8000ebc:	f000 f950 	bl	8001160 <MX_DMA_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ec0:	f000 f96e 	bl	80011a0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ec4:	f000 f922 	bl	800110c <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000ec8:	f000 f94a 	bl	8001160 <MX_DMA_Init>
	MX_ADC1_Init();
 8000ecc:	f000 f87e 	bl	8000fcc <MX_ADC1_Init>
	MX_TIM3_Init();
 8000ed0:	f000 f8ce 	bl	8001070 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <main+0x38>)
 8000ed6:	f002 fd85 	bl	80039e4 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) data, bufflen);
 8000eda:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ede:	4903      	ldr	r1, [pc, #12]	; (8000eec <main+0x3c>)
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <main+0x40>)
 8000ee2:	f000 feed 	bl	8001cc0 <HAL_ADC_Start_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ee6:	e7fe      	b.n	8000ee6 <main+0x36>
 8000ee8:	20000208 	.word	0x20000208
 8000eec:	200002f8 	.word	0x200002f8
 8000ef0:	20000250 	.word	0x20000250

08000ef4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	; 0x50
 8000ef8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	2230      	movs	r2, #48	; 0x30
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 fb58 	bl	80045b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <SystemClock_Config+0xd0>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <SystemClock_Config+0xd0>)
 8000f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <SystemClock_Config+0xd0>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <SystemClock_Config+0xd4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <SystemClock_Config+0xd4>)
 8000f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <SystemClock_Config+0xd4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f60:	2302      	movs	r3, #2
 8000f62:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000f6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f70:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f72:	2304      	movs	r3, #4
 8000f74:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f76:	2307      	movs	r3, #7
 8000f78:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 f86c 	bl	800305c <HAL_RCC_OscConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x9a>
		Error_Handler();
 8000f8a:	f000 fa4b 	bl	8001424 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f8e:	230f      	movs	r3, #15
 8000f90:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f92:	2302      	movs	r3, #2
 8000f94:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 face 	bl	800354c <HAL_RCC_ClockConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xc6>
		Error_Handler();
 8000fb6:	f000 fa35 	bl	8001424 <Error_Handler>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3750      	adds	r7, #80	; 0x50
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe0:	4a22      	ldr	r2, [pc, #136]	; (800106c <MX_ADC1_Init+0xa0>)
 8000fe2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_ADC1_Init+0x9c>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_ADC1_Init+0x9c>)
 8001008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_ADC1_Init+0x9c>)
 8001010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_ADC1_Init+0x9c>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_ADC1_Init+0x9c>)
 800101e:	2201      	movs	r2, #1
 8001020:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_ADC1_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_ADC1_Init+0x9c>)
 800102c:	2201      	movs	r2, #1
 800102e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_ADC1_Init+0x9c>)
 8001032:	f000 fcc1 	bl	80019b8 <HAL_ADC_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x74>
		Error_Handler();
 800103c:	f000 f9f2 	bl	8001424 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001048:	2307      	movs	r3, #7
 800104a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_ADC1_Init+0x9c>)
 8001052:	f000 ff39 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x94>
		Error_Handler();
 800105c:	f000 f9e2 	bl	8001424 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000250 	.word	0x20000250
 800106c:	40012000 	.word	0x40012000

08001070 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_TIM3_Init+0x94>)
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <MX_TIM3_Init+0x98>)
 8001090:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 42 - 1;
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_TIM3_Init+0x94>)
 8001094:	2229      	movs	r2, #41	; 0x29
 8001096:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_TIM3_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2000 - 1;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_TIM3_Init+0x94>)
 80010a0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80010a4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_TIM3_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM3_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_TIM3_Init+0x94>)
 80010b4:	f002 fc46 	bl	8003944 <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM3_Init+0x52>
		Error_Handler();
 80010be:	f000 f9b1 	bl	8001424 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_TIM3_Init+0x94>)
 80010d0:	f002 fce2 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM3_Init+0x6e>
		Error_Handler();
 80010da:	f000 f9a3 	bl	8001424 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010de:	2320      	movs	r3, #32
 80010e0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM3_Init+0x94>)
 80010ec:	f002 feb6 	bl	8003e5c <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80010f6:	f000 f995 	bl	8001424 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000208 	.word	0x20000208
 8001108:	40000400 	.word	0x40000400

0800110c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_USART2_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001144:	f002 fef8 	bl	8003f38 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800114e:	f000 f969 	bl	8001424 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20001298 	.word	0x20001298
 800115c:	40004400 	.word	0x40004400

08001160 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_DMA_Init+0x3c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <MX_DMA_Init+0x3c>)
 8001170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_DMA_Init+0x3c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2101      	movs	r1, #1
 8001186:	2038      	movs	r0, #56	; 0x38
 8001188:	f001 fa23 	bl	80025d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800118c:	2038      	movs	r0, #56	; 0x38
 800118e:	f001 fa3c 	bl	800260a <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a25      	ldr	r2, [pc, #148]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <MX_GPIO_Init+0xd0>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2120      	movs	r1, #32
 800122a:	4812      	ldr	r0, [pc, #72]	; (8001274 <MX_GPIO_Init+0xd4>)
 800122c:	f001 fefc 	bl	8003028 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001234:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001236:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800123a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_GPIO_Init+0xd8>)
 8001248:	f001 fd6a 	bl	8002d20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800124c:	2320      	movs	r3, #32
 800124e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_GPIO_Init+0xd4>)
 8001264:	f001 fd5c 	bl	8002d20 <HAL_GPIO_Init>

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020800 	.word	0x40020800

0800127c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	calculateAvgAndSend(0);
 8001284:	2000      	movs	r0, #0
 8001286:	f000 f80f 	bl	80012a8 <calculateAvgAndSend>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	calculateAvgAndSend(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 f804 	bl	80012a8 <calculateAvgAndSend>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <calculateAvgAndSend>:

void calculateAvgAndSend(int half) {
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b0b0      	sub	sp, #192	; 0xc0
 80012ac:	af04      	add	r7, sp, #16
 80012ae:	6078      	str	r0, [r7, #4]
	double average = 0.0;
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	for (int i = 0; i < 1000; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80012c2:	e021      	b.n	8001308 <calculateAvgAndSend+0x60>
		average += (double) data[i + half * NSAMPLES] / (double) NSAMPLES;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ca:	fb02 f203 	mul.w	r2, r2, r3
 80012ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012d2:	4413      	add	r3, r2
 80012d4:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <calculateAvgAndSend+0x160>)
 80012d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f91a 	bl	8000514 <__aeabi_ui2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b49      	ldr	r3, [pc, #292]	; (800140c <calculateAvgAndSend+0x164>)
 80012e6:	f7ff fab9 	bl	800085c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80012f2:	f7fe ffd3 	bl	800029c <__adddf3>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	for (int i = 0; i < 1000; i++) {
 80012fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001302:	3301      	adds	r3, #1
 8001304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001308:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800130c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001310:	dbd8      	blt.n	80012c4 <calculateAvgAndSend+0x1c>
	}

	average *= (3.3 / 4096.0);
 8001312:	a335      	add	r3, pc, #212	; (adr r3, 80013e8 <calculateAvgAndSend+0x140>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800131c:	f7ff f974 	bl	8000608 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	double resistance = average*100000.0/(3.3 - average);
 8001328:	a331      	add	r3, pc, #196	; (adr r3, 80013f0 <calculateAvgAndSend+0x148>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001332:	f7ff f969 	bl	8000608 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001342:	a12d      	add	r1, pc, #180	; (adr r1, 80013f8 <calculateAvgAndSend+0x150>)
 8001344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001348:	f7fe ffa6 	bl	8000298 <__aeabi_dsub>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7ff fa82 	bl	800085c <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	double lux = 10*pow(100000.0/resistance, 1.25);
 8001360:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001364:	a122      	add	r1, pc, #136	; (adr r1, 80013f0 <calculateAvgAndSend+0x148>)
 8001366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800136a:	f7ff fa77 	bl	800085c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	ec43 2b17 	vmov	d7, r2, r3
 8001376:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001400 <calculateAvgAndSend+0x158>
 800137a:	eeb0 0a47 	vmov.f32	s0, s14
 800137e:	eef0 0a67 	vmov.f32	s1, s15
 8001382:	f005 ffb7 	bl	80072f4 <pow>
 8001386:	ec51 0b10 	vmov	r0, r1, d0
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <calculateAvgAndSend+0x168>)
 8001390:	f7ff f93a 	bl	8000608 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	char string[128];
	int length = sprintf(string, "%s => resistance: %.3f - lux: %.3f\r\n",
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <calculateAvgAndSend+0xfe>
 80013a2:	491c      	ldr	r1, [pc, #112]	; (8001414 <calculateAvgAndSend+0x16c>)
 80013a4:	e000      	b.n	80013a8 <calculateAvgAndSend+0x100>
 80013a6:	491c      	ldr	r1, [pc, #112]	; (8001418 <calculateAvgAndSend+0x170>)
 80013a8:	f107 000c 	add.w	r0, r7, #12
 80013ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80013b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80013b8:	e9cd 2300 	strd	r2, r3, [sp]
 80013bc:	460a      	mov	r2, r1
 80013be:	4917      	ldr	r1, [pc, #92]	; (800141c <calculateAvgAndSend+0x174>)
 80013c0:	f003 fd6c 	bl	8004e9c <siprintf>
 80013c4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			(half ? "Full" : "Half"), resistance, lux);

	HAL_UART_Transmit(&huart2, string, length, 1000);
 80013c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f107 010c 	add.w	r1, r7, #12
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	4812      	ldr	r0, [pc, #72]	; (8001420 <calculateAvgAndSend+0x178>)
 80013d8:	f002 fdfb 	bl	8003fd2 <HAL_UART_Transmit>
}
 80013dc:	bf00      	nop
 80013de:	37b0      	adds	r7, #176	; 0xb0
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdb0      	pop	{r4, r5, r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	66666666 	.word	0x66666666
 80013ec:	3f4a6666 	.word	0x3f4a6666
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40f86a00 	.word	0x40f86a00
 80013f8:	66666666 	.word	0x66666666
 80013fc:	400a6666 	.word	0x400a6666
 8001400:	00000000 	.word	0x00000000
 8001404:	3ff40000 	.word	0x3ff40000
 8001408:	200002f8 	.word	0x200002f8
 800140c:	408f4000 	.word	0x408f4000
 8001410:	40240000 	.word	0x40240000
 8001414:	08008278 	.word	0x08008278
 8001418:	08008280 	.word	0x08008280
 800141c:	08008288 	.word	0x08008288
 8001420:	20001298 	.word	0x20001298

08001424 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800142c:	e7fe      	b.n	800142c <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_MspInit+0x4c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x4c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800146e:	2006      	movs	r0, #6
 8001470:	f001 f8a4 	bl	80025bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a33      	ldr	r2, [pc, #204]	; (800156c <HAL_ADC_MspInit+0xec>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d15f      	bne.n	8001562 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <HAL_ADC_MspInit+0xf0>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a31      	ldr	r2, [pc, #196]	; (8001570 <HAL_ADC_MspInit+0xf0>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_ADC_MspInit+0xf0>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_ADC_MspInit+0xf0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_ADC_MspInit+0xf0>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_ADC_MspInit+0xf0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4821      	ldr	r0, [pc, #132]	; (8001574 <HAL_ADC_MspInit+0xf4>)
 80014ee:	f001 fc17 	bl	8002d20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <HAL_ADC_MspInit+0xfc>)
 80014f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800150c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001510:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001518:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800151c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001520:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001528:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001536:	4810      	ldr	r0, [pc, #64]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001538:	f001 f882 	bl	8002640 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001542:	f7ff ff6f 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800154a:	639a      	str	r2, [r3, #56]	; 0x38
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2101      	movs	r1, #1
 8001556:	2012      	movs	r0, #18
 8001558:	f001 f83b 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800155c:	2012      	movs	r0, #18
 800155e:	f001 f854 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40012000 	.word	0x40012000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	20000298 	.word	0x20000298
 800157c:	40026410 	.word	0x40026410

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10d      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40000400 	.word	0x40000400
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_UART_MspInit+0x84>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d12b      	bne.n	800163e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_UART_MspInit+0x88>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_UART_MspInit+0x88>)
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_UART_MspInit+0x88>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_UART_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_UART_MspInit+0x88>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_UART_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800161e:	230c      	movs	r3, #12
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162e:	2307      	movs	r3, #7
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_UART_MspInit+0x8c>)
 800163a:	f001 fb71 	bl	8002d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40004400 	.word	0x40004400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f96a 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <ADC_IRQHandler+0x10>)
 80016ae:	f000 f9c6 	bl	8001a3e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000250 	.word	0x20000250

080016bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA2_Stream0_IRQHandler+0x10>)
 80016c2:	f001 f8c3 	bl	800284c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000298 	.word	0x20000298

080016d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	return 1;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_kill>:

int _kill(int pid, int sig)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016ea:	f002 ff3b 	bl	8004564 <__errno>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2216      	movs	r2, #22
 80016f2:	601a      	str	r2, [r3, #0]
	return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_exit>:

void _exit (int status)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ffe7 	bl	80016e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001712:	e7fe      	b.n	8001712 <_exit+0x12>

08001714 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	e00a      	b.n	800173c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001726:	f3af 8000 	nop.w
 800172a:	4601      	mov	r1, r0
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	60ba      	str	r2, [r7, #8]
 8001732:	b2ca      	uxtb	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf0      	blt.n	8001726 <_read+0x12>
	}

return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e009      	b.n	8001774 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	dbf1      	blt.n	8001760 <_write+0x12>
	}
	return len;
 800177c:	687b      	ldr	r3, [r7, #4]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_close>:

int _close(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	return -1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ae:	605a      	str	r2, [r3, #4]
	return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_isatty>:

int _isatty(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
	return 1;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <_sbrk+0x5c>)
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <_sbrk+0x60>)
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <_sbrk+0x64>)
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <_sbrk+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	429a      	cmp	r2, r3
 800181e:	d207      	bcs.n	8001830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001820:	f002 fea0 	bl	8004564 <__errno>
 8001824:	4603      	mov	r3, r0
 8001826:	220c      	movs	r2, #12
 8001828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	e009      	b.n	8001844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <_sbrk+0x64>)
 8001840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20018000 	.word	0x20018000
 8001850:	00000400 	.word	0x00000400
 8001854:	200001fc 	.word	0x200001fc
 8001858:	200012f0 	.word	0x200012f0

0800185c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <SystemInit+0x20>)
 8001862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <SystemInit+0x20>)
 8001868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800186c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001886:	490e      	ldr	r1, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800189c:	4c0b      	ldr	r4, [pc, #44]	; (80018cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018aa:	f7ff ffd7 	bl	800185c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f002 fe5f 	bl	8004570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7ff fafd 	bl	8000eb0 <main>
  bx  lr    
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80018c4:	08008708 	.word	0x08008708
  ldr r2, =_sbss
 80018c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018cc:	200012f0 	.word	0x200012f0

080018d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <DMA1_Stream0_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_Init+0x40>)
 80018de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_Init+0x40>)
 80018ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_Init+0x40>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 fe5d 	bl	80025bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001902:	2000      	movs	r0, #0
 8001904:	f000 f808 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001908:	f7ff fd92 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x54>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x58>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fe75 	bl	8002626 <HAL_SYSTICK_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00e      	b.n	8001964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d80a      	bhi.n	8001962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 fe3d 	bl	80025d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_InitTick+0x5c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000000 	.word	0x20000000
 8001970:	20000008 	.word	0x20000008
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	200012dc 	.word	0x200012dc

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200012dc 	.word	0x200012dc

080019b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e033      	b.n	8001a36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fd52 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019fe:	f023 0302 	bic.w	r3, r3, #2
 8001a02:	f043 0202 	orr.w	r2, r3, #2
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fb7e 	bl	800210c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f023 0303 	bic.w	r3, r3, #3
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
 8001a26:	e001      	b.n	8001a2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d049      	beq.n	8001b14 <HAL_ADC_IRQHandler+0xd6>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d046      	beq.n	8001b14 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d12b      	bne.n	8001b04 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d127      	bne.n	8001b04 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d119      	bne.n	8001b04 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0220 	bic.w	r2, r2, #32
 8001ade:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fbc4 	bl	8001292 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0212 	mvn.w	r2, #18
 8001b12:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf0c      	ite	eq
 8001b22:	2301      	moveq	r3, #1
 8001b24:	2300      	movne	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b34:	2b80      	cmp	r3, #128	; 0x80
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d057      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x1b8>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d054      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d139      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d12b      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d124      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d11d      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d119      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fc0e 	bl	8002408 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 020c 	mvn.w	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d017      	beq.n	8001c58 <HAL_ADC_IRQHandler+0x21a>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d014      	beq.n	8001c58 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10d      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f929 	bl	8001ea0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0201 	mvn.w	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d015      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x27a>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f043 0202 	orr.w	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f06f 0220 	mvn.w	r2, #32
 8001ca6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f903 	bl	8001eb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f06f 0220 	mvn.w	r2, #32
 8001cb6:	601a      	str	r2, [r3, #0]
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Start_DMA+0x1e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e0ce      	b.n	8001e7c <HAL_ADC_Start_DMA+0x1bc>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d018      	beq.n	8001d26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d04:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_ADC_Start_DMA+0x1c4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a5f      	ldr	r2, [pc, #380]	; (8001e88 <HAL_ADC_Start_DMA+0x1c8>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0c9a      	lsrs	r2, r3, #18
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f9      	bne.n	8001d1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d34:	d107      	bne.n	8001d46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d44:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	f040 8086 	bne.w	8001e62 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d94:	d106      	bne.n	8001da4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f023 0206 	bic.w	r2, r3, #6
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
 8001da2:	e002      	b.n	8001daa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_ADC_Start_DMA+0x1cc>)
 8001db4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	4a35      	ldr	r2, [pc, #212]	; (8001e90 <HAL_ADC_Start_DMA+0x1d0>)
 8001dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_ADC_Start_DMA+0x1d4>)
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	4a33      	ldr	r2, [pc, #204]	; (8001e98 <HAL_ADC_Start_DMA+0x1d8>)
 8001dcc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001de6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	334c      	adds	r3, #76	; 0x4c
 8001e02:	4619      	mov	r1, r3
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f000 fcc8 	bl	800279c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10f      	bne.n	8001e38 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d129      	bne.n	8001e7a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	e020      	b.n	8001e7a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_ADC_Start_DMA+0x1dc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d11b      	bne.n	8001e7a <HAL_ADC_Start_DMA+0x1ba>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d114      	bne.n	8001e7a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e00b      	b.n	8001e7a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000000 	.word	0x20000000
 8001e88:	431bde83 	.word	0x431bde83
 8001e8c:	40012300 	.word	0x40012300
 8001e90:	08002305 	.word	0x08002305
 8001e94:	080023bf 	.word	0x080023bf
 8001e98:	080023db 	.word	0x080023db
 8001e9c:	40012000 	.word	0x40012000

08001ea0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e105      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x228>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	d925      	bls.n	8001f40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68d9      	ldr	r1, [r3, #12]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4403      	add	r3, r0
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	409a      	lsls	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	e022      	b.n	8001f86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	2207      	movs	r2, #7
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6919      	ldr	r1, [r3, #16]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4403      	add	r3, r0
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d824      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b05      	subs	r3, #5
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd6:	e04c      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d824      	bhi.n	800202a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b23      	subs	r3, #35	; 0x23
 8001ff2:	221f      	movs	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b23      	subs	r3, #35	; 0x23
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
 8002028:	e023      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b41      	subs	r3, #65	; 0x41
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b41      	subs	r3, #65	; 0x41
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_ADC_ConfigChannel+0x234>)
 8002074:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_ADC_ConfigChannel+0x238>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d109      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1cc>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b12      	cmp	r3, #18
 8002086:	d105      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a19      	ldr	r2, [pc, #100]	; (8002100 <HAL_ADC_ConfigChannel+0x238>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d123      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x21e>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d003      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x1e6>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b11      	cmp	r3, #17
 80020ac:	d11b      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d111      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_ADC_ConfigChannel+0x23c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_ADC_ConfigChannel+0x240>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	0c9a      	lsrs	r2, r3, #18
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3b01      	subs	r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f9      	bne.n	80020da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40012300 	.word	0x40012300
 8002100:	40012000 	.word	0x40012000
 8002104:	20000000 	.word	0x20000000
 8002108:	431bde83 	.word	0x431bde83

0800210c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002114:	4b79      	ldr	r3, [pc, #484]	; (80022fc <ADC_Init+0x1f0>)
 8002116:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	431a      	orrs	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	021a      	lsls	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	4a58      	ldr	r2, [pc, #352]	; (8002300 <ADC_Init+0x1f4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d022      	beq.n	80021ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	e00f      	b.n	800220a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002208:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0202 	bic.w	r2, r2, #2
 8002218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e1b      	ldrb	r3, [r3, #24]
 8002224:	005a      	lsls	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002246:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002256:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	3b01      	subs	r3, #1
 8002264:	035a      	lsls	r2, r3, #13
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	e007      	b.n	8002280 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	3b01      	subs	r3, #1
 800229c:	051a      	lsls	r2, r3, #20
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c2:	025a      	lsls	r2, r3, #9
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	029a      	lsls	r2, r3, #10
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40012300 	.word	0x40012300
 8002300:	0f000001 	.word	0x0f000001

08002304 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d13c      	bne.n	8002398 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d12b      	bne.n	8002390 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d127      	bne.n	8002390 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002358:	2b00      	cmp	r3, #0
 800235a:	d119      	bne.n	8002390 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0220 	bic.w	r2, r2, #32
 800236a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7fe ff7e 	bl	8001292 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002396:	e00e      	b.n	80023b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fd85 	bl	8001eb4 <HAL_ADC_ErrorCallback>
}
 80023aa:	e004      	b.n	80023b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7fe ff55 	bl	800127c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f043 0204 	orr.w	r2, r3, #4
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff fd5a 	bl	8001eb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4907      	ldr	r1, [pc, #28]	; (80024b8 <__NVIC_EnableIRQ+0x38>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	; (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
         );
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002588:	d301      	bcc.n	800258e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258a:	2301      	movs	r3, #1
 800258c:	e00f      	b.n	80025ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <SysTick_Config+0x40>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002596:	210f      	movs	r1, #15
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f7ff ff8e 	bl	80024bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <SysTick_Config+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <SysTick_Config+0x40>)
 80025a8:	2207      	movs	r2, #7
 80025aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	e000e010 	.word	0xe000e010

080025bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff29 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff3e 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff8e 	bl	8002510 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5d 	bl	80024bc <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff31 	bl	8002480 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa2 	bl	8002578 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff f9a8 	bl	80019a0 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e099      	b.n	8002790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267c:	e00f      	b.n	800269e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267e:	f7ff f98f 	bl	80019a0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b05      	cmp	r3, #5
 800268a:	d908      	bls.n	800269e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2203      	movs	r2, #3
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e078      	b.n	8002790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e8      	bne.n	800267e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_DMA_Init+0x158>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d107      	bne.n	8002708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	4313      	orrs	r3, r2
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f023 0307 	bic.w	r3, r3, #7
 800271e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	2b04      	cmp	r3, #4
 8002730:	d117      	bne.n	8002762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00e      	beq.n	8002762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fa6f 	bl	8002c28 <DMA_CheckFifoParam>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2240      	movs	r2, #64	; 0x40
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800275e:	2301      	movs	r3, #1
 8002760:	e016      	b.n	8002790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa26 	bl	8002bbc <DMA_CalcBaseAndBitshift>
 8002770:	4603      	mov	r3, r0
 8002772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	223f      	movs	r2, #63	; 0x3f
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	f010803f 	.word	0xf010803f

0800279c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_DMA_Start_IT+0x26>
 80027be:	2302      	movs	r3, #2
 80027c0:	e040      	b.n	8002844 <HAL_DMA_Start_IT+0xa8>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d12f      	bne.n	8002836 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2202      	movs	r2, #2
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f9b8 	bl	8002b60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	223f      	movs	r2, #63	; 0x3f
 80027f6:	409a      	lsls	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0216 	orr.w	r2, r2, #22
 800280a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0208 	orr.w	r2, r2, #8
 8002822:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e005      	b.n	8002842 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002842:	7dfb      	ldrb	r3, [r7, #23]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002858:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_DMA_IRQHandler+0x258>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a92      	ldr	r2, [pc, #584]	; (8002aa8 <HAL_DMA_IRQHandler+0x25c>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2208      	movs	r2, #8
 8002878:	409a      	lsls	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01a      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0204 	bic.w	r2, r2, #4
 800289e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	2208      	movs	r2, #8
 80028a6:	409a      	lsls	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2201      	movs	r2, #1
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d012      	beq.n	80028ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	2201      	movs	r2, #1
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	2204      	movs	r2, #4
 80028f4:	409a      	lsls	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d012      	beq.n	8002924 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	2204      	movs	r2, #4
 8002912:	409a      	lsls	r2, r3
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	f043 0204 	orr.w	r2, r3, #4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	2210      	movs	r2, #16
 800292a:	409a      	lsls	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d043      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d03c      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	2210      	movs	r2, #16
 8002948:	409a      	lsls	r2, r3
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d018      	beq.n	800298e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d024      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
 800297a:	e01f      	b.n	80029bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01b      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
 800298c:	e016      	b.n	80029bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d107      	bne.n	80029ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0208 	bic.w	r2, r2, #8
 80029aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	2220      	movs	r2, #32
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 808e 	beq.w	8002aea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8086 	beq.w	8002aea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2220      	movs	r2, #32
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d136      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0216 	bic.w	r2, r2, #22
 8002a04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_DMA_IRQHandler+0x1da>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0208 	bic.w	r2, r2, #8
 8002a34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	223f      	movs	r2, #63	; 0x3f
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d07d      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
        }
        return;
 8002a62:	e078      	b.n	8002b56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d108      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d030      	beq.n	8002aea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e02b      	b.n	8002aea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
 8002aa2:	e022      	b.n	8002aea <HAL_DMA_IRQHandler+0x29e>
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0210 	bic.w	r2, r2, #16
 8002ac8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d032      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d022      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2205      	movs	r2, #5
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d307      	bcc.n	8002b32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f2      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x2ca>
 8002b30:	e000      	b.n	8002b34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b32:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
 8002b54:	e000      	b.n	8002b58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b56:	bf00      	nop
    }
  }
}
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop

08002b60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d108      	bne.n	8002ba0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b9e:	e007      	b.n	8002bb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	60da      	str	r2, [r3, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3b10      	subs	r3, #16
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <DMA_CalcBaseAndBitshift+0x64>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bd6:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <DMA_CalcBaseAndBitshift+0x68>)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d909      	bls.n	8002bfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	1d1a      	adds	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	659a      	str	r2, [r3, #88]	; 0x58
 8002bfc:	e007      	b.n	8002c0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	aaaaaaab 	.word	0xaaaaaaab
 8002c24:	080082c8 	.word	0x080082c8

08002c28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11f      	bne.n	8002c82 <DMA_CheckFifoParam+0x5a>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d856      	bhi.n	8002cf6 <DMA_CheckFifoParam+0xce>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <DMA_CheckFifoParam+0x28>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c73 	.word	0x08002c73
 8002c58:	08002c61 	.word	0x08002c61
 8002c5c:	08002cf7 	.word	0x08002cf7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d046      	beq.n	8002cfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c70:	e043      	b.n	8002cfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c7a:	d140      	bne.n	8002cfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c80:	e03d      	b.n	8002cfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8a:	d121      	bne.n	8002cd0 <DMA_CheckFifoParam+0xa8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d837      	bhi.n	8002d02 <DMA_CheckFifoParam+0xda>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <DMA_CheckFifoParam+0x70>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002caf 	.word	0x08002caf
 8002ca0:	08002ca9 	.word	0x08002ca9
 8002ca4:	08002cc1 	.word	0x08002cc1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e030      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d025      	beq.n	8002d06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbe:	e022      	b.n	8002d06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc8:	d11f      	bne.n	8002d0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cce:	e01c      	b.n	8002d0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d903      	bls.n	8002cde <DMA_CheckFifoParam+0xb6>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d003      	beq.n	8002ce4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cdc:	e018      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce2:	e015      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00e      	beq.n	8002d0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e00b      	b.n	8002d0e <DMA_CheckFifoParam+0xe6>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e00a      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e008      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e006      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002d02:	bf00      	nop
 8002d04:	e004      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	e159      	b.n	8002ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	f040 8148 	bne.w	8002fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d005      	beq.n	8002d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d130      	bne.n	8002dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da8:	2201      	movs	r2, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 0201 	and.w	r2, r3, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d017      	beq.n	8002e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d123      	bne.n	8002e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	08da      	lsrs	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3208      	adds	r2, #8
 8002e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	220f      	movs	r2, #15
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	08da      	lsrs	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	69b9      	ldr	r1, [r7, #24]
 8002e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0203 	and.w	r2, r3, #3
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80a2 	beq.w	8002fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	4b57      	ldr	r3, [pc, #348]	; (8003008 <HAL_GPIO_Init+0x2e8>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a56      	ldr	r2, [pc, #344]	; (8003008 <HAL_GPIO_Init+0x2e8>)
 8002eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b54      	ldr	r3, [pc, #336]	; (8003008 <HAL_GPIO_Init+0x2e8>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec2:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_GPIO_Init+0x2ec>)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	220f      	movs	r2, #15
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a49      	ldr	r2, [pc, #292]	; (8003010 <HAL_GPIO_Init+0x2f0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d019      	beq.n	8002f22 <HAL_GPIO_Init+0x202>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a48      	ldr	r2, [pc, #288]	; (8003014 <HAL_GPIO_Init+0x2f4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0x1fe>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a47      	ldr	r2, [pc, #284]	; (8003018 <HAL_GPIO_Init+0x2f8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <HAL_GPIO_Init+0x1fa>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a46      	ldr	r2, [pc, #280]	; (800301c <HAL_GPIO_Init+0x2fc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <HAL_GPIO_Init+0x1f6>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a45      	ldr	r2, [pc, #276]	; (8003020 <HAL_GPIO_Init+0x300>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_GPIO_Init+0x1f2>
 8002f0e:	2304      	movs	r3, #4
 8002f10:	e008      	b.n	8002f24 <HAL_GPIO_Init+0x204>
 8002f12:	2307      	movs	r3, #7
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x204>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e004      	b.n	8002f24 <HAL_GPIO_Init+0x204>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_Init+0x204>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x204>
 8002f22:	2300      	movs	r3, #0
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f002 0203 	and.w	r2, r2, #3
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f34:	4935      	ldr	r1, [pc, #212]	; (800300c <HAL_GPIO_Init+0x2ec>)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <HAL_GPIO_Init+0x304>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f66:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <HAL_GPIO_Init+0x304>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_GPIO_Init+0x304>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f90:	4a24      	ldr	r2, [pc, #144]	; (8003024 <HAL_GPIO_Init+0x304>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f96:	4b23      	ldr	r3, [pc, #140]	; (8003024 <HAL_GPIO_Init+0x304>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fba:	4a1a      	ldr	r2, [pc, #104]	; (8003024 <HAL_GPIO_Init+0x304>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc0:	4b18      	ldr	r3, [pc, #96]	; (8003024 <HAL_GPIO_Init+0x304>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe4:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <HAL_GPIO_Init+0x304>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	f67f aea2 	bls.w	8002d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	40013800 	.word	0x40013800
 8003010:	40020000 	.word	0x40020000
 8003014:	40020400 	.word	0x40020400
 8003018:	40020800 	.word	0x40020800
 800301c:	40020c00 	.word	0x40020c00
 8003020:	40021000 	.word	0x40021000
 8003024:	40013c00 	.word	0x40013c00

08003028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
 8003034:	4613      	mov	r3, r2
 8003036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003038:	787b      	ldrb	r3, [r7, #1]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003044:	e003      	b.n	800304e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	041a      	lsls	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	619a      	str	r2, [r3, #24]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e264      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d075      	beq.n	8003166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307a:	4ba3      	ldr	r3, [pc, #652]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b04      	cmp	r3, #4
 8003084:	d00c      	beq.n	80030a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4ba0      	ldr	r3, [pc, #640]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308e:	2b08      	cmp	r3, #8
 8003090:	d112      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4b9d      	ldr	r3, [pc, #628]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309e:	d10b      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	4b99      	ldr	r3, [pc, #612]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d05b      	beq.n	8003164 <HAL_RCC_OscConfig+0x108>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d157      	bne.n	8003164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e23f      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d106      	bne.n	80030d0 <HAL_RCC_OscConfig+0x74>
 80030c2:	4b91      	ldr	r3, [pc, #580]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a90      	ldr	r2, [pc, #576]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e01d      	b.n	800310c <HAL_RCC_OscConfig+0xb0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x98>
 80030da:	4b8b      	ldr	r3, [pc, #556]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a8a      	ldr	r2, [pc, #552]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b88      	ldr	r3, [pc, #544]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a87      	ldr	r2, [pc, #540]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0xb0>
 80030f4:	4b84      	ldr	r3, [pc, #528]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a83      	ldr	r2, [pc, #524]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b81      	ldr	r3, [pc, #516]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a80      	ldr	r2, [pc, #512]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe fc44 	bl	80019a0 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe fc40 	bl	80019a0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e204      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b76      	ldr	r3, [pc, #472]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0xc0>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fc30 	bl	80019a0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fc2c 	bl	80019a0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1f0      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0xe8>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d063      	beq.n	800323a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003172:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b62      	ldr	r3, [pc, #392]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003186:	2b08      	cmp	r3, #8
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	4b5c      	ldr	r3, [pc, #368]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x152>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1c4      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b56      	ldr	r3, [pc, #344]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4952      	ldr	r1, [pc, #328]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	e03a      	b.n	800323a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031cc:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_RCC_OscConfig+0x2b0>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fe fbe5 	bl	80019a0 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031da:	f7fe fbe1 	bl	80019a0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1a5      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	4b46      	ldr	r3, [pc, #280]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4940      	ldr	r1, [pc, #256]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320e:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCC_OscConfig+0x2b0>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fbc4 	bl	80019a0 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fbc0 	bl	80019a0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e184      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	4b36      	ldr	r3, [pc, #216]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d030      	beq.n	80032a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324e:	4b30      	ldr	r3, [pc, #192]	; (8003310 <HAL_RCC_OscConfig+0x2b4>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fe fba4 	bl	80019a0 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe fba0 	bl	80019a0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e164      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x200>
 800327a:	e015      	b.n	80032a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x2b4>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fe fb8d 	bl	80019a0 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe fb89 	bl	80019a0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e14d      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80a0 	beq.w	80033f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_OscConfig+0x2b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d121      	bne.n	8003336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_RCC_OscConfig+0x2b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a07      	ldr	r2, [pc, #28]	; (8003314 <HAL_RCC_OscConfig+0x2b8>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fe:	f7fe fb4f 	bl	80019a0 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	e011      	b.n	800332a <HAL_RCC_OscConfig+0x2ce>
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	42470000 	.word	0x42470000
 8003310:	42470e80 	.word	0x42470e80
 8003314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003318:	f7fe fb42 	bl	80019a0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e106      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b85      	ldr	r3, [pc, #532]	; (8003540 <HAL_RCC_OscConfig+0x4e4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d106      	bne.n	800334c <HAL_RCC_OscConfig+0x2f0>
 800333e:	4b81      	ldr	r3, [pc, #516]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a80      	ldr	r2, [pc, #512]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	e01c      	b.n	8003386 <HAL_RCC_OscConfig+0x32a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b05      	cmp	r3, #5
 8003352:	d10c      	bne.n	800336e <HAL_RCC_OscConfig+0x312>
 8003354:	4b7b      	ldr	r3, [pc, #492]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4a7a      	ldr	r2, [pc, #488]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	6713      	str	r3, [r2, #112]	; 0x70
 8003360:	4b78      	ldr	r3, [pc, #480]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a77      	ldr	r2, [pc, #476]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	e00b      	b.n	8003386 <HAL_RCC_OscConfig+0x32a>
 800336e:	4b75      	ldr	r3, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a74      	ldr	r2, [pc, #464]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
 800337a:	4b72      	ldr	r3, [pc, #456]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a71      	ldr	r2, [pc, #452]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d015      	beq.n	80033ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fe fb07 	bl	80019a0 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003394:	e00a      	b.n	80033ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fe fb03 	bl	80019a0 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e0c5      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ac:	4b65      	ldr	r3, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ee      	beq.n	8003396 <HAL_RCC_OscConfig+0x33a>
 80033b8:	e014      	b.n	80033e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ba:	f7fe faf1 	bl	80019a0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe faed 	bl	80019a0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0af      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d8:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ee      	bne.n	80033c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ea:	4b56      	ldr	r3, [pc, #344]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a55      	ldr	r2, [pc, #340]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 80033f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 809b 	beq.w	8003536 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b08      	cmp	r3, #8
 800340a:	d05c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d141      	bne.n	8003498 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_RCC_OscConfig+0x4ec>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341a:	f7fe fac1 	bl	80019a0 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003422:	f7fe fabd 	bl	80019a0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e081      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003434:	4b43      	ldr	r3, [pc, #268]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f0      	bne.n	8003422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	019b      	lsls	r3, r3, #6
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	3b01      	subs	r3, #1
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	4937      	ldr	r1, [pc, #220]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x4ec>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fa96 	bl	80019a0 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe fa92 	bl	80019a0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e056      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x41c>
 8003496:	e04e      	b.n	8003536 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x4ec>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fa7f 	bl	80019a0 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe fa7b 	bl	80019a0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e03f      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b8:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x44a>
 80034c4:	e037      	b.n	8003536 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e032      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_RCC_OscConfig+0x4e8>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d028      	beq.n	8003532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d121      	bne.n	8003532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d11a      	bne.n	8003532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003502:	4013      	ands	r3, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003508:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800350a:	4293      	cmp	r3, r2
 800350c:	d111      	bne.n	8003532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	3b01      	subs	r3, #1
 800351c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d107      	bne.n	8003532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40007000 	.word	0x40007000
 8003544:	40023800 	.word	0x40023800
 8003548:	42470060 	.word	0x42470060

0800354c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0cc      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b68      	ldr	r3, [pc, #416]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d90c      	bls.n	8003588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b65      	ldr	r3, [pc, #404]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b63      	ldr	r3, [pc, #396]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b8      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b59      	ldr	r3, [pc, #356]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a58      	ldr	r2, [pc, #352]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a52      	ldr	r2, [pc, #328]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b50      	ldr	r3, [pc, #320]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494d      	ldr	r1, [pc, #308]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d044      	beq.n	800366c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d119      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d003      	beq.n	800360a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	2b03      	cmp	r3, #3
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	4b3f      	ldr	r3, [pc, #252]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e067      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362a:	4b37      	ldr	r3, [pc, #220]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4934      	ldr	r1, [pc, #208]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800363c:	f7fe f9b0 	bl	80019a0 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	e00a      	b.n	800365a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fe f9ac 	bl	80019a0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 020c 	and.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	429a      	cmp	r2, r3
 800366a:	d1eb      	bne.n	8003644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d20c      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b22      	ldr	r3, [pc, #136]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4916      	ldr	r1, [pc, #88]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490e      	ldr	r1, [pc, #56]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 f821 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	490a      	ldr	r1, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	5ccb      	ldrb	r3, [r1, r3]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe f910 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023c00 	.word	0x40023c00
 8003708:	40023800 	.word	0x40023800
 800370c:	080082b0 	.word	0x080082b0
 8003710:	20000000 	.word	0x20000000
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	2300      	movs	r3, #0
 800372a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003730:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d00d      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x40>
 800373c:	2b08      	cmp	r3, #8
 800373e:	f200 80bd 	bhi.w	80038bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x34>
 8003746:	2b04      	cmp	r3, #4
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x3a>
 800374a:	e0b7      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b61      	ldr	r3, [pc, #388]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800374e:	60bb      	str	r3, [r7, #8]
       break;
 8003750:	e0b7      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003752:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003754:	60bb      	str	r3, [r7, #8]
      break;
 8003756:	e0b4      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003758:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003760:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003762:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04d      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376e:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	461a      	mov	r2, r3
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	ea02 0800 	and.w	r8, r2, r0
 8003786:	ea03 0901 	and.w	r9, r3, r1
 800378a:	4640      	mov	r0, r8
 800378c:	4649      	mov	r1, r9
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	014b      	lsls	r3, r1, #5
 8003798:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800379c:	0142      	lsls	r2, r0, #5
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	ebb0 0008 	subs.w	r0, r0, r8
 80037a6:	eb61 0109 	sbc.w	r1, r1, r9
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037b8:	0182      	lsls	r2, r0, #6
 80037ba:	1a12      	subs	r2, r2, r0
 80037bc:	eb63 0301 	sbc.w	r3, r3, r1
 80037c0:	f04f 0000 	mov.w	r0, #0
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	00d9      	lsls	r1, r3, #3
 80037ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ce:	00d0      	lsls	r0, r2, #3
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	eb12 0208 	adds.w	r2, r2, r8
 80037d8:	eb43 0309 	adc.w	r3, r3, r9
 80037dc:	f04f 0000 	mov.w	r0, #0
 80037e0:	f04f 0100 	mov.w	r1, #0
 80037e4:	0259      	lsls	r1, r3, #9
 80037e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037ea:	0250      	lsls	r0, r2, #9
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	f7fd f9dc 	bl	8000bb8 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4613      	mov	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e04a      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380a:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	461a      	mov	r2, r3
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f240 10ff 	movw	r0, #511	; 0x1ff
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	ea02 0400 	and.w	r4, r2, r0
 8003822:	ea03 0501 	and.w	r5, r3, r1
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	014b      	lsls	r3, r1, #5
 8003834:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003838:	0142      	lsls	r2, r0, #5
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	1b00      	subs	r0, r0, r4
 8003840:	eb61 0105 	sbc.w	r1, r1, r5
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	018b      	lsls	r3, r1, #6
 800384e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003852:	0182      	lsls	r2, r0, #6
 8003854:	1a12      	subs	r2, r2, r0
 8003856:	eb63 0301 	sbc.w	r3, r3, r1
 800385a:	f04f 0000 	mov.w	r0, #0
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	00d9      	lsls	r1, r3, #3
 8003864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003868:	00d0      	lsls	r0, r2, #3
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	1912      	adds	r2, r2, r4
 8003870:	eb45 0303 	adc.w	r3, r5, r3
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	0299      	lsls	r1, r3, #10
 800387e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003882:	0290      	lsls	r0, r2, #10
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	f7fd f990 	bl	8000bb8 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	60bb      	str	r3, [r7, #8]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038be:	60bb      	str	r3, [r7, #8]
      break;
 80038c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c2:	68bb      	ldr	r3, [r7, #8]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	007a1200 	.word	0x007a1200

080038dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038f8:	f7ff fff0 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0a9b      	lsrs	r3, r3, #10
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4903      	ldr	r1, [pc, #12]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	080082c0 	.word	0x080082c0

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003920:	f7ff ffdc 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0b5b      	lsrs	r3, r3, #13
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	080082c0 	.word	0x080082c0

08003944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e041      	b.n	80039da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fe08 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f000 f950 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e03c      	b.n	8003a76 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1e      	ldr	r2, [pc, #120]	; (8003a84 <HAL_TIM_Base_Start+0xa0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <HAL_TIM_Base_Start+0x5c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d013      	beq.n	8003a40 <HAL_TIM_Base_Start+0x5c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1a      	ldr	r2, [pc, #104]	; (8003a88 <HAL_TIM_Base_Start+0xa4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_TIM_Base_Start+0x5c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_TIM_Base_Start+0xa8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_TIM_Base_Start+0x5c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <HAL_TIM_Base_Start+0xac>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIM_Base_Start+0x5c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_TIM_Base_Start+0xb0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d111      	bne.n	8003a64 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d010      	beq.n	8003a74 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	e007      	b.n	8003a74 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40014000 	.word	0x40014000

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0b4      	b.n	8003c1e <HAL_TIM_ConfigClockSource+0x186>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d03e      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0xd4>
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	f200 8087 	bhi.w	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	f000 8086 	beq.w	8003c0a <HAL_TIM_ConfigClockSource+0x172>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	d87f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d01a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xa6>
 8003b08:	2b70      	cmp	r3, #112	; 0x70
 8003b0a:	d87b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b60      	cmp	r3, #96	; 0x60
 8003b0e:	d050      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b10:	2b60      	cmp	r3, #96	; 0x60
 8003b12:	d877      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b50      	cmp	r3, #80	; 0x50
 8003b16:	d03c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xfa>
 8003b18:	2b50      	cmp	r3, #80	; 0x50
 8003b1a:	d873      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d058      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d86f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b30      	cmp	r3, #48	; 0x30
 8003b26:	d064      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d86b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d060      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d867      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05c      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d05a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	e062      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6899      	ldr	r1, [r3, #8]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f000 f965 	bl	8003e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
      break;
 8003b6a:	e04f      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f000 f94e 	bl	8003e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b8e:	609a      	str	r2, [r3, #8]
      break;
 8003b90:	e03c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 f8c2 	bl	8003d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2150      	movs	r1, #80	; 0x50
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f91b 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e02c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 f8e1 	bl	8003d86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2160      	movs	r1, #96	; 0x60
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f90b 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e01c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 f8a2 	bl	8003d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f8fb 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e00c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f000 f8f2 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a34      	ldr	r2, [pc, #208]	; (8003d0c <TIM_Base_SetConfig+0xe4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00f      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c46:	d00b      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a31      	ldr	r2, [pc, #196]	; (8003d10 <TIM_Base_SetConfig+0xe8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a30      	ldr	r2, [pc, #192]	; (8003d14 <TIM_Base_SetConfig+0xec>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a2f      	ldr	r2, [pc, #188]	; (8003d18 <TIM_Base_SetConfig+0xf0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a25      	ldr	r2, [pc, #148]	; (8003d0c <TIM_Base_SetConfig+0xe4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d017      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <TIM_Base_SetConfig+0xe8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <TIM_Base_SetConfig+0xec>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00f      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <TIM_Base_SetConfig+0xf0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <TIM_Base_SetConfig+0xf4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <TIM_Base_SetConfig+0xf8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <TIM_Base_SetConfig+0xfc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <TIM_Base_SetConfig+0xe4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d103      	bne.n	8003cf8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	615a      	str	r2, [r3, #20]
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40014400 	.word	0x40014400
 8003d24:	40014800 	.word	0x40014800

08003d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f023 0201 	bic.w	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 030a 	bic.w	r3, r3, #10
 8003d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b087      	sub	sp, #28
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f023 0210 	bic.w	r2, r3, #16
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	031b      	lsls	r3, r3, #12
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f043 0307 	orr.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	021a      	lsls	r2, r3, #8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e050      	b.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d018      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d013      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10c      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40014000 	.word	0x40014000

08003f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e03f      	b.n	8003fca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fd fb30 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2224      	movs	r2, #36	; 0x24
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f929 	bl	80041d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b08a      	sub	sp, #40	; 0x28
 8003fd6:	af02      	add	r7, sp, #8
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d17c      	bne.n	80040ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_UART_Transmit+0x2c>
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e075      	b.n	80040ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_UART_Transmit+0x3e>
 800400c:	2302      	movs	r3, #2
 800400e:	e06e      	b.n	80040ee <HAL_UART_Transmit+0x11c>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2221      	movs	r2, #33	; 0x21
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004026:	f7fd fcbb 	bl	80019a0 <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d108      	bne.n	8004054 <HAL_UART_Transmit+0x82>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e003      	b.n	800405c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004064:	e02a      	b.n	80040bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	2180      	movs	r1, #128	; 0x80
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f840 	bl	80040f6 <UART_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e036      	b.n	80040ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	3302      	adds	r3, #2
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e007      	b.n	80040ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	3301      	adds	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1cf      	bne.n	8004066 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2140      	movs	r1, #64	; 0x40
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f810 	bl	80040f6 <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e006      	b.n	80040ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e000      	b.n	80040ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b090      	sub	sp, #64	; 0x40
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004106:	e050      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d04c      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x30>
 8004116:	f7fd fc43 	bl	80019a0 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004122:	429a      	cmp	r2, r3
 8004124:	d241      	bcs.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800413c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004146:	637a      	str	r2, [r7, #52]	; 0x34
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	613b      	str	r3, [r7, #16]
   return(result);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	63bb      	str	r3, [r7, #56]	; 0x38
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800417a:	623a      	str	r2, [r7, #32]
 800417c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	69f9      	ldr	r1, [r7, #28]
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	61bb      	str	r3, [r7, #24]
   return(result);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e5      	bne.n	800415a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e00f      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d09f      	beq.n	8004108 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3740      	adds	r7, #64	; 0x40
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d8:	b09f      	sub	sp, #124	; 0x7c
 80041da:	af00      	add	r7, sp, #0
 80041dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ea:	68d9      	ldr	r1, [r3, #12]
 80041ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	ea40 0301 	orr.w	r3, r0, r1
 80041f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	431a      	orrs	r2, r3
 8004200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	431a      	orrs	r2, r3
 8004206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4313      	orrs	r3, r2
 800420c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800420e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004218:	f021 010c 	bic.w	r1, r1, #12
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004222:	430b      	orrs	r3, r1
 8004224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004232:	6999      	ldr	r1, [r3, #24]
 8004234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	ea40 0301 	orr.w	r3, r0, r1
 800423c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800423e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4bc5      	ldr	r3, [pc, #788]	; (8004558 <UART_SetConfig+0x384>)
 8004244:	429a      	cmp	r2, r3
 8004246:	d004      	beq.n	8004252 <UART_SetConfig+0x7e>
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4bc3      	ldr	r3, [pc, #780]	; (800455c <UART_SetConfig+0x388>)
 800424e:	429a      	cmp	r2, r3
 8004250:	d103      	bne.n	800425a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004252:	f7ff fb63 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8004256:	6778      	str	r0, [r7, #116]	; 0x74
 8004258:	e002      	b.n	8004260 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800425a:	f7ff fb4b 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800425e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	f040 80b6 	bne.w	80043d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800426c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426e:	461c      	mov	r4, r3
 8004270:	f04f 0500 	mov.w	r5, #0
 8004274:	4622      	mov	r2, r4
 8004276:	462b      	mov	r3, r5
 8004278:	1891      	adds	r1, r2, r2
 800427a:	6439      	str	r1, [r7, #64]	; 0x40
 800427c:	415b      	adcs	r3, r3
 800427e:	647b      	str	r3, [r7, #68]	; 0x44
 8004280:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004284:	1912      	adds	r2, r2, r4
 8004286:	eb45 0303 	adc.w	r3, r5, r3
 800428a:	f04f 0000 	mov.w	r0, #0
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	00d9      	lsls	r1, r3, #3
 8004294:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004298:	00d0      	lsls	r0, r2, #3
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	1911      	adds	r1, r2, r4
 80042a0:	6639      	str	r1, [r7, #96]	; 0x60
 80042a2:	416b      	adcs	r3, r5
 80042a4:	667b      	str	r3, [r7, #100]	; 0x64
 80042a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042b4:	415b      	adcs	r3, r3
 80042b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042c0:	f7fc fc7a 	bl	8000bb8 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4ba5      	ldr	r3, [pc, #660]	; (8004560 <UART_SetConfig+0x38c>)
 80042ca:	fba3 2302 	umull	r2, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	011e      	lsls	r6, r3, #4
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	461c      	mov	r4, r3
 80042d6:	f04f 0500 	mov.w	r5, #0
 80042da:	4622      	mov	r2, r4
 80042dc:	462b      	mov	r3, r5
 80042de:	1891      	adds	r1, r2, r2
 80042e0:	6339      	str	r1, [r7, #48]	; 0x30
 80042e2:	415b      	adcs	r3, r3
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
 80042e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042ea:	1912      	adds	r2, r2, r4
 80042ec:	eb45 0303 	adc.w	r3, r5, r3
 80042f0:	f04f 0000 	mov.w	r0, #0
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	00d9      	lsls	r1, r3, #3
 80042fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042fe:	00d0      	lsls	r0, r2, #3
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	1911      	adds	r1, r2, r4
 8004306:	65b9      	str	r1, [r7, #88]	; 0x58
 8004308:	416b      	adcs	r3, r5
 800430a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	461a      	mov	r2, r3
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	1891      	adds	r1, r2, r2
 8004318:	62b9      	str	r1, [r7, #40]	; 0x28
 800431a:	415b      	adcs	r3, r3
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004322:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004326:	f7fc fc47 	bl	8000bb8 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4b8c      	ldr	r3, [pc, #560]	; (8004560 <UART_SetConfig+0x38c>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a87      	ldr	r2, [pc, #540]	; (8004560 <UART_SetConfig+0x38c>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004350:	441e      	add	r6, r3
 8004352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004354:	4618      	mov	r0, r3
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	1894      	adds	r4, r2, r2
 8004360:	623c      	str	r4, [r7, #32]
 8004362:	415b      	adcs	r3, r3
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800436a:	1812      	adds	r2, r2, r0
 800436c:	eb41 0303 	adc.w	r3, r1, r3
 8004370:	f04f 0400 	mov.w	r4, #0
 8004374:	f04f 0500 	mov.w	r5, #0
 8004378:	00dd      	lsls	r5, r3, #3
 800437a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800437e:	00d4      	lsls	r4, r2, #3
 8004380:	4622      	mov	r2, r4
 8004382:	462b      	mov	r3, r5
 8004384:	1814      	adds	r4, r2, r0
 8004386:	653c      	str	r4, [r7, #80]	; 0x50
 8004388:	414b      	adcs	r3, r1
 800438a:	657b      	str	r3, [r7, #84]	; 0x54
 800438c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	461a      	mov	r2, r3
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	1891      	adds	r1, r2, r2
 8004398:	61b9      	str	r1, [r7, #24]
 800439a:	415b      	adcs	r3, r3
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80043a6:	f7fc fc07 	bl	8000bb8 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <UART_SetConfig+0x38c>)
 80043b0:	fba3 1302 	umull	r1, r3, r3, r2
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	2164      	movs	r1, #100	; 0x64
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	3332      	adds	r3, #50	; 0x32
 80043c2:	4a67      	ldr	r2, [pc, #412]	; (8004560 <UART_SetConfig+0x38c>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	f003 0207 	and.w	r2, r3, #7
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4432      	add	r2, r6
 80043d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043d6:	e0b9      	b.n	800454c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043da:	461c      	mov	r4, r3
 80043dc:	f04f 0500 	mov.w	r5, #0
 80043e0:	4622      	mov	r2, r4
 80043e2:	462b      	mov	r3, r5
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	6139      	str	r1, [r7, #16]
 80043e8:	415b      	adcs	r3, r3
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043f0:	1912      	adds	r2, r2, r4
 80043f2:	eb45 0303 	adc.w	r3, r5, r3
 80043f6:	f04f 0000 	mov.w	r0, #0
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	00d9      	lsls	r1, r3, #3
 8004400:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004404:	00d0      	lsls	r0, r2, #3
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	eb12 0804 	adds.w	r8, r2, r4
 800440e:	eb43 0905 	adc.w	r9, r3, r5
 8004412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	008b      	lsls	r3, r1, #2
 8004426:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800442a:	0082      	lsls	r2, r0, #2
 800442c:	4640      	mov	r0, r8
 800442e:	4649      	mov	r1, r9
 8004430:	f7fc fbc2 	bl	8000bb8 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4b49      	ldr	r3, [pc, #292]	; (8004560 <UART_SetConfig+0x38c>)
 800443a:	fba3 2302 	umull	r2, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	011e      	lsls	r6, r3, #4
 8004442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004444:	4618      	mov	r0, r3
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	1894      	adds	r4, r2, r2
 8004450:	60bc      	str	r4, [r7, #8]
 8004452:	415b      	adcs	r3, r3
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800445a:	1812      	adds	r2, r2, r0
 800445c:	eb41 0303 	adc.w	r3, r1, r3
 8004460:	f04f 0400 	mov.w	r4, #0
 8004464:	f04f 0500 	mov.w	r5, #0
 8004468:	00dd      	lsls	r5, r3, #3
 800446a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800446e:	00d4      	lsls	r4, r2, #3
 8004470:	4622      	mov	r2, r4
 8004472:	462b      	mov	r3, r5
 8004474:	1814      	adds	r4, r2, r0
 8004476:	64bc      	str	r4, [r7, #72]	; 0x48
 8004478:	414b      	adcs	r3, r1
 800447a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800447c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	008b      	lsls	r3, r1, #2
 8004490:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004494:	0082      	lsls	r2, r0, #2
 8004496:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800449a:	f7fc fb8d 	bl	8000bb8 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <UART_SetConfig+0x38c>)
 80044a4:	fba3 1302 	umull	r1, r3, r3, r2
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	2164      	movs	r1, #100	; 0x64
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	3332      	adds	r3, #50	; 0x32
 80044b6:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <UART_SetConfig+0x38c>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c2:	441e      	add	r6, r3
 80044c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c6:	4618      	mov	r0, r3
 80044c8:	f04f 0100 	mov.w	r1, #0
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	1894      	adds	r4, r2, r2
 80044d2:	603c      	str	r4, [r7, #0]
 80044d4:	415b      	adcs	r3, r3
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044dc:	1812      	adds	r2, r2, r0
 80044de:	eb41 0303 	adc.w	r3, r1, r3
 80044e2:	f04f 0400 	mov.w	r4, #0
 80044e6:	f04f 0500 	mov.w	r5, #0
 80044ea:	00dd      	lsls	r5, r3, #3
 80044ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044f0:	00d4      	lsls	r4, r2, #3
 80044f2:	4622      	mov	r2, r4
 80044f4:	462b      	mov	r3, r5
 80044f6:	eb12 0a00 	adds.w	sl, r2, r0
 80044fa:	eb43 0b01 	adc.w	fp, r3, r1
 80044fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	008b      	lsls	r3, r1, #2
 8004512:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004516:	0082      	lsls	r2, r0, #2
 8004518:	4650      	mov	r0, sl
 800451a:	4659      	mov	r1, fp
 800451c:	f7fc fb4c 	bl	8000bb8 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <UART_SetConfig+0x38c>)
 8004526:	fba3 1302 	umull	r1, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2164      	movs	r1, #100	; 0x64
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <UART_SetConfig+0x38c>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 020f 	and.w	r2, r3, #15
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4432      	add	r2, r6
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	377c      	adds	r7, #124	; 0x7c
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	40011000 	.word	0x40011000
 800455c:	40011400 	.word	0x40011400
 8004560:	51eb851f 	.word	0x51eb851f

08004564 <__errno>:
 8004564:	4b01      	ldr	r3, [pc, #4]	; (800456c <__errno+0x8>)
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	2000000c 	.word	0x2000000c

08004570 <__libc_init_array>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	4d0d      	ldr	r5, [pc, #52]	; (80045a8 <__libc_init_array+0x38>)
 8004574:	4c0d      	ldr	r4, [pc, #52]	; (80045ac <__libc_init_array+0x3c>)
 8004576:	1b64      	subs	r4, r4, r5
 8004578:	10a4      	asrs	r4, r4, #2
 800457a:	2600      	movs	r6, #0
 800457c:	42a6      	cmp	r6, r4
 800457e:	d109      	bne.n	8004594 <__libc_init_array+0x24>
 8004580:	4d0b      	ldr	r5, [pc, #44]	; (80045b0 <__libc_init_array+0x40>)
 8004582:	4c0c      	ldr	r4, [pc, #48]	; (80045b4 <__libc_init_array+0x44>)
 8004584:	f003 fe6a 	bl	800825c <_init>
 8004588:	1b64      	subs	r4, r4, r5
 800458a:	10a4      	asrs	r4, r4, #2
 800458c:	2600      	movs	r6, #0
 800458e:	42a6      	cmp	r6, r4
 8004590:	d105      	bne.n	800459e <__libc_init_array+0x2e>
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	f855 3b04 	ldr.w	r3, [r5], #4
 8004598:	4798      	blx	r3
 800459a:	3601      	adds	r6, #1
 800459c:	e7ee      	b.n	800457c <__libc_init_array+0xc>
 800459e:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a2:	4798      	blx	r3
 80045a4:	3601      	adds	r6, #1
 80045a6:	e7f2      	b.n	800458e <__libc_init_array+0x1e>
 80045a8:	08008700 	.word	0x08008700
 80045ac:	08008700 	.word	0x08008700
 80045b0:	08008700 	.word	0x08008700
 80045b4:	08008704 	.word	0x08008704

080045b8 <memset>:
 80045b8:	4402      	add	r2, r0
 80045ba:	4603      	mov	r3, r0
 80045bc:	4293      	cmp	r3, r2
 80045be:	d100      	bne.n	80045c2 <memset+0xa>
 80045c0:	4770      	bx	lr
 80045c2:	f803 1b01 	strb.w	r1, [r3], #1
 80045c6:	e7f9      	b.n	80045bc <memset+0x4>

080045c8 <__cvt>:
 80045c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	ec55 4b10 	vmov	r4, r5, d0
 80045d0:	2d00      	cmp	r5, #0
 80045d2:	460e      	mov	r6, r1
 80045d4:	4619      	mov	r1, r3
 80045d6:	462b      	mov	r3, r5
 80045d8:	bfbb      	ittet	lt
 80045da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045de:	461d      	movlt	r5, r3
 80045e0:	2300      	movge	r3, #0
 80045e2:	232d      	movlt	r3, #45	; 0x2d
 80045e4:	700b      	strb	r3, [r1, #0]
 80045e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045ec:	4691      	mov	r9, r2
 80045ee:	f023 0820 	bic.w	r8, r3, #32
 80045f2:	bfbc      	itt	lt
 80045f4:	4622      	movlt	r2, r4
 80045f6:	4614      	movlt	r4, r2
 80045f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045fc:	d005      	beq.n	800460a <__cvt+0x42>
 80045fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004602:	d100      	bne.n	8004606 <__cvt+0x3e>
 8004604:	3601      	adds	r6, #1
 8004606:	2102      	movs	r1, #2
 8004608:	e000      	b.n	800460c <__cvt+0x44>
 800460a:	2103      	movs	r1, #3
 800460c:	ab03      	add	r3, sp, #12
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	ab02      	add	r3, sp, #8
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	ec45 4b10 	vmov	d0, r4, r5
 8004618:	4653      	mov	r3, sl
 800461a:	4632      	mov	r2, r6
 800461c:	f000 fcec 	bl	8004ff8 <_dtoa_r>
 8004620:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004624:	4607      	mov	r7, r0
 8004626:	d102      	bne.n	800462e <__cvt+0x66>
 8004628:	f019 0f01 	tst.w	r9, #1
 800462c:	d022      	beq.n	8004674 <__cvt+0xac>
 800462e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004632:	eb07 0906 	add.w	r9, r7, r6
 8004636:	d110      	bne.n	800465a <__cvt+0x92>
 8004638:	783b      	ldrb	r3, [r7, #0]
 800463a:	2b30      	cmp	r3, #48	; 0x30
 800463c:	d10a      	bne.n	8004654 <__cvt+0x8c>
 800463e:	2200      	movs	r2, #0
 8004640:	2300      	movs	r3, #0
 8004642:	4620      	mov	r0, r4
 8004644:	4629      	mov	r1, r5
 8004646:	f7fc fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800464a:	b918      	cbnz	r0, 8004654 <__cvt+0x8c>
 800464c:	f1c6 0601 	rsb	r6, r6, #1
 8004650:	f8ca 6000 	str.w	r6, [sl]
 8004654:	f8da 3000 	ldr.w	r3, [sl]
 8004658:	4499      	add	r9, r3
 800465a:	2200      	movs	r2, #0
 800465c:	2300      	movs	r3, #0
 800465e:	4620      	mov	r0, r4
 8004660:	4629      	mov	r1, r5
 8004662:	f7fc fa39 	bl	8000ad8 <__aeabi_dcmpeq>
 8004666:	b108      	cbz	r0, 800466c <__cvt+0xa4>
 8004668:	f8cd 900c 	str.w	r9, [sp, #12]
 800466c:	2230      	movs	r2, #48	; 0x30
 800466e:	9b03      	ldr	r3, [sp, #12]
 8004670:	454b      	cmp	r3, r9
 8004672:	d307      	bcc.n	8004684 <__cvt+0xbc>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004678:	1bdb      	subs	r3, r3, r7
 800467a:	4638      	mov	r0, r7
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	b004      	add	sp, #16
 8004680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	9103      	str	r1, [sp, #12]
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e7f0      	b.n	800466e <__cvt+0xa6>

0800468c <__exponent>:
 800468c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800468e:	4603      	mov	r3, r0
 8004690:	2900      	cmp	r1, #0
 8004692:	bfb8      	it	lt
 8004694:	4249      	neglt	r1, r1
 8004696:	f803 2b02 	strb.w	r2, [r3], #2
 800469a:	bfb4      	ite	lt
 800469c:	222d      	movlt	r2, #45	; 0x2d
 800469e:	222b      	movge	r2, #43	; 0x2b
 80046a0:	2909      	cmp	r1, #9
 80046a2:	7042      	strb	r2, [r0, #1]
 80046a4:	dd2a      	ble.n	80046fc <__exponent+0x70>
 80046a6:	f10d 0407 	add.w	r4, sp, #7
 80046aa:	46a4      	mov	ip, r4
 80046ac:	270a      	movs	r7, #10
 80046ae:	46a6      	mov	lr, r4
 80046b0:	460a      	mov	r2, r1
 80046b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80046b6:	fb07 1516 	mls	r5, r7, r6, r1
 80046ba:	3530      	adds	r5, #48	; 0x30
 80046bc:	2a63      	cmp	r2, #99	; 0x63
 80046be:	f104 34ff 	add.w	r4, r4, #4294967295
 80046c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80046c6:	4631      	mov	r1, r6
 80046c8:	dcf1      	bgt.n	80046ae <__exponent+0x22>
 80046ca:	3130      	adds	r1, #48	; 0x30
 80046cc:	f1ae 0502 	sub.w	r5, lr, #2
 80046d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046d4:	1c44      	adds	r4, r0, #1
 80046d6:	4629      	mov	r1, r5
 80046d8:	4561      	cmp	r1, ip
 80046da:	d30a      	bcc.n	80046f2 <__exponent+0x66>
 80046dc:	f10d 0209 	add.w	r2, sp, #9
 80046e0:	eba2 020e 	sub.w	r2, r2, lr
 80046e4:	4565      	cmp	r5, ip
 80046e6:	bf88      	it	hi
 80046e8:	2200      	movhi	r2, #0
 80046ea:	4413      	add	r3, r2
 80046ec:	1a18      	subs	r0, r3, r0
 80046ee:	b003      	add	sp, #12
 80046f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046fa:	e7ed      	b.n	80046d8 <__exponent+0x4c>
 80046fc:	2330      	movs	r3, #48	; 0x30
 80046fe:	3130      	adds	r1, #48	; 0x30
 8004700:	7083      	strb	r3, [r0, #2]
 8004702:	70c1      	strb	r1, [r0, #3]
 8004704:	1d03      	adds	r3, r0, #4
 8004706:	e7f1      	b.n	80046ec <__exponent+0x60>

08004708 <_printf_float>:
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	ed2d 8b02 	vpush	{d8}
 8004710:	b08d      	sub	sp, #52	; 0x34
 8004712:	460c      	mov	r4, r1
 8004714:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004718:	4616      	mov	r6, r2
 800471a:	461f      	mov	r7, r3
 800471c:	4605      	mov	r5, r0
 800471e:	f001 fa57 	bl	8005bd0 <_localeconv_r>
 8004722:	f8d0 a000 	ldr.w	sl, [r0]
 8004726:	4650      	mov	r0, sl
 8004728:	f7fb fd5a 	bl	80001e0 <strlen>
 800472c:	2300      	movs	r3, #0
 800472e:	930a      	str	r3, [sp, #40]	; 0x28
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	f8d8 3000 	ldr.w	r3, [r8]
 8004738:	f894 b018 	ldrb.w	fp, [r4, #24]
 800473c:	3307      	adds	r3, #7
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	f103 0208 	add.w	r2, r3, #8
 8004746:	f8c8 2000 	str.w	r2, [r8]
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004752:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004756:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800475a:	9307      	str	r3, [sp, #28]
 800475c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004760:	ee08 0a10 	vmov	s16, r0
 8004764:	4b9f      	ldr	r3, [pc, #636]	; (80049e4 <_printf_float+0x2dc>)
 8004766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800476a:	f04f 32ff 	mov.w	r2, #4294967295
 800476e:	f7fc f9e5 	bl	8000b3c <__aeabi_dcmpun>
 8004772:	bb88      	cbnz	r0, 80047d8 <_printf_float+0xd0>
 8004774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004778:	4b9a      	ldr	r3, [pc, #616]	; (80049e4 <_printf_float+0x2dc>)
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	f7fc f9bf 	bl	8000b00 <__aeabi_dcmple>
 8004782:	bb48      	cbnz	r0, 80047d8 <_printf_float+0xd0>
 8004784:	2200      	movs	r2, #0
 8004786:	2300      	movs	r3, #0
 8004788:	4640      	mov	r0, r8
 800478a:	4649      	mov	r1, r9
 800478c:	f7fc f9ae 	bl	8000aec <__aeabi_dcmplt>
 8004790:	b110      	cbz	r0, 8004798 <_printf_float+0x90>
 8004792:	232d      	movs	r3, #45	; 0x2d
 8004794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004798:	4b93      	ldr	r3, [pc, #588]	; (80049e8 <_printf_float+0x2e0>)
 800479a:	4894      	ldr	r0, [pc, #592]	; (80049ec <_printf_float+0x2e4>)
 800479c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047a0:	bf94      	ite	ls
 80047a2:	4698      	movls	r8, r3
 80047a4:	4680      	movhi	r8, r0
 80047a6:	2303      	movs	r3, #3
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	9b05      	ldr	r3, [sp, #20]
 80047ac:	f023 0204 	bic.w	r2, r3, #4
 80047b0:	6022      	str	r2, [r4, #0]
 80047b2:	f04f 0900 	mov.w	r9, #0
 80047b6:	9700      	str	r7, [sp, #0]
 80047b8:	4633      	mov	r3, r6
 80047ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80047bc:	4621      	mov	r1, r4
 80047be:	4628      	mov	r0, r5
 80047c0:	f000 f9d8 	bl	8004b74 <_printf_common>
 80047c4:	3001      	adds	r0, #1
 80047c6:	f040 8090 	bne.w	80048ea <_printf_float+0x1e2>
 80047ca:	f04f 30ff 	mov.w	r0, #4294967295
 80047ce:	b00d      	add	sp, #52	; 0x34
 80047d0:	ecbd 8b02 	vpop	{d8}
 80047d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d8:	4642      	mov	r2, r8
 80047da:	464b      	mov	r3, r9
 80047dc:	4640      	mov	r0, r8
 80047de:	4649      	mov	r1, r9
 80047e0:	f7fc f9ac 	bl	8000b3c <__aeabi_dcmpun>
 80047e4:	b140      	cbz	r0, 80047f8 <_printf_float+0xf0>
 80047e6:	464b      	mov	r3, r9
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfbc      	itt	lt
 80047ec:	232d      	movlt	r3, #45	; 0x2d
 80047ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047f2:	487f      	ldr	r0, [pc, #508]	; (80049f0 <_printf_float+0x2e8>)
 80047f4:	4b7f      	ldr	r3, [pc, #508]	; (80049f4 <_printf_float+0x2ec>)
 80047f6:	e7d1      	b.n	800479c <_printf_float+0x94>
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047fe:	9206      	str	r2, [sp, #24]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	d13f      	bne.n	8004884 <_printf_float+0x17c>
 8004804:	2306      	movs	r3, #6
 8004806:	6063      	str	r3, [r4, #4]
 8004808:	9b05      	ldr	r3, [sp, #20]
 800480a:	6861      	ldr	r1, [r4, #4]
 800480c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004810:	2300      	movs	r3, #0
 8004812:	9303      	str	r3, [sp, #12]
 8004814:	ab0a      	add	r3, sp, #40	; 0x28
 8004816:	e9cd b301 	strd	fp, r3, [sp, #4]
 800481a:	ab09      	add	r3, sp, #36	; 0x24
 800481c:	ec49 8b10 	vmov	d0, r8, r9
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	6022      	str	r2, [r4, #0]
 8004824:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004828:	4628      	mov	r0, r5
 800482a:	f7ff fecd 	bl	80045c8 <__cvt>
 800482e:	9b06      	ldr	r3, [sp, #24]
 8004830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004832:	2b47      	cmp	r3, #71	; 0x47
 8004834:	4680      	mov	r8, r0
 8004836:	d108      	bne.n	800484a <_printf_float+0x142>
 8004838:	1cc8      	adds	r0, r1, #3
 800483a:	db02      	blt.n	8004842 <_printf_float+0x13a>
 800483c:	6863      	ldr	r3, [r4, #4]
 800483e:	4299      	cmp	r1, r3
 8004840:	dd41      	ble.n	80048c6 <_printf_float+0x1be>
 8004842:	f1ab 0b02 	sub.w	fp, fp, #2
 8004846:	fa5f fb8b 	uxtb.w	fp, fp
 800484a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800484e:	d820      	bhi.n	8004892 <_printf_float+0x18a>
 8004850:	3901      	subs	r1, #1
 8004852:	465a      	mov	r2, fp
 8004854:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004858:	9109      	str	r1, [sp, #36]	; 0x24
 800485a:	f7ff ff17 	bl	800468c <__exponent>
 800485e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004860:	1813      	adds	r3, r2, r0
 8004862:	2a01      	cmp	r2, #1
 8004864:	4681      	mov	r9, r0
 8004866:	6123      	str	r3, [r4, #16]
 8004868:	dc02      	bgt.n	8004870 <_printf_float+0x168>
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	07d2      	lsls	r2, r2, #31
 800486e:	d501      	bpl.n	8004874 <_printf_float+0x16c>
 8004870:	3301      	adds	r3, #1
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004878:	2b00      	cmp	r3, #0
 800487a:	d09c      	beq.n	80047b6 <_printf_float+0xae>
 800487c:	232d      	movs	r3, #45	; 0x2d
 800487e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004882:	e798      	b.n	80047b6 <_printf_float+0xae>
 8004884:	9a06      	ldr	r2, [sp, #24]
 8004886:	2a47      	cmp	r2, #71	; 0x47
 8004888:	d1be      	bne.n	8004808 <_printf_float+0x100>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1bc      	bne.n	8004808 <_printf_float+0x100>
 800488e:	2301      	movs	r3, #1
 8004890:	e7b9      	b.n	8004806 <_printf_float+0xfe>
 8004892:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004896:	d118      	bne.n	80048ca <_printf_float+0x1c2>
 8004898:	2900      	cmp	r1, #0
 800489a:	6863      	ldr	r3, [r4, #4]
 800489c:	dd0b      	ble.n	80048b6 <_printf_float+0x1ae>
 800489e:	6121      	str	r1, [r4, #16]
 80048a0:	b913      	cbnz	r3, 80048a8 <_printf_float+0x1a0>
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	07d0      	lsls	r0, r2, #31
 80048a6:	d502      	bpl.n	80048ae <_printf_float+0x1a6>
 80048a8:	3301      	adds	r3, #1
 80048aa:	440b      	add	r3, r1
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80048b0:	f04f 0900 	mov.w	r9, #0
 80048b4:	e7de      	b.n	8004874 <_printf_float+0x16c>
 80048b6:	b913      	cbnz	r3, 80048be <_printf_float+0x1b6>
 80048b8:	6822      	ldr	r2, [r4, #0]
 80048ba:	07d2      	lsls	r2, r2, #31
 80048bc:	d501      	bpl.n	80048c2 <_printf_float+0x1ba>
 80048be:	3302      	adds	r3, #2
 80048c0:	e7f4      	b.n	80048ac <_printf_float+0x1a4>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e7f2      	b.n	80048ac <_printf_float+0x1a4>
 80048c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048cc:	4299      	cmp	r1, r3
 80048ce:	db05      	blt.n	80048dc <_printf_float+0x1d4>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	6121      	str	r1, [r4, #16]
 80048d4:	07d8      	lsls	r0, r3, #31
 80048d6:	d5ea      	bpl.n	80048ae <_printf_float+0x1a6>
 80048d8:	1c4b      	adds	r3, r1, #1
 80048da:	e7e7      	b.n	80048ac <_printf_float+0x1a4>
 80048dc:	2900      	cmp	r1, #0
 80048de:	bfd4      	ite	le
 80048e0:	f1c1 0202 	rsble	r2, r1, #2
 80048e4:	2201      	movgt	r2, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	e7e0      	b.n	80048ac <_printf_float+0x1a4>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	055a      	lsls	r2, r3, #21
 80048ee:	d407      	bmi.n	8004900 <_printf_float+0x1f8>
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	4642      	mov	r2, r8
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	d12c      	bne.n	8004958 <_printf_float+0x250>
 80048fe:	e764      	b.n	80047ca <_printf_float+0xc2>
 8004900:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004904:	f240 80e0 	bls.w	8004ac8 <_printf_float+0x3c0>
 8004908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800490c:	2200      	movs	r2, #0
 800490e:	2300      	movs	r3, #0
 8004910:	f7fc f8e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004914:	2800      	cmp	r0, #0
 8004916:	d034      	beq.n	8004982 <_printf_float+0x27a>
 8004918:	4a37      	ldr	r2, [pc, #220]	; (80049f8 <_printf_float+0x2f0>)
 800491a:	2301      	movs	r3, #1
 800491c:	4631      	mov	r1, r6
 800491e:	4628      	mov	r0, r5
 8004920:	47b8      	blx	r7
 8004922:	3001      	adds	r0, #1
 8004924:	f43f af51 	beq.w	80047ca <_printf_float+0xc2>
 8004928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800492c:	429a      	cmp	r2, r3
 800492e:	db02      	blt.n	8004936 <_printf_float+0x22e>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	07d8      	lsls	r0, r3, #31
 8004934:	d510      	bpl.n	8004958 <_printf_float+0x250>
 8004936:	ee18 3a10 	vmov	r3, s16
 800493a:	4652      	mov	r2, sl
 800493c:	4631      	mov	r1, r6
 800493e:	4628      	mov	r0, r5
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	f43f af41 	beq.w	80047ca <_printf_float+0xc2>
 8004948:	f04f 0800 	mov.w	r8, #0
 800494c:	f104 091a 	add.w	r9, r4, #26
 8004950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004952:	3b01      	subs	r3, #1
 8004954:	4543      	cmp	r3, r8
 8004956:	dc09      	bgt.n	800496c <_printf_float+0x264>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	079b      	lsls	r3, r3, #30
 800495c:	f100 8105 	bmi.w	8004b6a <_printf_float+0x462>
 8004960:	68e0      	ldr	r0, [r4, #12]
 8004962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004964:	4298      	cmp	r0, r3
 8004966:	bfb8      	it	lt
 8004968:	4618      	movlt	r0, r3
 800496a:	e730      	b.n	80047ce <_printf_float+0xc6>
 800496c:	2301      	movs	r3, #1
 800496e:	464a      	mov	r2, r9
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f af27 	beq.w	80047ca <_printf_float+0xc2>
 800497c:	f108 0801 	add.w	r8, r8, #1
 8004980:	e7e6      	b.n	8004950 <_printf_float+0x248>
 8004982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	dc39      	bgt.n	80049fc <_printf_float+0x2f4>
 8004988:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <_printf_float+0x2f0>)
 800498a:	2301      	movs	r3, #1
 800498c:	4631      	mov	r1, r6
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	f43f af19 	beq.w	80047ca <_printf_float+0xc2>
 8004998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800499c:	4313      	orrs	r3, r2
 800499e:	d102      	bne.n	80049a6 <_printf_float+0x29e>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	07d9      	lsls	r1, r3, #31
 80049a4:	d5d8      	bpl.n	8004958 <_printf_float+0x250>
 80049a6:	ee18 3a10 	vmov	r3, s16
 80049aa:	4652      	mov	r2, sl
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f af09 	beq.w	80047ca <_printf_float+0xc2>
 80049b8:	f04f 0900 	mov.w	r9, #0
 80049bc:	f104 0a1a 	add.w	sl, r4, #26
 80049c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c2:	425b      	negs	r3, r3
 80049c4:	454b      	cmp	r3, r9
 80049c6:	dc01      	bgt.n	80049cc <_printf_float+0x2c4>
 80049c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ca:	e792      	b.n	80048f2 <_printf_float+0x1ea>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4652      	mov	r2, sl
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	f43f aef7 	beq.w	80047ca <_printf_float+0xc2>
 80049dc:	f109 0901 	add.w	r9, r9, #1
 80049e0:	e7ee      	b.n	80049c0 <_printf_float+0x2b8>
 80049e2:	bf00      	nop
 80049e4:	7fefffff 	.word	0x7fefffff
 80049e8:	080082d4 	.word	0x080082d4
 80049ec:	080082d8 	.word	0x080082d8
 80049f0:	080082e0 	.word	0x080082e0
 80049f4:	080082dc 	.word	0x080082dc
 80049f8:	080082e4 	.word	0x080082e4
 80049fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a00:	429a      	cmp	r2, r3
 8004a02:	bfa8      	it	ge
 8004a04:	461a      	movge	r2, r3
 8004a06:	2a00      	cmp	r2, #0
 8004a08:	4691      	mov	r9, r2
 8004a0a:	dc37      	bgt.n	8004a7c <_printf_float+0x374>
 8004a0c:	f04f 0b00 	mov.w	fp, #0
 8004a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a14:	f104 021a 	add.w	r2, r4, #26
 8004a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a1a:	9305      	str	r3, [sp, #20]
 8004a1c:	eba3 0309 	sub.w	r3, r3, r9
 8004a20:	455b      	cmp	r3, fp
 8004a22:	dc33      	bgt.n	8004a8c <_printf_float+0x384>
 8004a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	db3b      	blt.n	8004aa4 <_printf_float+0x39c>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	07da      	lsls	r2, r3, #31
 8004a30:	d438      	bmi.n	8004aa4 <_printf_float+0x39c>
 8004a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a34:	9b05      	ldr	r3, [sp, #20]
 8004a36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	eba2 0901 	sub.w	r9, r2, r1
 8004a3e:	4599      	cmp	r9, r3
 8004a40:	bfa8      	it	ge
 8004a42:	4699      	movge	r9, r3
 8004a44:	f1b9 0f00 	cmp.w	r9, #0
 8004a48:	dc35      	bgt.n	8004ab6 <_printf_float+0x3ae>
 8004a4a:	f04f 0800 	mov.w	r8, #0
 8004a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a52:	f104 0a1a 	add.w	sl, r4, #26
 8004a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	eba3 0309 	sub.w	r3, r3, r9
 8004a60:	4543      	cmp	r3, r8
 8004a62:	f77f af79 	ble.w	8004958 <_printf_float+0x250>
 8004a66:	2301      	movs	r3, #1
 8004a68:	4652      	mov	r2, sl
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f aeaa 	beq.w	80047ca <_printf_float+0xc2>
 8004a76:	f108 0801 	add.w	r8, r8, #1
 8004a7a:	e7ec      	b.n	8004a56 <_printf_float+0x34e>
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4642      	mov	r2, r8
 8004a82:	4628      	mov	r0, r5
 8004a84:	47b8      	blx	r7
 8004a86:	3001      	adds	r0, #1
 8004a88:	d1c0      	bne.n	8004a0c <_printf_float+0x304>
 8004a8a:	e69e      	b.n	80047ca <_printf_float+0xc2>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	9205      	str	r2, [sp, #20]
 8004a94:	47b8      	blx	r7
 8004a96:	3001      	adds	r0, #1
 8004a98:	f43f ae97 	beq.w	80047ca <_printf_float+0xc2>
 8004a9c:	9a05      	ldr	r2, [sp, #20]
 8004a9e:	f10b 0b01 	add.w	fp, fp, #1
 8004aa2:	e7b9      	b.n	8004a18 <_printf_float+0x310>
 8004aa4:	ee18 3a10 	vmov	r3, s16
 8004aa8:	4652      	mov	r2, sl
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b8      	blx	r7
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d1be      	bne.n	8004a32 <_printf_float+0x32a>
 8004ab4:	e689      	b.n	80047ca <_printf_float+0xc2>
 8004ab6:	9a05      	ldr	r2, [sp, #20]
 8004ab8:	464b      	mov	r3, r9
 8004aba:	4442      	add	r2, r8
 8004abc:	4631      	mov	r1, r6
 8004abe:	4628      	mov	r0, r5
 8004ac0:	47b8      	blx	r7
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d1c1      	bne.n	8004a4a <_printf_float+0x342>
 8004ac6:	e680      	b.n	80047ca <_printf_float+0xc2>
 8004ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aca:	2a01      	cmp	r2, #1
 8004acc:	dc01      	bgt.n	8004ad2 <_printf_float+0x3ca>
 8004ace:	07db      	lsls	r3, r3, #31
 8004ad0:	d538      	bpl.n	8004b44 <_printf_float+0x43c>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	f43f ae74 	beq.w	80047ca <_printf_float+0xc2>
 8004ae2:	ee18 3a10 	vmov	r3, s16
 8004ae6:	4652      	mov	r2, sl
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4628      	mov	r0, r5
 8004aec:	47b8      	blx	r7
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f ae6b 	beq.w	80047ca <_printf_float+0xc2>
 8004af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004af8:	2200      	movs	r2, #0
 8004afa:	2300      	movs	r3, #0
 8004afc:	f7fb ffec 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b00:	b9d8      	cbnz	r0, 8004b3a <_printf_float+0x432>
 8004b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b04:	f108 0201 	add.w	r2, r8, #1
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b8      	blx	r7
 8004b10:	3001      	adds	r0, #1
 8004b12:	d10e      	bne.n	8004b32 <_printf_float+0x42a>
 8004b14:	e659      	b.n	80047ca <_printf_float+0xc2>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f ae52 	beq.w	80047ca <_printf_float+0xc2>
 8004b26:	f108 0801 	add.w	r8, r8, #1
 8004b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	4543      	cmp	r3, r8
 8004b30:	dcf1      	bgt.n	8004b16 <_printf_float+0x40e>
 8004b32:	464b      	mov	r3, r9
 8004b34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b38:	e6dc      	b.n	80048f4 <_printf_float+0x1ec>
 8004b3a:	f04f 0800 	mov.w	r8, #0
 8004b3e:	f104 0a1a 	add.w	sl, r4, #26
 8004b42:	e7f2      	b.n	8004b2a <_printf_float+0x422>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4642      	mov	r2, r8
 8004b48:	e7df      	b.n	8004b0a <_printf_float+0x402>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	464a      	mov	r2, r9
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b8      	blx	r7
 8004b54:	3001      	adds	r0, #1
 8004b56:	f43f ae38 	beq.w	80047ca <_printf_float+0xc2>
 8004b5a:	f108 0801 	add.w	r8, r8, #1
 8004b5e:	68e3      	ldr	r3, [r4, #12]
 8004b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b62:	1a5b      	subs	r3, r3, r1
 8004b64:	4543      	cmp	r3, r8
 8004b66:	dcf0      	bgt.n	8004b4a <_printf_float+0x442>
 8004b68:	e6fa      	b.n	8004960 <_printf_float+0x258>
 8004b6a:	f04f 0800 	mov.w	r8, #0
 8004b6e:	f104 0919 	add.w	r9, r4, #25
 8004b72:	e7f4      	b.n	8004b5e <_printf_float+0x456>

08004b74 <_printf_common>:
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	4616      	mov	r6, r2
 8004b7a:	4699      	mov	r9, r3
 8004b7c:	688a      	ldr	r2, [r1, #8]
 8004b7e:	690b      	ldr	r3, [r1, #16]
 8004b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b84:	4293      	cmp	r3, r2
 8004b86:	bfb8      	it	lt
 8004b88:	4613      	movlt	r3, r2
 8004b8a:	6033      	str	r3, [r6, #0]
 8004b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b90:	4607      	mov	r7, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	b10a      	cbz	r2, 8004b9a <_printf_common+0x26>
 8004b96:	3301      	adds	r3, #1
 8004b98:	6033      	str	r3, [r6, #0]
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	0699      	lsls	r1, r3, #26
 8004b9e:	bf42      	ittt	mi
 8004ba0:	6833      	ldrmi	r3, [r6, #0]
 8004ba2:	3302      	addmi	r3, #2
 8004ba4:	6033      	strmi	r3, [r6, #0]
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	f015 0506 	ands.w	r5, r5, #6
 8004bac:	d106      	bne.n	8004bbc <_printf_common+0x48>
 8004bae:	f104 0a19 	add.w	sl, r4, #25
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	6832      	ldr	r2, [r6, #0]
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dc26      	bgt.n	8004c0a <_printf_common+0x96>
 8004bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc0:	1e13      	subs	r3, r2, #0
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	0692      	lsls	r2, r2, #26
 8004bca:	d42b      	bmi.n	8004c24 <_printf_common+0xb0>
 8004bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d01e      	beq.n	8004c18 <_printf_common+0xa4>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	68e5      	ldr	r5, [r4, #12]
 8004bde:	6832      	ldr	r2, [r6, #0]
 8004be0:	f003 0306 	and.w	r3, r3, #6
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	bf08      	it	eq
 8004be8:	1aad      	subeq	r5, r5, r2
 8004bea:	68a3      	ldr	r3, [r4, #8]
 8004bec:	6922      	ldr	r2, [r4, #16]
 8004bee:	bf0c      	ite	eq
 8004bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf4:	2500      	movne	r5, #0
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bfc4      	itt	gt
 8004bfa:	1a9b      	subgt	r3, r3, r2
 8004bfc:	18ed      	addgt	r5, r5, r3
 8004bfe:	2600      	movs	r6, #0
 8004c00:	341a      	adds	r4, #26
 8004c02:	42b5      	cmp	r5, r6
 8004c04:	d11a      	bne.n	8004c3c <_printf_common+0xc8>
 8004c06:	2000      	movs	r0, #0
 8004c08:	e008      	b.n	8004c1c <_printf_common+0xa8>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4649      	mov	r1, r9
 8004c10:	4638      	mov	r0, r7
 8004c12:	47c0      	blx	r8
 8004c14:	3001      	adds	r0, #1
 8004c16:	d103      	bne.n	8004c20 <_printf_common+0xac>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c20:	3501      	adds	r5, #1
 8004c22:	e7c6      	b.n	8004bb2 <_printf_common+0x3e>
 8004c24:	18e1      	adds	r1, r4, r3
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	2030      	movs	r0, #48	; 0x30
 8004c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c2e:	4422      	add	r2, r4
 8004c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c38:	3302      	adds	r3, #2
 8004c3a:	e7c7      	b.n	8004bcc <_printf_common+0x58>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4622      	mov	r2, r4
 8004c40:	4649      	mov	r1, r9
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d0e6      	beq.n	8004c18 <_printf_common+0xa4>
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7d9      	b.n	8004c02 <_printf_common+0x8e>
	...

08004c50 <_printf_i>:
 8004c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	460c      	mov	r4, r1
 8004c56:	4691      	mov	r9, r2
 8004c58:	7e27      	ldrb	r7, [r4, #24]
 8004c5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c5c:	2f78      	cmp	r7, #120	; 0x78
 8004c5e:	4680      	mov	r8, r0
 8004c60:	469a      	mov	sl, r3
 8004c62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c66:	d807      	bhi.n	8004c78 <_printf_i+0x28>
 8004c68:	2f62      	cmp	r7, #98	; 0x62
 8004c6a:	d80a      	bhi.n	8004c82 <_printf_i+0x32>
 8004c6c:	2f00      	cmp	r7, #0
 8004c6e:	f000 80d8 	beq.w	8004e22 <_printf_i+0x1d2>
 8004c72:	2f58      	cmp	r7, #88	; 0x58
 8004c74:	f000 80a3 	beq.w	8004dbe <_printf_i+0x16e>
 8004c78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c80:	e03a      	b.n	8004cf8 <_printf_i+0xa8>
 8004c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c86:	2b15      	cmp	r3, #21
 8004c88:	d8f6      	bhi.n	8004c78 <_printf_i+0x28>
 8004c8a:	a001      	add	r0, pc, #4	; (adr r0, 8004c90 <_printf_i+0x40>)
 8004c8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c90:	08004ce9 	.word	0x08004ce9
 8004c94:	08004cfd 	.word	0x08004cfd
 8004c98:	08004c79 	.word	0x08004c79
 8004c9c:	08004c79 	.word	0x08004c79
 8004ca0:	08004c79 	.word	0x08004c79
 8004ca4:	08004c79 	.word	0x08004c79
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004c79 	.word	0x08004c79
 8004cb0:	08004c79 	.word	0x08004c79
 8004cb4:	08004c79 	.word	0x08004c79
 8004cb8:	08004c79 	.word	0x08004c79
 8004cbc:	08004e09 	.word	0x08004e09
 8004cc0:	08004d2d 	.word	0x08004d2d
 8004cc4:	08004deb 	.word	0x08004deb
 8004cc8:	08004c79 	.word	0x08004c79
 8004ccc:	08004c79 	.word	0x08004c79
 8004cd0:	08004e2b 	.word	0x08004e2b
 8004cd4:	08004c79 	.word	0x08004c79
 8004cd8:	08004d2d 	.word	0x08004d2d
 8004cdc:	08004c79 	.word	0x08004c79
 8004ce0:	08004c79 	.word	0x08004c79
 8004ce4:	08004df3 	.word	0x08004df3
 8004ce8:	680b      	ldr	r3, [r1, #0]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	600a      	str	r2, [r1, #0]
 8004cf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0a3      	b.n	8004e44 <_printf_i+0x1f4>
 8004cfc:	6825      	ldr	r5, [r4, #0]
 8004cfe:	6808      	ldr	r0, [r1, #0]
 8004d00:	062e      	lsls	r6, r5, #24
 8004d02:	f100 0304 	add.w	r3, r0, #4
 8004d06:	d50a      	bpl.n	8004d1e <_printf_i+0xce>
 8004d08:	6805      	ldr	r5, [r0, #0]
 8004d0a:	600b      	str	r3, [r1, #0]
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	da03      	bge.n	8004d18 <_printf_i+0xc8>
 8004d10:	232d      	movs	r3, #45	; 0x2d
 8004d12:	426d      	negs	r5, r5
 8004d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d18:	485e      	ldr	r0, [pc, #376]	; (8004e94 <_printf_i+0x244>)
 8004d1a:	230a      	movs	r3, #10
 8004d1c:	e019      	b.n	8004d52 <_printf_i+0x102>
 8004d1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d22:	6805      	ldr	r5, [r0, #0]
 8004d24:	600b      	str	r3, [r1, #0]
 8004d26:	bf18      	it	ne
 8004d28:	b22d      	sxthne	r5, r5
 8004d2a:	e7ef      	b.n	8004d0c <_printf_i+0xbc>
 8004d2c:	680b      	ldr	r3, [r1, #0]
 8004d2e:	6825      	ldr	r5, [r4, #0]
 8004d30:	1d18      	adds	r0, r3, #4
 8004d32:	6008      	str	r0, [r1, #0]
 8004d34:	0628      	lsls	r0, r5, #24
 8004d36:	d501      	bpl.n	8004d3c <_printf_i+0xec>
 8004d38:	681d      	ldr	r5, [r3, #0]
 8004d3a:	e002      	b.n	8004d42 <_printf_i+0xf2>
 8004d3c:	0669      	lsls	r1, r5, #25
 8004d3e:	d5fb      	bpl.n	8004d38 <_printf_i+0xe8>
 8004d40:	881d      	ldrh	r5, [r3, #0]
 8004d42:	4854      	ldr	r0, [pc, #336]	; (8004e94 <_printf_i+0x244>)
 8004d44:	2f6f      	cmp	r7, #111	; 0x6f
 8004d46:	bf0c      	ite	eq
 8004d48:	2308      	moveq	r3, #8
 8004d4a:	230a      	movne	r3, #10
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d52:	6866      	ldr	r6, [r4, #4]
 8004d54:	60a6      	str	r6, [r4, #8]
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	bfa2      	ittt	ge
 8004d5a:	6821      	ldrge	r1, [r4, #0]
 8004d5c:	f021 0104 	bicge.w	r1, r1, #4
 8004d60:	6021      	strge	r1, [r4, #0]
 8004d62:	b90d      	cbnz	r5, 8004d68 <_printf_i+0x118>
 8004d64:	2e00      	cmp	r6, #0
 8004d66:	d04d      	beq.n	8004e04 <_printf_i+0x1b4>
 8004d68:	4616      	mov	r6, r2
 8004d6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d6e:	fb03 5711 	mls	r7, r3, r1, r5
 8004d72:	5dc7      	ldrb	r7, [r0, r7]
 8004d74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d78:	462f      	mov	r7, r5
 8004d7a:	42bb      	cmp	r3, r7
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	d9f4      	bls.n	8004d6a <_printf_i+0x11a>
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d10b      	bne.n	8004d9c <_printf_i+0x14c>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	07df      	lsls	r7, r3, #31
 8004d88:	d508      	bpl.n	8004d9c <_printf_i+0x14c>
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	6861      	ldr	r1, [r4, #4]
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	bfde      	ittt	le
 8004d92:	2330      	movle	r3, #48	; 0x30
 8004d94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d9c:	1b92      	subs	r2, r2, r6
 8004d9e:	6122      	str	r2, [r4, #16]
 8004da0:	f8cd a000 	str.w	sl, [sp]
 8004da4:	464b      	mov	r3, r9
 8004da6:	aa03      	add	r2, sp, #12
 8004da8:	4621      	mov	r1, r4
 8004daa:	4640      	mov	r0, r8
 8004dac:	f7ff fee2 	bl	8004b74 <_printf_common>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d14c      	bne.n	8004e4e <_printf_i+0x1fe>
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	b004      	add	sp, #16
 8004dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbe:	4835      	ldr	r0, [pc, #212]	; (8004e94 <_printf_i+0x244>)
 8004dc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	680e      	ldr	r6, [r1, #0]
 8004dc8:	061f      	lsls	r7, r3, #24
 8004dca:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dce:	600e      	str	r6, [r1, #0]
 8004dd0:	d514      	bpl.n	8004dfc <_printf_i+0x1ac>
 8004dd2:	07d9      	lsls	r1, r3, #31
 8004dd4:	bf44      	itt	mi
 8004dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dda:	6023      	strmi	r3, [r4, #0]
 8004ddc:	b91d      	cbnz	r5, 8004de6 <_printf_i+0x196>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f023 0320 	bic.w	r3, r3, #32
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	2310      	movs	r3, #16
 8004de8:	e7b0      	b.n	8004d4c <_printf_i+0xfc>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	f043 0320 	orr.w	r3, r3, #32
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	2378      	movs	r3, #120	; 0x78
 8004df4:	4828      	ldr	r0, [pc, #160]	; (8004e98 <_printf_i+0x248>)
 8004df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfa:	e7e3      	b.n	8004dc4 <_printf_i+0x174>
 8004dfc:	065e      	lsls	r6, r3, #25
 8004dfe:	bf48      	it	mi
 8004e00:	b2ad      	uxthmi	r5, r5
 8004e02:	e7e6      	b.n	8004dd2 <_printf_i+0x182>
 8004e04:	4616      	mov	r6, r2
 8004e06:	e7bb      	b.n	8004d80 <_printf_i+0x130>
 8004e08:	680b      	ldr	r3, [r1, #0]
 8004e0a:	6826      	ldr	r6, [r4, #0]
 8004e0c:	6960      	ldr	r0, [r4, #20]
 8004e0e:	1d1d      	adds	r5, r3, #4
 8004e10:	600d      	str	r5, [r1, #0]
 8004e12:	0635      	lsls	r5, r6, #24
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	d501      	bpl.n	8004e1c <_printf_i+0x1cc>
 8004e18:	6018      	str	r0, [r3, #0]
 8004e1a:	e002      	b.n	8004e22 <_printf_i+0x1d2>
 8004e1c:	0671      	lsls	r1, r6, #25
 8004e1e:	d5fb      	bpl.n	8004e18 <_printf_i+0x1c8>
 8004e20:	8018      	strh	r0, [r3, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	6123      	str	r3, [r4, #16]
 8004e26:	4616      	mov	r6, r2
 8004e28:	e7ba      	b.n	8004da0 <_printf_i+0x150>
 8004e2a:	680b      	ldr	r3, [r1, #0]
 8004e2c:	1d1a      	adds	r2, r3, #4
 8004e2e:	600a      	str	r2, [r1, #0]
 8004e30:	681e      	ldr	r6, [r3, #0]
 8004e32:	6862      	ldr	r2, [r4, #4]
 8004e34:	2100      	movs	r1, #0
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7fb f9da 	bl	80001f0 <memchr>
 8004e3c:	b108      	cbz	r0, 8004e42 <_printf_i+0x1f2>
 8004e3e:	1b80      	subs	r0, r0, r6
 8004e40:	6060      	str	r0, [r4, #4]
 8004e42:	6863      	ldr	r3, [r4, #4]
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	2300      	movs	r3, #0
 8004e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e4c:	e7a8      	b.n	8004da0 <_printf_i+0x150>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	4632      	mov	r2, r6
 8004e52:	4649      	mov	r1, r9
 8004e54:	4640      	mov	r0, r8
 8004e56:	47d0      	blx	sl
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d0ab      	beq.n	8004db4 <_printf_i+0x164>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	079b      	lsls	r3, r3, #30
 8004e60:	d413      	bmi.n	8004e8a <_printf_i+0x23a>
 8004e62:	68e0      	ldr	r0, [r4, #12]
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	4298      	cmp	r0, r3
 8004e68:	bfb8      	it	lt
 8004e6a:	4618      	movlt	r0, r3
 8004e6c:	e7a4      	b.n	8004db8 <_printf_i+0x168>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4632      	mov	r2, r6
 8004e72:	4649      	mov	r1, r9
 8004e74:	4640      	mov	r0, r8
 8004e76:	47d0      	blx	sl
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d09b      	beq.n	8004db4 <_printf_i+0x164>
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	68e3      	ldr	r3, [r4, #12]
 8004e80:	9903      	ldr	r1, [sp, #12]
 8004e82:	1a5b      	subs	r3, r3, r1
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	dcf2      	bgt.n	8004e6e <_printf_i+0x21e>
 8004e88:	e7eb      	b.n	8004e62 <_printf_i+0x212>
 8004e8a:	2500      	movs	r5, #0
 8004e8c:	f104 0619 	add.w	r6, r4, #25
 8004e90:	e7f5      	b.n	8004e7e <_printf_i+0x22e>
 8004e92:	bf00      	nop
 8004e94:	080082e6 	.word	0x080082e6
 8004e98:	080082f7 	.word	0x080082f7

08004e9c <siprintf>:
 8004e9c:	b40e      	push	{r1, r2, r3}
 8004e9e:	b500      	push	{lr}
 8004ea0:	b09c      	sub	sp, #112	; 0x70
 8004ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ea4:	9002      	str	r0, [sp, #8]
 8004ea6:	9006      	str	r0, [sp, #24]
 8004ea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004eac:	4809      	ldr	r0, [pc, #36]	; (8004ed4 <siprintf+0x38>)
 8004eae:	9107      	str	r1, [sp, #28]
 8004eb0:	9104      	str	r1, [sp, #16]
 8004eb2:	4909      	ldr	r1, [pc, #36]	; (8004ed8 <siprintf+0x3c>)
 8004eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb8:	9105      	str	r1, [sp, #20]
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	a902      	add	r1, sp, #8
 8004ec0:	f001 fb34 	bl	800652c <_svfiprintf_r>
 8004ec4:	9b02      	ldr	r3, [sp, #8]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	b01c      	add	sp, #112	; 0x70
 8004ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed0:	b003      	add	sp, #12
 8004ed2:	4770      	bx	lr
 8004ed4:	2000000c 	.word	0x2000000c
 8004ed8:	ffff0208 	.word	0xffff0208

08004edc <quorem>:
 8004edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	6903      	ldr	r3, [r0, #16]
 8004ee2:	690c      	ldr	r4, [r1, #16]
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	4607      	mov	r7, r0
 8004ee8:	f2c0 8081 	blt.w	8004fee <quorem+0x112>
 8004eec:	3c01      	subs	r4, #1
 8004eee:	f101 0814 	add.w	r8, r1, #20
 8004ef2:	f100 0514 	add.w	r5, r0, #20
 8004ef6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f04:	3301      	adds	r3, #1
 8004f06:	429a      	cmp	r2, r3
 8004f08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f10:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f14:	d331      	bcc.n	8004f7a <quorem+0x9e>
 8004f16:	f04f 0e00 	mov.w	lr, #0
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	46ac      	mov	ip, r5
 8004f1e:	46f2      	mov	sl, lr
 8004f20:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f24:	b293      	uxth	r3, r2
 8004f26:	fb06 e303 	mla	r3, r6, r3, lr
 8004f2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	ebaa 0303 	sub.w	r3, sl, r3
 8004f34:	0c12      	lsrs	r2, r2, #16
 8004f36:	f8dc a000 	ldr.w	sl, [ip]
 8004f3a:	fb06 e202 	mla	r2, r6, r2, lr
 8004f3e:	fa13 f38a 	uxtah	r3, r3, sl
 8004f42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f46:	fa1f fa82 	uxth.w	sl, r2
 8004f4a:	f8dc 2000 	ldr.w	r2, [ip]
 8004f4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004f52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f5c:	4581      	cmp	r9, r0
 8004f5e:	f84c 3b04 	str.w	r3, [ip], #4
 8004f62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f66:	d2db      	bcs.n	8004f20 <quorem+0x44>
 8004f68:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f6c:	b92b      	cbnz	r3, 8004f7a <quorem+0x9e>
 8004f6e:	9b01      	ldr	r3, [sp, #4]
 8004f70:	3b04      	subs	r3, #4
 8004f72:	429d      	cmp	r5, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	d32e      	bcc.n	8004fd6 <quorem+0xfa>
 8004f78:	613c      	str	r4, [r7, #16]
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f001 f8c0 	bl	8006100 <__mcmp>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	db24      	blt.n	8004fce <quorem+0xf2>
 8004f84:	3601      	adds	r6, #1
 8004f86:	4628      	mov	r0, r5
 8004f88:	f04f 0c00 	mov.w	ip, #0
 8004f8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f90:	f8d0 e000 	ldr.w	lr, [r0]
 8004f94:	b293      	uxth	r3, r2
 8004f96:	ebac 0303 	sub.w	r3, ip, r3
 8004f9a:	0c12      	lsrs	r2, r2, #16
 8004f9c:	fa13 f38e 	uxtah	r3, r3, lr
 8004fa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004fa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fae:	45c1      	cmp	r9, r8
 8004fb0:	f840 3b04 	str.w	r3, [r0], #4
 8004fb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fb8:	d2e8      	bcs.n	8004f8c <quorem+0xb0>
 8004fba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fc2:	b922      	cbnz	r2, 8004fce <quorem+0xf2>
 8004fc4:	3b04      	subs	r3, #4
 8004fc6:	429d      	cmp	r5, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	d30a      	bcc.n	8004fe2 <quorem+0x106>
 8004fcc:	613c      	str	r4, [r7, #16]
 8004fce:	4630      	mov	r0, r6
 8004fd0:	b003      	add	sp, #12
 8004fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	3b04      	subs	r3, #4
 8004fda:	2a00      	cmp	r2, #0
 8004fdc:	d1cc      	bne.n	8004f78 <quorem+0x9c>
 8004fde:	3c01      	subs	r4, #1
 8004fe0:	e7c7      	b.n	8004f72 <quorem+0x96>
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	2a00      	cmp	r2, #0
 8004fe8:	d1f0      	bne.n	8004fcc <quorem+0xf0>
 8004fea:	3c01      	subs	r4, #1
 8004fec:	e7eb      	b.n	8004fc6 <quorem+0xea>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e7ee      	b.n	8004fd0 <quorem+0xf4>
 8004ff2:	0000      	movs	r0, r0
 8004ff4:	0000      	movs	r0, r0
	...

08004ff8 <_dtoa_r>:
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	ed2d 8b02 	vpush	{d8}
 8005000:	ec57 6b10 	vmov	r6, r7, d0
 8005004:	b095      	sub	sp, #84	; 0x54
 8005006:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005008:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800500c:	9105      	str	r1, [sp, #20]
 800500e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005012:	4604      	mov	r4, r0
 8005014:	9209      	str	r2, [sp, #36]	; 0x24
 8005016:	930f      	str	r3, [sp, #60]	; 0x3c
 8005018:	b975      	cbnz	r5, 8005038 <_dtoa_r+0x40>
 800501a:	2010      	movs	r0, #16
 800501c:	f000 fddc 	bl	8005bd8 <malloc>
 8005020:	4602      	mov	r2, r0
 8005022:	6260      	str	r0, [r4, #36]	; 0x24
 8005024:	b920      	cbnz	r0, 8005030 <_dtoa_r+0x38>
 8005026:	4bb2      	ldr	r3, [pc, #712]	; (80052f0 <_dtoa_r+0x2f8>)
 8005028:	21ea      	movs	r1, #234	; 0xea
 800502a:	48b2      	ldr	r0, [pc, #712]	; (80052f4 <_dtoa_r+0x2fc>)
 800502c:	f001 fb8e 	bl	800674c <__assert_func>
 8005030:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005034:	6005      	str	r5, [r0, #0]
 8005036:	60c5      	str	r5, [r0, #12]
 8005038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800503a:	6819      	ldr	r1, [r3, #0]
 800503c:	b151      	cbz	r1, 8005054 <_dtoa_r+0x5c>
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	604a      	str	r2, [r1, #4]
 8005042:	2301      	movs	r3, #1
 8005044:	4093      	lsls	r3, r2
 8005046:	608b      	str	r3, [r1, #8]
 8005048:	4620      	mov	r0, r4
 800504a:	f000 fe1b 	bl	8005c84 <_Bfree>
 800504e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	1e3b      	subs	r3, r7, #0
 8005056:	bfb9      	ittee	lt
 8005058:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800505c:	9303      	strlt	r3, [sp, #12]
 800505e:	2300      	movge	r3, #0
 8005060:	f8c8 3000 	strge.w	r3, [r8]
 8005064:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005068:	4ba3      	ldr	r3, [pc, #652]	; (80052f8 <_dtoa_r+0x300>)
 800506a:	bfbc      	itt	lt
 800506c:	2201      	movlt	r2, #1
 800506e:	f8c8 2000 	strlt.w	r2, [r8]
 8005072:	ea33 0309 	bics.w	r3, r3, r9
 8005076:	d11b      	bne.n	80050b0 <_dtoa_r+0xb8>
 8005078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800507a:	f242 730f 	movw	r3, #9999	; 0x270f
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005084:	4333      	orrs	r3, r6
 8005086:	f000 857a 	beq.w	8005b7e <_dtoa_r+0xb86>
 800508a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800508c:	b963      	cbnz	r3, 80050a8 <_dtoa_r+0xb0>
 800508e:	4b9b      	ldr	r3, [pc, #620]	; (80052fc <_dtoa_r+0x304>)
 8005090:	e024      	b.n	80050dc <_dtoa_r+0xe4>
 8005092:	4b9b      	ldr	r3, [pc, #620]	; (8005300 <_dtoa_r+0x308>)
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	9800      	ldr	r0, [sp, #0]
 800509e:	b015      	add	sp, #84	; 0x54
 80050a0:	ecbd 8b02 	vpop	{d8}
 80050a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a8:	4b94      	ldr	r3, [pc, #592]	; (80052fc <_dtoa_r+0x304>)
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	3303      	adds	r3, #3
 80050ae:	e7f3      	b.n	8005098 <_dtoa_r+0xa0>
 80050b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	ec51 0b17 	vmov	r0, r1, d7
 80050ba:	2300      	movs	r3, #0
 80050bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80050c0:	f7fb fd0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80050c4:	4680      	mov	r8, r0
 80050c6:	b158      	cbz	r0, 80050e0 <_dtoa_r+0xe8>
 80050c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050ca:	2301      	movs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8551 	beq.w	8005b78 <_dtoa_r+0xb80>
 80050d6:	488b      	ldr	r0, [pc, #556]	; (8005304 <_dtoa_r+0x30c>)
 80050d8:	6018      	str	r0, [r3, #0]
 80050da:	1e43      	subs	r3, r0, #1
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	e7dd      	b.n	800509c <_dtoa_r+0xa4>
 80050e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80050e4:	aa12      	add	r2, sp, #72	; 0x48
 80050e6:	a913      	add	r1, sp, #76	; 0x4c
 80050e8:	4620      	mov	r0, r4
 80050ea:	f001 f8ad 	bl	8006248 <__d2b>
 80050ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050f2:	4683      	mov	fp, r0
 80050f4:	2d00      	cmp	r5, #0
 80050f6:	d07c      	beq.n	80051f2 <_dtoa_r+0x1fa>
 80050f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80050fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005102:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005106:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800510a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800510e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005112:	4b7d      	ldr	r3, [pc, #500]	; (8005308 <_dtoa_r+0x310>)
 8005114:	2200      	movs	r2, #0
 8005116:	4630      	mov	r0, r6
 8005118:	4639      	mov	r1, r7
 800511a:	f7fb f8bd 	bl	8000298 <__aeabi_dsub>
 800511e:	a36e      	add	r3, pc, #440	; (adr r3, 80052d8 <_dtoa_r+0x2e0>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb fa70 	bl	8000608 <__aeabi_dmul>
 8005128:	a36d      	add	r3, pc, #436	; (adr r3, 80052e0 <_dtoa_r+0x2e8>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb f8b5 	bl	800029c <__adddf3>
 8005132:	4606      	mov	r6, r0
 8005134:	4628      	mov	r0, r5
 8005136:	460f      	mov	r7, r1
 8005138:	f7fb f9fc 	bl	8000534 <__aeabi_i2d>
 800513c:	a36a      	add	r3, pc, #424	; (adr r3, 80052e8 <_dtoa_r+0x2f0>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f7fb fa61 	bl	8000608 <__aeabi_dmul>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4630      	mov	r0, r6
 800514c:	4639      	mov	r1, r7
 800514e:	f7fb f8a5 	bl	800029c <__adddf3>
 8005152:	4606      	mov	r6, r0
 8005154:	460f      	mov	r7, r1
 8005156:	f7fb fd07 	bl	8000b68 <__aeabi_d2iz>
 800515a:	2200      	movs	r2, #0
 800515c:	4682      	mov	sl, r0
 800515e:	2300      	movs	r3, #0
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f7fb fcc2 	bl	8000aec <__aeabi_dcmplt>
 8005168:	b148      	cbz	r0, 800517e <_dtoa_r+0x186>
 800516a:	4650      	mov	r0, sl
 800516c:	f7fb f9e2 	bl	8000534 <__aeabi_i2d>
 8005170:	4632      	mov	r2, r6
 8005172:	463b      	mov	r3, r7
 8005174:	f7fb fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005178:	b908      	cbnz	r0, 800517e <_dtoa_r+0x186>
 800517a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800517e:	f1ba 0f16 	cmp.w	sl, #22
 8005182:	d854      	bhi.n	800522e <_dtoa_r+0x236>
 8005184:	4b61      	ldr	r3, [pc, #388]	; (800530c <_dtoa_r+0x314>)
 8005186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005192:	f7fb fcab 	bl	8000aec <__aeabi_dcmplt>
 8005196:	2800      	cmp	r0, #0
 8005198:	d04b      	beq.n	8005232 <_dtoa_r+0x23a>
 800519a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800519e:	2300      	movs	r3, #0
 80051a0:	930e      	str	r3, [sp, #56]	; 0x38
 80051a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051a4:	1b5d      	subs	r5, r3, r5
 80051a6:	1e6b      	subs	r3, r5, #1
 80051a8:	9304      	str	r3, [sp, #16]
 80051aa:	bf43      	ittte	mi
 80051ac:	2300      	movmi	r3, #0
 80051ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80051b2:	9304      	strmi	r3, [sp, #16]
 80051b4:	f04f 0800 	movpl.w	r8, #0
 80051b8:	f1ba 0f00 	cmp.w	sl, #0
 80051bc:	db3b      	blt.n	8005236 <_dtoa_r+0x23e>
 80051be:	9b04      	ldr	r3, [sp, #16]
 80051c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80051c4:	4453      	add	r3, sl
 80051c6:	9304      	str	r3, [sp, #16]
 80051c8:	2300      	movs	r3, #0
 80051ca:	9306      	str	r3, [sp, #24]
 80051cc:	9b05      	ldr	r3, [sp, #20]
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d869      	bhi.n	80052a6 <_dtoa_r+0x2ae>
 80051d2:	2b05      	cmp	r3, #5
 80051d4:	bfc4      	itt	gt
 80051d6:	3b04      	subgt	r3, #4
 80051d8:	9305      	strgt	r3, [sp, #20]
 80051da:	9b05      	ldr	r3, [sp, #20]
 80051dc:	f1a3 0302 	sub.w	r3, r3, #2
 80051e0:	bfcc      	ite	gt
 80051e2:	2500      	movgt	r5, #0
 80051e4:	2501      	movle	r5, #1
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d869      	bhi.n	80052be <_dtoa_r+0x2c6>
 80051ea:	e8df f003 	tbb	[pc, r3]
 80051ee:	4e2c      	.short	0x4e2c
 80051f0:	5a4c      	.short	0x5a4c
 80051f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80051f6:	441d      	add	r5, r3
 80051f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	bfc1      	itttt	gt
 8005200:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005204:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005208:	fa09 f303 	lslgt.w	r3, r9, r3
 800520c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005210:	bfda      	itte	le
 8005212:	f1c3 0320 	rsble	r3, r3, #32
 8005216:	fa06 f003 	lslle.w	r0, r6, r3
 800521a:	4318      	orrgt	r0, r3
 800521c:	f7fb f97a 	bl	8000514 <__aeabi_ui2d>
 8005220:	2301      	movs	r3, #1
 8005222:	4606      	mov	r6, r0
 8005224:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005228:	3d01      	subs	r5, #1
 800522a:	9310      	str	r3, [sp, #64]	; 0x40
 800522c:	e771      	b.n	8005112 <_dtoa_r+0x11a>
 800522e:	2301      	movs	r3, #1
 8005230:	e7b6      	b.n	80051a0 <_dtoa_r+0x1a8>
 8005232:	900e      	str	r0, [sp, #56]	; 0x38
 8005234:	e7b5      	b.n	80051a2 <_dtoa_r+0x1aa>
 8005236:	f1ca 0300 	rsb	r3, sl, #0
 800523a:	9306      	str	r3, [sp, #24]
 800523c:	2300      	movs	r3, #0
 800523e:	eba8 080a 	sub.w	r8, r8, sl
 8005242:	930d      	str	r3, [sp, #52]	; 0x34
 8005244:	e7c2      	b.n	80051cc <_dtoa_r+0x1d4>
 8005246:	2300      	movs	r3, #0
 8005248:	9308      	str	r3, [sp, #32]
 800524a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	dc39      	bgt.n	80052c4 <_dtoa_r+0x2cc>
 8005250:	f04f 0901 	mov.w	r9, #1
 8005254:	f8cd 9004 	str.w	r9, [sp, #4]
 8005258:	464b      	mov	r3, r9
 800525a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800525e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005260:	2200      	movs	r2, #0
 8005262:	6042      	str	r2, [r0, #4]
 8005264:	2204      	movs	r2, #4
 8005266:	f102 0614 	add.w	r6, r2, #20
 800526a:	429e      	cmp	r6, r3
 800526c:	6841      	ldr	r1, [r0, #4]
 800526e:	d92f      	bls.n	80052d0 <_dtoa_r+0x2d8>
 8005270:	4620      	mov	r0, r4
 8005272:	f000 fcc7 	bl	8005c04 <_Balloc>
 8005276:	9000      	str	r0, [sp, #0]
 8005278:	2800      	cmp	r0, #0
 800527a:	d14b      	bne.n	8005314 <_dtoa_r+0x31c>
 800527c:	4b24      	ldr	r3, [pc, #144]	; (8005310 <_dtoa_r+0x318>)
 800527e:	4602      	mov	r2, r0
 8005280:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005284:	e6d1      	b.n	800502a <_dtoa_r+0x32>
 8005286:	2301      	movs	r3, #1
 8005288:	e7de      	b.n	8005248 <_dtoa_r+0x250>
 800528a:	2300      	movs	r3, #0
 800528c:	9308      	str	r3, [sp, #32]
 800528e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005290:	eb0a 0903 	add.w	r9, sl, r3
 8005294:	f109 0301 	add.w	r3, r9, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	bfb8      	it	lt
 800529e:	2301      	movlt	r3, #1
 80052a0:	e7dd      	b.n	800525e <_dtoa_r+0x266>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e7f2      	b.n	800528c <_dtoa_r+0x294>
 80052a6:	2501      	movs	r5, #1
 80052a8:	2300      	movs	r3, #0
 80052aa:	9305      	str	r3, [sp, #20]
 80052ac:	9508      	str	r5, [sp, #32]
 80052ae:	f04f 39ff 	mov.w	r9, #4294967295
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80052b8:	2312      	movs	r3, #18
 80052ba:	9209      	str	r2, [sp, #36]	; 0x24
 80052bc:	e7cf      	b.n	800525e <_dtoa_r+0x266>
 80052be:	2301      	movs	r3, #1
 80052c0:	9308      	str	r3, [sp, #32]
 80052c2:	e7f4      	b.n	80052ae <_dtoa_r+0x2b6>
 80052c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80052c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80052cc:	464b      	mov	r3, r9
 80052ce:	e7c6      	b.n	800525e <_dtoa_r+0x266>
 80052d0:	3101      	adds	r1, #1
 80052d2:	6041      	str	r1, [r0, #4]
 80052d4:	0052      	lsls	r2, r2, #1
 80052d6:	e7c6      	b.n	8005266 <_dtoa_r+0x26e>
 80052d8:	636f4361 	.word	0x636f4361
 80052dc:	3fd287a7 	.word	0x3fd287a7
 80052e0:	8b60c8b3 	.word	0x8b60c8b3
 80052e4:	3fc68a28 	.word	0x3fc68a28
 80052e8:	509f79fb 	.word	0x509f79fb
 80052ec:	3fd34413 	.word	0x3fd34413
 80052f0:	08008315 	.word	0x08008315
 80052f4:	0800832c 	.word	0x0800832c
 80052f8:	7ff00000 	.word	0x7ff00000
 80052fc:	08008311 	.word	0x08008311
 8005300:	08008308 	.word	0x08008308
 8005304:	080082e5 	.word	0x080082e5
 8005308:	3ff80000 	.word	0x3ff80000
 800530c:	08008428 	.word	0x08008428
 8005310:	0800838b 	.word	0x0800838b
 8005314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005316:	9a00      	ldr	r2, [sp, #0]
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	9b01      	ldr	r3, [sp, #4]
 800531c:	2b0e      	cmp	r3, #14
 800531e:	f200 80ad 	bhi.w	800547c <_dtoa_r+0x484>
 8005322:	2d00      	cmp	r5, #0
 8005324:	f000 80aa 	beq.w	800547c <_dtoa_r+0x484>
 8005328:	f1ba 0f00 	cmp.w	sl, #0
 800532c:	dd36      	ble.n	800539c <_dtoa_r+0x3a4>
 800532e:	4ac3      	ldr	r2, [pc, #780]	; (800563c <_dtoa_r+0x644>)
 8005330:	f00a 030f 	and.w	r3, sl, #15
 8005334:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005338:	ed93 7b00 	vldr	d7, [r3]
 800533c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005340:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005344:	eeb0 8a47 	vmov.f32	s16, s14
 8005348:	eef0 8a67 	vmov.f32	s17, s15
 800534c:	d016      	beq.n	800537c <_dtoa_r+0x384>
 800534e:	4bbc      	ldr	r3, [pc, #752]	; (8005640 <_dtoa_r+0x648>)
 8005350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005358:	f7fb fa80 	bl	800085c <__aeabi_ddiv>
 800535c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005360:	f007 070f 	and.w	r7, r7, #15
 8005364:	2503      	movs	r5, #3
 8005366:	4eb6      	ldr	r6, [pc, #728]	; (8005640 <_dtoa_r+0x648>)
 8005368:	b957      	cbnz	r7, 8005380 <_dtoa_r+0x388>
 800536a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800536e:	ec53 2b18 	vmov	r2, r3, d8
 8005372:	f7fb fa73 	bl	800085c <__aeabi_ddiv>
 8005376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800537a:	e029      	b.n	80053d0 <_dtoa_r+0x3d8>
 800537c:	2502      	movs	r5, #2
 800537e:	e7f2      	b.n	8005366 <_dtoa_r+0x36e>
 8005380:	07f9      	lsls	r1, r7, #31
 8005382:	d508      	bpl.n	8005396 <_dtoa_r+0x39e>
 8005384:	ec51 0b18 	vmov	r0, r1, d8
 8005388:	e9d6 2300 	ldrd	r2, r3, [r6]
 800538c:	f7fb f93c 	bl	8000608 <__aeabi_dmul>
 8005390:	ec41 0b18 	vmov	d8, r0, r1
 8005394:	3501      	adds	r5, #1
 8005396:	107f      	asrs	r7, r7, #1
 8005398:	3608      	adds	r6, #8
 800539a:	e7e5      	b.n	8005368 <_dtoa_r+0x370>
 800539c:	f000 80a6 	beq.w	80054ec <_dtoa_r+0x4f4>
 80053a0:	f1ca 0600 	rsb	r6, sl, #0
 80053a4:	4ba5      	ldr	r3, [pc, #660]	; (800563c <_dtoa_r+0x644>)
 80053a6:	4fa6      	ldr	r7, [pc, #664]	; (8005640 <_dtoa_r+0x648>)
 80053a8:	f006 020f 	and.w	r2, r6, #15
 80053ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053b8:	f7fb f926 	bl	8000608 <__aeabi_dmul>
 80053bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053c0:	1136      	asrs	r6, r6, #4
 80053c2:	2300      	movs	r3, #0
 80053c4:	2502      	movs	r5, #2
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	f040 8085 	bne.w	80054d6 <_dtoa_r+0x4de>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1d2      	bne.n	8005376 <_dtoa_r+0x37e>
 80053d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 808c 	beq.w	80054f0 <_dtoa_r+0x4f8>
 80053d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80053dc:	4b99      	ldr	r3, [pc, #612]	; (8005644 <_dtoa_r+0x64c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	4630      	mov	r0, r6
 80053e2:	4639      	mov	r1, r7
 80053e4:	f7fb fb82 	bl	8000aec <__aeabi_dcmplt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f000 8081 	beq.w	80054f0 <_dtoa_r+0x4f8>
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d07d      	beq.n	80054f0 <_dtoa_r+0x4f8>
 80053f4:	f1b9 0f00 	cmp.w	r9, #0
 80053f8:	dd3c      	ble.n	8005474 <_dtoa_r+0x47c>
 80053fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	2200      	movs	r2, #0
 8005402:	4b91      	ldr	r3, [pc, #580]	; (8005648 <_dtoa_r+0x650>)
 8005404:	4630      	mov	r0, r6
 8005406:	4639      	mov	r1, r7
 8005408:	f7fb f8fe 	bl	8000608 <__aeabi_dmul>
 800540c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005410:	3501      	adds	r5, #1
 8005412:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005416:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800541a:	4628      	mov	r0, r5
 800541c:	f7fb f88a 	bl	8000534 <__aeabi_i2d>
 8005420:	4632      	mov	r2, r6
 8005422:	463b      	mov	r3, r7
 8005424:	f7fb f8f0 	bl	8000608 <__aeabi_dmul>
 8005428:	4b88      	ldr	r3, [pc, #544]	; (800564c <_dtoa_r+0x654>)
 800542a:	2200      	movs	r2, #0
 800542c:	f7fa ff36 	bl	800029c <__adddf3>
 8005430:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005438:	9303      	str	r3, [sp, #12]
 800543a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800543c:	2b00      	cmp	r3, #0
 800543e:	d15c      	bne.n	80054fa <_dtoa_r+0x502>
 8005440:	4b83      	ldr	r3, [pc, #524]	; (8005650 <_dtoa_r+0x658>)
 8005442:	2200      	movs	r2, #0
 8005444:	4630      	mov	r0, r6
 8005446:	4639      	mov	r1, r7
 8005448:	f7fa ff26 	bl	8000298 <__aeabi_dsub>
 800544c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005450:	4606      	mov	r6, r0
 8005452:	460f      	mov	r7, r1
 8005454:	f7fb fb68 	bl	8000b28 <__aeabi_dcmpgt>
 8005458:	2800      	cmp	r0, #0
 800545a:	f040 8296 	bne.w	800598a <_dtoa_r+0x992>
 800545e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005462:	4630      	mov	r0, r6
 8005464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005468:	4639      	mov	r1, r7
 800546a:	f7fb fb3f 	bl	8000aec <__aeabi_dcmplt>
 800546e:	2800      	cmp	r0, #0
 8005470:	f040 8288 	bne.w	8005984 <_dtoa_r+0x98c>
 8005474:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800547c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800547e:	2b00      	cmp	r3, #0
 8005480:	f2c0 8158 	blt.w	8005734 <_dtoa_r+0x73c>
 8005484:	f1ba 0f0e 	cmp.w	sl, #14
 8005488:	f300 8154 	bgt.w	8005734 <_dtoa_r+0x73c>
 800548c:	4b6b      	ldr	r3, [pc, #428]	; (800563c <_dtoa_r+0x644>)
 800548e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005492:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	f280 80e3 	bge.w	8005664 <_dtoa_r+0x66c>
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f300 80df 	bgt.w	8005664 <_dtoa_r+0x66c>
 80054a6:	f040 826d 	bne.w	8005984 <_dtoa_r+0x98c>
 80054aa:	4b69      	ldr	r3, [pc, #420]	; (8005650 <_dtoa_r+0x658>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	4640      	mov	r0, r8
 80054b0:	4649      	mov	r1, r9
 80054b2:	f7fb f8a9 	bl	8000608 <__aeabi_dmul>
 80054b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054ba:	f7fb fb2b 	bl	8000b14 <__aeabi_dcmpge>
 80054be:	9e01      	ldr	r6, [sp, #4]
 80054c0:	4637      	mov	r7, r6
 80054c2:	2800      	cmp	r0, #0
 80054c4:	f040 8243 	bne.w	800594e <_dtoa_r+0x956>
 80054c8:	9d00      	ldr	r5, [sp, #0]
 80054ca:	2331      	movs	r3, #49	; 0x31
 80054cc:	f805 3b01 	strb.w	r3, [r5], #1
 80054d0:	f10a 0a01 	add.w	sl, sl, #1
 80054d4:	e23f      	b.n	8005956 <_dtoa_r+0x95e>
 80054d6:	07f2      	lsls	r2, r6, #31
 80054d8:	d505      	bpl.n	80054e6 <_dtoa_r+0x4ee>
 80054da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054de:	f7fb f893 	bl	8000608 <__aeabi_dmul>
 80054e2:	3501      	adds	r5, #1
 80054e4:	2301      	movs	r3, #1
 80054e6:	1076      	asrs	r6, r6, #1
 80054e8:	3708      	adds	r7, #8
 80054ea:	e76c      	b.n	80053c6 <_dtoa_r+0x3ce>
 80054ec:	2502      	movs	r5, #2
 80054ee:	e76f      	b.n	80053d0 <_dtoa_r+0x3d8>
 80054f0:	9b01      	ldr	r3, [sp, #4]
 80054f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80054f6:	930c      	str	r3, [sp, #48]	; 0x30
 80054f8:	e78d      	b.n	8005416 <_dtoa_r+0x41e>
 80054fa:	9900      	ldr	r1, [sp, #0]
 80054fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80054fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005500:	4b4e      	ldr	r3, [pc, #312]	; (800563c <_dtoa_r+0x644>)
 8005502:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005506:	4401      	add	r1, r0
 8005508:	9102      	str	r1, [sp, #8]
 800550a:	9908      	ldr	r1, [sp, #32]
 800550c:	eeb0 8a47 	vmov.f32	s16, s14
 8005510:	eef0 8a67 	vmov.f32	s17, s15
 8005514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800551c:	2900      	cmp	r1, #0
 800551e:	d045      	beq.n	80055ac <_dtoa_r+0x5b4>
 8005520:	494c      	ldr	r1, [pc, #304]	; (8005654 <_dtoa_r+0x65c>)
 8005522:	2000      	movs	r0, #0
 8005524:	f7fb f99a 	bl	800085c <__aeabi_ddiv>
 8005528:	ec53 2b18 	vmov	r2, r3, d8
 800552c:	f7fa feb4 	bl	8000298 <__aeabi_dsub>
 8005530:	9d00      	ldr	r5, [sp, #0]
 8005532:	ec41 0b18 	vmov	d8, r0, r1
 8005536:	4639      	mov	r1, r7
 8005538:	4630      	mov	r0, r6
 800553a:	f7fb fb15 	bl	8000b68 <__aeabi_d2iz>
 800553e:	900c      	str	r0, [sp, #48]	; 0x30
 8005540:	f7fa fff8 	bl	8000534 <__aeabi_i2d>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4630      	mov	r0, r6
 800554a:	4639      	mov	r1, r7
 800554c:	f7fa fea4 	bl	8000298 <__aeabi_dsub>
 8005550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005552:	3330      	adds	r3, #48	; 0x30
 8005554:	f805 3b01 	strb.w	r3, [r5], #1
 8005558:	ec53 2b18 	vmov	r2, r3, d8
 800555c:	4606      	mov	r6, r0
 800555e:	460f      	mov	r7, r1
 8005560:	f7fb fac4 	bl	8000aec <__aeabi_dcmplt>
 8005564:	2800      	cmp	r0, #0
 8005566:	d165      	bne.n	8005634 <_dtoa_r+0x63c>
 8005568:	4632      	mov	r2, r6
 800556a:	463b      	mov	r3, r7
 800556c:	4935      	ldr	r1, [pc, #212]	; (8005644 <_dtoa_r+0x64c>)
 800556e:	2000      	movs	r0, #0
 8005570:	f7fa fe92 	bl	8000298 <__aeabi_dsub>
 8005574:	ec53 2b18 	vmov	r2, r3, d8
 8005578:	f7fb fab8 	bl	8000aec <__aeabi_dcmplt>
 800557c:	2800      	cmp	r0, #0
 800557e:	f040 80b9 	bne.w	80056f4 <_dtoa_r+0x6fc>
 8005582:	9b02      	ldr	r3, [sp, #8]
 8005584:	429d      	cmp	r5, r3
 8005586:	f43f af75 	beq.w	8005474 <_dtoa_r+0x47c>
 800558a:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <_dtoa_r+0x650>)
 800558c:	ec51 0b18 	vmov	r0, r1, d8
 8005590:	2200      	movs	r2, #0
 8005592:	f7fb f839 	bl	8000608 <__aeabi_dmul>
 8005596:	4b2c      	ldr	r3, [pc, #176]	; (8005648 <_dtoa_r+0x650>)
 8005598:	ec41 0b18 	vmov	d8, r0, r1
 800559c:	2200      	movs	r2, #0
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fb f831 	bl	8000608 <__aeabi_dmul>
 80055a6:	4606      	mov	r6, r0
 80055a8:	460f      	mov	r7, r1
 80055aa:	e7c4      	b.n	8005536 <_dtoa_r+0x53e>
 80055ac:	ec51 0b17 	vmov	r0, r1, d7
 80055b0:	f7fb f82a 	bl	8000608 <__aeabi_dmul>
 80055b4:	9b02      	ldr	r3, [sp, #8]
 80055b6:	9d00      	ldr	r5, [sp, #0]
 80055b8:	930c      	str	r3, [sp, #48]	; 0x30
 80055ba:	ec41 0b18 	vmov	d8, r0, r1
 80055be:	4639      	mov	r1, r7
 80055c0:	4630      	mov	r0, r6
 80055c2:	f7fb fad1 	bl	8000b68 <__aeabi_d2iz>
 80055c6:	9011      	str	r0, [sp, #68]	; 0x44
 80055c8:	f7fa ffb4 	bl	8000534 <__aeabi_i2d>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4630      	mov	r0, r6
 80055d2:	4639      	mov	r1, r7
 80055d4:	f7fa fe60 	bl	8000298 <__aeabi_dsub>
 80055d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055da:	3330      	adds	r3, #48	; 0x30
 80055dc:	f805 3b01 	strb.w	r3, [r5], #1
 80055e0:	9b02      	ldr	r3, [sp, #8]
 80055e2:	429d      	cmp	r5, r3
 80055e4:	4606      	mov	r6, r0
 80055e6:	460f      	mov	r7, r1
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	d134      	bne.n	8005658 <_dtoa_r+0x660>
 80055ee:	4b19      	ldr	r3, [pc, #100]	; (8005654 <_dtoa_r+0x65c>)
 80055f0:	ec51 0b18 	vmov	r0, r1, d8
 80055f4:	f7fa fe52 	bl	800029c <__adddf3>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4630      	mov	r0, r6
 80055fe:	4639      	mov	r1, r7
 8005600:	f7fb fa92 	bl	8000b28 <__aeabi_dcmpgt>
 8005604:	2800      	cmp	r0, #0
 8005606:	d175      	bne.n	80056f4 <_dtoa_r+0x6fc>
 8005608:	ec53 2b18 	vmov	r2, r3, d8
 800560c:	4911      	ldr	r1, [pc, #68]	; (8005654 <_dtoa_r+0x65c>)
 800560e:	2000      	movs	r0, #0
 8005610:	f7fa fe42 	bl	8000298 <__aeabi_dsub>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4630      	mov	r0, r6
 800561a:	4639      	mov	r1, r7
 800561c:	f7fb fa66 	bl	8000aec <__aeabi_dcmplt>
 8005620:	2800      	cmp	r0, #0
 8005622:	f43f af27 	beq.w	8005474 <_dtoa_r+0x47c>
 8005626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005628:	1e6b      	subs	r3, r5, #1
 800562a:	930c      	str	r3, [sp, #48]	; 0x30
 800562c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005630:	2b30      	cmp	r3, #48	; 0x30
 8005632:	d0f8      	beq.n	8005626 <_dtoa_r+0x62e>
 8005634:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005638:	e04a      	b.n	80056d0 <_dtoa_r+0x6d8>
 800563a:	bf00      	nop
 800563c:	08008428 	.word	0x08008428
 8005640:	08008400 	.word	0x08008400
 8005644:	3ff00000 	.word	0x3ff00000
 8005648:	40240000 	.word	0x40240000
 800564c:	401c0000 	.word	0x401c0000
 8005650:	40140000 	.word	0x40140000
 8005654:	3fe00000 	.word	0x3fe00000
 8005658:	4baf      	ldr	r3, [pc, #700]	; (8005918 <_dtoa_r+0x920>)
 800565a:	f7fa ffd5 	bl	8000608 <__aeabi_dmul>
 800565e:	4606      	mov	r6, r0
 8005660:	460f      	mov	r7, r1
 8005662:	e7ac      	b.n	80055be <_dtoa_r+0x5c6>
 8005664:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005668:	9d00      	ldr	r5, [sp, #0]
 800566a:	4642      	mov	r2, r8
 800566c:	464b      	mov	r3, r9
 800566e:	4630      	mov	r0, r6
 8005670:	4639      	mov	r1, r7
 8005672:	f7fb f8f3 	bl	800085c <__aeabi_ddiv>
 8005676:	f7fb fa77 	bl	8000b68 <__aeabi_d2iz>
 800567a:	9002      	str	r0, [sp, #8]
 800567c:	f7fa ff5a 	bl	8000534 <__aeabi_i2d>
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	f7fa ffc0 	bl	8000608 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4630      	mov	r0, r6
 800568e:	4639      	mov	r1, r7
 8005690:	f7fa fe02 	bl	8000298 <__aeabi_dsub>
 8005694:	9e02      	ldr	r6, [sp, #8]
 8005696:	9f01      	ldr	r7, [sp, #4]
 8005698:	3630      	adds	r6, #48	; 0x30
 800569a:	f805 6b01 	strb.w	r6, [r5], #1
 800569e:	9e00      	ldr	r6, [sp, #0]
 80056a0:	1bae      	subs	r6, r5, r6
 80056a2:	42b7      	cmp	r7, r6
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	d137      	bne.n	800571a <_dtoa_r+0x722>
 80056aa:	f7fa fdf7 	bl	800029c <__adddf3>
 80056ae:	4642      	mov	r2, r8
 80056b0:	464b      	mov	r3, r9
 80056b2:	4606      	mov	r6, r0
 80056b4:	460f      	mov	r7, r1
 80056b6:	f7fb fa37 	bl	8000b28 <__aeabi_dcmpgt>
 80056ba:	b9c8      	cbnz	r0, 80056f0 <_dtoa_r+0x6f8>
 80056bc:	4642      	mov	r2, r8
 80056be:	464b      	mov	r3, r9
 80056c0:	4630      	mov	r0, r6
 80056c2:	4639      	mov	r1, r7
 80056c4:	f7fb fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 80056c8:	b110      	cbz	r0, 80056d0 <_dtoa_r+0x6d8>
 80056ca:	9b02      	ldr	r3, [sp, #8]
 80056cc:	07d9      	lsls	r1, r3, #31
 80056ce:	d40f      	bmi.n	80056f0 <_dtoa_r+0x6f8>
 80056d0:	4620      	mov	r0, r4
 80056d2:	4659      	mov	r1, fp
 80056d4:	f000 fad6 	bl	8005c84 <_Bfree>
 80056d8:	2300      	movs	r3, #0
 80056da:	702b      	strb	r3, [r5, #0]
 80056dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056de:	f10a 0001 	add.w	r0, sl, #1
 80056e2:	6018      	str	r0, [r3, #0]
 80056e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f43f acd8 	beq.w	800509c <_dtoa_r+0xa4>
 80056ec:	601d      	str	r5, [r3, #0]
 80056ee:	e4d5      	b.n	800509c <_dtoa_r+0xa4>
 80056f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80056f4:	462b      	mov	r3, r5
 80056f6:	461d      	mov	r5, r3
 80056f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056fc:	2a39      	cmp	r2, #57	; 0x39
 80056fe:	d108      	bne.n	8005712 <_dtoa_r+0x71a>
 8005700:	9a00      	ldr	r2, [sp, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d1f7      	bne.n	80056f6 <_dtoa_r+0x6fe>
 8005706:	9a07      	ldr	r2, [sp, #28]
 8005708:	9900      	ldr	r1, [sp, #0]
 800570a:	3201      	adds	r2, #1
 800570c:	9207      	str	r2, [sp, #28]
 800570e:	2230      	movs	r2, #48	; 0x30
 8005710:	700a      	strb	r2, [r1, #0]
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	3201      	adds	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e78c      	b.n	8005634 <_dtoa_r+0x63c>
 800571a:	4b7f      	ldr	r3, [pc, #508]	; (8005918 <_dtoa_r+0x920>)
 800571c:	2200      	movs	r2, #0
 800571e:	f7fa ff73 	bl	8000608 <__aeabi_dmul>
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4606      	mov	r6, r0
 8005728:	460f      	mov	r7, r1
 800572a:	f7fb f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800572e:	2800      	cmp	r0, #0
 8005730:	d09b      	beq.n	800566a <_dtoa_r+0x672>
 8005732:	e7cd      	b.n	80056d0 <_dtoa_r+0x6d8>
 8005734:	9a08      	ldr	r2, [sp, #32]
 8005736:	2a00      	cmp	r2, #0
 8005738:	f000 80c4 	beq.w	80058c4 <_dtoa_r+0x8cc>
 800573c:	9a05      	ldr	r2, [sp, #20]
 800573e:	2a01      	cmp	r2, #1
 8005740:	f300 80a8 	bgt.w	8005894 <_dtoa_r+0x89c>
 8005744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005746:	2a00      	cmp	r2, #0
 8005748:	f000 80a0 	beq.w	800588c <_dtoa_r+0x894>
 800574c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005750:	9e06      	ldr	r6, [sp, #24]
 8005752:	4645      	mov	r5, r8
 8005754:	9a04      	ldr	r2, [sp, #16]
 8005756:	2101      	movs	r1, #1
 8005758:	441a      	add	r2, r3
 800575a:	4620      	mov	r0, r4
 800575c:	4498      	add	r8, r3
 800575e:	9204      	str	r2, [sp, #16]
 8005760:	f000 fb4c 	bl	8005dfc <__i2b>
 8005764:	4607      	mov	r7, r0
 8005766:	2d00      	cmp	r5, #0
 8005768:	dd0b      	ble.n	8005782 <_dtoa_r+0x78a>
 800576a:	9b04      	ldr	r3, [sp, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	dd08      	ble.n	8005782 <_dtoa_r+0x78a>
 8005770:	42ab      	cmp	r3, r5
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	bfa8      	it	ge
 8005776:	462b      	movge	r3, r5
 8005778:	eba8 0803 	sub.w	r8, r8, r3
 800577c:	1aed      	subs	r5, r5, r3
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	9b06      	ldr	r3, [sp, #24]
 8005784:	b1fb      	cbz	r3, 80057c6 <_dtoa_r+0x7ce>
 8005786:	9b08      	ldr	r3, [sp, #32]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 809f 	beq.w	80058cc <_dtoa_r+0x8d4>
 800578e:	2e00      	cmp	r6, #0
 8005790:	dd11      	ble.n	80057b6 <_dtoa_r+0x7be>
 8005792:	4639      	mov	r1, r7
 8005794:	4632      	mov	r2, r6
 8005796:	4620      	mov	r0, r4
 8005798:	f000 fbec 	bl	8005f74 <__pow5mult>
 800579c:	465a      	mov	r2, fp
 800579e:	4601      	mov	r1, r0
 80057a0:	4607      	mov	r7, r0
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 fb40 	bl	8005e28 <__multiply>
 80057a8:	4659      	mov	r1, fp
 80057aa:	9007      	str	r0, [sp, #28]
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 fa69 	bl	8005c84 <_Bfree>
 80057b2:	9b07      	ldr	r3, [sp, #28]
 80057b4:	469b      	mov	fp, r3
 80057b6:	9b06      	ldr	r3, [sp, #24]
 80057b8:	1b9a      	subs	r2, r3, r6
 80057ba:	d004      	beq.n	80057c6 <_dtoa_r+0x7ce>
 80057bc:	4659      	mov	r1, fp
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 fbd8 	bl	8005f74 <__pow5mult>
 80057c4:	4683      	mov	fp, r0
 80057c6:	2101      	movs	r1, #1
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fb17 	bl	8005dfc <__i2b>
 80057ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	4606      	mov	r6, r0
 80057d4:	dd7c      	ble.n	80058d0 <_dtoa_r+0x8d8>
 80057d6:	461a      	mov	r2, r3
 80057d8:	4601      	mov	r1, r0
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 fbca 	bl	8005f74 <__pow5mult>
 80057e0:	9b05      	ldr	r3, [sp, #20]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	4606      	mov	r6, r0
 80057e6:	dd76      	ble.n	80058d6 <_dtoa_r+0x8de>
 80057e8:	2300      	movs	r3, #0
 80057ea:	9306      	str	r3, [sp, #24]
 80057ec:	6933      	ldr	r3, [r6, #16]
 80057ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057f2:	6918      	ldr	r0, [r3, #16]
 80057f4:	f000 fab2 	bl	8005d5c <__hi0bits>
 80057f8:	f1c0 0020 	rsb	r0, r0, #32
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	4418      	add	r0, r3
 8005800:	f010 001f 	ands.w	r0, r0, #31
 8005804:	f000 8086 	beq.w	8005914 <_dtoa_r+0x91c>
 8005808:	f1c0 0320 	rsb	r3, r0, #32
 800580c:	2b04      	cmp	r3, #4
 800580e:	dd7f      	ble.n	8005910 <_dtoa_r+0x918>
 8005810:	f1c0 001c 	rsb	r0, r0, #28
 8005814:	9b04      	ldr	r3, [sp, #16]
 8005816:	4403      	add	r3, r0
 8005818:	4480      	add	r8, r0
 800581a:	4405      	add	r5, r0
 800581c:	9304      	str	r3, [sp, #16]
 800581e:	f1b8 0f00 	cmp.w	r8, #0
 8005822:	dd05      	ble.n	8005830 <_dtoa_r+0x838>
 8005824:	4659      	mov	r1, fp
 8005826:	4642      	mov	r2, r8
 8005828:	4620      	mov	r0, r4
 800582a:	f000 fbfd 	bl	8006028 <__lshift>
 800582e:	4683      	mov	fp, r0
 8005830:	9b04      	ldr	r3, [sp, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	dd05      	ble.n	8005842 <_dtoa_r+0x84a>
 8005836:	4631      	mov	r1, r6
 8005838:	461a      	mov	r2, r3
 800583a:	4620      	mov	r0, r4
 800583c:	f000 fbf4 	bl	8006028 <__lshift>
 8005840:	4606      	mov	r6, r0
 8005842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d069      	beq.n	800591c <_dtoa_r+0x924>
 8005848:	4631      	mov	r1, r6
 800584a:	4658      	mov	r0, fp
 800584c:	f000 fc58 	bl	8006100 <__mcmp>
 8005850:	2800      	cmp	r0, #0
 8005852:	da63      	bge.n	800591c <_dtoa_r+0x924>
 8005854:	2300      	movs	r3, #0
 8005856:	4659      	mov	r1, fp
 8005858:	220a      	movs	r2, #10
 800585a:	4620      	mov	r0, r4
 800585c:	f000 fa34 	bl	8005cc8 <__multadd>
 8005860:	9b08      	ldr	r3, [sp, #32]
 8005862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005866:	4683      	mov	fp, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 818f 	beq.w	8005b8c <_dtoa_r+0xb94>
 800586e:	4639      	mov	r1, r7
 8005870:	2300      	movs	r3, #0
 8005872:	220a      	movs	r2, #10
 8005874:	4620      	mov	r0, r4
 8005876:	f000 fa27 	bl	8005cc8 <__multadd>
 800587a:	f1b9 0f00 	cmp.w	r9, #0
 800587e:	4607      	mov	r7, r0
 8005880:	f300 808e 	bgt.w	80059a0 <_dtoa_r+0x9a8>
 8005884:	9b05      	ldr	r3, [sp, #20]
 8005886:	2b02      	cmp	r3, #2
 8005888:	dc50      	bgt.n	800592c <_dtoa_r+0x934>
 800588a:	e089      	b.n	80059a0 <_dtoa_r+0x9a8>
 800588c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800588e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005892:	e75d      	b.n	8005750 <_dtoa_r+0x758>
 8005894:	9b01      	ldr	r3, [sp, #4]
 8005896:	1e5e      	subs	r6, r3, #1
 8005898:	9b06      	ldr	r3, [sp, #24]
 800589a:	42b3      	cmp	r3, r6
 800589c:	bfbf      	itttt	lt
 800589e:	9b06      	ldrlt	r3, [sp, #24]
 80058a0:	9606      	strlt	r6, [sp, #24]
 80058a2:	1af2      	sublt	r2, r6, r3
 80058a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80058a6:	bfb6      	itet	lt
 80058a8:	189b      	addlt	r3, r3, r2
 80058aa:	1b9e      	subge	r6, r3, r6
 80058ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80058ae:	9b01      	ldr	r3, [sp, #4]
 80058b0:	bfb8      	it	lt
 80058b2:	2600      	movlt	r6, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bfb5      	itete	lt
 80058b8:	eba8 0503 	sublt.w	r5, r8, r3
 80058bc:	9b01      	ldrge	r3, [sp, #4]
 80058be:	2300      	movlt	r3, #0
 80058c0:	4645      	movge	r5, r8
 80058c2:	e747      	b.n	8005754 <_dtoa_r+0x75c>
 80058c4:	9e06      	ldr	r6, [sp, #24]
 80058c6:	9f08      	ldr	r7, [sp, #32]
 80058c8:	4645      	mov	r5, r8
 80058ca:	e74c      	b.n	8005766 <_dtoa_r+0x76e>
 80058cc:	9a06      	ldr	r2, [sp, #24]
 80058ce:	e775      	b.n	80057bc <_dtoa_r+0x7c4>
 80058d0:	9b05      	ldr	r3, [sp, #20]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	dc18      	bgt.n	8005908 <_dtoa_r+0x910>
 80058d6:	9b02      	ldr	r3, [sp, #8]
 80058d8:	b9b3      	cbnz	r3, 8005908 <_dtoa_r+0x910>
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058e0:	b9a3      	cbnz	r3, 800590c <_dtoa_r+0x914>
 80058e2:	9b03      	ldr	r3, [sp, #12]
 80058e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058e8:	0d1b      	lsrs	r3, r3, #20
 80058ea:	051b      	lsls	r3, r3, #20
 80058ec:	b12b      	cbz	r3, 80058fa <_dtoa_r+0x902>
 80058ee:	9b04      	ldr	r3, [sp, #16]
 80058f0:	3301      	adds	r3, #1
 80058f2:	9304      	str	r3, [sp, #16]
 80058f4:	f108 0801 	add.w	r8, r8, #1
 80058f8:	2301      	movs	r3, #1
 80058fa:	9306      	str	r3, [sp, #24]
 80058fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f47f af74 	bne.w	80057ec <_dtoa_r+0x7f4>
 8005904:	2001      	movs	r0, #1
 8005906:	e779      	b.n	80057fc <_dtoa_r+0x804>
 8005908:	2300      	movs	r3, #0
 800590a:	e7f6      	b.n	80058fa <_dtoa_r+0x902>
 800590c:	9b02      	ldr	r3, [sp, #8]
 800590e:	e7f4      	b.n	80058fa <_dtoa_r+0x902>
 8005910:	d085      	beq.n	800581e <_dtoa_r+0x826>
 8005912:	4618      	mov	r0, r3
 8005914:	301c      	adds	r0, #28
 8005916:	e77d      	b.n	8005814 <_dtoa_r+0x81c>
 8005918:	40240000 	.word	0x40240000
 800591c:	9b01      	ldr	r3, [sp, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	dc38      	bgt.n	8005994 <_dtoa_r+0x99c>
 8005922:	9b05      	ldr	r3, [sp, #20]
 8005924:	2b02      	cmp	r3, #2
 8005926:	dd35      	ble.n	8005994 <_dtoa_r+0x99c>
 8005928:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800592c:	f1b9 0f00 	cmp.w	r9, #0
 8005930:	d10d      	bne.n	800594e <_dtoa_r+0x956>
 8005932:	4631      	mov	r1, r6
 8005934:	464b      	mov	r3, r9
 8005936:	2205      	movs	r2, #5
 8005938:	4620      	mov	r0, r4
 800593a:	f000 f9c5 	bl	8005cc8 <__multadd>
 800593e:	4601      	mov	r1, r0
 8005940:	4606      	mov	r6, r0
 8005942:	4658      	mov	r0, fp
 8005944:	f000 fbdc 	bl	8006100 <__mcmp>
 8005948:	2800      	cmp	r0, #0
 800594a:	f73f adbd 	bgt.w	80054c8 <_dtoa_r+0x4d0>
 800594e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005950:	9d00      	ldr	r5, [sp, #0]
 8005952:	ea6f 0a03 	mvn.w	sl, r3
 8005956:	f04f 0800 	mov.w	r8, #0
 800595a:	4631      	mov	r1, r6
 800595c:	4620      	mov	r0, r4
 800595e:	f000 f991 	bl	8005c84 <_Bfree>
 8005962:	2f00      	cmp	r7, #0
 8005964:	f43f aeb4 	beq.w	80056d0 <_dtoa_r+0x6d8>
 8005968:	f1b8 0f00 	cmp.w	r8, #0
 800596c:	d005      	beq.n	800597a <_dtoa_r+0x982>
 800596e:	45b8      	cmp	r8, r7
 8005970:	d003      	beq.n	800597a <_dtoa_r+0x982>
 8005972:	4641      	mov	r1, r8
 8005974:	4620      	mov	r0, r4
 8005976:	f000 f985 	bl	8005c84 <_Bfree>
 800597a:	4639      	mov	r1, r7
 800597c:	4620      	mov	r0, r4
 800597e:	f000 f981 	bl	8005c84 <_Bfree>
 8005982:	e6a5      	b.n	80056d0 <_dtoa_r+0x6d8>
 8005984:	2600      	movs	r6, #0
 8005986:	4637      	mov	r7, r6
 8005988:	e7e1      	b.n	800594e <_dtoa_r+0x956>
 800598a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800598c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005990:	4637      	mov	r7, r6
 8005992:	e599      	b.n	80054c8 <_dtoa_r+0x4d0>
 8005994:	9b08      	ldr	r3, [sp, #32]
 8005996:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80fd 	beq.w	8005b9a <_dtoa_r+0xba2>
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	dd05      	ble.n	80059b0 <_dtoa_r+0x9b8>
 80059a4:	4639      	mov	r1, r7
 80059a6:	462a      	mov	r2, r5
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 fb3d 	bl	8006028 <__lshift>
 80059ae:	4607      	mov	r7, r0
 80059b0:	9b06      	ldr	r3, [sp, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d05c      	beq.n	8005a70 <_dtoa_r+0xa78>
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4620      	mov	r0, r4
 80059ba:	f000 f923 	bl	8005c04 <_Balloc>
 80059be:	4605      	mov	r5, r0
 80059c0:	b928      	cbnz	r0, 80059ce <_dtoa_r+0x9d6>
 80059c2:	4b80      	ldr	r3, [pc, #512]	; (8005bc4 <_dtoa_r+0xbcc>)
 80059c4:	4602      	mov	r2, r0
 80059c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059ca:	f7ff bb2e 	b.w	800502a <_dtoa_r+0x32>
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	3202      	adds	r2, #2
 80059d2:	0092      	lsls	r2, r2, #2
 80059d4:	f107 010c 	add.w	r1, r7, #12
 80059d8:	300c      	adds	r0, #12
 80059da:	f000 f905 	bl	8005be8 <memcpy>
 80059de:	2201      	movs	r2, #1
 80059e0:	4629      	mov	r1, r5
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 fb20 	bl	8006028 <__lshift>
 80059e8:	9b00      	ldr	r3, [sp, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	9b00      	ldr	r3, [sp, #0]
 80059f0:	444b      	add	r3, r9
 80059f2:	9307      	str	r3, [sp, #28]
 80059f4:	9b02      	ldr	r3, [sp, #8]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	46b8      	mov	r8, r7
 80059fc:	9306      	str	r3, [sp, #24]
 80059fe:	4607      	mov	r7, r0
 8005a00:	9b01      	ldr	r3, [sp, #4]
 8005a02:	4631      	mov	r1, r6
 8005a04:	3b01      	subs	r3, #1
 8005a06:	4658      	mov	r0, fp
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	f7ff fa67 	bl	8004edc <quorem>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	3330      	adds	r3, #48	; 0x30
 8005a12:	9004      	str	r0, [sp, #16]
 8005a14:	4641      	mov	r1, r8
 8005a16:	4658      	mov	r0, fp
 8005a18:	9308      	str	r3, [sp, #32]
 8005a1a:	f000 fb71 	bl	8006100 <__mcmp>
 8005a1e:	463a      	mov	r2, r7
 8005a20:	4681      	mov	r9, r0
 8005a22:	4631      	mov	r1, r6
 8005a24:	4620      	mov	r0, r4
 8005a26:	f000 fb87 	bl	8006138 <__mdiff>
 8005a2a:	68c2      	ldr	r2, [r0, #12]
 8005a2c:	9b08      	ldr	r3, [sp, #32]
 8005a2e:	4605      	mov	r5, r0
 8005a30:	bb02      	cbnz	r2, 8005a74 <_dtoa_r+0xa7c>
 8005a32:	4601      	mov	r1, r0
 8005a34:	4658      	mov	r0, fp
 8005a36:	f000 fb63 	bl	8006100 <__mcmp>
 8005a3a:	9b08      	ldr	r3, [sp, #32]
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4620      	mov	r0, r4
 8005a42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005a46:	f000 f91d 	bl	8005c84 <_Bfree>
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a4e:	9d01      	ldr	r5, [sp, #4]
 8005a50:	ea43 0102 	orr.w	r1, r3, r2
 8005a54:	9b06      	ldr	r3, [sp, #24]
 8005a56:	430b      	orrs	r3, r1
 8005a58:	9b08      	ldr	r3, [sp, #32]
 8005a5a:	d10d      	bne.n	8005a78 <_dtoa_r+0xa80>
 8005a5c:	2b39      	cmp	r3, #57	; 0x39
 8005a5e:	d029      	beq.n	8005ab4 <_dtoa_r+0xabc>
 8005a60:	f1b9 0f00 	cmp.w	r9, #0
 8005a64:	dd01      	ble.n	8005a6a <_dtoa_r+0xa72>
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	3331      	adds	r3, #49	; 0x31
 8005a6a:	9a02      	ldr	r2, [sp, #8]
 8005a6c:	7013      	strb	r3, [r2, #0]
 8005a6e:	e774      	b.n	800595a <_dtoa_r+0x962>
 8005a70:	4638      	mov	r0, r7
 8005a72:	e7b9      	b.n	80059e8 <_dtoa_r+0x9f0>
 8005a74:	2201      	movs	r2, #1
 8005a76:	e7e2      	b.n	8005a3e <_dtoa_r+0xa46>
 8005a78:	f1b9 0f00 	cmp.w	r9, #0
 8005a7c:	db06      	blt.n	8005a8c <_dtoa_r+0xa94>
 8005a7e:	9905      	ldr	r1, [sp, #20]
 8005a80:	ea41 0909 	orr.w	r9, r1, r9
 8005a84:	9906      	ldr	r1, [sp, #24]
 8005a86:	ea59 0101 	orrs.w	r1, r9, r1
 8005a8a:	d120      	bne.n	8005ace <_dtoa_r+0xad6>
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	ddec      	ble.n	8005a6a <_dtoa_r+0xa72>
 8005a90:	4659      	mov	r1, fp
 8005a92:	2201      	movs	r2, #1
 8005a94:	4620      	mov	r0, r4
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	f000 fac6 	bl	8006028 <__lshift>
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4683      	mov	fp, r0
 8005aa0:	f000 fb2e 	bl	8006100 <__mcmp>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	dc02      	bgt.n	8005ab0 <_dtoa_r+0xab8>
 8005aaa:	d1de      	bne.n	8005a6a <_dtoa_r+0xa72>
 8005aac:	07da      	lsls	r2, r3, #31
 8005aae:	d5dc      	bpl.n	8005a6a <_dtoa_r+0xa72>
 8005ab0:	2b39      	cmp	r3, #57	; 0x39
 8005ab2:	d1d8      	bne.n	8005a66 <_dtoa_r+0xa6e>
 8005ab4:	9a02      	ldr	r2, [sp, #8]
 8005ab6:	2339      	movs	r3, #57	; 0x39
 8005ab8:	7013      	strb	r3, [r2, #0]
 8005aba:	462b      	mov	r3, r5
 8005abc:	461d      	mov	r5, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ac4:	2a39      	cmp	r2, #57	; 0x39
 8005ac6:	d050      	beq.n	8005b6a <_dtoa_r+0xb72>
 8005ac8:	3201      	adds	r2, #1
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	e745      	b.n	800595a <_dtoa_r+0x962>
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	dd03      	ble.n	8005ada <_dtoa_r+0xae2>
 8005ad2:	2b39      	cmp	r3, #57	; 0x39
 8005ad4:	d0ee      	beq.n	8005ab4 <_dtoa_r+0xabc>
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	e7c7      	b.n	8005a6a <_dtoa_r+0xa72>
 8005ada:	9a01      	ldr	r2, [sp, #4]
 8005adc:	9907      	ldr	r1, [sp, #28]
 8005ade:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ae2:	428a      	cmp	r2, r1
 8005ae4:	d02a      	beq.n	8005b3c <_dtoa_r+0xb44>
 8005ae6:	4659      	mov	r1, fp
 8005ae8:	2300      	movs	r3, #0
 8005aea:	220a      	movs	r2, #10
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f8eb 	bl	8005cc8 <__multadd>
 8005af2:	45b8      	cmp	r8, r7
 8005af4:	4683      	mov	fp, r0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	f04f 020a 	mov.w	r2, #10
 8005afe:	4641      	mov	r1, r8
 8005b00:	4620      	mov	r0, r4
 8005b02:	d107      	bne.n	8005b14 <_dtoa_r+0xb1c>
 8005b04:	f000 f8e0 	bl	8005cc8 <__multadd>
 8005b08:	4680      	mov	r8, r0
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	9b01      	ldr	r3, [sp, #4]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	e775      	b.n	8005a00 <_dtoa_r+0xa08>
 8005b14:	f000 f8d8 	bl	8005cc8 <__multadd>
 8005b18:	4639      	mov	r1, r7
 8005b1a:	4680      	mov	r8, r0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	220a      	movs	r2, #10
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 f8d1 	bl	8005cc8 <__multadd>
 8005b26:	4607      	mov	r7, r0
 8005b28:	e7f0      	b.n	8005b0c <_dtoa_r+0xb14>
 8005b2a:	f1b9 0f00 	cmp.w	r9, #0
 8005b2e:	9a00      	ldr	r2, [sp, #0]
 8005b30:	bfcc      	ite	gt
 8005b32:	464d      	movgt	r5, r9
 8005b34:	2501      	movle	r5, #1
 8005b36:	4415      	add	r5, r2
 8005b38:	f04f 0800 	mov.w	r8, #0
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4620      	mov	r0, r4
 8005b42:	9301      	str	r3, [sp, #4]
 8005b44:	f000 fa70 	bl	8006028 <__lshift>
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4683      	mov	fp, r0
 8005b4c:	f000 fad8 	bl	8006100 <__mcmp>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	dcb2      	bgt.n	8005aba <_dtoa_r+0xac2>
 8005b54:	d102      	bne.n	8005b5c <_dtoa_r+0xb64>
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	07db      	lsls	r3, r3, #31
 8005b5a:	d4ae      	bmi.n	8005aba <_dtoa_r+0xac2>
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	461d      	mov	r5, r3
 8005b60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b64:	2a30      	cmp	r2, #48	; 0x30
 8005b66:	d0fa      	beq.n	8005b5e <_dtoa_r+0xb66>
 8005b68:	e6f7      	b.n	800595a <_dtoa_r+0x962>
 8005b6a:	9a00      	ldr	r2, [sp, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d1a5      	bne.n	8005abc <_dtoa_r+0xac4>
 8005b70:	f10a 0a01 	add.w	sl, sl, #1
 8005b74:	2331      	movs	r3, #49	; 0x31
 8005b76:	e779      	b.n	8005a6c <_dtoa_r+0xa74>
 8005b78:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <_dtoa_r+0xbd0>)
 8005b7a:	f7ff baaf 	b.w	80050dc <_dtoa_r+0xe4>
 8005b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f47f aa86 	bne.w	8005092 <_dtoa_r+0x9a>
 8005b86:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <_dtoa_r+0xbd4>)
 8005b88:	f7ff baa8 	b.w	80050dc <_dtoa_r+0xe4>
 8005b8c:	f1b9 0f00 	cmp.w	r9, #0
 8005b90:	dc03      	bgt.n	8005b9a <_dtoa_r+0xba2>
 8005b92:	9b05      	ldr	r3, [sp, #20]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	f73f aec9 	bgt.w	800592c <_dtoa_r+0x934>
 8005b9a:	9d00      	ldr	r5, [sp, #0]
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	f7ff f99c 	bl	8004edc <quorem>
 8005ba4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ba8:	f805 3b01 	strb.w	r3, [r5], #1
 8005bac:	9a00      	ldr	r2, [sp, #0]
 8005bae:	1aaa      	subs	r2, r5, r2
 8005bb0:	4591      	cmp	r9, r2
 8005bb2:	ddba      	ble.n	8005b2a <_dtoa_r+0xb32>
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	220a      	movs	r2, #10
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 f884 	bl	8005cc8 <__multadd>
 8005bc0:	4683      	mov	fp, r0
 8005bc2:	e7eb      	b.n	8005b9c <_dtoa_r+0xba4>
 8005bc4:	0800838b 	.word	0x0800838b
 8005bc8:	080082e4 	.word	0x080082e4
 8005bcc:	08008308 	.word	0x08008308

08005bd0 <_localeconv_r>:
 8005bd0:	4800      	ldr	r0, [pc, #0]	; (8005bd4 <_localeconv_r+0x4>)
 8005bd2:	4770      	bx	lr
 8005bd4:	20000160 	.word	0x20000160

08005bd8 <malloc>:
 8005bd8:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <malloc+0xc>)
 8005bda:	4601      	mov	r1, r0
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	f000 bbef 	b.w	80063c0 <_malloc_r>
 8005be2:	bf00      	nop
 8005be4:	2000000c 	.word	0x2000000c

08005be8 <memcpy>:
 8005be8:	440a      	add	r2, r1
 8005bea:	4291      	cmp	r1, r2
 8005bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bf0:	d100      	bne.n	8005bf4 <memcpy+0xc>
 8005bf2:	4770      	bx	lr
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	d1f9      	bne.n	8005bf6 <memcpy+0xe>
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <_Balloc>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c08:	4604      	mov	r4, r0
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	b976      	cbnz	r6, 8005c2c <_Balloc+0x28>
 8005c0e:	2010      	movs	r0, #16
 8005c10:	f7ff ffe2 	bl	8005bd8 <malloc>
 8005c14:	4602      	mov	r2, r0
 8005c16:	6260      	str	r0, [r4, #36]	; 0x24
 8005c18:	b920      	cbnz	r0, 8005c24 <_Balloc+0x20>
 8005c1a:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <_Balloc+0x78>)
 8005c1c:	4818      	ldr	r0, [pc, #96]	; (8005c80 <_Balloc+0x7c>)
 8005c1e:	2166      	movs	r1, #102	; 0x66
 8005c20:	f000 fd94 	bl	800674c <__assert_func>
 8005c24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c28:	6006      	str	r6, [r0, #0]
 8005c2a:	60c6      	str	r6, [r0, #12]
 8005c2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c2e:	68f3      	ldr	r3, [r6, #12]
 8005c30:	b183      	cbz	r3, 8005c54 <_Balloc+0x50>
 8005c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c3a:	b9b8      	cbnz	r0, 8005c6c <_Balloc+0x68>
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c42:	1d72      	adds	r2, r6, #5
 8005c44:	0092      	lsls	r2, r2, #2
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 fb5a 	bl	8006300 <_calloc_r>
 8005c4c:	b160      	cbz	r0, 8005c68 <_Balloc+0x64>
 8005c4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c52:	e00e      	b.n	8005c72 <_Balloc+0x6e>
 8005c54:	2221      	movs	r2, #33	; 0x21
 8005c56:	2104      	movs	r1, #4
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fb51 	bl	8006300 <_calloc_r>
 8005c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c60:	60f0      	str	r0, [r6, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e4      	bne.n	8005c32 <_Balloc+0x2e>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	6802      	ldr	r2, [r0, #0]
 8005c6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c72:	2300      	movs	r3, #0
 8005c74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c78:	e7f7      	b.n	8005c6a <_Balloc+0x66>
 8005c7a:	bf00      	nop
 8005c7c:	08008315 	.word	0x08008315
 8005c80:	0800839c 	.word	0x0800839c

08005c84 <_Bfree>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c88:	4605      	mov	r5, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	b976      	cbnz	r6, 8005cac <_Bfree+0x28>
 8005c8e:	2010      	movs	r0, #16
 8005c90:	f7ff ffa2 	bl	8005bd8 <malloc>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6268      	str	r0, [r5, #36]	; 0x24
 8005c98:	b920      	cbnz	r0, 8005ca4 <_Bfree+0x20>
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <_Bfree+0x3c>)
 8005c9c:	4809      	ldr	r0, [pc, #36]	; (8005cc4 <_Bfree+0x40>)
 8005c9e:	218a      	movs	r1, #138	; 0x8a
 8005ca0:	f000 fd54 	bl	800674c <__assert_func>
 8005ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ca8:	6006      	str	r6, [r0, #0]
 8005caa:	60c6      	str	r6, [r0, #12]
 8005cac:	b13c      	cbz	r4, 8005cbe <_Bfree+0x3a>
 8005cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cb0:	6862      	ldr	r2, [r4, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cb8:	6021      	str	r1, [r4, #0]
 8005cba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	08008315 	.word	0x08008315
 8005cc4:	0800839c 	.word	0x0800839c

08005cc8 <__multadd>:
 8005cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	690e      	ldr	r6, [r1, #16]
 8005cce:	4607      	mov	r7, r0
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	f101 0014 	add.w	r0, r1, #20
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6805      	ldr	r5, [r0, #0]
 8005cdc:	b2a9      	uxth	r1, r5
 8005cde:	fb02 8101 	mla	r1, r2, r1, r8
 8005ce2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005ce6:	0c2d      	lsrs	r5, r5, #16
 8005ce8:	fb02 c505 	mla	r5, r2, r5, ip
 8005cec:	b289      	uxth	r1, r1
 8005cee:	3301      	adds	r3, #1
 8005cf0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005cf4:	429e      	cmp	r6, r3
 8005cf6:	f840 1b04 	str.w	r1, [r0], #4
 8005cfa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005cfe:	dcec      	bgt.n	8005cda <__multadd+0x12>
 8005d00:	f1b8 0f00 	cmp.w	r8, #0
 8005d04:	d022      	beq.n	8005d4c <__multadd+0x84>
 8005d06:	68a3      	ldr	r3, [r4, #8]
 8005d08:	42b3      	cmp	r3, r6
 8005d0a:	dc19      	bgt.n	8005d40 <__multadd+0x78>
 8005d0c:	6861      	ldr	r1, [r4, #4]
 8005d0e:	4638      	mov	r0, r7
 8005d10:	3101      	adds	r1, #1
 8005d12:	f7ff ff77 	bl	8005c04 <_Balloc>
 8005d16:	4605      	mov	r5, r0
 8005d18:	b928      	cbnz	r0, 8005d26 <__multadd+0x5e>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <__multadd+0x8c>)
 8005d1e:	480e      	ldr	r0, [pc, #56]	; (8005d58 <__multadd+0x90>)
 8005d20:	21b5      	movs	r1, #181	; 0xb5
 8005d22:	f000 fd13 	bl	800674c <__assert_func>
 8005d26:	6922      	ldr	r2, [r4, #16]
 8005d28:	3202      	adds	r2, #2
 8005d2a:	f104 010c 	add.w	r1, r4, #12
 8005d2e:	0092      	lsls	r2, r2, #2
 8005d30:	300c      	adds	r0, #12
 8005d32:	f7ff ff59 	bl	8005be8 <memcpy>
 8005d36:	4621      	mov	r1, r4
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7ff ffa3 	bl	8005c84 <_Bfree>
 8005d3e:	462c      	mov	r4, r5
 8005d40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005d44:	3601      	adds	r6, #1
 8005d46:	f8c3 8014 	str.w	r8, [r3, #20]
 8005d4a:	6126      	str	r6, [r4, #16]
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d52:	bf00      	nop
 8005d54:	0800838b 	.word	0x0800838b
 8005d58:	0800839c 	.word	0x0800839c

08005d5c <__hi0bits>:
 8005d5c:	0c03      	lsrs	r3, r0, #16
 8005d5e:	041b      	lsls	r3, r3, #16
 8005d60:	b9d3      	cbnz	r3, 8005d98 <__hi0bits+0x3c>
 8005d62:	0400      	lsls	r0, r0, #16
 8005d64:	2310      	movs	r3, #16
 8005d66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d6a:	bf04      	itt	eq
 8005d6c:	0200      	lsleq	r0, r0, #8
 8005d6e:	3308      	addeq	r3, #8
 8005d70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d74:	bf04      	itt	eq
 8005d76:	0100      	lsleq	r0, r0, #4
 8005d78:	3304      	addeq	r3, #4
 8005d7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d7e:	bf04      	itt	eq
 8005d80:	0080      	lsleq	r0, r0, #2
 8005d82:	3302      	addeq	r3, #2
 8005d84:	2800      	cmp	r0, #0
 8005d86:	db05      	blt.n	8005d94 <__hi0bits+0x38>
 8005d88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d8c:	f103 0301 	add.w	r3, r3, #1
 8005d90:	bf08      	it	eq
 8005d92:	2320      	moveq	r3, #32
 8005d94:	4618      	mov	r0, r3
 8005d96:	4770      	bx	lr
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e7e4      	b.n	8005d66 <__hi0bits+0xa>

08005d9c <__lo0bits>:
 8005d9c:	6803      	ldr	r3, [r0, #0]
 8005d9e:	f013 0207 	ands.w	r2, r3, #7
 8005da2:	4601      	mov	r1, r0
 8005da4:	d00b      	beq.n	8005dbe <__lo0bits+0x22>
 8005da6:	07da      	lsls	r2, r3, #31
 8005da8:	d424      	bmi.n	8005df4 <__lo0bits+0x58>
 8005daa:	0798      	lsls	r0, r3, #30
 8005dac:	bf49      	itett	mi
 8005dae:	085b      	lsrmi	r3, r3, #1
 8005db0:	089b      	lsrpl	r3, r3, #2
 8005db2:	2001      	movmi	r0, #1
 8005db4:	600b      	strmi	r3, [r1, #0]
 8005db6:	bf5c      	itt	pl
 8005db8:	600b      	strpl	r3, [r1, #0]
 8005dba:	2002      	movpl	r0, #2
 8005dbc:	4770      	bx	lr
 8005dbe:	b298      	uxth	r0, r3
 8005dc0:	b9b0      	cbnz	r0, 8005df0 <__lo0bits+0x54>
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	2010      	movs	r0, #16
 8005dc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005dca:	bf04      	itt	eq
 8005dcc:	0a1b      	lsreq	r3, r3, #8
 8005dce:	3008      	addeq	r0, #8
 8005dd0:	071a      	lsls	r2, r3, #28
 8005dd2:	bf04      	itt	eq
 8005dd4:	091b      	lsreq	r3, r3, #4
 8005dd6:	3004      	addeq	r0, #4
 8005dd8:	079a      	lsls	r2, r3, #30
 8005dda:	bf04      	itt	eq
 8005ddc:	089b      	lsreq	r3, r3, #2
 8005dde:	3002      	addeq	r0, #2
 8005de0:	07da      	lsls	r2, r3, #31
 8005de2:	d403      	bmi.n	8005dec <__lo0bits+0x50>
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	f100 0001 	add.w	r0, r0, #1
 8005dea:	d005      	beq.n	8005df8 <__lo0bits+0x5c>
 8005dec:	600b      	str	r3, [r1, #0]
 8005dee:	4770      	bx	lr
 8005df0:	4610      	mov	r0, r2
 8005df2:	e7e8      	b.n	8005dc6 <__lo0bits+0x2a>
 8005df4:	2000      	movs	r0, #0
 8005df6:	4770      	bx	lr
 8005df8:	2020      	movs	r0, #32
 8005dfa:	4770      	bx	lr

08005dfc <__i2b>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	460c      	mov	r4, r1
 8005e00:	2101      	movs	r1, #1
 8005e02:	f7ff feff 	bl	8005c04 <_Balloc>
 8005e06:	4602      	mov	r2, r0
 8005e08:	b928      	cbnz	r0, 8005e16 <__i2b+0x1a>
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <__i2b+0x24>)
 8005e0c:	4805      	ldr	r0, [pc, #20]	; (8005e24 <__i2b+0x28>)
 8005e0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e12:	f000 fc9b 	bl	800674c <__assert_func>
 8005e16:	2301      	movs	r3, #1
 8005e18:	6144      	str	r4, [r0, #20]
 8005e1a:	6103      	str	r3, [r0, #16]
 8005e1c:	bd10      	pop	{r4, pc}
 8005e1e:	bf00      	nop
 8005e20:	0800838b 	.word	0x0800838b
 8005e24:	0800839c 	.word	0x0800839c

08005e28 <__multiply>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	690a      	ldr	r2, [r1, #16]
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	bfb8      	it	lt
 8005e36:	460b      	movlt	r3, r1
 8005e38:	460d      	mov	r5, r1
 8005e3a:	bfbc      	itt	lt
 8005e3c:	4625      	movlt	r5, r4
 8005e3e:	461c      	movlt	r4, r3
 8005e40:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005e44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e48:	68ab      	ldr	r3, [r5, #8]
 8005e4a:	6869      	ldr	r1, [r5, #4]
 8005e4c:	eb0a 0709 	add.w	r7, sl, r9
 8005e50:	42bb      	cmp	r3, r7
 8005e52:	b085      	sub	sp, #20
 8005e54:	bfb8      	it	lt
 8005e56:	3101      	addlt	r1, #1
 8005e58:	f7ff fed4 	bl	8005c04 <_Balloc>
 8005e5c:	b930      	cbnz	r0, 8005e6c <__multiply+0x44>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <__multiply+0x144>)
 8005e62:	4843      	ldr	r0, [pc, #268]	; (8005f70 <__multiply+0x148>)
 8005e64:	f240 115d 	movw	r1, #349	; 0x15d
 8005e68:	f000 fc70 	bl	800674c <__assert_func>
 8005e6c:	f100 0614 	add.w	r6, r0, #20
 8005e70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005e74:	4633      	mov	r3, r6
 8005e76:	2200      	movs	r2, #0
 8005e78:	4543      	cmp	r3, r8
 8005e7a:	d31e      	bcc.n	8005eba <__multiply+0x92>
 8005e7c:	f105 0c14 	add.w	ip, r5, #20
 8005e80:	f104 0314 	add.w	r3, r4, #20
 8005e84:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005e88:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005e8c:	9202      	str	r2, [sp, #8]
 8005e8e:	ebac 0205 	sub.w	r2, ip, r5
 8005e92:	3a15      	subs	r2, #21
 8005e94:	f022 0203 	bic.w	r2, r2, #3
 8005e98:	3204      	adds	r2, #4
 8005e9a:	f105 0115 	add.w	r1, r5, #21
 8005e9e:	458c      	cmp	ip, r1
 8005ea0:	bf38      	it	cc
 8005ea2:	2204      	movcc	r2, #4
 8005ea4:	9201      	str	r2, [sp, #4]
 8005ea6:	9a02      	ldr	r2, [sp, #8]
 8005ea8:	9303      	str	r3, [sp, #12]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d808      	bhi.n	8005ec0 <__multiply+0x98>
 8005eae:	2f00      	cmp	r7, #0
 8005eb0:	dc55      	bgt.n	8005f5e <__multiply+0x136>
 8005eb2:	6107      	str	r7, [r0, #16]
 8005eb4:	b005      	add	sp, #20
 8005eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eba:	f843 2b04 	str.w	r2, [r3], #4
 8005ebe:	e7db      	b.n	8005e78 <__multiply+0x50>
 8005ec0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ec4:	f1ba 0f00 	cmp.w	sl, #0
 8005ec8:	d020      	beq.n	8005f0c <__multiply+0xe4>
 8005eca:	f105 0e14 	add.w	lr, r5, #20
 8005ece:	46b1      	mov	r9, r6
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005ed6:	f8d9 b000 	ldr.w	fp, [r9]
 8005eda:	b2a1      	uxth	r1, r4
 8005edc:	fa1f fb8b 	uxth.w	fp, fp
 8005ee0:	fb0a b101 	mla	r1, sl, r1, fp
 8005ee4:	4411      	add	r1, r2
 8005ee6:	f8d9 2000 	ldr.w	r2, [r9]
 8005eea:	0c24      	lsrs	r4, r4, #16
 8005eec:	0c12      	lsrs	r2, r2, #16
 8005eee:	fb0a 2404 	mla	r4, sl, r4, r2
 8005ef2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005ef6:	b289      	uxth	r1, r1
 8005ef8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005efc:	45f4      	cmp	ip, lr
 8005efe:	f849 1b04 	str.w	r1, [r9], #4
 8005f02:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005f06:	d8e4      	bhi.n	8005ed2 <__multiply+0xaa>
 8005f08:	9901      	ldr	r1, [sp, #4]
 8005f0a:	5072      	str	r2, [r6, r1]
 8005f0c:	9a03      	ldr	r2, [sp, #12]
 8005f0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f12:	3304      	adds	r3, #4
 8005f14:	f1b9 0f00 	cmp.w	r9, #0
 8005f18:	d01f      	beq.n	8005f5a <__multiply+0x132>
 8005f1a:	6834      	ldr	r4, [r6, #0]
 8005f1c:	f105 0114 	add.w	r1, r5, #20
 8005f20:	46b6      	mov	lr, r6
 8005f22:	f04f 0a00 	mov.w	sl, #0
 8005f26:	880a      	ldrh	r2, [r1, #0]
 8005f28:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005f2c:	fb09 b202 	mla	r2, r9, r2, fp
 8005f30:	4492      	add	sl, r2
 8005f32:	b2a4      	uxth	r4, r4
 8005f34:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005f38:	f84e 4b04 	str.w	r4, [lr], #4
 8005f3c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005f40:	f8be 2000 	ldrh.w	r2, [lr]
 8005f44:	0c24      	lsrs	r4, r4, #16
 8005f46:	fb09 2404 	mla	r4, r9, r4, r2
 8005f4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005f4e:	458c      	cmp	ip, r1
 8005f50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f54:	d8e7      	bhi.n	8005f26 <__multiply+0xfe>
 8005f56:	9a01      	ldr	r2, [sp, #4]
 8005f58:	50b4      	str	r4, [r6, r2]
 8005f5a:	3604      	adds	r6, #4
 8005f5c:	e7a3      	b.n	8005ea6 <__multiply+0x7e>
 8005f5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1a5      	bne.n	8005eb2 <__multiply+0x8a>
 8005f66:	3f01      	subs	r7, #1
 8005f68:	e7a1      	b.n	8005eae <__multiply+0x86>
 8005f6a:	bf00      	nop
 8005f6c:	0800838b 	.word	0x0800838b
 8005f70:	0800839c 	.word	0x0800839c

08005f74 <__pow5mult>:
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f78:	4615      	mov	r5, r2
 8005f7a:	f012 0203 	ands.w	r2, r2, #3
 8005f7e:	4606      	mov	r6, r0
 8005f80:	460f      	mov	r7, r1
 8005f82:	d007      	beq.n	8005f94 <__pow5mult+0x20>
 8005f84:	4c25      	ldr	r4, [pc, #148]	; (800601c <__pow5mult+0xa8>)
 8005f86:	3a01      	subs	r2, #1
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f8e:	f7ff fe9b 	bl	8005cc8 <__multadd>
 8005f92:	4607      	mov	r7, r0
 8005f94:	10ad      	asrs	r5, r5, #2
 8005f96:	d03d      	beq.n	8006014 <__pow5mult+0xa0>
 8005f98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f9a:	b97c      	cbnz	r4, 8005fbc <__pow5mult+0x48>
 8005f9c:	2010      	movs	r0, #16
 8005f9e:	f7ff fe1b 	bl	8005bd8 <malloc>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6270      	str	r0, [r6, #36]	; 0x24
 8005fa6:	b928      	cbnz	r0, 8005fb4 <__pow5mult+0x40>
 8005fa8:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <__pow5mult+0xac>)
 8005faa:	481e      	ldr	r0, [pc, #120]	; (8006024 <__pow5mult+0xb0>)
 8005fac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fb0:	f000 fbcc 	bl	800674c <__assert_func>
 8005fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fb8:	6004      	str	r4, [r0, #0]
 8005fba:	60c4      	str	r4, [r0, #12]
 8005fbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fc4:	b94c      	cbnz	r4, 8005fda <__pow5mult+0x66>
 8005fc6:	f240 2171 	movw	r1, #625	; 0x271
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ff16 	bl	8005dfc <__i2b>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	6003      	str	r3, [r0, #0]
 8005fda:	f04f 0900 	mov.w	r9, #0
 8005fde:	07eb      	lsls	r3, r5, #31
 8005fe0:	d50a      	bpl.n	8005ff8 <__pow5mult+0x84>
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff ff1e 	bl	8005e28 <__multiply>
 8005fec:	4639      	mov	r1, r7
 8005fee:	4680      	mov	r8, r0
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7ff fe47 	bl	8005c84 <_Bfree>
 8005ff6:	4647      	mov	r7, r8
 8005ff8:	106d      	asrs	r5, r5, #1
 8005ffa:	d00b      	beq.n	8006014 <__pow5mult+0xa0>
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	b938      	cbnz	r0, 8006010 <__pow5mult+0x9c>
 8006000:	4622      	mov	r2, r4
 8006002:	4621      	mov	r1, r4
 8006004:	4630      	mov	r0, r6
 8006006:	f7ff ff0f 	bl	8005e28 <__multiply>
 800600a:	6020      	str	r0, [r4, #0]
 800600c:	f8c0 9000 	str.w	r9, [r0]
 8006010:	4604      	mov	r4, r0
 8006012:	e7e4      	b.n	8005fde <__pow5mult+0x6a>
 8006014:	4638      	mov	r0, r7
 8006016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601a:	bf00      	nop
 800601c:	080084f0 	.word	0x080084f0
 8006020:	08008315 	.word	0x08008315
 8006024:	0800839c 	.word	0x0800839c

08006028 <__lshift>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	460c      	mov	r4, r1
 800602e:	6849      	ldr	r1, [r1, #4]
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	4607      	mov	r7, r0
 800603a:	4691      	mov	r9, r2
 800603c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006040:	f108 0601 	add.w	r6, r8, #1
 8006044:	42b3      	cmp	r3, r6
 8006046:	db0b      	blt.n	8006060 <__lshift+0x38>
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff fddb 	bl	8005c04 <_Balloc>
 800604e:	4605      	mov	r5, r0
 8006050:	b948      	cbnz	r0, 8006066 <__lshift+0x3e>
 8006052:	4602      	mov	r2, r0
 8006054:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <__lshift+0xd0>)
 8006056:	4829      	ldr	r0, [pc, #164]	; (80060fc <__lshift+0xd4>)
 8006058:	f240 11d9 	movw	r1, #473	; 0x1d9
 800605c:	f000 fb76 	bl	800674c <__assert_func>
 8006060:	3101      	adds	r1, #1
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	e7ee      	b.n	8006044 <__lshift+0x1c>
 8006066:	2300      	movs	r3, #0
 8006068:	f100 0114 	add.w	r1, r0, #20
 800606c:	f100 0210 	add.w	r2, r0, #16
 8006070:	4618      	mov	r0, r3
 8006072:	4553      	cmp	r3, sl
 8006074:	db33      	blt.n	80060de <__lshift+0xb6>
 8006076:	6920      	ldr	r0, [r4, #16]
 8006078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800607c:	f104 0314 	add.w	r3, r4, #20
 8006080:	f019 091f 	ands.w	r9, r9, #31
 8006084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800608c:	d02b      	beq.n	80060e6 <__lshift+0xbe>
 800608e:	f1c9 0e20 	rsb	lr, r9, #32
 8006092:	468a      	mov	sl, r1
 8006094:	2200      	movs	r2, #0
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	fa00 f009 	lsl.w	r0, r0, r9
 800609c:	4302      	orrs	r2, r0
 800609e:	f84a 2b04 	str.w	r2, [sl], #4
 80060a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a6:	459c      	cmp	ip, r3
 80060a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80060ac:	d8f3      	bhi.n	8006096 <__lshift+0x6e>
 80060ae:	ebac 0304 	sub.w	r3, ip, r4
 80060b2:	3b15      	subs	r3, #21
 80060b4:	f023 0303 	bic.w	r3, r3, #3
 80060b8:	3304      	adds	r3, #4
 80060ba:	f104 0015 	add.w	r0, r4, #21
 80060be:	4584      	cmp	ip, r0
 80060c0:	bf38      	it	cc
 80060c2:	2304      	movcc	r3, #4
 80060c4:	50ca      	str	r2, [r1, r3]
 80060c6:	b10a      	cbz	r2, 80060cc <__lshift+0xa4>
 80060c8:	f108 0602 	add.w	r6, r8, #2
 80060cc:	3e01      	subs	r6, #1
 80060ce:	4638      	mov	r0, r7
 80060d0:	612e      	str	r6, [r5, #16]
 80060d2:	4621      	mov	r1, r4
 80060d4:	f7ff fdd6 	bl	8005c84 <_Bfree>
 80060d8:	4628      	mov	r0, r5
 80060da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060de:	f842 0f04 	str.w	r0, [r2, #4]!
 80060e2:	3301      	adds	r3, #1
 80060e4:	e7c5      	b.n	8006072 <__lshift+0x4a>
 80060e6:	3904      	subs	r1, #4
 80060e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80060f0:	459c      	cmp	ip, r3
 80060f2:	d8f9      	bhi.n	80060e8 <__lshift+0xc0>
 80060f4:	e7ea      	b.n	80060cc <__lshift+0xa4>
 80060f6:	bf00      	nop
 80060f8:	0800838b 	.word	0x0800838b
 80060fc:	0800839c 	.word	0x0800839c

08006100 <__mcmp>:
 8006100:	b530      	push	{r4, r5, lr}
 8006102:	6902      	ldr	r2, [r0, #16]
 8006104:	690c      	ldr	r4, [r1, #16]
 8006106:	1b12      	subs	r2, r2, r4
 8006108:	d10e      	bne.n	8006128 <__mcmp+0x28>
 800610a:	f100 0314 	add.w	r3, r0, #20
 800610e:	3114      	adds	r1, #20
 8006110:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006114:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006118:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800611c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006120:	42a5      	cmp	r5, r4
 8006122:	d003      	beq.n	800612c <__mcmp+0x2c>
 8006124:	d305      	bcc.n	8006132 <__mcmp+0x32>
 8006126:	2201      	movs	r2, #1
 8006128:	4610      	mov	r0, r2
 800612a:	bd30      	pop	{r4, r5, pc}
 800612c:	4283      	cmp	r3, r0
 800612e:	d3f3      	bcc.n	8006118 <__mcmp+0x18>
 8006130:	e7fa      	b.n	8006128 <__mcmp+0x28>
 8006132:	f04f 32ff 	mov.w	r2, #4294967295
 8006136:	e7f7      	b.n	8006128 <__mcmp+0x28>

08006138 <__mdiff>:
 8006138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	460c      	mov	r4, r1
 800613e:	4606      	mov	r6, r0
 8006140:	4611      	mov	r1, r2
 8006142:	4620      	mov	r0, r4
 8006144:	4617      	mov	r7, r2
 8006146:	f7ff ffdb 	bl	8006100 <__mcmp>
 800614a:	1e05      	subs	r5, r0, #0
 800614c:	d110      	bne.n	8006170 <__mdiff+0x38>
 800614e:	4629      	mov	r1, r5
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff fd57 	bl	8005c04 <_Balloc>
 8006156:	b930      	cbnz	r0, 8006166 <__mdiff+0x2e>
 8006158:	4b39      	ldr	r3, [pc, #228]	; (8006240 <__mdiff+0x108>)
 800615a:	4602      	mov	r2, r0
 800615c:	f240 2132 	movw	r1, #562	; 0x232
 8006160:	4838      	ldr	r0, [pc, #224]	; (8006244 <__mdiff+0x10c>)
 8006162:	f000 faf3 	bl	800674c <__assert_func>
 8006166:	2301      	movs	r3, #1
 8006168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800616c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006170:	bfa4      	itt	ge
 8006172:	463b      	movge	r3, r7
 8006174:	4627      	movge	r7, r4
 8006176:	4630      	mov	r0, r6
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	bfa6      	itte	ge
 800617c:	461c      	movge	r4, r3
 800617e:	2500      	movge	r5, #0
 8006180:	2501      	movlt	r5, #1
 8006182:	f7ff fd3f 	bl	8005c04 <_Balloc>
 8006186:	b920      	cbnz	r0, 8006192 <__mdiff+0x5a>
 8006188:	4b2d      	ldr	r3, [pc, #180]	; (8006240 <__mdiff+0x108>)
 800618a:	4602      	mov	r2, r0
 800618c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006190:	e7e6      	b.n	8006160 <__mdiff+0x28>
 8006192:	693e      	ldr	r6, [r7, #16]
 8006194:	60c5      	str	r5, [r0, #12]
 8006196:	6925      	ldr	r5, [r4, #16]
 8006198:	f107 0114 	add.w	r1, r7, #20
 800619c:	f104 0914 	add.w	r9, r4, #20
 80061a0:	f100 0e14 	add.w	lr, r0, #20
 80061a4:	f107 0210 	add.w	r2, r7, #16
 80061a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80061ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80061b0:	46f2      	mov	sl, lr
 80061b2:	2700      	movs	r7, #0
 80061b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80061b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061bc:	fa1f f883 	uxth.w	r8, r3
 80061c0:	fa17 f78b 	uxtah	r7, r7, fp
 80061c4:	0c1b      	lsrs	r3, r3, #16
 80061c6:	eba7 0808 	sub.w	r8, r7, r8
 80061ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061d2:	fa1f f888 	uxth.w	r8, r8
 80061d6:	141f      	asrs	r7, r3, #16
 80061d8:	454d      	cmp	r5, r9
 80061da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061de:	f84a 3b04 	str.w	r3, [sl], #4
 80061e2:	d8e7      	bhi.n	80061b4 <__mdiff+0x7c>
 80061e4:	1b2b      	subs	r3, r5, r4
 80061e6:	3b15      	subs	r3, #21
 80061e8:	f023 0303 	bic.w	r3, r3, #3
 80061ec:	3304      	adds	r3, #4
 80061ee:	3415      	adds	r4, #21
 80061f0:	42a5      	cmp	r5, r4
 80061f2:	bf38      	it	cc
 80061f4:	2304      	movcc	r3, #4
 80061f6:	4419      	add	r1, r3
 80061f8:	4473      	add	r3, lr
 80061fa:	469e      	mov	lr, r3
 80061fc:	460d      	mov	r5, r1
 80061fe:	4565      	cmp	r5, ip
 8006200:	d30e      	bcc.n	8006220 <__mdiff+0xe8>
 8006202:	f10c 0203 	add.w	r2, ip, #3
 8006206:	1a52      	subs	r2, r2, r1
 8006208:	f022 0203 	bic.w	r2, r2, #3
 800620c:	3903      	subs	r1, #3
 800620e:	458c      	cmp	ip, r1
 8006210:	bf38      	it	cc
 8006212:	2200      	movcc	r2, #0
 8006214:	441a      	add	r2, r3
 8006216:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800621a:	b17b      	cbz	r3, 800623c <__mdiff+0x104>
 800621c:	6106      	str	r6, [r0, #16]
 800621e:	e7a5      	b.n	800616c <__mdiff+0x34>
 8006220:	f855 8b04 	ldr.w	r8, [r5], #4
 8006224:	fa17 f488 	uxtah	r4, r7, r8
 8006228:	1422      	asrs	r2, r4, #16
 800622a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800622e:	b2a4      	uxth	r4, r4
 8006230:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006234:	f84e 4b04 	str.w	r4, [lr], #4
 8006238:	1417      	asrs	r7, r2, #16
 800623a:	e7e0      	b.n	80061fe <__mdiff+0xc6>
 800623c:	3e01      	subs	r6, #1
 800623e:	e7ea      	b.n	8006216 <__mdiff+0xde>
 8006240:	0800838b 	.word	0x0800838b
 8006244:	0800839c 	.word	0x0800839c

08006248 <__d2b>:
 8006248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800624c:	4689      	mov	r9, r1
 800624e:	2101      	movs	r1, #1
 8006250:	ec57 6b10 	vmov	r6, r7, d0
 8006254:	4690      	mov	r8, r2
 8006256:	f7ff fcd5 	bl	8005c04 <_Balloc>
 800625a:	4604      	mov	r4, r0
 800625c:	b930      	cbnz	r0, 800626c <__d2b+0x24>
 800625e:	4602      	mov	r2, r0
 8006260:	4b25      	ldr	r3, [pc, #148]	; (80062f8 <__d2b+0xb0>)
 8006262:	4826      	ldr	r0, [pc, #152]	; (80062fc <__d2b+0xb4>)
 8006264:	f240 310a 	movw	r1, #778	; 0x30a
 8006268:	f000 fa70 	bl	800674c <__assert_func>
 800626c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006270:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006274:	bb35      	cbnz	r5, 80062c4 <__d2b+0x7c>
 8006276:	2e00      	cmp	r6, #0
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	d028      	beq.n	80062ce <__d2b+0x86>
 800627c:	4668      	mov	r0, sp
 800627e:	9600      	str	r6, [sp, #0]
 8006280:	f7ff fd8c 	bl	8005d9c <__lo0bits>
 8006284:	9900      	ldr	r1, [sp, #0]
 8006286:	b300      	cbz	r0, 80062ca <__d2b+0x82>
 8006288:	9a01      	ldr	r2, [sp, #4]
 800628a:	f1c0 0320 	rsb	r3, r0, #32
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	430b      	orrs	r3, r1
 8006294:	40c2      	lsrs	r2, r0
 8006296:	6163      	str	r3, [r4, #20]
 8006298:	9201      	str	r2, [sp, #4]
 800629a:	9b01      	ldr	r3, [sp, #4]
 800629c:	61a3      	str	r3, [r4, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bf14      	ite	ne
 80062a2:	2202      	movne	r2, #2
 80062a4:	2201      	moveq	r2, #1
 80062a6:	6122      	str	r2, [r4, #16]
 80062a8:	b1d5      	cbz	r5, 80062e0 <__d2b+0x98>
 80062aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062ae:	4405      	add	r5, r0
 80062b0:	f8c9 5000 	str.w	r5, [r9]
 80062b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062b8:	f8c8 0000 	str.w	r0, [r8]
 80062bc:	4620      	mov	r0, r4
 80062be:	b003      	add	sp, #12
 80062c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062c8:	e7d5      	b.n	8006276 <__d2b+0x2e>
 80062ca:	6161      	str	r1, [r4, #20]
 80062cc:	e7e5      	b.n	800629a <__d2b+0x52>
 80062ce:	a801      	add	r0, sp, #4
 80062d0:	f7ff fd64 	bl	8005d9c <__lo0bits>
 80062d4:	9b01      	ldr	r3, [sp, #4]
 80062d6:	6163      	str	r3, [r4, #20]
 80062d8:	2201      	movs	r2, #1
 80062da:	6122      	str	r2, [r4, #16]
 80062dc:	3020      	adds	r0, #32
 80062de:	e7e3      	b.n	80062a8 <__d2b+0x60>
 80062e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062e8:	f8c9 0000 	str.w	r0, [r9]
 80062ec:	6918      	ldr	r0, [r3, #16]
 80062ee:	f7ff fd35 	bl	8005d5c <__hi0bits>
 80062f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062f6:	e7df      	b.n	80062b8 <__d2b+0x70>
 80062f8:	0800838b 	.word	0x0800838b
 80062fc:	0800839c 	.word	0x0800839c

08006300 <_calloc_r>:
 8006300:	b513      	push	{r0, r1, r4, lr}
 8006302:	434a      	muls	r2, r1
 8006304:	4611      	mov	r1, r2
 8006306:	9201      	str	r2, [sp, #4]
 8006308:	f000 f85a 	bl	80063c0 <_malloc_r>
 800630c:	4604      	mov	r4, r0
 800630e:	b118      	cbz	r0, 8006318 <_calloc_r+0x18>
 8006310:	9a01      	ldr	r2, [sp, #4]
 8006312:	2100      	movs	r1, #0
 8006314:	f7fe f950 	bl	80045b8 <memset>
 8006318:	4620      	mov	r0, r4
 800631a:	b002      	add	sp, #8
 800631c:	bd10      	pop	{r4, pc}
	...

08006320 <_free_r>:
 8006320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006322:	2900      	cmp	r1, #0
 8006324:	d048      	beq.n	80063b8 <_free_r+0x98>
 8006326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800632a:	9001      	str	r0, [sp, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f1a1 0404 	sub.w	r4, r1, #4
 8006332:	bfb8      	it	lt
 8006334:	18e4      	addlt	r4, r4, r3
 8006336:	f000 fa65 	bl	8006804 <__malloc_lock>
 800633a:	4a20      	ldr	r2, [pc, #128]	; (80063bc <_free_r+0x9c>)
 800633c:	9801      	ldr	r0, [sp, #4]
 800633e:	6813      	ldr	r3, [r2, #0]
 8006340:	4615      	mov	r5, r2
 8006342:	b933      	cbnz	r3, 8006352 <_free_r+0x32>
 8006344:	6063      	str	r3, [r4, #4]
 8006346:	6014      	str	r4, [r2, #0]
 8006348:	b003      	add	sp, #12
 800634a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800634e:	f000 ba5f 	b.w	8006810 <__malloc_unlock>
 8006352:	42a3      	cmp	r3, r4
 8006354:	d90b      	bls.n	800636e <_free_r+0x4e>
 8006356:	6821      	ldr	r1, [r4, #0]
 8006358:	1862      	adds	r2, r4, r1
 800635a:	4293      	cmp	r3, r2
 800635c:	bf04      	itt	eq
 800635e:	681a      	ldreq	r2, [r3, #0]
 8006360:	685b      	ldreq	r3, [r3, #4]
 8006362:	6063      	str	r3, [r4, #4]
 8006364:	bf04      	itt	eq
 8006366:	1852      	addeq	r2, r2, r1
 8006368:	6022      	streq	r2, [r4, #0]
 800636a:	602c      	str	r4, [r5, #0]
 800636c:	e7ec      	b.n	8006348 <_free_r+0x28>
 800636e:	461a      	mov	r2, r3
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	b10b      	cbz	r3, 8006378 <_free_r+0x58>
 8006374:	42a3      	cmp	r3, r4
 8006376:	d9fa      	bls.n	800636e <_free_r+0x4e>
 8006378:	6811      	ldr	r1, [r2, #0]
 800637a:	1855      	adds	r5, r2, r1
 800637c:	42a5      	cmp	r5, r4
 800637e:	d10b      	bne.n	8006398 <_free_r+0x78>
 8006380:	6824      	ldr	r4, [r4, #0]
 8006382:	4421      	add	r1, r4
 8006384:	1854      	adds	r4, r2, r1
 8006386:	42a3      	cmp	r3, r4
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	d1dd      	bne.n	8006348 <_free_r+0x28>
 800638c:	681c      	ldr	r4, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	6053      	str	r3, [r2, #4]
 8006392:	4421      	add	r1, r4
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	e7d7      	b.n	8006348 <_free_r+0x28>
 8006398:	d902      	bls.n	80063a0 <_free_r+0x80>
 800639a:	230c      	movs	r3, #12
 800639c:	6003      	str	r3, [r0, #0]
 800639e:	e7d3      	b.n	8006348 <_free_r+0x28>
 80063a0:	6825      	ldr	r5, [r4, #0]
 80063a2:	1961      	adds	r1, r4, r5
 80063a4:	428b      	cmp	r3, r1
 80063a6:	bf04      	itt	eq
 80063a8:	6819      	ldreq	r1, [r3, #0]
 80063aa:	685b      	ldreq	r3, [r3, #4]
 80063ac:	6063      	str	r3, [r4, #4]
 80063ae:	bf04      	itt	eq
 80063b0:	1949      	addeq	r1, r1, r5
 80063b2:	6021      	streq	r1, [r4, #0]
 80063b4:	6054      	str	r4, [r2, #4]
 80063b6:	e7c7      	b.n	8006348 <_free_r+0x28>
 80063b8:	b003      	add	sp, #12
 80063ba:	bd30      	pop	{r4, r5, pc}
 80063bc:	20000200 	.word	0x20000200

080063c0 <_malloc_r>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	1ccd      	adds	r5, r1, #3
 80063c4:	f025 0503 	bic.w	r5, r5, #3
 80063c8:	3508      	adds	r5, #8
 80063ca:	2d0c      	cmp	r5, #12
 80063cc:	bf38      	it	cc
 80063ce:	250c      	movcc	r5, #12
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	4606      	mov	r6, r0
 80063d4:	db01      	blt.n	80063da <_malloc_r+0x1a>
 80063d6:	42a9      	cmp	r1, r5
 80063d8:	d903      	bls.n	80063e2 <_malloc_r+0x22>
 80063da:	230c      	movs	r3, #12
 80063dc:	6033      	str	r3, [r6, #0]
 80063de:	2000      	movs	r0, #0
 80063e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e2:	f000 fa0f 	bl	8006804 <__malloc_lock>
 80063e6:	4921      	ldr	r1, [pc, #132]	; (800646c <_malloc_r+0xac>)
 80063e8:	680a      	ldr	r2, [r1, #0]
 80063ea:	4614      	mov	r4, r2
 80063ec:	b99c      	cbnz	r4, 8006416 <_malloc_r+0x56>
 80063ee:	4f20      	ldr	r7, [pc, #128]	; (8006470 <_malloc_r+0xb0>)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	b923      	cbnz	r3, 80063fe <_malloc_r+0x3e>
 80063f4:	4621      	mov	r1, r4
 80063f6:	4630      	mov	r0, r6
 80063f8:	f000 f998 	bl	800672c <_sbrk_r>
 80063fc:	6038      	str	r0, [r7, #0]
 80063fe:	4629      	mov	r1, r5
 8006400:	4630      	mov	r0, r6
 8006402:	f000 f993 	bl	800672c <_sbrk_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d123      	bne.n	8006452 <_malloc_r+0x92>
 800640a:	230c      	movs	r3, #12
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	4630      	mov	r0, r6
 8006410:	f000 f9fe 	bl	8006810 <__malloc_unlock>
 8006414:	e7e3      	b.n	80063de <_malloc_r+0x1e>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	1b5b      	subs	r3, r3, r5
 800641a:	d417      	bmi.n	800644c <_malloc_r+0x8c>
 800641c:	2b0b      	cmp	r3, #11
 800641e:	d903      	bls.n	8006428 <_malloc_r+0x68>
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	441c      	add	r4, r3
 8006424:	6025      	str	r5, [r4, #0]
 8006426:	e004      	b.n	8006432 <_malloc_r+0x72>
 8006428:	6863      	ldr	r3, [r4, #4]
 800642a:	42a2      	cmp	r2, r4
 800642c:	bf0c      	ite	eq
 800642e:	600b      	streq	r3, [r1, #0]
 8006430:	6053      	strne	r3, [r2, #4]
 8006432:	4630      	mov	r0, r6
 8006434:	f000 f9ec 	bl	8006810 <__malloc_unlock>
 8006438:	f104 000b 	add.w	r0, r4, #11
 800643c:	1d23      	adds	r3, r4, #4
 800643e:	f020 0007 	bic.w	r0, r0, #7
 8006442:	1ac2      	subs	r2, r0, r3
 8006444:	d0cc      	beq.n	80063e0 <_malloc_r+0x20>
 8006446:	1a1b      	subs	r3, r3, r0
 8006448:	50a3      	str	r3, [r4, r2]
 800644a:	e7c9      	b.n	80063e0 <_malloc_r+0x20>
 800644c:	4622      	mov	r2, r4
 800644e:	6864      	ldr	r4, [r4, #4]
 8006450:	e7cc      	b.n	80063ec <_malloc_r+0x2c>
 8006452:	1cc4      	adds	r4, r0, #3
 8006454:	f024 0403 	bic.w	r4, r4, #3
 8006458:	42a0      	cmp	r0, r4
 800645a:	d0e3      	beq.n	8006424 <_malloc_r+0x64>
 800645c:	1a21      	subs	r1, r4, r0
 800645e:	4630      	mov	r0, r6
 8006460:	f000 f964 	bl	800672c <_sbrk_r>
 8006464:	3001      	adds	r0, #1
 8006466:	d1dd      	bne.n	8006424 <_malloc_r+0x64>
 8006468:	e7cf      	b.n	800640a <_malloc_r+0x4a>
 800646a:	bf00      	nop
 800646c:	20000200 	.word	0x20000200
 8006470:	20000204 	.word	0x20000204

08006474 <__ssputs_r>:
 8006474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	688e      	ldr	r6, [r1, #8]
 800647a:	429e      	cmp	r6, r3
 800647c:	4682      	mov	sl, r0
 800647e:	460c      	mov	r4, r1
 8006480:	4690      	mov	r8, r2
 8006482:	461f      	mov	r7, r3
 8006484:	d838      	bhi.n	80064f8 <__ssputs_r+0x84>
 8006486:	898a      	ldrh	r2, [r1, #12]
 8006488:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800648c:	d032      	beq.n	80064f4 <__ssputs_r+0x80>
 800648e:	6825      	ldr	r5, [r4, #0]
 8006490:	6909      	ldr	r1, [r1, #16]
 8006492:	eba5 0901 	sub.w	r9, r5, r1
 8006496:	6965      	ldr	r5, [r4, #20]
 8006498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800649c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064a0:	3301      	adds	r3, #1
 80064a2:	444b      	add	r3, r9
 80064a4:	106d      	asrs	r5, r5, #1
 80064a6:	429d      	cmp	r5, r3
 80064a8:	bf38      	it	cc
 80064aa:	461d      	movcc	r5, r3
 80064ac:	0553      	lsls	r3, r2, #21
 80064ae:	d531      	bpl.n	8006514 <__ssputs_r+0xa0>
 80064b0:	4629      	mov	r1, r5
 80064b2:	f7ff ff85 	bl	80063c0 <_malloc_r>
 80064b6:	4606      	mov	r6, r0
 80064b8:	b950      	cbnz	r0, 80064d0 <__ssputs_r+0x5c>
 80064ba:	230c      	movs	r3, #12
 80064bc:	f8ca 3000 	str.w	r3, [sl]
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d0:	6921      	ldr	r1, [r4, #16]
 80064d2:	464a      	mov	r2, r9
 80064d4:	f7ff fb88 	bl	8005be8 <memcpy>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	6126      	str	r6, [r4, #16]
 80064e6:	6165      	str	r5, [r4, #20]
 80064e8:	444e      	add	r6, r9
 80064ea:	eba5 0509 	sub.w	r5, r5, r9
 80064ee:	6026      	str	r6, [r4, #0]
 80064f0:	60a5      	str	r5, [r4, #8]
 80064f2:	463e      	mov	r6, r7
 80064f4:	42be      	cmp	r6, r7
 80064f6:	d900      	bls.n	80064fa <__ssputs_r+0x86>
 80064f8:	463e      	mov	r6, r7
 80064fa:	4632      	mov	r2, r6
 80064fc:	6820      	ldr	r0, [r4, #0]
 80064fe:	4641      	mov	r1, r8
 8006500:	f000 f966 	bl	80067d0 <memmove>
 8006504:	68a3      	ldr	r3, [r4, #8]
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	1b9b      	subs	r3, r3, r6
 800650a:	4432      	add	r2, r6
 800650c:	60a3      	str	r3, [r4, #8]
 800650e:	6022      	str	r2, [r4, #0]
 8006510:	2000      	movs	r0, #0
 8006512:	e7db      	b.n	80064cc <__ssputs_r+0x58>
 8006514:	462a      	mov	r2, r5
 8006516:	f000 f981 	bl	800681c <_realloc_r>
 800651a:	4606      	mov	r6, r0
 800651c:	2800      	cmp	r0, #0
 800651e:	d1e1      	bne.n	80064e4 <__ssputs_r+0x70>
 8006520:	6921      	ldr	r1, [r4, #16]
 8006522:	4650      	mov	r0, sl
 8006524:	f7ff fefc 	bl	8006320 <_free_r>
 8006528:	e7c7      	b.n	80064ba <__ssputs_r+0x46>
	...

0800652c <_svfiprintf_r>:
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	4698      	mov	r8, r3
 8006532:	898b      	ldrh	r3, [r1, #12]
 8006534:	061b      	lsls	r3, r3, #24
 8006536:	b09d      	sub	sp, #116	; 0x74
 8006538:	4607      	mov	r7, r0
 800653a:	460d      	mov	r5, r1
 800653c:	4614      	mov	r4, r2
 800653e:	d50e      	bpl.n	800655e <_svfiprintf_r+0x32>
 8006540:	690b      	ldr	r3, [r1, #16]
 8006542:	b963      	cbnz	r3, 800655e <_svfiprintf_r+0x32>
 8006544:	2140      	movs	r1, #64	; 0x40
 8006546:	f7ff ff3b 	bl	80063c0 <_malloc_r>
 800654a:	6028      	str	r0, [r5, #0]
 800654c:	6128      	str	r0, [r5, #16]
 800654e:	b920      	cbnz	r0, 800655a <_svfiprintf_r+0x2e>
 8006550:	230c      	movs	r3, #12
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	e0d1      	b.n	80066fe <_svfiprintf_r+0x1d2>
 800655a:	2340      	movs	r3, #64	; 0x40
 800655c:	616b      	str	r3, [r5, #20]
 800655e:	2300      	movs	r3, #0
 8006560:	9309      	str	r3, [sp, #36]	; 0x24
 8006562:	2320      	movs	r3, #32
 8006564:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006568:	f8cd 800c 	str.w	r8, [sp, #12]
 800656c:	2330      	movs	r3, #48	; 0x30
 800656e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006718 <_svfiprintf_r+0x1ec>
 8006572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006576:	f04f 0901 	mov.w	r9, #1
 800657a:	4623      	mov	r3, r4
 800657c:	469a      	mov	sl, r3
 800657e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006582:	b10a      	cbz	r2, 8006588 <_svfiprintf_r+0x5c>
 8006584:	2a25      	cmp	r2, #37	; 0x25
 8006586:	d1f9      	bne.n	800657c <_svfiprintf_r+0x50>
 8006588:	ebba 0b04 	subs.w	fp, sl, r4
 800658c:	d00b      	beq.n	80065a6 <_svfiprintf_r+0x7a>
 800658e:	465b      	mov	r3, fp
 8006590:	4622      	mov	r2, r4
 8006592:	4629      	mov	r1, r5
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff ff6d 	bl	8006474 <__ssputs_r>
 800659a:	3001      	adds	r0, #1
 800659c:	f000 80aa 	beq.w	80066f4 <_svfiprintf_r+0x1c8>
 80065a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a2:	445a      	add	r2, fp
 80065a4:	9209      	str	r2, [sp, #36]	; 0x24
 80065a6:	f89a 3000 	ldrb.w	r3, [sl]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80a2 	beq.w	80066f4 <_svfiprintf_r+0x1c8>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295
 80065b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ba:	f10a 0a01 	add.w	sl, sl, #1
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	9307      	str	r3, [sp, #28]
 80065c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065c6:	931a      	str	r3, [sp, #104]	; 0x68
 80065c8:	4654      	mov	r4, sl
 80065ca:	2205      	movs	r2, #5
 80065cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d0:	4851      	ldr	r0, [pc, #324]	; (8006718 <_svfiprintf_r+0x1ec>)
 80065d2:	f7f9 fe0d 	bl	80001f0 <memchr>
 80065d6:	9a04      	ldr	r2, [sp, #16]
 80065d8:	b9d8      	cbnz	r0, 8006612 <_svfiprintf_r+0xe6>
 80065da:	06d0      	lsls	r0, r2, #27
 80065dc:	bf44      	itt	mi
 80065de:	2320      	movmi	r3, #32
 80065e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065e4:	0711      	lsls	r1, r2, #28
 80065e6:	bf44      	itt	mi
 80065e8:	232b      	movmi	r3, #43	; 0x2b
 80065ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ee:	f89a 3000 	ldrb.w	r3, [sl]
 80065f2:	2b2a      	cmp	r3, #42	; 0x2a
 80065f4:	d015      	beq.n	8006622 <_svfiprintf_r+0xf6>
 80065f6:	9a07      	ldr	r2, [sp, #28]
 80065f8:	4654      	mov	r4, sl
 80065fa:	2000      	movs	r0, #0
 80065fc:	f04f 0c0a 	mov.w	ip, #10
 8006600:	4621      	mov	r1, r4
 8006602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006606:	3b30      	subs	r3, #48	; 0x30
 8006608:	2b09      	cmp	r3, #9
 800660a:	d94e      	bls.n	80066aa <_svfiprintf_r+0x17e>
 800660c:	b1b0      	cbz	r0, 800663c <_svfiprintf_r+0x110>
 800660e:	9207      	str	r2, [sp, #28]
 8006610:	e014      	b.n	800663c <_svfiprintf_r+0x110>
 8006612:	eba0 0308 	sub.w	r3, r0, r8
 8006616:	fa09 f303 	lsl.w	r3, r9, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	9304      	str	r3, [sp, #16]
 800661e:	46a2      	mov	sl, r4
 8006620:	e7d2      	b.n	80065c8 <_svfiprintf_r+0x9c>
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	1d19      	adds	r1, r3, #4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	9103      	str	r1, [sp, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	bfbb      	ittet	lt
 800662e:	425b      	neglt	r3, r3
 8006630:	f042 0202 	orrlt.w	r2, r2, #2
 8006634:	9307      	strge	r3, [sp, #28]
 8006636:	9307      	strlt	r3, [sp, #28]
 8006638:	bfb8      	it	lt
 800663a:	9204      	strlt	r2, [sp, #16]
 800663c:	7823      	ldrb	r3, [r4, #0]
 800663e:	2b2e      	cmp	r3, #46	; 0x2e
 8006640:	d10c      	bne.n	800665c <_svfiprintf_r+0x130>
 8006642:	7863      	ldrb	r3, [r4, #1]
 8006644:	2b2a      	cmp	r3, #42	; 0x2a
 8006646:	d135      	bne.n	80066b4 <_svfiprintf_r+0x188>
 8006648:	9b03      	ldr	r3, [sp, #12]
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	9203      	str	r2, [sp, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	bfb8      	it	lt
 8006654:	f04f 33ff 	movlt.w	r3, #4294967295
 8006658:	3402      	adds	r4, #2
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006728 <_svfiprintf_r+0x1fc>
 8006660:	7821      	ldrb	r1, [r4, #0]
 8006662:	2203      	movs	r2, #3
 8006664:	4650      	mov	r0, sl
 8006666:	f7f9 fdc3 	bl	80001f0 <memchr>
 800666a:	b140      	cbz	r0, 800667e <_svfiprintf_r+0x152>
 800666c:	2340      	movs	r3, #64	; 0x40
 800666e:	eba0 000a 	sub.w	r0, r0, sl
 8006672:	fa03 f000 	lsl.w	r0, r3, r0
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	4303      	orrs	r3, r0
 800667a:	3401      	adds	r4, #1
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006682:	4826      	ldr	r0, [pc, #152]	; (800671c <_svfiprintf_r+0x1f0>)
 8006684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006688:	2206      	movs	r2, #6
 800668a:	f7f9 fdb1 	bl	80001f0 <memchr>
 800668e:	2800      	cmp	r0, #0
 8006690:	d038      	beq.n	8006704 <_svfiprintf_r+0x1d8>
 8006692:	4b23      	ldr	r3, [pc, #140]	; (8006720 <_svfiprintf_r+0x1f4>)
 8006694:	bb1b      	cbnz	r3, 80066de <_svfiprintf_r+0x1b2>
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	3307      	adds	r3, #7
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	3308      	adds	r3, #8
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a4:	4433      	add	r3, r6
 80066a6:	9309      	str	r3, [sp, #36]	; 0x24
 80066a8:	e767      	b.n	800657a <_svfiprintf_r+0x4e>
 80066aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80066ae:	460c      	mov	r4, r1
 80066b0:	2001      	movs	r0, #1
 80066b2:	e7a5      	b.n	8006600 <_svfiprintf_r+0xd4>
 80066b4:	2300      	movs	r3, #0
 80066b6:	3401      	adds	r4, #1
 80066b8:	9305      	str	r3, [sp, #20]
 80066ba:	4619      	mov	r1, r3
 80066bc:	f04f 0c0a 	mov.w	ip, #10
 80066c0:	4620      	mov	r0, r4
 80066c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c6:	3a30      	subs	r2, #48	; 0x30
 80066c8:	2a09      	cmp	r2, #9
 80066ca:	d903      	bls.n	80066d4 <_svfiprintf_r+0x1a8>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0c5      	beq.n	800665c <_svfiprintf_r+0x130>
 80066d0:	9105      	str	r1, [sp, #20]
 80066d2:	e7c3      	b.n	800665c <_svfiprintf_r+0x130>
 80066d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066d8:	4604      	mov	r4, r0
 80066da:	2301      	movs	r3, #1
 80066dc:	e7f0      	b.n	80066c0 <_svfiprintf_r+0x194>
 80066de:	ab03      	add	r3, sp, #12
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	462a      	mov	r2, r5
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <_svfiprintf_r+0x1f8>)
 80066e6:	a904      	add	r1, sp, #16
 80066e8:	4638      	mov	r0, r7
 80066ea:	f7fe f80d 	bl	8004708 <_printf_float>
 80066ee:	1c42      	adds	r2, r0, #1
 80066f0:	4606      	mov	r6, r0
 80066f2:	d1d6      	bne.n	80066a2 <_svfiprintf_r+0x176>
 80066f4:	89ab      	ldrh	r3, [r5, #12]
 80066f6:	065b      	lsls	r3, r3, #25
 80066f8:	f53f af2c 	bmi.w	8006554 <_svfiprintf_r+0x28>
 80066fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066fe:	b01d      	add	sp, #116	; 0x74
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	ab03      	add	r3, sp, #12
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	462a      	mov	r2, r5
 800670a:	4b06      	ldr	r3, [pc, #24]	; (8006724 <_svfiprintf_r+0x1f8>)
 800670c:	a904      	add	r1, sp, #16
 800670e:	4638      	mov	r0, r7
 8006710:	f7fe fa9e 	bl	8004c50 <_printf_i>
 8006714:	e7eb      	b.n	80066ee <_svfiprintf_r+0x1c2>
 8006716:	bf00      	nop
 8006718:	080084fc 	.word	0x080084fc
 800671c:	08008506 	.word	0x08008506
 8006720:	08004709 	.word	0x08004709
 8006724:	08006475 	.word	0x08006475
 8006728:	08008502 	.word	0x08008502

0800672c <_sbrk_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	; (8006748 <_sbrk_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fb f85a 	bl	80017f0 <_sbrk>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_sbrk_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_sbrk_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	200012e0 	.word	0x200012e0

0800674c <__assert_func>:
 800674c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800674e:	4614      	mov	r4, r2
 8006750:	461a      	mov	r2, r3
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <__assert_func+0x2c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4605      	mov	r5, r0
 8006758:	68d8      	ldr	r0, [r3, #12]
 800675a:	b14c      	cbz	r4, 8006770 <__assert_func+0x24>
 800675c:	4b07      	ldr	r3, [pc, #28]	; (800677c <__assert_func+0x30>)
 800675e:	9100      	str	r1, [sp, #0]
 8006760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006764:	4906      	ldr	r1, [pc, #24]	; (8006780 <__assert_func+0x34>)
 8006766:	462b      	mov	r3, r5
 8006768:	f000 f80e 	bl	8006788 <fiprintf>
 800676c:	f000 faa4 	bl	8006cb8 <abort>
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <__assert_func+0x38>)
 8006772:	461c      	mov	r4, r3
 8006774:	e7f3      	b.n	800675e <__assert_func+0x12>
 8006776:	bf00      	nop
 8006778:	2000000c 	.word	0x2000000c
 800677c:	0800850d 	.word	0x0800850d
 8006780:	0800851a 	.word	0x0800851a
 8006784:	08008548 	.word	0x08008548

08006788 <fiprintf>:
 8006788:	b40e      	push	{r1, r2, r3}
 800678a:	b503      	push	{r0, r1, lr}
 800678c:	4601      	mov	r1, r0
 800678e:	ab03      	add	r3, sp, #12
 8006790:	4805      	ldr	r0, [pc, #20]	; (80067a8 <fiprintf+0x20>)
 8006792:	f853 2b04 	ldr.w	r2, [r3], #4
 8006796:	6800      	ldr	r0, [r0, #0]
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	f000 f88f 	bl	80068bc <_vfiprintf_r>
 800679e:	b002      	add	sp, #8
 80067a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a4:	b003      	add	sp, #12
 80067a6:	4770      	bx	lr
 80067a8:	2000000c 	.word	0x2000000c

080067ac <__ascii_mbtowc>:
 80067ac:	b082      	sub	sp, #8
 80067ae:	b901      	cbnz	r1, 80067b2 <__ascii_mbtowc+0x6>
 80067b0:	a901      	add	r1, sp, #4
 80067b2:	b142      	cbz	r2, 80067c6 <__ascii_mbtowc+0x1a>
 80067b4:	b14b      	cbz	r3, 80067ca <__ascii_mbtowc+0x1e>
 80067b6:	7813      	ldrb	r3, [r2, #0]
 80067b8:	600b      	str	r3, [r1, #0]
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	1e10      	subs	r0, r2, #0
 80067be:	bf18      	it	ne
 80067c0:	2001      	movne	r0, #1
 80067c2:	b002      	add	sp, #8
 80067c4:	4770      	bx	lr
 80067c6:	4610      	mov	r0, r2
 80067c8:	e7fb      	b.n	80067c2 <__ascii_mbtowc+0x16>
 80067ca:	f06f 0001 	mvn.w	r0, #1
 80067ce:	e7f8      	b.n	80067c2 <__ascii_mbtowc+0x16>

080067d0 <memmove>:
 80067d0:	4288      	cmp	r0, r1
 80067d2:	b510      	push	{r4, lr}
 80067d4:	eb01 0402 	add.w	r4, r1, r2
 80067d8:	d902      	bls.n	80067e0 <memmove+0x10>
 80067da:	4284      	cmp	r4, r0
 80067dc:	4623      	mov	r3, r4
 80067de:	d807      	bhi.n	80067f0 <memmove+0x20>
 80067e0:	1e43      	subs	r3, r0, #1
 80067e2:	42a1      	cmp	r1, r4
 80067e4:	d008      	beq.n	80067f8 <memmove+0x28>
 80067e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ee:	e7f8      	b.n	80067e2 <memmove+0x12>
 80067f0:	4402      	add	r2, r0
 80067f2:	4601      	mov	r1, r0
 80067f4:	428a      	cmp	r2, r1
 80067f6:	d100      	bne.n	80067fa <memmove+0x2a>
 80067f8:	bd10      	pop	{r4, pc}
 80067fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006802:	e7f7      	b.n	80067f4 <memmove+0x24>

08006804 <__malloc_lock>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__malloc_lock+0x8>)
 8006806:	f000 bc17 	b.w	8007038 <__retarget_lock_acquire_recursive>
 800680a:	bf00      	nop
 800680c:	200012e8 	.word	0x200012e8

08006810 <__malloc_unlock>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__malloc_unlock+0x8>)
 8006812:	f000 bc12 	b.w	800703a <__retarget_lock_release_recursive>
 8006816:	bf00      	nop
 8006818:	200012e8 	.word	0x200012e8

0800681c <_realloc_r>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	4607      	mov	r7, r0
 8006820:	4614      	mov	r4, r2
 8006822:	460e      	mov	r6, r1
 8006824:	b921      	cbnz	r1, 8006830 <_realloc_r+0x14>
 8006826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800682a:	4611      	mov	r1, r2
 800682c:	f7ff bdc8 	b.w	80063c0 <_malloc_r>
 8006830:	b922      	cbnz	r2, 800683c <_realloc_r+0x20>
 8006832:	f7ff fd75 	bl	8006320 <_free_r>
 8006836:	4625      	mov	r5, r4
 8006838:	4628      	mov	r0, r5
 800683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683c:	f000 fc62 	bl	8007104 <_malloc_usable_size_r>
 8006840:	42a0      	cmp	r0, r4
 8006842:	d20f      	bcs.n	8006864 <_realloc_r+0x48>
 8006844:	4621      	mov	r1, r4
 8006846:	4638      	mov	r0, r7
 8006848:	f7ff fdba 	bl	80063c0 <_malloc_r>
 800684c:	4605      	mov	r5, r0
 800684e:	2800      	cmp	r0, #0
 8006850:	d0f2      	beq.n	8006838 <_realloc_r+0x1c>
 8006852:	4631      	mov	r1, r6
 8006854:	4622      	mov	r2, r4
 8006856:	f7ff f9c7 	bl	8005be8 <memcpy>
 800685a:	4631      	mov	r1, r6
 800685c:	4638      	mov	r0, r7
 800685e:	f7ff fd5f 	bl	8006320 <_free_r>
 8006862:	e7e9      	b.n	8006838 <_realloc_r+0x1c>
 8006864:	4635      	mov	r5, r6
 8006866:	e7e7      	b.n	8006838 <_realloc_r+0x1c>

08006868 <__sfputc_r>:
 8006868:	6893      	ldr	r3, [r2, #8]
 800686a:	3b01      	subs	r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	b410      	push	{r4}
 8006870:	6093      	str	r3, [r2, #8]
 8006872:	da08      	bge.n	8006886 <__sfputc_r+0x1e>
 8006874:	6994      	ldr	r4, [r2, #24]
 8006876:	42a3      	cmp	r3, r4
 8006878:	db01      	blt.n	800687e <__sfputc_r+0x16>
 800687a:	290a      	cmp	r1, #10
 800687c:	d103      	bne.n	8006886 <__sfputc_r+0x1e>
 800687e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006882:	f000 b94b 	b.w	8006b1c <__swbuf_r>
 8006886:	6813      	ldr	r3, [r2, #0]
 8006888:	1c58      	adds	r0, r3, #1
 800688a:	6010      	str	r0, [r2, #0]
 800688c:	7019      	strb	r1, [r3, #0]
 800688e:	4608      	mov	r0, r1
 8006890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006894:	4770      	bx	lr

08006896 <__sfputs_r>:
 8006896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006898:	4606      	mov	r6, r0
 800689a:	460f      	mov	r7, r1
 800689c:	4614      	mov	r4, r2
 800689e:	18d5      	adds	r5, r2, r3
 80068a0:	42ac      	cmp	r4, r5
 80068a2:	d101      	bne.n	80068a8 <__sfputs_r+0x12>
 80068a4:	2000      	movs	r0, #0
 80068a6:	e007      	b.n	80068b8 <__sfputs_r+0x22>
 80068a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ac:	463a      	mov	r2, r7
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff ffda 	bl	8006868 <__sfputc_r>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d1f3      	bne.n	80068a0 <__sfputs_r+0xa>
 80068b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068bc <_vfiprintf_r>:
 80068bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	460d      	mov	r5, r1
 80068c2:	b09d      	sub	sp, #116	; 0x74
 80068c4:	4614      	mov	r4, r2
 80068c6:	4698      	mov	r8, r3
 80068c8:	4606      	mov	r6, r0
 80068ca:	b118      	cbz	r0, 80068d4 <_vfiprintf_r+0x18>
 80068cc:	6983      	ldr	r3, [r0, #24]
 80068ce:	b90b      	cbnz	r3, 80068d4 <_vfiprintf_r+0x18>
 80068d0:	f000 fb14 	bl	8006efc <__sinit>
 80068d4:	4b89      	ldr	r3, [pc, #548]	; (8006afc <_vfiprintf_r+0x240>)
 80068d6:	429d      	cmp	r5, r3
 80068d8:	d11b      	bne.n	8006912 <_vfiprintf_r+0x56>
 80068da:	6875      	ldr	r5, [r6, #4]
 80068dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068de:	07d9      	lsls	r1, r3, #31
 80068e0:	d405      	bmi.n	80068ee <_vfiprintf_r+0x32>
 80068e2:	89ab      	ldrh	r3, [r5, #12]
 80068e4:	059a      	lsls	r2, r3, #22
 80068e6:	d402      	bmi.n	80068ee <_vfiprintf_r+0x32>
 80068e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ea:	f000 fba5 	bl	8007038 <__retarget_lock_acquire_recursive>
 80068ee:	89ab      	ldrh	r3, [r5, #12]
 80068f0:	071b      	lsls	r3, r3, #28
 80068f2:	d501      	bpl.n	80068f8 <_vfiprintf_r+0x3c>
 80068f4:	692b      	ldr	r3, [r5, #16]
 80068f6:	b9eb      	cbnz	r3, 8006934 <_vfiprintf_r+0x78>
 80068f8:	4629      	mov	r1, r5
 80068fa:	4630      	mov	r0, r6
 80068fc:	f000 f96e 	bl	8006bdc <__swsetup_r>
 8006900:	b1c0      	cbz	r0, 8006934 <_vfiprintf_r+0x78>
 8006902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006904:	07dc      	lsls	r4, r3, #31
 8006906:	d50e      	bpl.n	8006926 <_vfiprintf_r+0x6a>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	b01d      	add	sp, #116	; 0x74
 800690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006912:	4b7b      	ldr	r3, [pc, #492]	; (8006b00 <_vfiprintf_r+0x244>)
 8006914:	429d      	cmp	r5, r3
 8006916:	d101      	bne.n	800691c <_vfiprintf_r+0x60>
 8006918:	68b5      	ldr	r5, [r6, #8]
 800691a:	e7df      	b.n	80068dc <_vfiprintf_r+0x20>
 800691c:	4b79      	ldr	r3, [pc, #484]	; (8006b04 <_vfiprintf_r+0x248>)
 800691e:	429d      	cmp	r5, r3
 8006920:	bf08      	it	eq
 8006922:	68f5      	ldreq	r5, [r6, #12]
 8006924:	e7da      	b.n	80068dc <_vfiprintf_r+0x20>
 8006926:	89ab      	ldrh	r3, [r5, #12]
 8006928:	0598      	lsls	r0, r3, #22
 800692a:	d4ed      	bmi.n	8006908 <_vfiprintf_r+0x4c>
 800692c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800692e:	f000 fb84 	bl	800703a <__retarget_lock_release_recursive>
 8006932:	e7e9      	b.n	8006908 <_vfiprintf_r+0x4c>
 8006934:	2300      	movs	r3, #0
 8006936:	9309      	str	r3, [sp, #36]	; 0x24
 8006938:	2320      	movs	r3, #32
 800693a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800693e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006942:	2330      	movs	r3, #48	; 0x30
 8006944:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b08 <_vfiprintf_r+0x24c>
 8006948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800694c:	f04f 0901 	mov.w	r9, #1
 8006950:	4623      	mov	r3, r4
 8006952:	469a      	mov	sl, r3
 8006954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006958:	b10a      	cbz	r2, 800695e <_vfiprintf_r+0xa2>
 800695a:	2a25      	cmp	r2, #37	; 0x25
 800695c:	d1f9      	bne.n	8006952 <_vfiprintf_r+0x96>
 800695e:	ebba 0b04 	subs.w	fp, sl, r4
 8006962:	d00b      	beq.n	800697c <_vfiprintf_r+0xc0>
 8006964:	465b      	mov	r3, fp
 8006966:	4622      	mov	r2, r4
 8006968:	4629      	mov	r1, r5
 800696a:	4630      	mov	r0, r6
 800696c:	f7ff ff93 	bl	8006896 <__sfputs_r>
 8006970:	3001      	adds	r0, #1
 8006972:	f000 80aa 	beq.w	8006aca <_vfiprintf_r+0x20e>
 8006976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006978:	445a      	add	r2, fp
 800697a:	9209      	str	r2, [sp, #36]	; 0x24
 800697c:	f89a 3000 	ldrb.w	r3, [sl]
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80a2 	beq.w	8006aca <_vfiprintf_r+0x20e>
 8006986:	2300      	movs	r3, #0
 8006988:	f04f 32ff 	mov.w	r2, #4294967295
 800698c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006990:	f10a 0a01 	add.w	sl, sl, #1
 8006994:	9304      	str	r3, [sp, #16]
 8006996:	9307      	str	r3, [sp, #28]
 8006998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800699c:	931a      	str	r3, [sp, #104]	; 0x68
 800699e:	4654      	mov	r4, sl
 80069a0:	2205      	movs	r2, #5
 80069a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a6:	4858      	ldr	r0, [pc, #352]	; (8006b08 <_vfiprintf_r+0x24c>)
 80069a8:	f7f9 fc22 	bl	80001f0 <memchr>
 80069ac:	9a04      	ldr	r2, [sp, #16]
 80069ae:	b9d8      	cbnz	r0, 80069e8 <_vfiprintf_r+0x12c>
 80069b0:	06d1      	lsls	r1, r2, #27
 80069b2:	bf44      	itt	mi
 80069b4:	2320      	movmi	r3, #32
 80069b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ba:	0713      	lsls	r3, r2, #28
 80069bc:	bf44      	itt	mi
 80069be:	232b      	movmi	r3, #43	; 0x2b
 80069c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c4:	f89a 3000 	ldrb.w	r3, [sl]
 80069c8:	2b2a      	cmp	r3, #42	; 0x2a
 80069ca:	d015      	beq.n	80069f8 <_vfiprintf_r+0x13c>
 80069cc:	9a07      	ldr	r2, [sp, #28]
 80069ce:	4654      	mov	r4, sl
 80069d0:	2000      	movs	r0, #0
 80069d2:	f04f 0c0a 	mov.w	ip, #10
 80069d6:	4621      	mov	r1, r4
 80069d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069dc:	3b30      	subs	r3, #48	; 0x30
 80069de:	2b09      	cmp	r3, #9
 80069e0:	d94e      	bls.n	8006a80 <_vfiprintf_r+0x1c4>
 80069e2:	b1b0      	cbz	r0, 8006a12 <_vfiprintf_r+0x156>
 80069e4:	9207      	str	r2, [sp, #28]
 80069e6:	e014      	b.n	8006a12 <_vfiprintf_r+0x156>
 80069e8:	eba0 0308 	sub.w	r3, r0, r8
 80069ec:	fa09 f303 	lsl.w	r3, r9, r3
 80069f0:	4313      	orrs	r3, r2
 80069f2:	9304      	str	r3, [sp, #16]
 80069f4:	46a2      	mov	sl, r4
 80069f6:	e7d2      	b.n	800699e <_vfiprintf_r+0xe2>
 80069f8:	9b03      	ldr	r3, [sp, #12]
 80069fa:	1d19      	adds	r1, r3, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	9103      	str	r1, [sp, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bfbb      	ittet	lt
 8006a04:	425b      	neglt	r3, r3
 8006a06:	f042 0202 	orrlt.w	r2, r2, #2
 8006a0a:	9307      	strge	r3, [sp, #28]
 8006a0c:	9307      	strlt	r3, [sp, #28]
 8006a0e:	bfb8      	it	lt
 8006a10:	9204      	strlt	r2, [sp, #16]
 8006a12:	7823      	ldrb	r3, [r4, #0]
 8006a14:	2b2e      	cmp	r3, #46	; 0x2e
 8006a16:	d10c      	bne.n	8006a32 <_vfiprintf_r+0x176>
 8006a18:	7863      	ldrb	r3, [r4, #1]
 8006a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1c:	d135      	bne.n	8006a8a <_vfiprintf_r+0x1ce>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	1d1a      	adds	r2, r3, #4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	9203      	str	r2, [sp, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bfb8      	it	lt
 8006a2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a2e:	3402      	adds	r4, #2
 8006a30:	9305      	str	r3, [sp, #20]
 8006a32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b18 <_vfiprintf_r+0x25c>
 8006a36:	7821      	ldrb	r1, [r4, #0]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	f7f9 fbd8 	bl	80001f0 <memchr>
 8006a40:	b140      	cbz	r0, 8006a54 <_vfiprintf_r+0x198>
 8006a42:	2340      	movs	r3, #64	; 0x40
 8006a44:	eba0 000a 	sub.w	r0, r0, sl
 8006a48:	fa03 f000 	lsl.w	r0, r3, r0
 8006a4c:	9b04      	ldr	r3, [sp, #16]
 8006a4e:	4303      	orrs	r3, r0
 8006a50:	3401      	adds	r4, #1
 8006a52:	9304      	str	r3, [sp, #16]
 8006a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a58:	482c      	ldr	r0, [pc, #176]	; (8006b0c <_vfiprintf_r+0x250>)
 8006a5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a5e:	2206      	movs	r2, #6
 8006a60:	f7f9 fbc6 	bl	80001f0 <memchr>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d03f      	beq.n	8006ae8 <_vfiprintf_r+0x22c>
 8006a68:	4b29      	ldr	r3, [pc, #164]	; (8006b10 <_vfiprintf_r+0x254>)
 8006a6a:	bb1b      	cbnz	r3, 8006ab4 <_vfiprintf_r+0x1f8>
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	3307      	adds	r3, #7
 8006a70:	f023 0307 	bic.w	r3, r3, #7
 8006a74:	3308      	adds	r3, #8
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	443b      	add	r3, r7
 8006a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7e:	e767      	b.n	8006950 <_vfiprintf_r+0x94>
 8006a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a84:	460c      	mov	r4, r1
 8006a86:	2001      	movs	r0, #1
 8006a88:	e7a5      	b.n	80069d6 <_vfiprintf_r+0x11a>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	3401      	adds	r4, #1
 8006a8e:	9305      	str	r3, [sp, #20]
 8006a90:	4619      	mov	r1, r3
 8006a92:	f04f 0c0a 	mov.w	ip, #10
 8006a96:	4620      	mov	r0, r4
 8006a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a9c:	3a30      	subs	r2, #48	; 0x30
 8006a9e:	2a09      	cmp	r2, #9
 8006aa0:	d903      	bls.n	8006aaa <_vfiprintf_r+0x1ee>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0c5      	beq.n	8006a32 <_vfiprintf_r+0x176>
 8006aa6:	9105      	str	r1, [sp, #20]
 8006aa8:	e7c3      	b.n	8006a32 <_vfiprintf_r+0x176>
 8006aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aae:	4604      	mov	r4, r0
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e7f0      	b.n	8006a96 <_vfiprintf_r+0x1da>
 8006ab4:	ab03      	add	r3, sp, #12
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	462a      	mov	r2, r5
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <_vfiprintf_r+0x258>)
 8006abc:	a904      	add	r1, sp, #16
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7fd fe22 	bl	8004708 <_printf_float>
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	1c78      	adds	r0, r7, #1
 8006ac8:	d1d6      	bne.n	8006a78 <_vfiprintf_r+0x1bc>
 8006aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006acc:	07d9      	lsls	r1, r3, #31
 8006ace:	d405      	bmi.n	8006adc <_vfiprintf_r+0x220>
 8006ad0:	89ab      	ldrh	r3, [r5, #12]
 8006ad2:	059a      	lsls	r2, r3, #22
 8006ad4:	d402      	bmi.n	8006adc <_vfiprintf_r+0x220>
 8006ad6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad8:	f000 faaf 	bl	800703a <__retarget_lock_release_recursive>
 8006adc:	89ab      	ldrh	r3, [r5, #12]
 8006ade:	065b      	lsls	r3, r3, #25
 8006ae0:	f53f af12 	bmi.w	8006908 <_vfiprintf_r+0x4c>
 8006ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ae6:	e711      	b.n	800690c <_vfiprintf_r+0x50>
 8006ae8:	ab03      	add	r3, sp, #12
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	462a      	mov	r2, r5
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <_vfiprintf_r+0x258>)
 8006af0:	a904      	add	r1, sp, #16
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7fe f8ac 	bl	8004c50 <_printf_i>
 8006af8:	e7e4      	b.n	8006ac4 <_vfiprintf_r+0x208>
 8006afa:	bf00      	nop
 8006afc:	08008674 	.word	0x08008674
 8006b00:	08008694 	.word	0x08008694
 8006b04:	08008654 	.word	0x08008654
 8006b08:	080084fc 	.word	0x080084fc
 8006b0c:	08008506 	.word	0x08008506
 8006b10:	08004709 	.word	0x08004709
 8006b14:	08006897 	.word	0x08006897
 8006b18:	08008502 	.word	0x08008502

08006b1c <__swbuf_r>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	460e      	mov	r6, r1
 8006b20:	4614      	mov	r4, r2
 8006b22:	4605      	mov	r5, r0
 8006b24:	b118      	cbz	r0, 8006b2e <__swbuf_r+0x12>
 8006b26:	6983      	ldr	r3, [r0, #24]
 8006b28:	b90b      	cbnz	r3, 8006b2e <__swbuf_r+0x12>
 8006b2a:	f000 f9e7 	bl	8006efc <__sinit>
 8006b2e:	4b21      	ldr	r3, [pc, #132]	; (8006bb4 <__swbuf_r+0x98>)
 8006b30:	429c      	cmp	r4, r3
 8006b32:	d12b      	bne.n	8006b8c <__swbuf_r+0x70>
 8006b34:	686c      	ldr	r4, [r5, #4]
 8006b36:	69a3      	ldr	r3, [r4, #24]
 8006b38:	60a3      	str	r3, [r4, #8]
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	071a      	lsls	r2, r3, #28
 8006b3e:	d52f      	bpl.n	8006ba0 <__swbuf_r+0x84>
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	b36b      	cbz	r3, 8006ba0 <__swbuf_r+0x84>
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	1ac0      	subs	r0, r0, r3
 8006b4a:	6963      	ldr	r3, [r4, #20]
 8006b4c:	b2f6      	uxtb	r6, r6
 8006b4e:	4283      	cmp	r3, r0
 8006b50:	4637      	mov	r7, r6
 8006b52:	dc04      	bgt.n	8006b5e <__swbuf_r+0x42>
 8006b54:	4621      	mov	r1, r4
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 f93c 	bl	8006dd4 <_fflush_r>
 8006b5c:	bb30      	cbnz	r0, 8006bac <__swbuf_r+0x90>
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	60a3      	str	r3, [r4, #8]
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	6022      	str	r2, [r4, #0]
 8006b6a:	701e      	strb	r6, [r3, #0]
 8006b6c:	6963      	ldr	r3, [r4, #20]
 8006b6e:	3001      	adds	r0, #1
 8006b70:	4283      	cmp	r3, r0
 8006b72:	d004      	beq.n	8006b7e <__swbuf_r+0x62>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	07db      	lsls	r3, r3, #31
 8006b78:	d506      	bpl.n	8006b88 <__swbuf_r+0x6c>
 8006b7a:	2e0a      	cmp	r6, #10
 8006b7c:	d104      	bne.n	8006b88 <__swbuf_r+0x6c>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 f927 	bl	8006dd4 <_fflush_r>
 8006b86:	b988      	cbnz	r0, 8006bac <__swbuf_r+0x90>
 8006b88:	4638      	mov	r0, r7
 8006b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <__swbuf_r+0x9c>)
 8006b8e:	429c      	cmp	r4, r3
 8006b90:	d101      	bne.n	8006b96 <__swbuf_r+0x7a>
 8006b92:	68ac      	ldr	r4, [r5, #8]
 8006b94:	e7cf      	b.n	8006b36 <__swbuf_r+0x1a>
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <__swbuf_r+0xa0>)
 8006b98:	429c      	cmp	r4, r3
 8006b9a:	bf08      	it	eq
 8006b9c:	68ec      	ldreq	r4, [r5, #12]
 8006b9e:	e7ca      	b.n	8006b36 <__swbuf_r+0x1a>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 f81a 	bl	8006bdc <__swsetup_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d0cb      	beq.n	8006b44 <__swbuf_r+0x28>
 8006bac:	f04f 37ff 	mov.w	r7, #4294967295
 8006bb0:	e7ea      	b.n	8006b88 <__swbuf_r+0x6c>
 8006bb2:	bf00      	nop
 8006bb4:	08008674 	.word	0x08008674
 8006bb8:	08008694 	.word	0x08008694
 8006bbc:	08008654 	.word	0x08008654

08006bc0 <__ascii_wctomb>:
 8006bc0:	b149      	cbz	r1, 8006bd6 <__ascii_wctomb+0x16>
 8006bc2:	2aff      	cmp	r2, #255	; 0xff
 8006bc4:	bf85      	ittet	hi
 8006bc6:	238a      	movhi	r3, #138	; 0x8a
 8006bc8:	6003      	strhi	r3, [r0, #0]
 8006bca:	700a      	strbls	r2, [r1, #0]
 8006bcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006bd0:	bf98      	it	ls
 8006bd2:	2001      	movls	r0, #1
 8006bd4:	4770      	bx	lr
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	4770      	bx	lr
	...

08006bdc <__swsetup_r>:
 8006bdc:	4b32      	ldr	r3, [pc, #200]	; (8006ca8 <__swsetup_r+0xcc>)
 8006bde:	b570      	push	{r4, r5, r6, lr}
 8006be0:	681d      	ldr	r5, [r3, #0]
 8006be2:	4606      	mov	r6, r0
 8006be4:	460c      	mov	r4, r1
 8006be6:	b125      	cbz	r5, 8006bf2 <__swsetup_r+0x16>
 8006be8:	69ab      	ldr	r3, [r5, #24]
 8006bea:	b913      	cbnz	r3, 8006bf2 <__swsetup_r+0x16>
 8006bec:	4628      	mov	r0, r5
 8006bee:	f000 f985 	bl	8006efc <__sinit>
 8006bf2:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <__swsetup_r+0xd0>)
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	d10f      	bne.n	8006c18 <__swsetup_r+0x3c>
 8006bf8:	686c      	ldr	r4, [r5, #4]
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c00:	0719      	lsls	r1, r3, #28
 8006c02:	d42c      	bmi.n	8006c5e <__swsetup_r+0x82>
 8006c04:	06dd      	lsls	r5, r3, #27
 8006c06:	d411      	bmi.n	8006c2c <__swsetup_r+0x50>
 8006c08:	2309      	movs	r3, #9
 8006c0a:	6033      	str	r3, [r6, #0]
 8006c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	f04f 30ff 	mov.w	r0, #4294967295
 8006c16:	e03e      	b.n	8006c96 <__swsetup_r+0xba>
 8006c18:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <__swsetup_r+0xd4>)
 8006c1a:	429c      	cmp	r4, r3
 8006c1c:	d101      	bne.n	8006c22 <__swsetup_r+0x46>
 8006c1e:	68ac      	ldr	r4, [r5, #8]
 8006c20:	e7eb      	b.n	8006bfa <__swsetup_r+0x1e>
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <__swsetup_r+0xd8>)
 8006c24:	429c      	cmp	r4, r3
 8006c26:	bf08      	it	eq
 8006c28:	68ec      	ldreq	r4, [r5, #12]
 8006c2a:	e7e6      	b.n	8006bfa <__swsetup_r+0x1e>
 8006c2c:	0758      	lsls	r0, r3, #29
 8006c2e:	d512      	bpl.n	8006c56 <__swsetup_r+0x7a>
 8006c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c32:	b141      	cbz	r1, 8006c46 <__swsetup_r+0x6a>
 8006c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	d002      	beq.n	8006c42 <__swsetup_r+0x66>
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f7ff fb6f 	bl	8006320 <_free_r>
 8006c42:	2300      	movs	r3, #0
 8006c44:	6363      	str	r3, [r4, #52]	; 0x34
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4c:	81a3      	strh	r3, [r4, #12]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	6063      	str	r3, [r4, #4]
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f043 0308 	orr.w	r3, r3, #8
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	b94b      	cbnz	r3, 8006c76 <__swsetup_r+0x9a>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6c:	d003      	beq.n	8006c76 <__swsetup_r+0x9a>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4630      	mov	r0, r6
 8006c72:	f000 fa07 	bl	8007084 <__smakebuf_r>
 8006c76:	89a0      	ldrh	r0, [r4, #12]
 8006c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7c:	f010 0301 	ands.w	r3, r0, #1
 8006c80:	d00a      	beq.n	8006c98 <__swsetup_r+0xbc>
 8006c82:	2300      	movs	r3, #0
 8006c84:	60a3      	str	r3, [r4, #8]
 8006c86:	6963      	ldr	r3, [r4, #20]
 8006c88:	425b      	negs	r3, r3
 8006c8a:	61a3      	str	r3, [r4, #24]
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	b943      	cbnz	r3, 8006ca2 <__swsetup_r+0xc6>
 8006c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c94:	d1ba      	bne.n	8006c0c <__swsetup_r+0x30>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	0781      	lsls	r1, r0, #30
 8006c9a:	bf58      	it	pl
 8006c9c:	6963      	ldrpl	r3, [r4, #20]
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	e7f4      	b.n	8006c8c <__swsetup_r+0xb0>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e7f7      	b.n	8006c96 <__swsetup_r+0xba>
 8006ca6:	bf00      	nop
 8006ca8:	2000000c 	.word	0x2000000c
 8006cac:	08008674 	.word	0x08008674
 8006cb0:	08008694 	.word	0x08008694
 8006cb4:	08008654 	.word	0x08008654

08006cb8 <abort>:
 8006cb8:	b508      	push	{r3, lr}
 8006cba:	2006      	movs	r0, #6
 8006cbc:	f000 fa52 	bl	8007164 <raise>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	f7fa fd1d 	bl	8001700 <_exit>
	...

08006cc8 <__sflush_r>:
 8006cc8:	898a      	ldrh	r2, [r1, #12]
 8006cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cce:	4605      	mov	r5, r0
 8006cd0:	0710      	lsls	r0, r2, #28
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	d458      	bmi.n	8006d88 <__sflush_r+0xc0>
 8006cd6:	684b      	ldr	r3, [r1, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dc05      	bgt.n	8006ce8 <__sflush_r+0x20>
 8006cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dc02      	bgt.n	8006ce8 <__sflush_r+0x20>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	d0f9      	beq.n	8006ce2 <__sflush_r+0x1a>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cf4:	682f      	ldr	r7, [r5, #0]
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	d032      	beq.n	8006d60 <__sflush_r+0x98>
 8006cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	075a      	lsls	r2, r3, #29
 8006d00:	d505      	bpl.n	8006d0e <__sflush_r+0x46>
 8006d02:	6863      	ldr	r3, [r4, #4]
 8006d04:	1ac0      	subs	r0, r0, r3
 8006d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d08:	b10b      	cbz	r3, 8006d0e <__sflush_r+0x46>
 8006d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d0c:	1ac0      	subs	r0, r0, r3
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4602      	mov	r2, r0
 8006d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d14:	6a21      	ldr	r1, [r4, #32]
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b0      	blx	r6
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	d106      	bne.n	8006d2e <__sflush_r+0x66>
 8006d20:	6829      	ldr	r1, [r5, #0]
 8006d22:	291d      	cmp	r1, #29
 8006d24:	d82c      	bhi.n	8006d80 <__sflush_r+0xb8>
 8006d26:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <__sflush_r+0x108>)
 8006d28:	40ca      	lsrs	r2, r1
 8006d2a:	07d6      	lsls	r6, r2, #31
 8006d2c:	d528      	bpl.n	8006d80 <__sflush_r+0xb8>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	6062      	str	r2, [r4, #4]
 8006d32:	04d9      	lsls	r1, r3, #19
 8006d34:	6922      	ldr	r2, [r4, #16]
 8006d36:	6022      	str	r2, [r4, #0]
 8006d38:	d504      	bpl.n	8006d44 <__sflush_r+0x7c>
 8006d3a:	1c42      	adds	r2, r0, #1
 8006d3c:	d101      	bne.n	8006d42 <__sflush_r+0x7a>
 8006d3e:	682b      	ldr	r3, [r5, #0]
 8006d40:	b903      	cbnz	r3, 8006d44 <__sflush_r+0x7c>
 8006d42:	6560      	str	r0, [r4, #84]	; 0x54
 8006d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d46:	602f      	str	r7, [r5, #0]
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	d0ca      	beq.n	8006ce2 <__sflush_r+0x1a>
 8006d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d50:	4299      	cmp	r1, r3
 8006d52:	d002      	beq.n	8006d5a <__sflush_r+0x92>
 8006d54:	4628      	mov	r0, r5
 8006d56:	f7ff fae3 	bl	8006320 <_free_r>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d5e:	e7c1      	b.n	8006ce4 <__sflush_r+0x1c>
 8006d60:	6a21      	ldr	r1, [r4, #32]
 8006d62:	2301      	movs	r3, #1
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b0      	blx	r6
 8006d68:	1c41      	adds	r1, r0, #1
 8006d6a:	d1c7      	bne.n	8006cfc <__sflush_r+0x34>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0c4      	beq.n	8006cfc <__sflush_r+0x34>
 8006d72:	2b1d      	cmp	r3, #29
 8006d74:	d001      	beq.n	8006d7a <__sflush_r+0xb2>
 8006d76:	2b16      	cmp	r3, #22
 8006d78:	d101      	bne.n	8006d7e <__sflush_r+0xb6>
 8006d7a:	602f      	str	r7, [r5, #0]
 8006d7c:	e7b1      	b.n	8006ce2 <__sflush_r+0x1a>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	e7ad      	b.n	8006ce4 <__sflush_r+0x1c>
 8006d88:	690f      	ldr	r7, [r1, #16]
 8006d8a:	2f00      	cmp	r7, #0
 8006d8c:	d0a9      	beq.n	8006ce2 <__sflush_r+0x1a>
 8006d8e:	0793      	lsls	r3, r2, #30
 8006d90:	680e      	ldr	r6, [r1, #0]
 8006d92:	bf08      	it	eq
 8006d94:	694b      	ldreq	r3, [r1, #20]
 8006d96:	600f      	str	r7, [r1, #0]
 8006d98:	bf18      	it	ne
 8006d9a:	2300      	movne	r3, #0
 8006d9c:	eba6 0807 	sub.w	r8, r6, r7
 8006da0:	608b      	str	r3, [r1, #8]
 8006da2:	f1b8 0f00 	cmp.w	r8, #0
 8006da6:	dd9c      	ble.n	8006ce2 <__sflush_r+0x1a>
 8006da8:	6a21      	ldr	r1, [r4, #32]
 8006daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dac:	4643      	mov	r3, r8
 8006dae:	463a      	mov	r2, r7
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b0      	blx	r6
 8006db4:	2800      	cmp	r0, #0
 8006db6:	dc06      	bgt.n	8006dc6 <__sflush_r+0xfe>
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e78e      	b.n	8006ce4 <__sflush_r+0x1c>
 8006dc6:	4407      	add	r7, r0
 8006dc8:	eba8 0800 	sub.w	r8, r8, r0
 8006dcc:	e7e9      	b.n	8006da2 <__sflush_r+0xda>
 8006dce:	bf00      	nop
 8006dd0:	20400001 	.word	0x20400001

08006dd4 <_fflush_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	690b      	ldr	r3, [r1, #16]
 8006dd8:	4605      	mov	r5, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	b913      	cbnz	r3, 8006de4 <_fflush_r+0x10>
 8006dde:	2500      	movs	r5, #0
 8006de0:	4628      	mov	r0, r5
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	b118      	cbz	r0, 8006dee <_fflush_r+0x1a>
 8006de6:	6983      	ldr	r3, [r0, #24]
 8006de8:	b90b      	cbnz	r3, 8006dee <_fflush_r+0x1a>
 8006dea:	f000 f887 	bl	8006efc <__sinit>
 8006dee:	4b14      	ldr	r3, [pc, #80]	; (8006e40 <_fflush_r+0x6c>)
 8006df0:	429c      	cmp	r4, r3
 8006df2:	d11b      	bne.n	8006e2c <_fflush_r+0x58>
 8006df4:	686c      	ldr	r4, [r5, #4]
 8006df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0ef      	beq.n	8006dde <_fflush_r+0xa>
 8006dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e00:	07d0      	lsls	r0, r2, #31
 8006e02:	d404      	bmi.n	8006e0e <_fflush_r+0x3a>
 8006e04:	0599      	lsls	r1, r3, #22
 8006e06:	d402      	bmi.n	8006e0e <_fflush_r+0x3a>
 8006e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0a:	f000 f915 	bl	8007038 <__retarget_lock_acquire_recursive>
 8006e0e:	4628      	mov	r0, r5
 8006e10:	4621      	mov	r1, r4
 8006e12:	f7ff ff59 	bl	8006cc8 <__sflush_r>
 8006e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e18:	07da      	lsls	r2, r3, #31
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	d4e0      	bmi.n	8006de0 <_fflush_r+0xc>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	059b      	lsls	r3, r3, #22
 8006e22:	d4dd      	bmi.n	8006de0 <_fflush_r+0xc>
 8006e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e26:	f000 f908 	bl	800703a <__retarget_lock_release_recursive>
 8006e2a:	e7d9      	b.n	8006de0 <_fflush_r+0xc>
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <_fflush_r+0x70>)
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d101      	bne.n	8006e36 <_fflush_r+0x62>
 8006e32:	68ac      	ldr	r4, [r5, #8]
 8006e34:	e7df      	b.n	8006df6 <_fflush_r+0x22>
 8006e36:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <_fflush_r+0x74>)
 8006e38:	429c      	cmp	r4, r3
 8006e3a:	bf08      	it	eq
 8006e3c:	68ec      	ldreq	r4, [r5, #12]
 8006e3e:	e7da      	b.n	8006df6 <_fflush_r+0x22>
 8006e40:	08008674 	.word	0x08008674
 8006e44:	08008694 	.word	0x08008694
 8006e48:	08008654 	.word	0x08008654

08006e4c <std>:
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	4604      	mov	r4, r0
 8006e52:	e9c0 3300 	strd	r3, r3, [r0]
 8006e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e5a:	6083      	str	r3, [r0, #8]
 8006e5c:	8181      	strh	r1, [r0, #12]
 8006e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006e60:	81c2      	strh	r2, [r0, #14]
 8006e62:	6183      	str	r3, [r0, #24]
 8006e64:	4619      	mov	r1, r3
 8006e66:	2208      	movs	r2, #8
 8006e68:	305c      	adds	r0, #92	; 0x5c
 8006e6a:	f7fd fba5 	bl	80045b8 <memset>
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <std+0x38>)
 8006e70:	6263      	str	r3, [r4, #36]	; 0x24
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <std+0x3c>)
 8006e74:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <std+0x40>)
 8006e78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <std+0x44>)
 8006e7c:	6224      	str	r4, [r4, #32]
 8006e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	bf00      	nop
 8006e84:	0800719d 	.word	0x0800719d
 8006e88:	080071bf 	.word	0x080071bf
 8006e8c:	080071f7 	.word	0x080071f7
 8006e90:	0800721b 	.word	0x0800721b

08006e94 <_cleanup_r>:
 8006e94:	4901      	ldr	r1, [pc, #4]	; (8006e9c <_cleanup_r+0x8>)
 8006e96:	f000 b8af 	b.w	8006ff8 <_fwalk_reent>
 8006e9a:	bf00      	nop
 8006e9c:	08006dd5 	.word	0x08006dd5

08006ea0 <__sfmoreglue>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	1e4a      	subs	r2, r1, #1
 8006ea4:	2568      	movs	r5, #104	; 0x68
 8006ea6:	4355      	muls	r5, r2
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eae:	f7ff fa87 	bl	80063c0 <_malloc_r>
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	b140      	cbz	r0, 8006ec8 <__sfmoreglue+0x28>
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	e9c0 1600 	strd	r1, r6, [r0]
 8006ebc:	300c      	adds	r0, #12
 8006ebe:	60a0      	str	r0, [r4, #8]
 8006ec0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ec4:	f7fd fb78 	bl	80045b8 <memset>
 8006ec8:	4620      	mov	r0, r4
 8006eca:	bd70      	pop	{r4, r5, r6, pc}

08006ecc <__sfp_lock_acquire>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__sfp_lock_acquire+0x8>)
 8006ece:	f000 b8b3 	b.w	8007038 <__retarget_lock_acquire_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	200012ec 	.word	0x200012ec

08006ed8 <__sfp_lock_release>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__sfp_lock_release+0x8>)
 8006eda:	f000 b8ae 	b.w	800703a <__retarget_lock_release_recursive>
 8006ede:	bf00      	nop
 8006ee0:	200012ec 	.word	0x200012ec

08006ee4 <__sinit_lock_acquire>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__sinit_lock_acquire+0x8>)
 8006ee6:	f000 b8a7 	b.w	8007038 <__retarget_lock_acquire_recursive>
 8006eea:	bf00      	nop
 8006eec:	200012e7 	.word	0x200012e7

08006ef0 <__sinit_lock_release>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	; (8006ef8 <__sinit_lock_release+0x8>)
 8006ef2:	f000 b8a2 	b.w	800703a <__retarget_lock_release_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	200012e7 	.word	0x200012e7

08006efc <__sinit>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	4604      	mov	r4, r0
 8006f00:	f7ff fff0 	bl	8006ee4 <__sinit_lock_acquire>
 8006f04:	69a3      	ldr	r3, [r4, #24]
 8006f06:	b11b      	cbz	r3, 8006f10 <__sinit+0x14>
 8006f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f0c:	f7ff bff0 	b.w	8006ef0 <__sinit_lock_release>
 8006f10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f14:	6523      	str	r3, [r4, #80]	; 0x50
 8006f16:	4b13      	ldr	r3, [pc, #76]	; (8006f64 <__sinit+0x68>)
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <__sinit+0x6c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f1e:	42a3      	cmp	r3, r4
 8006f20:	bf04      	itt	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	61a3      	streq	r3, [r4, #24]
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 f820 	bl	8006f6c <__sfp>
 8006f2c:	6060      	str	r0, [r4, #4]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 f81c 	bl	8006f6c <__sfp>
 8006f34:	60a0      	str	r0, [r4, #8]
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f818 	bl	8006f6c <__sfp>
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	60e0      	str	r0, [r4, #12]
 8006f40:	2104      	movs	r1, #4
 8006f42:	6860      	ldr	r0, [r4, #4]
 8006f44:	f7ff ff82 	bl	8006e4c <std>
 8006f48:	68a0      	ldr	r0, [r4, #8]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	2109      	movs	r1, #9
 8006f4e:	f7ff ff7d 	bl	8006e4c <std>
 8006f52:	68e0      	ldr	r0, [r4, #12]
 8006f54:	2202      	movs	r2, #2
 8006f56:	2112      	movs	r1, #18
 8006f58:	f7ff ff78 	bl	8006e4c <std>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	61a3      	str	r3, [r4, #24]
 8006f60:	e7d2      	b.n	8006f08 <__sinit+0xc>
 8006f62:	bf00      	nop
 8006f64:	080082d0 	.word	0x080082d0
 8006f68:	08006e95 	.word	0x08006e95

08006f6c <__sfp>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	4607      	mov	r7, r0
 8006f70:	f7ff ffac 	bl	8006ecc <__sfp_lock_acquire>
 8006f74:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <__sfp+0x84>)
 8006f76:	681e      	ldr	r6, [r3, #0]
 8006f78:	69b3      	ldr	r3, [r6, #24]
 8006f7a:	b913      	cbnz	r3, 8006f82 <__sfp+0x16>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f7ff ffbd 	bl	8006efc <__sinit>
 8006f82:	3648      	adds	r6, #72	; 0x48
 8006f84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	d503      	bpl.n	8006f94 <__sfp+0x28>
 8006f8c:	6833      	ldr	r3, [r6, #0]
 8006f8e:	b30b      	cbz	r3, 8006fd4 <__sfp+0x68>
 8006f90:	6836      	ldr	r6, [r6, #0]
 8006f92:	e7f7      	b.n	8006f84 <__sfp+0x18>
 8006f94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f98:	b9d5      	cbnz	r5, 8006fd0 <__sfp+0x64>
 8006f9a:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <__sfp+0x88>)
 8006f9c:	60e3      	str	r3, [r4, #12]
 8006f9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fa2:	6665      	str	r5, [r4, #100]	; 0x64
 8006fa4:	f000 f847 	bl	8007036 <__retarget_lock_init_recursive>
 8006fa8:	f7ff ff96 	bl	8006ed8 <__sfp_lock_release>
 8006fac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fb4:	6025      	str	r5, [r4, #0]
 8006fb6:	61a5      	str	r5, [r4, #24]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	4629      	mov	r1, r5
 8006fbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fc0:	f7fd fafa 	bl	80045b8 <memset>
 8006fc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fcc:	4620      	mov	r0, r4
 8006fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd0:	3468      	adds	r4, #104	; 0x68
 8006fd2:	e7d9      	b.n	8006f88 <__sfp+0x1c>
 8006fd4:	2104      	movs	r1, #4
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	f7ff ff62 	bl	8006ea0 <__sfmoreglue>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	6030      	str	r0, [r6, #0]
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d1d5      	bne.n	8006f90 <__sfp+0x24>
 8006fe4:	f7ff ff78 	bl	8006ed8 <__sfp_lock_release>
 8006fe8:	230c      	movs	r3, #12
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	e7ee      	b.n	8006fcc <__sfp+0x60>
 8006fee:	bf00      	nop
 8006ff0:	080082d0 	.word	0x080082d0
 8006ff4:	ffff0001 	.word	0xffff0001

08006ff8 <_fwalk_reent>:
 8006ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	4688      	mov	r8, r1
 8007000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007004:	2700      	movs	r7, #0
 8007006:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800700a:	f1b9 0901 	subs.w	r9, r9, #1
 800700e:	d505      	bpl.n	800701c <_fwalk_reent+0x24>
 8007010:	6824      	ldr	r4, [r4, #0]
 8007012:	2c00      	cmp	r4, #0
 8007014:	d1f7      	bne.n	8007006 <_fwalk_reent+0xe>
 8007016:	4638      	mov	r0, r7
 8007018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701c:	89ab      	ldrh	r3, [r5, #12]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d907      	bls.n	8007032 <_fwalk_reent+0x3a>
 8007022:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007026:	3301      	adds	r3, #1
 8007028:	d003      	beq.n	8007032 <_fwalk_reent+0x3a>
 800702a:	4629      	mov	r1, r5
 800702c:	4630      	mov	r0, r6
 800702e:	47c0      	blx	r8
 8007030:	4307      	orrs	r7, r0
 8007032:	3568      	adds	r5, #104	; 0x68
 8007034:	e7e9      	b.n	800700a <_fwalk_reent+0x12>

08007036 <__retarget_lock_init_recursive>:
 8007036:	4770      	bx	lr

08007038 <__retarget_lock_acquire_recursive>:
 8007038:	4770      	bx	lr

0800703a <__retarget_lock_release_recursive>:
 800703a:	4770      	bx	lr

0800703c <__swhatbuf_r>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	460e      	mov	r6, r1
 8007040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007044:	2900      	cmp	r1, #0
 8007046:	b096      	sub	sp, #88	; 0x58
 8007048:	4614      	mov	r4, r2
 800704a:	461d      	mov	r5, r3
 800704c:	da07      	bge.n	800705e <__swhatbuf_r+0x22>
 800704e:	2300      	movs	r3, #0
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	89b3      	ldrh	r3, [r6, #12]
 8007054:	061a      	lsls	r2, r3, #24
 8007056:	d410      	bmi.n	800707a <__swhatbuf_r+0x3e>
 8007058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800705c:	e00e      	b.n	800707c <__swhatbuf_r+0x40>
 800705e:	466a      	mov	r2, sp
 8007060:	f000 f902 	bl	8007268 <_fstat_r>
 8007064:	2800      	cmp	r0, #0
 8007066:	dbf2      	blt.n	800704e <__swhatbuf_r+0x12>
 8007068:	9a01      	ldr	r2, [sp, #4]
 800706a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800706e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007072:	425a      	negs	r2, r3
 8007074:	415a      	adcs	r2, r3
 8007076:	602a      	str	r2, [r5, #0]
 8007078:	e7ee      	b.n	8007058 <__swhatbuf_r+0x1c>
 800707a:	2340      	movs	r3, #64	; 0x40
 800707c:	2000      	movs	r0, #0
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	b016      	add	sp, #88	; 0x58
 8007082:	bd70      	pop	{r4, r5, r6, pc}

08007084 <__smakebuf_r>:
 8007084:	898b      	ldrh	r3, [r1, #12]
 8007086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007088:	079d      	lsls	r5, r3, #30
 800708a:	4606      	mov	r6, r0
 800708c:	460c      	mov	r4, r1
 800708e:	d507      	bpl.n	80070a0 <__smakebuf_r+0x1c>
 8007090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	6123      	str	r3, [r4, #16]
 8007098:	2301      	movs	r3, #1
 800709a:	6163      	str	r3, [r4, #20]
 800709c:	b002      	add	sp, #8
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	ab01      	add	r3, sp, #4
 80070a2:	466a      	mov	r2, sp
 80070a4:	f7ff ffca 	bl	800703c <__swhatbuf_r>
 80070a8:	9900      	ldr	r1, [sp, #0]
 80070aa:	4605      	mov	r5, r0
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff f987 	bl	80063c0 <_malloc_r>
 80070b2:	b948      	cbnz	r0, 80070c8 <__smakebuf_r+0x44>
 80070b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b8:	059a      	lsls	r2, r3, #22
 80070ba:	d4ef      	bmi.n	800709c <__smakebuf_r+0x18>
 80070bc:	f023 0303 	bic.w	r3, r3, #3
 80070c0:	f043 0302 	orr.w	r3, r3, #2
 80070c4:	81a3      	strh	r3, [r4, #12]
 80070c6:	e7e3      	b.n	8007090 <__smakebuf_r+0xc>
 80070c8:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <__smakebuf_r+0x7c>)
 80070ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	6020      	str	r0, [r4, #0]
 80070d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d4:	81a3      	strh	r3, [r4, #12]
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	6163      	str	r3, [r4, #20]
 80070da:	9b01      	ldr	r3, [sp, #4]
 80070dc:	6120      	str	r0, [r4, #16]
 80070de:	b15b      	cbz	r3, 80070f8 <__smakebuf_r+0x74>
 80070e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e4:	4630      	mov	r0, r6
 80070e6:	f000 f8d1 	bl	800728c <_isatty_r>
 80070ea:	b128      	cbz	r0, 80070f8 <__smakebuf_r+0x74>
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	f023 0303 	bic.w	r3, r3, #3
 80070f2:	f043 0301 	orr.w	r3, r3, #1
 80070f6:	81a3      	strh	r3, [r4, #12]
 80070f8:	89a0      	ldrh	r0, [r4, #12]
 80070fa:	4305      	orrs	r5, r0
 80070fc:	81a5      	strh	r5, [r4, #12]
 80070fe:	e7cd      	b.n	800709c <__smakebuf_r+0x18>
 8007100:	08006e95 	.word	0x08006e95

08007104 <_malloc_usable_size_r>:
 8007104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007108:	1f18      	subs	r0, r3, #4
 800710a:	2b00      	cmp	r3, #0
 800710c:	bfbc      	itt	lt
 800710e:	580b      	ldrlt	r3, [r1, r0]
 8007110:	18c0      	addlt	r0, r0, r3
 8007112:	4770      	bx	lr

08007114 <_raise_r>:
 8007114:	291f      	cmp	r1, #31
 8007116:	b538      	push	{r3, r4, r5, lr}
 8007118:	4604      	mov	r4, r0
 800711a:	460d      	mov	r5, r1
 800711c:	d904      	bls.n	8007128 <_raise_r+0x14>
 800711e:	2316      	movs	r3, #22
 8007120:	6003      	str	r3, [r0, #0]
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800712a:	b112      	cbz	r2, 8007132 <_raise_r+0x1e>
 800712c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007130:	b94b      	cbnz	r3, 8007146 <_raise_r+0x32>
 8007132:	4620      	mov	r0, r4
 8007134:	f000 f830 	bl	8007198 <_getpid_r>
 8007138:	462a      	mov	r2, r5
 800713a:	4601      	mov	r1, r0
 800713c:	4620      	mov	r0, r4
 800713e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007142:	f000 b817 	b.w	8007174 <_kill_r>
 8007146:	2b01      	cmp	r3, #1
 8007148:	d00a      	beq.n	8007160 <_raise_r+0x4c>
 800714a:	1c59      	adds	r1, r3, #1
 800714c:	d103      	bne.n	8007156 <_raise_r+0x42>
 800714e:	2316      	movs	r3, #22
 8007150:	6003      	str	r3, [r0, #0]
 8007152:	2001      	movs	r0, #1
 8007154:	e7e7      	b.n	8007126 <_raise_r+0x12>
 8007156:	2400      	movs	r4, #0
 8007158:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800715c:	4628      	mov	r0, r5
 800715e:	4798      	blx	r3
 8007160:	2000      	movs	r0, #0
 8007162:	e7e0      	b.n	8007126 <_raise_r+0x12>

08007164 <raise>:
 8007164:	4b02      	ldr	r3, [pc, #8]	; (8007170 <raise+0xc>)
 8007166:	4601      	mov	r1, r0
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f7ff bfd3 	b.w	8007114 <_raise_r>
 800716e:	bf00      	nop
 8007170:	2000000c 	.word	0x2000000c

08007174 <_kill_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4d07      	ldr	r5, [pc, #28]	; (8007194 <_kill_r+0x20>)
 8007178:	2300      	movs	r3, #0
 800717a:	4604      	mov	r4, r0
 800717c:	4608      	mov	r0, r1
 800717e:	4611      	mov	r1, r2
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	f7fa faad 	bl	80016e0 <_kill>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d102      	bne.n	8007190 <_kill_r+0x1c>
 800718a:	682b      	ldr	r3, [r5, #0]
 800718c:	b103      	cbz	r3, 8007190 <_kill_r+0x1c>
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	bf00      	nop
 8007194:	200012e0 	.word	0x200012e0

08007198 <_getpid_r>:
 8007198:	f7fa ba9a 	b.w	80016d0 <_getpid>

0800719c <__sread>:
 800719c:	b510      	push	{r4, lr}
 800719e:	460c      	mov	r4, r1
 80071a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a4:	f000 f894 	bl	80072d0 <_read_r>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	bfab      	itete	ge
 80071ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ae:	89a3      	ldrhlt	r3, [r4, #12]
 80071b0:	181b      	addge	r3, r3, r0
 80071b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071b6:	bfac      	ite	ge
 80071b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ba:	81a3      	strhlt	r3, [r4, #12]
 80071bc:	bd10      	pop	{r4, pc}

080071be <__swrite>:
 80071be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c2:	461f      	mov	r7, r3
 80071c4:	898b      	ldrh	r3, [r1, #12]
 80071c6:	05db      	lsls	r3, r3, #23
 80071c8:	4605      	mov	r5, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	4616      	mov	r6, r2
 80071ce:	d505      	bpl.n	80071dc <__swrite+0x1e>
 80071d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d4:	2302      	movs	r3, #2
 80071d6:	2200      	movs	r2, #0
 80071d8:	f000 f868 	bl	80072ac <_lseek_r>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	4632      	mov	r2, r6
 80071ea:	463b      	mov	r3, r7
 80071ec:	4628      	mov	r0, r5
 80071ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071f2:	f000 b817 	b.w	8007224 <_write_r>

080071f6 <__sseek>:
 80071f6:	b510      	push	{r4, lr}
 80071f8:	460c      	mov	r4, r1
 80071fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fe:	f000 f855 	bl	80072ac <_lseek_r>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	bf15      	itete	ne
 8007208:	6560      	strne	r0, [r4, #84]	; 0x54
 800720a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800720e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007212:	81a3      	strheq	r3, [r4, #12]
 8007214:	bf18      	it	ne
 8007216:	81a3      	strhne	r3, [r4, #12]
 8007218:	bd10      	pop	{r4, pc}

0800721a <__sclose>:
 800721a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721e:	f000 b813 	b.w	8007248 <_close_r>
	...

08007224 <_write_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d07      	ldr	r5, [pc, #28]	; (8007244 <_write_r+0x20>)
 8007228:	4604      	mov	r4, r0
 800722a:	4608      	mov	r0, r1
 800722c:	4611      	mov	r1, r2
 800722e:	2200      	movs	r2, #0
 8007230:	602a      	str	r2, [r5, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f7fa fa8b 	bl	800174e <_write>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_write_r+0x1e>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_write_r+0x1e>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	200012e0 	.word	0x200012e0

08007248 <_close_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d06      	ldr	r5, [pc, #24]	; (8007264 <_close_r+0x1c>)
 800724c:	2300      	movs	r3, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	602b      	str	r3, [r5, #0]
 8007254:	f7fa fa97 	bl	8001786 <_close>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_close_r+0x1a>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_close_r+0x1a>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	200012e0 	.word	0x200012e0

08007268 <_fstat_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d07      	ldr	r5, [pc, #28]	; (8007288 <_fstat_r+0x20>)
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	4611      	mov	r1, r2
 8007274:	602b      	str	r3, [r5, #0]
 8007276:	f7fa fa92 	bl	800179e <_fstat>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	d102      	bne.n	8007284 <_fstat_r+0x1c>
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	b103      	cbz	r3, 8007284 <_fstat_r+0x1c>
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	200012e0 	.word	0x200012e0

0800728c <_isatty_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d06      	ldr	r5, [pc, #24]	; (80072a8 <_isatty_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	f7fa fa91 	bl	80017be <_isatty>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_isatty_r+0x1a>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_isatty_r+0x1a>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	200012e0 	.word	0x200012e0

080072ac <_lseek_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d07      	ldr	r5, [pc, #28]	; (80072cc <_lseek_r+0x20>)
 80072b0:	4604      	mov	r4, r0
 80072b2:	4608      	mov	r0, r1
 80072b4:	4611      	mov	r1, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	602a      	str	r2, [r5, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	f7fa fa8a 	bl	80017d4 <_lseek>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d102      	bne.n	80072ca <_lseek_r+0x1e>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	b103      	cbz	r3, 80072ca <_lseek_r+0x1e>
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	200012e0 	.word	0x200012e0

080072d0 <_read_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4d07      	ldr	r5, [pc, #28]	; (80072f0 <_read_r+0x20>)
 80072d4:	4604      	mov	r4, r0
 80072d6:	4608      	mov	r0, r1
 80072d8:	4611      	mov	r1, r2
 80072da:	2200      	movs	r2, #0
 80072dc:	602a      	str	r2, [r5, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	f7fa fa18 	bl	8001714 <_read>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_read_r+0x1e>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_read_r+0x1e>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	200012e0 	.word	0x200012e0

080072f4 <pow>:
 80072f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f8:	ec59 8b10 	vmov	r8, r9, d0
 80072fc:	ec57 6b11 	vmov	r6, r7, d1
 8007300:	f000 f8a6 	bl	8007450 <__ieee754_pow>
 8007304:	4b4e      	ldr	r3, [pc, #312]	; (8007440 <pow+0x14c>)
 8007306:	f993 3000 	ldrsb.w	r3, [r3]
 800730a:	3301      	adds	r3, #1
 800730c:	ec55 4b10 	vmov	r4, r5, d0
 8007310:	d015      	beq.n	800733e <pow+0x4a>
 8007312:	4632      	mov	r2, r6
 8007314:	463b      	mov	r3, r7
 8007316:	4630      	mov	r0, r6
 8007318:	4639      	mov	r1, r7
 800731a:	f7f9 fc0f 	bl	8000b3c <__aeabi_dcmpun>
 800731e:	b970      	cbnz	r0, 800733e <pow+0x4a>
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	4640      	mov	r0, r8
 8007326:	4649      	mov	r1, r9
 8007328:	f7f9 fc08 	bl	8000b3c <__aeabi_dcmpun>
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	b148      	cbz	r0, 8007346 <pow+0x52>
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f9 fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800733a:	2800      	cmp	r0, #0
 800733c:	d17d      	bne.n	800743a <pow+0x146>
 800733e:	ec45 4b10 	vmov	d0, r4, r5
 8007342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007346:	4640      	mov	r0, r8
 8007348:	4649      	mov	r1, r9
 800734a:	f7f9 fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800734e:	b1e0      	cbz	r0, 800738a <pow+0x96>
 8007350:	2200      	movs	r2, #0
 8007352:	2300      	movs	r3, #0
 8007354:	4630      	mov	r0, r6
 8007356:	4639      	mov	r1, r7
 8007358:	f7f9 fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800735c:	2800      	cmp	r0, #0
 800735e:	d16c      	bne.n	800743a <pow+0x146>
 8007360:	ec47 6b10 	vmov	d0, r6, r7
 8007364:	f000 fe53 	bl	800800e <finite>
 8007368:	2800      	cmp	r0, #0
 800736a:	d0e8      	beq.n	800733e <pow+0x4a>
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	4630      	mov	r0, r6
 8007372:	4639      	mov	r1, r7
 8007374:	f7f9 fbba 	bl	8000aec <__aeabi_dcmplt>
 8007378:	2800      	cmp	r0, #0
 800737a:	d0e0      	beq.n	800733e <pow+0x4a>
 800737c:	f7fd f8f2 	bl	8004564 <__errno>
 8007380:	2321      	movs	r3, #33	; 0x21
 8007382:	6003      	str	r3, [r0, #0]
 8007384:	2400      	movs	r4, #0
 8007386:	4d2f      	ldr	r5, [pc, #188]	; (8007444 <pow+0x150>)
 8007388:	e7d9      	b.n	800733e <pow+0x4a>
 800738a:	ec45 4b10 	vmov	d0, r4, r5
 800738e:	f000 fe3e 	bl	800800e <finite>
 8007392:	bbb8      	cbnz	r0, 8007404 <pow+0x110>
 8007394:	ec49 8b10 	vmov	d0, r8, r9
 8007398:	f000 fe39 	bl	800800e <finite>
 800739c:	b390      	cbz	r0, 8007404 <pow+0x110>
 800739e:	ec47 6b10 	vmov	d0, r6, r7
 80073a2:	f000 fe34 	bl	800800e <finite>
 80073a6:	b368      	cbz	r0, 8007404 <pow+0x110>
 80073a8:	4622      	mov	r2, r4
 80073aa:	462b      	mov	r3, r5
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	f7f9 fbc4 	bl	8000b3c <__aeabi_dcmpun>
 80073b4:	b160      	cbz	r0, 80073d0 <pow+0xdc>
 80073b6:	f7fd f8d5 	bl	8004564 <__errno>
 80073ba:	2321      	movs	r3, #33	; 0x21
 80073bc:	6003      	str	r3, [r0, #0]
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	f7f9 fa49 	bl	800085c <__aeabi_ddiv>
 80073ca:	4604      	mov	r4, r0
 80073cc:	460d      	mov	r5, r1
 80073ce:	e7b6      	b.n	800733e <pow+0x4a>
 80073d0:	f7fd f8c8 	bl	8004564 <__errno>
 80073d4:	2322      	movs	r3, #34	; 0x22
 80073d6:	6003      	str	r3, [r0, #0]
 80073d8:	2200      	movs	r2, #0
 80073da:	2300      	movs	r3, #0
 80073dc:	4640      	mov	r0, r8
 80073de:	4649      	mov	r1, r9
 80073e0:	f7f9 fb84 	bl	8000aec <__aeabi_dcmplt>
 80073e4:	2400      	movs	r4, #0
 80073e6:	b158      	cbz	r0, 8007400 <pow+0x10c>
 80073e8:	ec47 6b10 	vmov	d0, r6, r7
 80073ec:	f000 fe24 	bl	8008038 <rint>
 80073f0:	4632      	mov	r2, r6
 80073f2:	ec51 0b10 	vmov	r0, r1, d0
 80073f6:	463b      	mov	r3, r7
 80073f8:	f7f9 fb6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d0c2      	beq.n	8007386 <pow+0x92>
 8007400:	4d11      	ldr	r5, [pc, #68]	; (8007448 <pow+0x154>)
 8007402:	e79c      	b.n	800733e <pow+0x4a>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	4620      	mov	r0, r4
 800740a:	4629      	mov	r1, r5
 800740c:	f7f9 fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 8007410:	2800      	cmp	r0, #0
 8007412:	d094      	beq.n	800733e <pow+0x4a>
 8007414:	ec49 8b10 	vmov	d0, r8, r9
 8007418:	f000 fdf9 	bl	800800e <finite>
 800741c:	2800      	cmp	r0, #0
 800741e:	d08e      	beq.n	800733e <pow+0x4a>
 8007420:	ec47 6b10 	vmov	d0, r6, r7
 8007424:	f000 fdf3 	bl	800800e <finite>
 8007428:	2800      	cmp	r0, #0
 800742a:	d088      	beq.n	800733e <pow+0x4a>
 800742c:	f7fd f89a 	bl	8004564 <__errno>
 8007430:	2322      	movs	r3, #34	; 0x22
 8007432:	6003      	str	r3, [r0, #0]
 8007434:	2400      	movs	r4, #0
 8007436:	2500      	movs	r5, #0
 8007438:	e781      	b.n	800733e <pow+0x4a>
 800743a:	4d04      	ldr	r5, [pc, #16]	; (800744c <pow+0x158>)
 800743c:	2400      	movs	r4, #0
 800743e:	e77e      	b.n	800733e <pow+0x4a>
 8007440:	200001dc 	.word	0x200001dc
 8007444:	fff00000 	.word	0xfff00000
 8007448:	7ff00000 	.word	0x7ff00000
 800744c:	3ff00000 	.word	0x3ff00000

08007450 <__ieee754_pow>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	ed2d 8b06 	vpush	{d8-d10}
 8007458:	b08d      	sub	sp, #52	; 0x34
 800745a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800745e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8007462:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007466:	ea56 0100 	orrs.w	r1, r6, r0
 800746a:	ec53 2b10 	vmov	r2, r3, d0
 800746e:	f000 84d1 	beq.w	8007e14 <__ieee754_pow+0x9c4>
 8007472:	497f      	ldr	r1, [pc, #508]	; (8007670 <__ieee754_pow+0x220>)
 8007474:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007478:	428c      	cmp	r4, r1
 800747a:	ee10 8a10 	vmov	r8, s0
 800747e:	4699      	mov	r9, r3
 8007480:	dc09      	bgt.n	8007496 <__ieee754_pow+0x46>
 8007482:	d103      	bne.n	800748c <__ieee754_pow+0x3c>
 8007484:	b97a      	cbnz	r2, 80074a6 <__ieee754_pow+0x56>
 8007486:	42a6      	cmp	r6, r4
 8007488:	dd02      	ble.n	8007490 <__ieee754_pow+0x40>
 800748a:	e00c      	b.n	80074a6 <__ieee754_pow+0x56>
 800748c:	428e      	cmp	r6, r1
 800748e:	dc02      	bgt.n	8007496 <__ieee754_pow+0x46>
 8007490:	428e      	cmp	r6, r1
 8007492:	d110      	bne.n	80074b6 <__ieee754_pow+0x66>
 8007494:	b178      	cbz	r0, 80074b6 <__ieee754_pow+0x66>
 8007496:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800749a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800749e:	ea54 0308 	orrs.w	r3, r4, r8
 80074a2:	f000 84b7 	beq.w	8007e14 <__ieee754_pow+0x9c4>
 80074a6:	4873      	ldr	r0, [pc, #460]	; (8007674 <__ieee754_pow+0x224>)
 80074a8:	b00d      	add	sp, #52	; 0x34
 80074aa:	ecbd 8b06 	vpop	{d8-d10}
 80074ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b2:	f000 bdb9 	b.w	8008028 <nan>
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	da36      	bge.n	800752a <__ieee754_pow+0xda>
 80074bc:	496e      	ldr	r1, [pc, #440]	; (8007678 <__ieee754_pow+0x228>)
 80074be:	428e      	cmp	r6, r1
 80074c0:	dc51      	bgt.n	8007566 <__ieee754_pow+0x116>
 80074c2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80074c6:	428e      	cmp	r6, r1
 80074c8:	f340 84af 	ble.w	8007e2a <__ieee754_pow+0x9da>
 80074cc:	1531      	asrs	r1, r6, #20
 80074ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80074d2:	2914      	cmp	r1, #20
 80074d4:	dd0f      	ble.n	80074f6 <__ieee754_pow+0xa6>
 80074d6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80074da:	fa20 fc01 	lsr.w	ip, r0, r1
 80074de:	fa0c f101 	lsl.w	r1, ip, r1
 80074e2:	4281      	cmp	r1, r0
 80074e4:	f040 84a1 	bne.w	8007e2a <__ieee754_pow+0x9da>
 80074e8:	f00c 0c01 	and.w	ip, ip, #1
 80074ec:	f1cc 0102 	rsb	r1, ip, #2
 80074f0:	9100      	str	r1, [sp, #0]
 80074f2:	b180      	cbz	r0, 8007516 <__ieee754_pow+0xc6>
 80074f4:	e059      	b.n	80075aa <__ieee754_pow+0x15a>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d155      	bne.n	80075a6 <__ieee754_pow+0x156>
 80074fa:	f1c1 0114 	rsb	r1, r1, #20
 80074fe:	fa46 fc01 	asr.w	ip, r6, r1
 8007502:	fa0c f101 	lsl.w	r1, ip, r1
 8007506:	42b1      	cmp	r1, r6
 8007508:	f040 848c 	bne.w	8007e24 <__ieee754_pow+0x9d4>
 800750c:	f00c 0c01 	and.w	ip, ip, #1
 8007510:	f1cc 0102 	rsb	r1, ip, #2
 8007514:	9100      	str	r1, [sp, #0]
 8007516:	4959      	ldr	r1, [pc, #356]	; (800767c <__ieee754_pow+0x22c>)
 8007518:	428e      	cmp	r6, r1
 800751a:	d12d      	bne.n	8007578 <__ieee754_pow+0x128>
 800751c:	2f00      	cmp	r7, #0
 800751e:	da79      	bge.n	8007614 <__ieee754_pow+0x1c4>
 8007520:	4956      	ldr	r1, [pc, #344]	; (800767c <__ieee754_pow+0x22c>)
 8007522:	2000      	movs	r0, #0
 8007524:	f7f9 f99a 	bl	800085c <__aeabi_ddiv>
 8007528:	e016      	b.n	8007558 <__ieee754_pow+0x108>
 800752a:	2100      	movs	r1, #0
 800752c:	9100      	str	r1, [sp, #0]
 800752e:	2800      	cmp	r0, #0
 8007530:	d13b      	bne.n	80075aa <__ieee754_pow+0x15a>
 8007532:	494f      	ldr	r1, [pc, #316]	; (8007670 <__ieee754_pow+0x220>)
 8007534:	428e      	cmp	r6, r1
 8007536:	d1ee      	bne.n	8007516 <__ieee754_pow+0xc6>
 8007538:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800753c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007540:	ea53 0308 	orrs.w	r3, r3, r8
 8007544:	f000 8466 	beq.w	8007e14 <__ieee754_pow+0x9c4>
 8007548:	4b4d      	ldr	r3, [pc, #308]	; (8007680 <__ieee754_pow+0x230>)
 800754a:	429c      	cmp	r4, r3
 800754c:	dd0d      	ble.n	800756a <__ieee754_pow+0x11a>
 800754e:	2f00      	cmp	r7, #0
 8007550:	f280 8464 	bge.w	8007e1c <__ieee754_pow+0x9cc>
 8007554:	2000      	movs	r0, #0
 8007556:	2100      	movs	r1, #0
 8007558:	ec41 0b10 	vmov	d0, r0, r1
 800755c:	b00d      	add	sp, #52	; 0x34
 800755e:	ecbd 8b06 	vpop	{d8-d10}
 8007562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007566:	2102      	movs	r1, #2
 8007568:	e7e0      	b.n	800752c <__ieee754_pow+0xdc>
 800756a:	2f00      	cmp	r7, #0
 800756c:	daf2      	bge.n	8007554 <__ieee754_pow+0x104>
 800756e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8007572:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007576:	e7ef      	b.n	8007558 <__ieee754_pow+0x108>
 8007578:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800757c:	d104      	bne.n	8007588 <__ieee754_pow+0x138>
 800757e:	4610      	mov	r0, r2
 8007580:	4619      	mov	r1, r3
 8007582:	f7f9 f841 	bl	8000608 <__aeabi_dmul>
 8007586:	e7e7      	b.n	8007558 <__ieee754_pow+0x108>
 8007588:	493e      	ldr	r1, [pc, #248]	; (8007684 <__ieee754_pow+0x234>)
 800758a:	428f      	cmp	r7, r1
 800758c:	d10d      	bne.n	80075aa <__ieee754_pow+0x15a>
 800758e:	f1b9 0f00 	cmp.w	r9, #0
 8007592:	db0a      	blt.n	80075aa <__ieee754_pow+0x15a>
 8007594:	ec43 2b10 	vmov	d0, r2, r3
 8007598:	b00d      	add	sp, #52	; 0x34
 800759a:	ecbd 8b06 	vpop	{d8-d10}
 800759e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a2:	f000 bc77 	b.w	8007e94 <__ieee754_sqrt>
 80075a6:	2100      	movs	r1, #0
 80075a8:	9100      	str	r1, [sp, #0]
 80075aa:	ec43 2b10 	vmov	d0, r2, r3
 80075ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075b2:	f000 fd23 	bl	8007ffc <fabs>
 80075b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ba:	ec51 0b10 	vmov	r0, r1, d0
 80075be:	f1b8 0f00 	cmp.w	r8, #0
 80075c2:	d12a      	bne.n	800761a <__ieee754_pow+0x1ca>
 80075c4:	b12c      	cbz	r4, 80075d2 <__ieee754_pow+0x182>
 80075c6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800767c <__ieee754_pow+0x22c>
 80075ca:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80075ce:	45e6      	cmp	lr, ip
 80075d0:	d123      	bne.n	800761a <__ieee754_pow+0x1ca>
 80075d2:	2f00      	cmp	r7, #0
 80075d4:	da05      	bge.n	80075e2 <__ieee754_pow+0x192>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	2000      	movs	r0, #0
 80075dc:	4927      	ldr	r1, [pc, #156]	; (800767c <__ieee754_pow+0x22c>)
 80075de:	f7f9 f93d 	bl	800085c <__aeabi_ddiv>
 80075e2:	f1b9 0f00 	cmp.w	r9, #0
 80075e6:	dab7      	bge.n	8007558 <__ieee754_pow+0x108>
 80075e8:	9b00      	ldr	r3, [sp, #0]
 80075ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80075ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075f2:	4323      	orrs	r3, r4
 80075f4:	d108      	bne.n	8007608 <__ieee754_pow+0x1b8>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4610      	mov	r0, r2
 80075fc:	4619      	mov	r1, r3
 80075fe:	f7f8 fe4b 	bl	8000298 <__aeabi_dsub>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	e78d      	b.n	8007524 <__ieee754_pow+0xd4>
 8007608:	9b00      	ldr	r3, [sp, #0]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d1a4      	bne.n	8007558 <__ieee754_pow+0x108>
 800760e:	4602      	mov	r2, r0
 8007610:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007614:	4610      	mov	r0, r2
 8007616:	4619      	mov	r1, r3
 8007618:	e79e      	b.n	8007558 <__ieee754_pow+0x108>
 800761a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800761e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007622:	950a      	str	r5, [sp, #40]	; 0x28
 8007624:	9d00      	ldr	r5, [sp, #0]
 8007626:	46ac      	mov	ip, r5
 8007628:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800762a:	ea5c 0505 	orrs.w	r5, ip, r5
 800762e:	d0e4      	beq.n	80075fa <__ieee754_pow+0x1aa>
 8007630:	4b15      	ldr	r3, [pc, #84]	; (8007688 <__ieee754_pow+0x238>)
 8007632:	429e      	cmp	r6, r3
 8007634:	f340 80fc 	ble.w	8007830 <__ieee754_pow+0x3e0>
 8007638:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800763c:	429e      	cmp	r6, r3
 800763e:	4b10      	ldr	r3, [pc, #64]	; (8007680 <__ieee754_pow+0x230>)
 8007640:	dd07      	ble.n	8007652 <__ieee754_pow+0x202>
 8007642:	429c      	cmp	r4, r3
 8007644:	dc0a      	bgt.n	800765c <__ieee754_pow+0x20c>
 8007646:	2f00      	cmp	r7, #0
 8007648:	da84      	bge.n	8007554 <__ieee754_pow+0x104>
 800764a:	a307      	add	r3, pc, #28	; (adr r3, 8007668 <__ieee754_pow+0x218>)
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	e795      	b.n	800757e <__ieee754_pow+0x12e>
 8007652:	429c      	cmp	r4, r3
 8007654:	dbf7      	blt.n	8007646 <__ieee754_pow+0x1f6>
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <__ieee754_pow+0x22c>)
 8007658:	429c      	cmp	r4, r3
 800765a:	dd17      	ble.n	800768c <__ieee754_pow+0x23c>
 800765c:	2f00      	cmp	r7, #0
 800765e:	dcf4      	bgt.n	800764a <__ieee754_pow+0x1fa>
 8007660:	e778      	b.n	8007554 <__ieee754_pow+0x104>
 8007662:	bf00      	nop
 8007664:	f3af 8000 	nop.w
 8007668:	8800759c 	.word	0x8800759c
 800766c:	7e37e43c 	.word	0x7e37e43c
 8007670:	7ff00000 	.word	0x7ff00000
 8007674:	08008548 	.word	0x08008548
 8007678:	433fffff 	.word	0x433fffff
 800767c:	3ff00000 	.word	0x3ff00000
 8007680:	3fefffff 	.word	0x3fefffff
 8007684:	3fe00000 	.word	0x3fe00000
 8007688:	41e00000 	.word	0x41e00000
 800768c:	4b64      	ldr	r3, [pc, #400]	; (8007820 <__ieee754_pow+0x3d0>)
 800768e:	2200      	movs	r2, #0
 8007690:	f7f8 fe02 	bl	8000298 <__aeabi_dsub>
 8007694:	a356      	add	r3, pc, #344	; (adr r3, 80077f0 <__ieee754_pow+0x3a0>)
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	4604      	mov	r4, r0
 800769c:	460d      	mov	r5, r1
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	a355      	add	r3, pc, #340	; (adr r3, 80077f8 <__ieee754_pow+0x3a8>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	4606      	mov	r6, r0
 80076aa:	460f      	mov	r7, r1
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f8 ffaa 	bl	8000608 <__aeabi_dmul>
 80076b4:	4b5b      	ldr	r3, [pc, #364]	; (8007824 <__ieee754_pow+0x3d4>)
 80076b6:	4682      	mov	sl, r0
 80076b8:	468b      	mov	fp, r1
 80076ba:	2200      	movs	r2, #0
 80076bc:	4620      	mov	r0, r4
 80076be:	4629      	mov	r1, r5
 80076c0:	f7f8 ffa2 	bl	8000608 <__aeabi_dmul>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	a14d      	add	r1, pc, #308	; (adr r1, 8007800 <__ieee754_pow+0x3b0>)
 80076ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ce:	f7f8 fde3 	bl	8000298 <__aeabi_dsub>
 80076d2:	4622      	mov	r2, r4
 80076d4:	462b      	mov	r3, r5
 80076d6:	f7f8 ff97 	bl	8000608 <__aeabi_dmul>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	2000      	movs	r0, #0
 80076e0:	4951      	ldr	r1, [pc, #324]	; (8007828 <__ieee754_pow+0x3d8>)
 80076e2:	f7f8 fdd9 	bl	8000298 <__aeabi_dsub>
 80076e6:	4622      	mov	r2, r4
 80076e8:	4680      	mov	r8, r0
 80076ea:	4689      	mov	r9, r1
 80076ec:	462b      	mov	r3, r5
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	f7f8 ff89 	bl	8000608 <__aeabi_dmul>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	f7f8 ff83 	bl	8000608 <__aeabi_dmul>
 8007702:	a341      	add	r3, pc, #260	; (adr r3, 8007808 <__ieee754_pow+0x3b8>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f7f8 ff7e 	bl	8000608 <__aeabi_dmul>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4650      	mov	r0, sl
 8007712:	4659      	mov	r1, fp
 8007714:	f7f8 fdc0 	bl	8000298 <__aeabi_dsub>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4680      	mov	r8, r0
 800771e:	4689      	mov	r9, r1
 8007720:	4630      	mov	r0, r6
 8007722:	4639      	mov	r1, r7
 8007724:	f7f8 fdba 	bl	800029c <__adddf3>
 8007728:	2400      	movs	r4, #0
 800772a:	4632      	mov	r2, r6
 800772c:	463b      	mov	r3, r7
 800772e:	4620      	mov	r0, r4
 8007730:	460d      	mov	r5, r1
 8007732:	f7f8 fdb1 	bl	8000298 <__aeabi_dsub>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f8 fdab 	bl	8000298 <__aeabi_dsub>
 8007742:	9b00      	ldr	r3, [sp, #0]
 8007744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007746:	3b01      	subs	r3, #1
 8007748:	4313      	orrs	r3, r2
 800774a:	4682      	mov	sl, r0
 800774c:	468b      	mov	fp, r1
 800774e:	f040 81f1 	bne.w	8007b34 <__ieee754_pow+0x6e4>
 8007752:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007810 <__ieee754_pow+0x3c0>
 8007756:	eeb0 8a47 	vmov.f32	s16, s14
 800775a:	eef0 8a67 	vmov.f32	s17, s15
 800775e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007762:	2600      	movs	r6, #0
 8007764:	4632      	mov	r2, r6
 8007766:	463b      	mov	r3, r7
 8007768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800776c:	f7f8 fd94 	bl	8000298 <__aeabi_dsub>
 8007770:	4622      	mov	r2, r4
 8007772:	462b      	mov	r3, r5
 8007774:	f7f8 ff48 	bl	8000608 <__aeabi_dmul>
 8007778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800777c:	4680      	mov	r8, r0
 800777e:	4689      	mov	r9, r1
 8007780:	4650      	mov	r0, sl
 8007782:	4659      	mov	r1, fp
 8007784:	f7f8 ff40 	bl	8000608 <__aeabi_dmul>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f7f8 fd84 	bl	800029c <__adddf3>
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	4680      	mov	r8, r0
 800779a:	4689      	mov	r9, r1
 800779c:	4620      	mov	r0, r4
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f8 ff32 	bl	8000608 <__aeabi_dmul>
 80077a4:	460b      	mov	r3, r1
 80077a6:	4604      	mov	r4, r0
 80077a8:	460d      	mov	r5, r1
 80077aa:	4602      	mov	r2, r0
 80077ac:	4649      	mov	r1, r9
 80077ae:	4640      	mov	r0, r8
 80077b0:	f7f8 fd74 	bl	800029c <__adddf3>
 80077b4:	4b1d      	ldr	r3, [pc, #116]	; (800782c <__ieee754_pow+0x3dc>)
 80077b6:	4299      	cmp	r1, r3
 80077b8:	ec45 4b19 	vmov	d9, r4, r5
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	468b      	mov	fp, r1
 80077c2:	f340 82fe 	ble.w	8007dc2 <__ieee754_pow+0x972>
 80077c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80077ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80077ce:	4303      	orrs	r3, r0
 80077d0:	f000 81f0 	beq.w	8007bb4 <__ieee754_pow+0x764>
 80077d4:	a310      	add	r3, pc, #64	; (adr r3, 8007818 <__ieee754_pow+0x3c8>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	ec51 0b18 	vmov	r0, r1, d8
 80077de:	f7f8 ff13 	bl	8000608 <__aeabi_dmul>
 80077e2:	a30d      	add	r3, pc, #52	; (adr r3, 8007818 <__ieee754_pow+0x3c8>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	e6cb      	b.n	8007582 <__ieee754_pow+0x132>
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w
 80077f0:	60000000 	.word	0x60000000
 80077f4:	3ff71547 	.word	0x3ff71547
 80077f8:	f85ddf44 	.word	0xf85ddf44
 80077fc:	3e54ae0b 	.word	0x3e54ae0b
 8007800:	55555555 	.word	0x55555555
 8007804:	3fd55555 	.word	0x3fd55555
 8007808:	652b82fe 	.word	0x652b82fe
 800780c:	3ff71547 	.word	0x3ff71547
 8007810:	00000000 	.word	0x00000000
 8007814:	bff00000 	.word	0xbff00000
 8007818:	8800759c 	.word	0x8800759c
 800781c:	7e37e43c 	.word	0x7e37e43c
 8007820:	3ff00000 	.word	0x3ff00000
 8007824:	3fd00000 	.word	0x3fd00000
 8007828:	3fe00000 	.word	0x3fe00000
 800782c:	408fffff 	.word	0x408fffff
 8007830:	4bd7      	ldr	r3, [pc, #860]	; (8007b90 <__ieee754_pow+0x740>)
 8007832:	ea03 0309 	and.w	r3, r3, r9
 8007836:	2200      	movs	r2, #0
 8007838:	b92b      	cbnz	r3, 8007846 <__ieee754_pow+0x3f6>
 800783a:	4bd6      	ldr	r3, [pc, #856]	; (8007b94 <__ieee754_pow+0x744>)
 800783c:	f7f8 fee4 	bl	8000608 <__aeabi_dmul>
 8007840:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007844:	460c      	mov	r4, r1
 8007846:	1523      	asrs	r3, r4, #20
 8007848:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800784c:	4413      	add	r3, r2
 800784e:	9309      	str	r3, [sp, #36]	; 0x24
 8007850:	4bd1      	ldr	r3, [pc, #836]	; (8007b98 <__ieee754_pow+0x748>)
 8007852:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007856:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800785a:	429c      	cmp	r4, r3
 800785c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007860:	dd08      	ble.n	8007874 <__ieee754_pow+0x424>
 8007862:	4bce      	ldr	r3, [pc, #824]	; (8007b9c <__ieee754_pow+0x74c>)
 8007864:	429c      	cmp	r4, r3
 8007866:	f340 8163 	ble.w	8007b30 <__ieee754_pow+0x6e0>
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	3301      	adds	r3, #1
 800786e:	9309      	str	r3, [sp, #36]	; 0x24
 8007870:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007874:	2400      	movs	r4, #0
 8007876:	00e3      	lsls	r3, r4, #3
 8007878:	930b      	str	r3, [sp, #44]	; 0x2c
 800787a:	4bc9      	ldr	r3, [pc, #804]	; (8007ba0 <__ieee754_pow+0x750>)
 800787c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007880:	ed93 7b00 	vldr	d7, [r3]
 8007884:	4629      	mov	r1, r5
 8007886:	ec53 2b17 	vmov	r2, r3, d7
 800788a:	eeb0 8a47 	vmov.f32	s16, s14
 800788e:	eef0 8a67 	vmov.f32	s17, s15
 8007892:	4682      	mov	sl, r0
 8007894:	f7f8 fd00 	bl	8000298 <__aeabi_dsub>
 8007898:	4652      	mov	r2, sl
 800789a:	4606      	mov	r6, r0
 800789c:	460f      	mov	r7, r1
 800789e:	462b      	mov	r3, r5
 80078a0:	ec51 0b18 	vmov	r0, r1, d8
 80078a4:	f7f8 fcfa 	bl	800029c <__adddf3>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	2000      	movs	r0, #0
 80078ae:	49bd      	ldr	r1, [pc, #756]	; (8007ba4 <__ieee754_pow+0x754>)
 80078b0:	f7f8 ffd4 	bl	800085c <__aeabi_ddiv>
 80078b4:	ec41 0b19 	vmov	d9, r0, r1
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f7f8 fea2 	bl	8000608 <__aeabi_dmul>
 80078c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80078c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078d0:	2300      	movs	r3, #0
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078d8:	46ab      	mov	fp, r5
 80078da:	106d      	asrs	r5, r5, #1
 80078dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80078e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80078e4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80078e8:	2200      	movs	r2, #0
 80078ea:	4640      	mov	r0, r8
 80078ec:	4649      	mov	r1, r9
 80078ee:	4614      	mov	r4, r2
 80078f0:	461d      	mov	r5, r3
 80078f2:	f7f8 fe89 	bl	8000608 <__aeabi_dmul>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f8 fccb 	bl	8000298 <__aeabi_dsub>
 8007902:	ec53 2b18 	vmov	r2, r3, d8
 8007906:	4606      	mov	r6, r0
 8007908:	460f      	mov	r7, r1
 800790a:	4620      	mov	r0, r4
 800790c:	4629      	mov	r1, r5
 800790e:	f7f8 fcc3 	bl	8000298 <__aeabi_dsub>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4650      	mov	r0, sl
 8007918:	4659      	mov	r1, fp
 800791a:	f7f8 fcbd 	bl	8000298 <__aeabi_dsub>
 800791e:	4642      	mov	r2, r8
 8007920:	464b      	mov	r3, r9
 8007922:	f7f8 fe71 	bl	8000608 <__aeabi_dmul>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4630      	mov	r0, r6
 800792c:	4639      	mov	r1, r7
 800792e:	f7f8 fcb3 	bl	8000298 <__aeabi_dsub>
 8007932:	ec53 2b19 	vmov	r2, r3, d9
 8007936:	f7f8 fe67 	bl	8000608 <__aeabi_dmul>
 800793a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800793e:	ec41 0b18 	vmov	d8, r0, r1
 8007942:	4610      	mov	r0, r2
 8007944:	4619      	mov	r1, r3
 8007946:	f7f8 fe5f 	bl	8000608 <__aeabi_dmul>
 800794a:	a37d      	add	r3, pc, #500	; (adr r3, 8007b40 <__ieee754_pow+0x6f0>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	f7f8 fe58 	bl	8000608 <__aeabi_dmul>
 8007958:	a37b      	add	r3, pc, #492	; (adr r3, 8007b48 <__ieee754_pow+0x6f8>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fc9d 	bl	800029c <__adddf3>
 8007962:	4622      	mov	r2, r4
 8007964:	462b      	mov	r3, r5
 8007966:	f7f8 fe4f 	bl	8000608 <__aeabi_dmul>
 800796a:	a379      	add	r3, pc, #484	; (adr r3, 8007b50 <__ieee754_pow+0x700>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fc94 	bl	800029c <__adddf3>
 8007974:	4622      	mov	r2, r4
 8007976:	462b      	mov	r3, r5
 8007978:	f7f8 fe46 	bl	8000608 <__aeabi_dmul>
 800797c:	a376      	add	r3, pc, #472	; (adr r3, 8007b58 <__ieee754_pow+0x708>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7f8 fc8b 	bl	800029c <__adddf3>
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	f7f8 fe3d 	bl	8000608 <__aeabi_dmul>
 800798e:	a374      	add	r3, pc, #464	; (adr r3, 8007b60 <__ieee754_pow+0x710>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f7f8 fc82 	bl	800029c <__adddf3>
 8007998:	4622      	mov	r2, r4
 800799a:	462b      	mov	r3, r5
 800799c:	f7f8 fe34 	bl	8000608 <__aeabi_dmul>
 80079a0:	a371      	add	r3, pc, #452	; (adr r3, 8007b68 <__ieee754_pow+0x718>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fc79 	bl	800029c <__adddf3>
 80079aa:	4622      	mov	r2, r4
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	462b      	mov	r3, r5
 80079b2:	4620      	mov	r0, r4
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7f8 fe27 	bl	8000608 <__aeabi_dmul>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	4630      	mov	r0, r6
 80079c0:	4639      	mov	r1, r7
 80079c2:	f7f8 fe21 	bl	8000608 <__aeabi_dmul>
 80079c6:	4642      	mov	r2, r8
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	464b      	mov	r3, r9
 80079ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079d2:	f7f8 fc63 	bl	800029c <__adddf3>
 80079d6:	ec53 2b18 	vmov	r2, r3, d8
 80079da:	f7f8 fe15 	bl	8000608 <__aeabi_dmul>
 80079de:	4622      	mov	r2, r4
 80079e0:	462b      	mov	r3, r5
 80079e2:	f7f8 fc5b 	bl	800029c <__adddf3>
 80079e6:	4642      	mov	r2, r8
 80079e8:	4682      	mov	sl, r0
 80079ea:	468b      	mov	fp, r1
 80079ec:	464b      	mov	r3, r9
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f8 fe09 	bl	8000608 <__aeabi_dmul>
 80079f6:	4b6c      	ldr	r3, [pc, #432]	; (8007ba8 <__ieee754_pow+0x758>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	f7f8 fc4d 	bl	800029c <__adddf3>
 8007a02:	4652      	mov	r2, sl
 8007a04:	465b      	mov	r3, fp
 8007a06:	f7f8 fc49 	bl	800029c <__adddf3>
 8007a0a:	9c04      	ldr	r4, [sp, #16]
 8007a0c:	460d      	mov	r5, r1
 8007a0e:	4622      	mov	r2, r4
 8007a10:	460b      	mov	r3, r1
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	f7f8 fdf7 	bl	8000608 <__aeabi_dmul>
 8007a1a:	4b63      	ldr	r3, [pc, #396]	; (8007ba8 <__ieee754_pow+0x758>)
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	4689      	mov	r9, r1
 8007a20:	2200      	movs	r2, #0
 8007a22:	4620      	mov	r0, r4
 8007a24:	4629      	mov	r1, r5
 8007a26:	f7f8 fc37 	bl	8000298 <__aeabi_dsub>
 8007a2a:	4632      	mov	r2, r6
 8007a2c:	463b      	mov	r3, r7
 8007a2e:	f7f8 fc33 	bl	8000298 <__aeabi_dsub>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4650      	mov	r0, sl
 8007a38:	4659      	mov	r1, fp
 8007a3a:	f7f8 fc2d 	bl	8000298 <__aeabi_dsub>
 8007a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a42:	f7f8 fde1 	bl	8000608 <__aeabi_dmul>
 8007a46:	4622      	mov	r2, r4
 8007a48:	4606      	mov	r6, r0
 8007a4a:	460f      	mov	r7, r1
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	ec51 0b18 	vmov	r0, r1, d8
 8007a52:	f7f8 fdd9 	bl	8000608 <__aeabi_dmul>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	f7f8 fc1d 	bl	800029c <__adddf3>
 8007a62:	4606      	mov	r6, r0
 8007a64:	460f      	mov	r7, r1
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	f7f8 fc15 	bl	800029c <__adddf3>
 8007a72:	9c04      	ldr	r4, [sp, #16]
 8007a74:	a33e      	add	r3, pc, #248	; (adr r3, 8007b70 <__ieee754_pow+0x720>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	460d      	mov	r5, r1
 8007a7e:	f7f8 fdc3 	bl	8000608 <__aeabi_dmul>
 8007a82:	4642      	mov	r2, r8
 8007a84:	ec41 0b18 	vmov	d8, r0, r1
 8007a88:	464b      	mov	r3, r9
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f7f8 fc03 	bl	8000298 <__aeabi_dsub>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	f7f8 fbfd 	bl	8000298 <__aeabi_dsub>
 8007a9e:	a336      	add	r3, pc, #216	; (adr r3, 8007b78 <__ieee754_pow+0x728>)
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f7f8 fdb0 	bl	8000608 <__aeabi_dmul>
 8007aa8:	a335      	add	r3, pc, #212	; (adr r3, 8007b80 <__ieee754_pow+0x730>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	f7f8 fda7 	bl	8000608 <__aeabi_dmul>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	4630      	mov	r0, r6
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	f7f8 fbeb 	bl	800029c <__adddf3>
 8007ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ac8:	4b38      	ldr	r3, [pc, #224]	; (8007bac <__ieee754_pow+0x75c>)
 8007aca:	4413      	add	r3, r2
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	f7f8 fbe4 	bl	800029c <__adddf3>
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ad8:	468b      	mov	fp, r1
 8007ada:	f7f8 fd2b 	bl	8000534 <__aeabi_i2d>
 8007ade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ae0:	4b33      	ldr	r3, [pc, #204]	; (8007bb0 <__ieee754_pow+0x760>)
 8007ae2:	4413      	add	r3, r2
 8007ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ae8:	4606      	mov	r6, r0
 8007aea:	460f      	mov	r7, r1
 8007aec:	4652      	mov	r2, sl
 8007aee:	465b      	mov	r3, fp
 8007af0:	ec51 0b18 	vmov	r0, r1, d8
 8007af4:	f7f8 fbd2 	bl	800029c <__adddf3>
 8007af8:	4642      	mov	r2, r8
 8007afa:	464b      	mov	r3, r9
 8007afc:	f7f8 fbce 	bl	800029c <__adddf3>
 8007b00:	4632      	mov	r2, r6
 8007b02:	463b      	mov	r3, r7
 8007b04:	f7f8 fbca 	bl	800029c <__adddf3>
 8007b08:	9c04      	ldr	r4, [sp, #16]
 8007b0a:	4632      	mov	r2, r6
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	4620      	mov	r0, r4
 8007b10:	460d      	mov	r5, r1
 8007b12:	f7f8 fbc1 	bl	8000298 <__aeabi_dsub>
 8007b16:	4642      	mov	r2, r8
 8007b18:	464b      	mov	r3, r9
 8007b1a:	f7f8 fbbd 	bl	8000298 <__aeabi_dsub>
 8007b1e:	ec53 2b18 	vmov	r2, r3, d8
 8007b22:	f7f8 fbb9 	bl	8000298 <__aeabi_dsub>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	e606      	b.n	800773e <__ieee754_pow+0x2ee>
 8007b30:	2401      	movs	r4, #1
 8007b32:	e6a0      	b.n	8007876 <__ieee754_pow+0x426>
 8007b34:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007b88 <__ieee754_pow+0x738>
 8007b38:	e60d      	b.n	8007756 <__ieee754_pow+0x306>
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	4a454eef 	.word	0x4a454eef
 8007b44:	3fca7e28 	.word	0x3fca7e28
 8007b48:	93c9db65 	.word	0x93c9db65
 8007b4c:	3fcd864a 	.word	0x3fcd864a
 8007b50:	a91d4101 	.word	0xa91d4101
 8007b54:	3fd17460 	.word	0x3fd17460
 8007b58:	518f264d 	.word	0x518f264d
 8007b5c:	3fd55555 	.word	0x3fd55555
 8007b60:	db6fabff 	.word	0xdb6fabff
 8007b64:	3fdb6db6 	.word	0x3fdb6db6
 8007b68:	33333303 	.word	0x33333303
 8007b6c:	3fe33333 	.word	0x3fe33333
 8007b70:	e0000000 	.word	0xe0000000
 8007b74:	3feec709 	.word	0x3feec709
 8007b78:	dc3a03fd 	.word	0xdc3a03fd
 8007b7c:	3feec709 	.word	0x3feec709
 8007b80:	145b01f5 	.word	0x145b01f5
 8007b84:	be3e2fe0 	.word	0xbe3e2fe0
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	3ff00000 	.word	0x3ff00000
 8007b90:	7ff00000 	.word	0x7ff00000
 8007b94:	43400000 	.word	0x43400000
 8007b98:	0003988e 	.word	0x0003988e
 8007b9c:	000bb679 	.word	0x000bb679
 8007ba0:	080086b8 	.word	0x080086b8
 8007ba4:	3ff00000 	.word	0x3ff00000
 8007ba8:	40080000 	.word	0x40080000
 8007bac:	080086d8 	.word	0x080086d8
 8007bb0:	080086c8 	.word	0x080086c8
 8007bb4:	a3b5      	add	r3, pc, #724	; (adr r3, 8007e8c <__ieee754_pow+0xa3c>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb6d 	bl	800029c <__adddf3>
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	ec41 0b1a 	vmov	d10, r0, r1
 8007bc8:	462b      	mov	r3, r5
 8007bca:	4630      	mov	r0, r6
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f8 fb63 	bl	8000298 <__aeabi_dsub>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	ec51 0b1a 	vmov	r0, r1, d10
 8007bda:	f7f8 ffa5 	bl	8000b28 <__aeabi_dcmpgt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f47f adf8 	bne.w	80077d4 <__ieee754_pow+0x384>
 8007be4:	4aa4      	ldr	r2, [pc, #656]	; (8007e78 <__ieee754_pow+0xa28>)
 8007be6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bea:	4293      	cmp	r3, r2
 8007bec:	f340 810b 	ble.w	8007e06 <__ieee754_pow+0x9b6>
 8007bf0:	151b      	asrs	r3, r3, #20
 8007bf2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007bf6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007bfa:	fa4a f303 	asr.w	r3, sl, r3
 8007bfe:	445b      	add	r3, fp
 8007c00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007c04:	4e9d      	ldr	r6, [pc, #628]	; (8007e7c <__ieee754_pow+0xa2c>)
 8007c06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007c0a:	4116      	asrs	r6, r2
 8007c0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007c10:	2000      	movs	r0, #0
 8007c12:	ea23 0106 	bic.w	r1, r3, r6
 8007c16:	f1c2 0214 	rsb	r2, r2, #20
 8007c1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007c1e:	fa4a fa02 	asr.w	sl, sl, r2
 8007c22:	f1bb 0f00 	cmp.w	fp, #0
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	bfb8      	it	lt
 8007c30:	f1ca 0a00 	rsblt	sl, sl, #0
 8007c34:	f7f8 fb30 	bl	8000298 <__aeabi_dsub>
 8007c38:	ec41 0b19 	vmov	d9, r0, r1
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	464b      	mov	r3, r9
 8007c40:	ec51 0b19 	vmov	r0, r1, d9
 8007c44:	f7f8 fb2a 	bl	800029c <__adddf3>
 8007c48:	2400      	movs	r4, #0
 8007c4a:	a379      	add	r3, pc, #484	; (adr r3, 8007e30 <__ieee754_pow+0x9e0>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	4620      	mov	r0, r4
 8007c52:	460d      	mov	r5, r1
 8007c54:	f7f8 fcd8 	bl	8000608 <__aeabi_dmul>
 8007c58:	ec53 2b19 	vmov	r2, r3, d9
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	460f      	mov	r7, r1
 8007c60:	4620      	mov	r0, r4
 8007c62:	4629      	mov	r1, r5
 8007c64:	f7f8 fb18 	bl	8000298 <__aeabi_dsub>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	f7f8 fb12 	bl	8000298 <__aeabi_dsub>
 8007c74:	a370      	add	r3, pc, #448	; (adr r3, 8007e38 <__ieee754_pow+0x9e8>)
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f7f8 fcc5 	bl	8000608 <__aeabi_dmul>
 8007c7e:	a370      	add	r3, pc, #448	; (adr r3, 8007e40 <__ieee754_pow+0x9f0>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	4680      	mov	r8, r0
 8007c86:	4689      	mov	r9, r1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f7f8 fcbc 	bl	8000608 <__aeabi_dmul>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4640      	mov	r0, r8
 8007c96:	4649      	mov	r1, r9
 8007c98:	f7f8 fb00 	bl	800029c <__adddf3>
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 faf8 	bl	800029c <__adddf3>
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4689      	mov	r9, r1
 8007cb4:	f7f8 faf0 	bl	8000298 <__aeabi_dsub>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 faea 	bl	8000298 <__aeabi_dsub>
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	460f      	mov	r7, r1
 8007cca:	464b      	mov	r3, r9
 8007ccc:	4640      	mov	r0, r8
 8007cce:	4649      	mov	r1, r9
 8007cd0:	f7f8 fc9a 	bl	8000608 <__aeabi_dmul>
 8007cd4:	a35c      	add	r3, pc, #368	; (adr r3, 8007e48 <__ieee754_pow+0x9f8>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	4604      	mov	r4, r0
 8007cdc:	460d      	mov	r5, r1
 8007cde:	f7f8 fc93 	bl	8000608 <__aeabi_dmul>
 8007ce2:	a35b      	add	r3, pc, #364	; (adr r3, 8007e50 <__ieee754_pow+0xa00>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	f7f8 fad6 	bl	8000298 <__aeabi_dsub>
 8007cec:	4622      	mov	r2, r4
 8007cee:	462b      	mov	r3, r5
 8007cf0:	f7f8 fc8a 	bl	8000608 <__aeabi_dmul>
 8007cf4:	a358      	add	r3, pc, #352	; (adr r3, 8007e58 <__ieee754_pow+0xa08>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f7f8 facf 	bl	800029c <__adddf3>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	462b      	mov	r3, r5
 8007d02:	f7f8 fc81 	bl	8000608 <__aeabi_dmul>
 8007d06:	a356      	add	r3, pc, #344	; (adr r3, 8007e60 <__ieee754_pow+0xa10>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f7f8 fac4 	bl	8000298 <__aeabi_dsub>
 8007d10:	4622      	mov	r2, r4
 8007d12:	462b      	mov	r3, r5
 8007d14:	f7f8 fc78 	bl	8000608 <__aeabi_dmul>
 8007d18:	a353      	add	r3, pc, #332	; (adr r3, 8007e68 <__ieee754_pow+0xa18>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f7f8 fabd 	bl	800029c <__adddf3>
 8007d22:	4622      	mov	r2, r4
 8007d24:	462b      	mov	r3, r5
 8007d26:	f7f8 fc6f 	bl	8000608 <__aeabi_dmul>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	f7f8 fab1 	bl	8000298 <__aeabi_dsub>
 8007d36:	4604      	mov	r4, r0
 8007d38:	460d      	mov	r5, r1
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f7f8 fc61 	bl	8000608 <__aeabi_dmul>
 8007d46:	2200      	movs	r2, #0
 8007d48:	ec41 0b19 	vmov	d9, r0, r1
 8007d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d50:	4620      	mov	r0, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	f7f8 faa0 	bl	8000298 <__aeabi_dsub>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	ec51 0b19 	vmov	r0, r1, d9
 8007d60:	f7f8 fd7c 	bl	800085c <__aeabi_ddiv>
 8007d64:	4632      	mov	r2, r6
 8007d66:	4604      	mov	r4, r0
 8007d68:	460d      	mov	r5, r1
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	4649      	mov	r1, r9
 8007d70:	f7f8 fc4a 	bl	8000608 <__aeabi_dmul>
 8007d74:	4632      	mov	r2, r6
 8007d76:	463b      	mov	r3, r7
 8007d78:	f7f8 fa90 	bl	800029c <__adddf3>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4620      	mov	r0, r4
 8007d82:	4629      	mov	r1, r5
 8007d84:	f7f8 fa88 	bl	8000298 <__aeabi_dsub>
 8007d88:	4642      	mov	r2, r8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	f7f8 fa84 	bl	8000298 <__aeabi_dsub>
 8007d90:	460b      	mov	r3, r1
 8007d92:	4602      	mov	r2, r0
 8007d94:	493a      	ldr	r1, [pc, #232]	; (8007e80 <__ieee754_pow+0xa30>)
 8007d96:	2000      	movs	r0, #0
 8007d98:	f7f8 fa7e 	bl	8000298 <__aeabi_dsub>
 8007d9c:	e9cd 0100 	strd	r0, r1, [sp]
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007daa:	da2f      	bge.n	8007e0c <__ieee754_pow+0x9bc>
 8007dac:	4650      	mov	r0, sl
 8007dae:	ed9d 0b00 	vldr	d0, [sp]
 8007db2:	f000 f9cd 	bl	8008150 <scalbn>
 8007db6:	ec51 0b10 	vmov	r0, r1, d0
 8007dba:	ec53 2b18 	vmov	r2, r3, d8
 8007dbe:	f7ff bbe0 	b.w	8007582 <__ieee754_pow+0x132>
 8007dc2:	4b30      	ldr	r3, [pc, #192]	; (8007e84 <__ieee754_pow+0xa34>)
 8007dc4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007dc8:	429e      	cmp	r6, r3
 8007dca:	f77f af0b 	ble.w	8007be4 <__ieee754_pow+0x794>
 8007dce:	4b2e      	ldr	r3, [pc, #184]	; (8007e88 <__ieee754_pow+0xa38>)
 8007dd0:	440b      	add	r3, r1
 8007dd2:	4303      	orrs	r3, r0
 8007dd4:	d00b      	beq.n	8007dee <__ieee754_pow+0x99e>
 8007dd6:	a326      	add	r3, pc, #152	; (adr r3, 8007e70 <__ieee754_pow+0xa20>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	ec51 0b18 	vmov	r0, r1, d8
 8007de0:	f7f8 fc12 	bl	8000608 <__aeabi_dmul>
 8007de4:	a322      	add	r3, pc, #136	; (adr r3, 8007e70 <__ieee754_pow+0xa20>)
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	f7ff bbca 	b.w	8007582 <__ieee754_pow+0x132>
 8007dee:	4622      	mov	r2, r4
 8007df0:	462b      	mov	r3, r5
 8007df2:	f7f8 fa51 	bl	8000298 <__aeabi_dsub>
 8007df6:	4642      	mov	r2, r8
 8007df8:	464b      	mov	r3, r9
 8007dfa:	f7f8 fe8b 	bl	8000b14 <__aeabi_dcmpge>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f aef0 	beq.w	8007be4 <__ieee754_pow+0x794>
 8007e04:	e7e7      	b.n	8007dd6 <__ieee754_pow+0x986>
 8007e06:	f04f 0a00 	mov.w	sl, #0
 8007e0a:	e717      	b.n	8007c3c <__ieee754_pow+0x7ec>
 8007e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e10:	4619      	mov	r1, r3
 8007e12:	e7d2      	b.n	8007dba <__ieee754_pow+0x96a>
 8007e14:	491a      	ldr	r1, [pc, #104]	; (8007e80 <__ieee754_pow+0xa30>)
 8007e16:	2000      	movs	r0, #0
 8007e18:	f7ff bb9e 	b.w	8007558 <__ieee754_pow+0x108>
 8007e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e20:	f7ff bb9a 	b.w	8007558 <__ieee754_pow+0x108>
 8007e24:	9000      	str	r0, [sp, #0]
 8007e26:	f7ff bb76 	b.w	8007516 <__ieee754_pow+0xc6>
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	f7ff bb60 	b.w	80074f0 <__ieee754_pow+0xa0>
 8007e30:	00000000 	.word	0x00000000
 8007e34:	3fe62e43 	.word	0x3fe62e43
 8007e38:	fefa39ef 	.word	0xfefa39ef
 8007e3c:	3fe62e42 	.word	0x3fe62e42
 8007e40:	0ca86c39 	.word	0x0ca86c39
 8007e44:	be205c61 	.word	0xbe205c61
 8007e48:	72bea4d0 	.word	0x72bea4d0
 8007e4c:	3e663769 	.word	0x3e663769
 8007e50:	c5d26bf1 	.word	0xc5d26bf1
 8007e54:	3ebbbd41 	.word	0x3ebbbd41
 8007e58:	af25de2c 	.word	0xaf25de2c
 8007e5c:	3f11566a 	.word	0x3f11566a
 8007e60:	16bebd93 	.word	0x16bebd93
 8007e64:	3f66c16c 	.word	0x3f66c16c
 8007e68:	5555553e 	.word	0x5555553e
 8007e6c:	3fc55555 	.word	0x3fc55555
 8007e70:	c2f8f359 	.word	0xc2f8f359
 8007e74:	01a56e1f 	.word	0x01a56e1f
 8007e78:	3fe00000 	.word	0x3fe00000
 8007e7c:	000fffff 	.word	0x000fffff
 8007e80:	3ff00000 	.word	0x3ff00000
 8007e84:	4090cbff 	.word	0x4090cbff
 8007e88:	3f6f3400 	.word	0x3f6f3400
 8007e8c:	652b82fe 	.word	0x652b82fe
 8007e90:	3c971547 	.word	0x3c971547

08007e94 <__ieee754_sqrt>:
 8007e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e98:	ec55 4b10 	vmov	r4, r5, d0
 8007e9c:	4e56      	ldr	r6, [pc, #344]	; (8007ff8 <__ieee754_sqrt+0x164>)
 8007e9e:	43ae      	bics	r6, r5
 8007ea0:	ee10 0a10 	vmov	r0, s0
 8007ea4:	ee10 3a10 	vmov	r3, s0
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	462a      	mov	r2, r5
 8007eac:	d110      	bne.n	8007ed0 <__ieee754_sqrt+0x3c>
 8007eae:	ee10 2a10 	vmov	r2, s0
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	f7f8 fba8 	bl	8000608 <__aeabi_dmul>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	f7f8 f9ec 	bl	800029c <__adddf3>
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	ec45 4b10 	vmov	d0, r4, r5
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	dc10      	bgt.n	8007ef6 <__ieee754_sqrt+0x62>
 8007ed4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ed8:	4330      	orrs	r0, r6
 8007eda:	d0f5      	beq.n	8007ec8 <__ieee754_sqrt+0x34>
 8007edc:	b15d      	cbz	r5, 8007ef6 <__ieee754_sqrt+0x62>
 8007ede:	ee10 2a10 	vmov	r2, s0
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	ee10 0a10 	vmov	r0, s0
 8007ee8:	f7f8 f9d6 	bl	8000298 <__aeabi_dsub>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	f7f8 fcb4 	bl	800085c <__aeabi_ddiv>
 8007ef4:	e7e6      	b.n	8007ec4 <__ieee754_sqrt+0x30>
 8007ef6:	1509      	asrs	r1, r1, #20
 8007ef8:	d076      	beq.n	8007fe8 <__ieee754_sqrt+0x154>
 8007efa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007efe:	07ce      	lsls	r6, r1, #31
 8007f00:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007f04:	bf5e      	ittt	pl
 8007f06:	0fda      	lsrpl	r2, r3, #31
 8007f08:	005b      	lslpl	r3, r3, #1
 8007f0a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007f0e:	0fda      	lsrs	r2, r3, #31
 8007f10:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007f14:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007f18:	2000      	movs	r0, #0
 8007f1a:	106d      	asrs	r5, r5, #1
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	f04f 0e16 	mov.w	lr, #22
 8007f22:	4684      	mov	ip, r0
 8007f24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f28:	eb0c 0401 	add.w	r4, ip, r1
 8007f2c:	4294      	cmp	r4, r2
 8007f2e:	bfde      	ittt	le
 8007f30:	1b12      	suble	r2, r2, r4
 8007f32:	eb04 0c01 	addle.w	ip, r4, r1
 8007f36:	1840      	addle	r0, r0, r1
 8007f38:	0052      	lsls	r2, r2, #1
 8007f3a:	f1be 0e01 	subs.w	lr, lr, #1
 8007f3e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007f46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f4a:	d1ed      	bne.n	8007f28 <__ieee754_sqrt+0x94>
 8007f4c:	4671      	mov	r1, lr
 8007f4e:	2720      	movs	r7, #32
 8007f50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f54:	4562      	cmp	r2, ip
 8007f56:	eb04 060e 	add.w	r6, r4, lr
 8007f5a:	dc02      	bgt.n	8007f62 <__ieee754_sqrt+0xce>
 8007f5c:	d113      	bne.n	8007f86 <__ieee754_sqrt+0xf2>
 8007f5e:	429e      	cmp	r6, r3
 8007f60:	d811      	bhi.n	8007f86 <__ieee754_sqrt+0xf2>
 8007f62:	2e00      	cmp	r6, #0
 8007f64:	eb06 0e04 	add.w	lr, r6, r4
 8007f68:	da43      	bge.n	8007ff2 <__ieee754_sqrt+0x15e>
 8007f6a:	f1be 0f00 	cmp.w	lr, #0
 8007f6e:	db40      	blt.n	8007ff2 <__ieee754_sqrt+0x15e>
 8007f70:	f10c 0801 	add.w	r8, ip, #1
 8007f74:	eba2 020c 	sub.w	r2, r2, ip
 8007f78:	429e      	cmp	r6, r3
 8007f7a:	bf88      	it	hi
 8007f7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007f80:	1b9b      	subs	r3, r3, r6
 8007f82:	4421      	add	r1, r4
 8007f84:	46c4      	mov	ip, r8
 8007f86:	0052      	lsls	r2, r2, #1
 8007f88:	3f01      	subs	r7, #1
 8007f8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007f92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f96:	d1dd      	bne.n	8007f54 <__ieee754_sqrt+0xc0>
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	d006      	beq.n	8007faa <__ieee754_sqrt+0x116>
 8007f9c:	1c4c      	adds	r4, r1, #1
 8007f9e:	bf13      	iteet	ne
 8007fa0:	3101      	addne	r1, #1
 8007fa2:	3001      	addeq	r0, #1
 8007fa4:	4639      	moveq	r1, r7
 8007fa6:	f021 0101 	bicne.w	r1, r1, #1
 8007faa:	1043      	asrs	r3, r0, #1
 8007fac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007fb0:	0849      	lsrs	r1, r1, #1
 8007fb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007fb6:	07c2      	lsls	r2, r0, #31
 8007fb8:	bf48      	it	mi
 8007fba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007fbe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	463d      	mov	r5, r7
 8007fc6:	e77f      	b.n	8007ec8 <__ieee754_sqrt+0x34>
 8007fc8:	0ada      	lsrs	r2, r3, #11
 8007fca:	3815      	subs	r0, #21
 8007fcc:	055b      	lsls	r3, r3, #21
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	d0fa      	beq.n	8007fc8 <__ieee754_sqrt+0x134>
 8007fd2:	02d7      	lsls	r7, r2, #11
 8007fd4:	d50a      	bpl.n	8007fec <__ieee754_sqrt+0x158>
 8007fd6:	f1c1 0420 	rsb	r4, r1, #32
 8007fda:	fa23 f404 	lsr.w	r4, r3, r4
 8007fde:	1e4d      	subs	r5, r1, #1
 8007fe0:	408b      	lsls	r3, r1
 8007fe2:	4322      	orrs	r2, r4
 8007fe4:	1b41      	subs	r1, r0, r5
 8007fe6:	e788      	b.n	8007efa <__ieee754_sqrt+0x66>
 8007fe8:	4608      	mov	r0, r1
 8007fea:	e7f0      	b.n	8007fce <__ieee754_sqrt+0x13a>
 8007fec:	0052      	lsls	r2, r2, #1
 8007fee:	3101      	adds	r1, #1
 8007ff0:	e7ef      	b.n	8007fd2 <__ieee754_sqrt+0x13e>
 8007ff2:	46e0      	mov	r8, ip
 8007ff4:	e7be      	b.n	8007f74 <__ieee754_sqrt+0xe0>
 8007ff6:	bf00      	nop
 8007ff8:	7ff00000 	.word	0x7ff00000

08007ffc <fabs>:
 8007ffc:	ec51 0b10 	vmov	r0, r1, d0
 8008000:	ee10 2a10 	vmov	r2, s0
 8008004:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008008:	ec43 2b10 	vmov	d0, r2, r3
 800800c:	4770      	bx	lr

0800800e <finite>:
 800800e:	b082      	sub	sp, #8
 8008010:	ed8d 0b00 	vstr	d0, [sp]
 8008014:	9801      	ldr	r0, [sp, #4]
 8008016:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800801a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800801e:	0fc0      	lsrs	r0, r0, #31
 8008020:	b002      	add	sp, #8
 8008022:	4770      	bx	lr
 8008024:	0000      	movs	r0, r0
	...

08008028 <nan>:
 8008028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008030 <nan+0x8>
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	00000000 	.word	0x00000000
 8008034:	7ff80000 	.word	0x7ff80000

08008038 <rint>:
 8008038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800803a:	ec51 0b10 	vmov	r0, r1, d0
 800803e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008042:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008046:	2e13      	cmp	r6, #19
 8008048:	ee10 4a10 	vmov	r4, s0
 800804c:	460b      	mov	r3, r1
 800804e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008052:	dc58      	bgt.n	8008106 <rint+0xce>
 8008054:	2e00      	cmp	r6, #0
 8008056:	da2b      	bge.n	80080b0 <rint+0x78>
 8008058:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800805c:	4302      	orrs	r2, r0
 800805e:	d023      	beq.n	80080a8 <rint+0x70>
 8008060:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008064:	4302      	orrs	r2, r0
 8008066:	4254      	negs	r4, r2
 8008068:	4314      	orrs	r4, r2
 800806a:	0c4b      	lsrs	r3, r1, #17
 800806c:	0b24      	lsrs	r4, r4, #12
 800806e:	045b      	lsls	r3, r3, #17
 8008070:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008074:	ea44 0103 	orr.w	r1, r4, r3
 8008078:	4b32      	ldr	r3, [pc, #200]	; (8008144 <rint+0x10c>)
 800807a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800807e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7f8 f907 	bl	800029c <__adddf3>
 800808e:	e9cd 0100 	strd	r0, r1, [sp]
 8008092:	463b      	mov	r3, r7
 8008094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008098:	4632      	mov	r2, r6
 800809a:	f7f8 f8fd 	bl	8000298 <__aeabi_dsub>
 800809e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80080a6:	4639      	mov	r1, r7
 80080a8:	ec41 0b10 	vmov	d0, r0, r1
 80080ac:	b003      	add	sp, #12
 80080ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b0:	4a25      	ldr	r2, [pc, #148]	; (8008148 <rint+0x110>)
 80080b2:	4132      	asrs	r2, r6
 80080b4:	ea01 0702 	and.w	r7, r1, r2
 80080b8:	4307      	orrs	r7, r0
 80080ba:	d0f5      	beq.n	80080a8 <rint+0x70>
 80080bc:	0851      	lsrs	r1, r2, #1
 80080be:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80080c2:	4314      	orrs	r4, r2
 80080c4:	d00c      	beq.n	80080e0 <rint+0xa8>
 80080c6:	ea23 0201 	bic.w	r2, r3, r1
 80080ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80080ce:	2e13      	cmp	r6, #19
 80080d0:	fa43 f606 	asr.w	r6, r3, r6
 80080d4:	bf0c      	ite	eq
 80080d6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80080da:	2400      	movne	r4, #0
 80080dc:	ea42 0306 	orr.w	r3, r2, r6
 80080e0:	4918      	ldr	r1, [pc, #96]	; (8008144 <rint+0x10c>)
 80080e2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80080e6:	4622      	mov	r2, r4
 80080e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080ec:	4620      	mov	r0, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7f8 f8d4 	bl	800029c <__adddf3>
 80080f4:	e9cd 0100 	strd	r0, r1, [sp]
 80080f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080fc:	4622      	mov	r2, r4
 80080fe:	462b      	mov	r3, r5
 8008100:	f7f8 f8ca 	bl	8000298 <__aeabi_dsub>
 8008104:	e7d0      	b.n	80080a8 <rint+0x70>
 8008106:	2e33      	cmp	r6, #51	; 0x33
 8008108:	dd07      	ble.n	800811a <rint+0xe2>
 800810a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800810e:	d1cb      	bne.n	80080a8 <rint+0x70>
 8008110:	ee10 2a10 	vmov	r2, s0
 8008114:	f7f8 f8c2 	bl	800029c <__adddf3>
 8008118:	e7c6      	b.n	80080a8 <rint+0x70>
 800811a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800811e:	f04f 36ff 	mov.w	r6, #4294967295
 8008122:	40d6      	lsrs	r6, r2
 8008124:	4230      	tst	r0, r6
 8008126:	d0bf      	beq.n	80080a8 <rint+0x70>
 8008128:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800812c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008130:	bf1f      	itttt	ne
 8008132:	ea24 0101 	bicne.w	r1, r4, r1
 8008136:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800813a:	fa44 f202 	asrne.w	r2, r4, r2
 800813e:	ea41 0402 	orrne.w	r4, r1, r2
 8008142:	e7cd      	b.n	80080e0 <rint+0xa8>
 8008144:	080086e8 	.word	0x080086e8
 8008148:	000fffff 	.word	0x000fffff
 800814c:	00000000 	.word	0x00000000

08008150 <scalbn>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	ec55 4b10 	vmov	r4, r5, d0
 8008156:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800815a:	4606      	mov	r6, r0
 800815c:	462b      	mov	r3, r5
 800815e:	b99a      	cbnz	r2, 8008188 <scalbn+0x38>
 8008160:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008164:	4323      	orrs	r3, r4
 8008166:	d036      	beq.n	80081d6 <scalbn+0x86>
 8008168:	4b39      	ldr	r3, [pc, #228]	; (8008250 <scalbn+0x100>)
 800816a:	4629      	mov	r1, r5
 800816c:	ee10 0a10 	vmov	r0, s0
 8008170:	2200      	movs	r2, #0
 8008172:	f7f8 fa49 	bl	8000608 <__aeabi_dmul>
 8008176:	4b37      	ldr	r3, [pc, #220]	; (8008254 <scalbn+0x104>)
 8008178:	429e      	cmp	r6, r3
 800817a:	4604      	mov	r4, r0
 800817c:	460d      	mov	r5, r1
 800817e:	da10      	bge.n	80081a2 <scalbn+0x52>
 8008180:	a32b      	add	r3, pc, #172	; (adr r3, 8008230 <scalbn+0xe0>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	e03a      	b.n	80081fe <scalbn+0xae>
 8008188:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800818c:	428a      	cmp	r2, r1
 800818e:	d10c      	bne.n	80081aa <scalbn+0x5a>
 8008190:	ee10 2a10 	vmov	r2, s0
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	f7f8 f880 	bl	800029c <__adddf3>
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	e019      	b.n	80081d6 <scalbn+0x86>
 80081a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081a6:	460b      	mov	r3, r1
 80081a8:	3a36      	subs	r2, #54	; 0x36
 80081aa:	4432      	add	r2, r6
 80081ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081b0:	428a      	cmp	r2, r1
 80081b2:	dd08      	ble.n	80081c6 <scalbn+0x76>
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	a120      	add	r1, pc, #128	; (adr r1, 8008238 <scalbn+0xe8>)
 80081b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081bc:	da1c      	bge.n	80081f8 <scalbn+0xa8>
 80081be:	a120      	add	r1, pc, #128	; (adr r1, 8008240 <scalbn+0xf0>)
 80081c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c4:	e018      	b.n	80081f8 <scalbn+0xa8>
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	dd08      	ble.n	80081dc <scalbn+0x8c>
 80081ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081d6:	ec45 4b10 	vmov	d0, r4, r5
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081e0:	da19      	bge.n	8008216 <scalbn+0xc6>
 80081e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081e6:	429e      	cmp	r6, r3
 80081e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80081ec:	dd0a      	ble.n	8008204 <scalbn+0xb4>
 80081ee:	a112      	add	r1, pc, #72	; (adr r1, 8008238 <scalbn+0xe8>)
 80081f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e2      	bne.n	80081be <scalbn+0x6e>
 80081f8:	a30f      	add	r3, pc, #60	; (adr r3, 8008238 <scalbn+0xe8>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f8 fa03 	bl	8000608 <__aeabi_dmul>
 8008202:	e7cb      	b.n	800819c <scalbn+0x4c>
 8008204:	a10a      	add	r1, pc, #40	; (adr r1, 8008230 <scalbn+0xe0>)
 8008206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0b8      	beq.n	8008180 <scalbn+0x30>
 800820e:	a10e      	add	r1, pc, #56	; (adr r1, 8008248 <scalbn+0xf8>)
 8008210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008214:	e7b4      	b.n	8008180 <scalbn+0x30>
 8008216:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800821a:	3236      	adds	r2, #54	; 0x36
 800821c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008220:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008224:	4620      	mov	r0, r4
 8008226:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <scalbn+0x108>)
 8008228:	2200      	movs	r2, #0
 800822a:	e7e8      	b.n	80081fe <scalbn+0xae>
 800822c:	f3af 8000 	nop.w
 8008230:	c2f8f359 	.word	0xc2f8f359
 8008234:	01a56e1f 	.word	0x01a56e1f
 8008238:	8800759c 	.word	0x8800759c
 800823c:	7e37e43c 	.word	0x7e37e43c
 8008240:	8800759c 	.word	0x8800759c
 8008244:	fe37e43c 	.word	0xfe37e43c
 8008248:	c2f8f359 	.word	0xc2f8f359
 800824c:	81a56e1f 	.word	0x81a56e1f
 8008250:	43500000 	.word	0x43500000
 8008254:	ffff3cb0 	.word	0xffff3cb0
 8008258:	3c900000 	.word	0x3c900000

0800825c <_init>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr

08008268 <_fini>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr
